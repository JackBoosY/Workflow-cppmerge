module test;
using system::*;
using test::*;
using CoAsync2_types::*;

var s = "";
var context = new AsyncContext^(null);

namespace CoAsync2_types
{
	$interface IStringAsync : Async<string>;
}

func GetStringAsync(x : int): IStringAsync^
${
	if ($.IsCancelled())
	{
		raise "Cancelled";
	}
	return cast string x;
}

func GetMultipleString() : Async^
${
	for(i in range[1, 10])
	{
		var x = $Await GetStringAsync(i);
		s = $"$(s)[$(x)]";

		if (i == 5)
		{
			context.Cancel();
		}
	}
}

func main():string
{
	SyncScheduler::Run(func():void
	{
		GetMultipleString().Execute(func(result: CoroutineResult^): void
		{
			s = $"$(s)[$(result.Failure.Message)]";
		}, context);
	});
	return s;
}