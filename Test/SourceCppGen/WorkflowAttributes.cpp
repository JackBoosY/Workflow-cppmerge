/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/WorkflowAttributes.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "WorkflowAttributesIncludes.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, WorkflowAttributesReflection.h) */
#include "WorkflowAttributesReflection.h"
#endif
/* CodePack:EndIgnore() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::WorkflowAttributes::
#define GLOBAL_NAME ::vl_workflow_global::WorkflowAttributes::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::WorkflowAttributes::Instance()
#define USERIMPL(...)

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_WorkflowAttributes)
	vl_workflow_global::WorkflowAttributes instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS
	FINALIZE_GLOBAL_STORAGE_CLASS
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_WorkflowAttributes)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	::vl::WString WorkflowAttributes::Print(::vl::Ptr<::calculator::Expression> expr)
	{
		if (auto ne = ::vl::__vwsn::SharedPtrCast<::calculator::NumberExpression>(expr.Obj()))
		{
			return ::vl::__vwsn::ToString(::vl::__vwsn::This(ne.Obj())->GetValue());
		}
		else if (auto be = ::vl::__vwsn::SharedPtrCast<::calculator::BinaryExpression>(expr.Obj()))
		{
			auto op = ::vl::WString(L"", false);
			{
				auto __vwsn_switch_0 = ::vl::__vwsn::This(be.Obj())->GetOperator();
				if ((__vwsn_switch_0 == ::calculator::BinaryExpression::BinaryOperator::Add))
				{
					(op = ::vl::WString(L"+", false));
				}
				else if ((__vwsn_switch_0 == ::calculator::BinaryExpression::BinaryOperator::Sub))
				{
					(op = ::vl::WString(L"-", false));
				}
				else if ((__vwsn_switch_0 == ::calculator::BinaryExpression::BinaryOperator::Mul))
				{
					(op = ::vl::WString(L"*", false));
				}
				else if ((__vwsn_switch_0 == ::calculator::BinaryExpression::BinaryOperator::Div))
				{
					(op = ::vl::WString(L"/", false));
				}
			}
			return ((((((::vl::WString(L"(", false) + GLOBAL_NAME Print(::vl::__vwsn::This(be.Obj())->GetLeft())) + ::vl::WString(L" ", false)) + op) + ::vl::WString(L" ", false)) + GLOBAL_NAME Print(::vl::__vwsn::This(be.Obj())->GetRight())) + ::vl::WString(L")", false));
		}
		else
		{
			throw ::vl::Exception(::vl::WString(L"Unrecognized expression type.", false));
		}
	}

	::vl::vint WorkflowAttributes::Evaluate(::vl::Ptr<::calculator::Expression> expr)
	{
		if (auto ne = ::vl::__vwsn::SharedPtrCast<::calculator::NumberExpression>(expr.Obj()))
		{
			return ::vl::__vwsn::This(ne.Obj())->GetValue();
		}
		else if (auto be = ::vl::__vwsn::SharedPtrCast<::calculator::BinaryExpression>(expr.Obj()))
		{
			auto left = GLOBAL_NAME Evaluate(::vl::__vwsn::This(be.Obj())->GetLeft());
			auto right = GLOBAL_NAME Evaluate(::vl::__vwsn::This(be.Obj())->GetRight());
			{
				auto __vwsn_switch_1 = ::vl::__vwsn::This(be.Obj())->GetOperator();
				if ((__vwsn_switch_1 == ::calculator::BinaryExpression::BinaryOperator::Add))
				{
					return (left + right);
				}
				else if ((__vwsn_switch_1 == ::calculator::BinaryExpression::BinaryOperator::Sub))
				{
					return (left - right);
				}
				else if ((__vwsn_switch_1 == ::calculator::BinaryExpression::BinaryOperator::Mul))
				{
					return (left * right);
				}
				else if ((__vwsn_switch_1 == ::calculator::BinaryExpression::BinaryOperator::Div))
				{
					return (left / right);
				}
			}
			throw ::vl::Exception(::vl::WString(L"Unrecognized binary operator.", false));
		}
		else
		{
			throw ::vl::Exception(::vl::WString(L"Unrecognized expression type.", false));
		}
	}

	::vl::WString WorkflowAttributes::main()
	{
		auto expr = ::vl::Ptr<::calculator::BinaryExpression>(new ::calculator::BinaryExpression(::vl::Ptr<::calculator::Expression>(::vl::Ptr<::calculator::BinaryExpression>(new ::calculator::BinaryExpression(::vl::Ptr<::calculator::Expression>(::vl::Ptr<::calculator::NumberExpression>(new ::calculator::NumberExpression(static_cast<::vl::vint>(1)))), ::calculator::BinaryExpression::BinaryOperator::Add, ::vl::Ptr<::calculator::Expression>(::vl::Ptr<::calculator::NumberExpression>(new ::calculator::NumberExpression(static_cast<::vl::vint>(2))))))), ::calculator::BinaryExpression::BinaryOperator::Mul, ::vl::Ptr<::calculator::Expression>(::vl::Ptr<::calculator::BinaryExpression>(new ::calculator::BinaryExpression(::vl::Ptr<::calculator::Expression>(::vl::Ptr<::calculator::NumberExpression>(new ::calculator::NumberExpression(static_cast<::vl::vint>(3)))), ::calculator::BinaryExpression::BinaryOperator::Add, ::vl::Ptr<::calculator::Expression>(::vl::Ptr<::calculator::NumberExpression>(new ::calculator::NumberExpression(static_cast<::vl::vint>(4)))))))));
		return (((::vl::WString(L"", false) + ::vl::__vwsn::This(expr.Obj())->Print()) + ::vl::WString(L" = ", false)) + ::vl::__vwsn::ToString(::vl::__vwsn::This(expr.Obj())->Evaluate()));
	}

	WorkflowAttributes& WorkflowAttributes::Instance()
	{
		return Getvl_workflow_global_WorkflowAttributes().instance;
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ
#undef USERIMPL

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif
