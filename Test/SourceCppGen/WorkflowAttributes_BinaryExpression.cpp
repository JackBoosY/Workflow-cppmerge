/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/WorkflowAttributes.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "WorkflowAttributesIncludes.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, WorkflowAttributesReflection.h) */
#include "WorkflowAttributesReflection.h"
#endif
/* CodePack:EndIgnore() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::WorkflowAttributes::
#define GLOBAL_NAME ::vl_workflow_global::WorkflowAttributes::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::WorkflowAttributes::Instance()
#define USERIMPL(...)

/***********************************************************************
Class (::calculator::BinaryExpression)
***********************************************************************/

namespace calculator
{
	::calculator::BinaryExpression::BinaryOperator BinaryExpression::GetOperator()
	{
		return this->__vwsn_prop_Operator;
	}
	void BinaryExpression::SetOperator(::calculator::BinaryExpression::BinaryOperator __vwsn_value_)
	{
		(this->__vwsn_prop_Operator = __vwsn_value_);
	}

	::vl::Ptr<::calculator::Expression> BinaryExpression::GetLeft()
	{
		return this->__vwsn_prop_Left;
	}
	void BinaryExpression::SetLeft(::vl::Ptr<::calculator::Expression> __vwsn_value_)
	{
		(this->__vwsn_prop_Left = __vwsn_value_);
	}

	::vl::Ptr<::calculator::Expression> BinaryExpression::GetRight()
	{
		return this->__vwsn_prop_Right;
	}
	void BinaryExpression::SetRight(::vl::Ptr<::calculator::Expression> __vwsn_value_)
	{
		(this->__vwsn_prop_Right = __vwsn_value_);
	}

	BinaryExpression::BinaryExpression(::vl::Ptr<::calculator::Expression> _left, ::calculator::BinaryExpression::BinaryOperator _op, ::vl::Ptr<::calculator::Expression> _right)
	{
		this->SetLeft(_left);
		this->SetOperator(_op);
		this->SetRight(_right);
	}

}
#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ
#undef USERIMPL

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif
