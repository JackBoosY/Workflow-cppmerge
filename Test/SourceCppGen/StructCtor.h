/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/StructCtor.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#ifndef VCZH_WORKFLOW_COMPILER_GENERATED_STRUCTCTOR
#define VCZH_WORKFLOW_COMPILER_GENERATED_STRUCTCTOR

#include "../Source/CppTypes.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

namespace __vwsn_structs
{
	struct _A
	{
		::__vwsn_structs::_B data;
	};
	inline bool operator== (const _A& a, const _A& b)
	{
		if (a.data != b.data) return false;
		return true;
	}
	inline bool operator!= (const _A& a, const _A& b)
	{
		if (a.data != b.data) return true;
		return false;
	}

	struct _B
	{
		::test::Point data;
	};
	inline bool operator== (const _B& a, const _B& b)
	{
		if (a.data != b.data) return false;
		return true;
	}
	inline bool operator!= (const _B& a, const _B& b)
	{
		if (a.data != b.data) return true;
		return false;
	}

	struct _C
	{
		::__vwsn_structs::_A data;
	};
	inline bool operator== (const _C& a, const _C& b)
	{
		if (a.data != b.data) return false;
		return true;
	}
	inline bool operator!= (const _C& a, const _C& b)
	{
		if (a.data != b.data) return true;
		return false;
	}

}
using A = ::__vwsn_structs::_A;
using B = ::__vwsn_structs::_B;
using C = ::__vwsn_structs::_C;

/***********************************************************************
Global Variables and Functions
***********************************************************************/

namespace vl_workflow_global
{
	class StructCtor
	{
	public:

		::vl::vint Do(::test::Point p);
		::vl::WString main();

		static StructCtor& Instance();
	};
}

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif
