/***********************************************************************
THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY
DEVELOPER: Zihan Chen(vczh)
***********************************************************************/
#include "VlppWorkflowCompiler.h"

/***********************************************************************
ANALYZER\WFANALYZER.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection::description;

/***********************************************************************
WfLexicalSymbol
***********************************************************************/

			WfLexicalSymbol::WfLexicalSymbol(WfLexicalScope* _ownerScope)
				:ownerScope(_ownerScope)
			{
			}

			WfLexicalSymbol::~WfLexicalSymbol()
			{
			}

			WString WfLexicalSymbol::GetFriendlyName()
			{
				return ownerScope->GetFriendlyName() + L"::" + name;
			}

/***********************************************************************
WfLexicalScope
***********************************************************************/

			WfLexicalScope::WfLexicalScope(WfLexicalScopeManager* _ownerManager)
				:ownerManager(_ownerManager)
			{
			}

			WfLexicalScope::WfLexicalScope(Ptr<WfLexicalScope> _parentScope)
				:ownerManager(0)
				, parentScope(_parentScope)
			{
			}

			WfLexicalScope::~WfLexicalScope()
			{
			}

			WfLexicalScopeManager* WfLexicalScope::FindManager()
			{
				WfLexicalScope* scope = this;
				while (scope)
				{
					if (scope->ownerManager)
					{
						return scope->ownerManager;
					}
					scope = scope->parentScope.Obj();
				}
				return 0;
			}

			Ptr<WfModule> WfLexicalScope::FindModule()
			{
				WfLexicalScope* scope = this;
				while (scope)
				{
					if (auto module = scope->ownerNode.Cast<WfModule>())
					{
						return module;
					}
					scope = scope->parentScope.Obj();
				}
				return 0;
			}

			WfLexicalScope* WfLexicalScope::FindFunctionScope()
			{
				auto scope = this;
				while (scope)
				{
					if (scope->functionConfig)
					{
						return scope;
					}
					scope = scope->parentScope.Obj();
				}
				return nullptr;
			}

			WString WfLexicalScope::GetFriendlyName()
			{
				if (auto module = ownerNode.Cast<WfModule>())
				{
					return L"<" + module->name.value + L">";
				}
				else if (auto decl = ownerNode.Cast<WfDeclaration>())
				{
					auto name = decl->name.value;
					if (name == L"")
					{
						name = L"<anonymous>";
					}
					return parentScope->GetFriendlyName() + L"::" + name;
				}
				else if (!parentScope)
				{
					return L"";
				}
				else
				{
					return parentScope->GetFriendlyName() + L"::<>";
				}
			}

			Ptr<WfClassMember> WfLexicalScope::GetOwnerClassMember()
			{
				if (auto decl = ownerNode.Cast<WfDeclaration>())
				{
					return decl->classMember;
				}
				return nullptr;
			}

/***********************************************************************
WfLexicalScopeName
***********************************************************************/

			WfLexicalScopeName::WfLexicalScopeName(bool _imported)
				:imported(_imported)
			{
			}

			WfLexicalScopeName::~WfLexicalScopeName()
			{
			}

			Ptr<WfLexicalScopeName> WfLexicalScopeName::AccessChild(const WString& name, bool imported)
			{
				vint index = children.Keys().IndexOf(name);
				if (index == -1)
				{
					Ptr<WfLexicalScopeName> newName = new WfLexicalScopeName(imported);
					newName->name = name;
					newName->parent = this;
					children.Add(name, newName);
					return newName;
				}
				else
				{
					return children.Values()[index];
				}
			}

			void WfLexicalScopeName::RemoveNonTypeDescriptorNames(WfLexicalScopeManager* manager)
			{
				FOREACH(Ptr<WfLexicalScopeName>, name, children.Values())
				{
					name->RemoveNonTypeDescriptorNames(manager);
				}

				for (vint i = children.Count() - 1; i >= 0; i--)
				{
					auto subScopeName = children.Values()[i];
					if (!subScopeName->imported)
					{
						children.Remove(children.Keys()[i]);
						if (subScopeName->typeDescriptor)
						{
							manager->typeNames.Remove(subScopeName->typeDescriptor);
						}
					}
				}
				
				declarations.Clear();
			}

			WString WfLexicalScopeName::GetFriendlyName()
			{
				if (parent)
				{
					WString parentName = parent->GetFriendlyName();
					if (parentName == L"")
					{
						return name;
					}
					else
					{
						return parentName + L"::" + name;
					}
				}
				else
				{
					return L"";
				}
			}

/***********************************************************************
ResolveExpressionResult
***********************************************************************/

			WString ResolveExpressionResult::GetFriendlyName(bool upperCase)const
			{
				WString typeName, result;
				if (type)
				{
					typeName= + L" of type \"" + type->GetTypeFriendlyName() + L"\"";
				}

				if (scopeName)
				{
					result = scopeName->GetFriendlyName();
				}
				else if (symbol)
				{
					result = symbol->GetFriendlyName() + typeName;
				}
				else if (propertyInfo)
				{
					result = L"property \"" + propertyInfo->GetName() + L"\" in \"" + propertyInfo->GetOwnerTypeDescriptor()->GetTypeName() + L"\"" + typeName;
				}
				else if (methodInfo)
				{
					if (methodInfo->GetName() == L"")
					{
						result = L"constructor in \"" + methodInfo->GetOwnerTypeDescriptor()->GetTypeName() + L"\"" + typeName;
					}
					else
					{
						result = L"method \"" + methodInfo->GetName() + L"\" in \"" + methodInfo->GetOwnerTypeDescriptor()->GetTypeName() + L"\"" + typeName;
					}
				}
				else if (eventInfo)
				{
					result = L"event \"" + eventInfo->GetName() + L"\" in \"" + eventInfo->GetOwnerTypeDescriptor()->GetTypeName() + L"\"";
				}
				else if (type)
				{
					result = L"expression" + typeName;
				}
				else
				{
					result = L"<unknown>";
				}

				if (result.Length() > 0 && upperCase)
				{
					result = INVLOC.ToUpper(result.Left(1)) + result.Right(result.Length() - 1);
				}
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::ScopeName(Ptr<WfLexicalScopeName> _scopeName)
			{
				ResolveExpressionResult result;
				result.scopeName = _scopeName;
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::ReadonlySymbol(Ptr<WfLexicalSymbol> _symbol)
			{
				ResolveExpressionResult result;
				result.symbol = _symbol;
				result.type = _symbol->typeInfo;
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::Symbol(Ptr<WfLexicalSymbol> _symbol)
			{
				ResolveExpressionResult result;
				result.symbol = _symbol;
				result.type = _symbol->typeInfo;
				if (_symbol->creatorNode.Cast<WfVariableDeclaration>())
				{
					result.writableType = _symbol->typeInfo;
				}
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::ReadonlyType(Ptr<reflection::description::ITypeInfo> _type)
			{
				ResolveExpressionResult result;
				result.type = _type;
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::WritableType(Ptr<reflection::description::ITypeInfo> _type)
			{
				ResolveExpressionResult result;
				result.type = _type;
				result.writableType = _type;
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::Property(reflection::description::IPropertyInfo* _propertyInfo)
			{
				Ptr<ITypeInfo> getterType = CopyTypeInfo(_propertyInfo->GetReturn());
				Ptr<ITypeInfo> setterType;
				if (IMethodInfo* setter = _propertyInfo->GetSetter())
				{
					setterType = getterType;
					if (setter->GetParameterCount() == 1 && !IsSameType(getterType.Obj(), setter->GetParameter(0)->GetType()))
					{
						setterType = CopyTypeInfo(setter->GetParameter(0)->GetType());
					}
				}
				else if (_propertyInfo->IsWritable())
				{
					auto td = _propertyInfo->GetOwnerTypeDescriptor();
					if ((td->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) != TypeDescriptorFlags::Undefined)
					{
						setterType = CopyTypeInfo(_propertyInfo->GetReturn());
					}
				}

				ResolveExpressionResult result;
				result.propertyInfo = _propertyInfo;
				result.type = getterType;
				result.writableType = setterType;
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::Method(reflection::description::IMethodInfo* _methodInfo)
			{
				ResolveExpressionResult result;
				result.methodInfo = _methodInfo;
				result.type = CreateTypeInfoFromMethodInfo(_methodInfo);
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::Constructor(reflection::description::IMethodInfo* _constructorInfo)
			{
				ResolveExpressionResult result;
				result.constructorInfo = _constructorInfo;
				result.type = CopyTypeInfo(_constructorInfo->GetReturn());
				return result;
			}

			ResolveExpressionResult ResolveExpressionResult::Event(reflection::description::IEventInfo* _eventInfo)
			{
				ResolveExpressionResult result;
				result.eventInfo = _eventInfo;
				return result;
			}

			bool IsSameTypeOrNull(ITypeInfo* fromType, ITypeInfo* toType)
			{
				if (fromType == toType) return true;
				if ((fromType == nullptr) ^ (toType == nullptr)) return false;
				return IsSameType(fromType, toType);
			}

			bool ResolveExpressionResult::operator==(const ResolveExpressionResult& result) const
			{
				if (scopeName != result.scopeName) return false;
				if (symbol != result.symbol) return false;
				if (propertyInfo != result.propertyInfo) return false;
				if (methodInfo != result.methodInfo) return false;
				if (constructorInfo != result.constructorInfo) return false;
				if (eventInfo != result.eventInfo) return false;

				if (!IsSameTypeOrNull(type.Obj(), result.type.Obj())) return false;
				if (!IsSameTypeOrNull(writableType.Obj(), result.writableType.Obj())) return false;
				if (!IsSameTypeOrNull(expectedType.Obj(), result.expectedType.Obj())) return false;
				return true;
			}

			bool ResolveExpressionResult::operator!=(const ResolveExpressionResult& result) const
			{
				return !(*this == result);
			}

/***********************************************************************
WfLexicalScopeManager
***********************************************************************/

			WfLexicalScopeManager::WfLexicalScopeManager(Ptr<parsing::tabling::ParsingTable> _parsingTable)
				:parsingTable(_parsingTable)
			{
				attributes.Add({ L"cpp", L"File" }, TypeInfoRetriver<WString>::CreateTypeInfo());
				attributes.Add({ L"cpp", L"UserImpl" }, TypeInfoRetriver<void>::CreateTypeInfo());
				attributes.Add({ L"cpp", L"Private" }, TypeInfoRetriver<void>::CreateTypeInfo());
				attributes.Add({ L"cpp", L"Protected" }, TypeInfoRetriver<void>::CreateTypeInfo());
				attributes.Add({ L"cpp", L"Friend" }, TypeInfoRetriver<ITypeDescriptor*>::CreateTypeInfo());
			}

			WfLexicalScopeManager::~WfLexicalScopeManager()
			{
			}

			vint WfLexicalScopeManager::AddModule(const WString& moduleCode)
			{
				if (auto module = WfParseModule(moduleCode, parsingTable, errors, usedCodeIndex))
				{
					modules.Add(module);
					moduleCodes.Add(moduleCode);
				}
				return usedCodeIndex++;
			}

			vint WfLexicalScopeManager::AddModule(Ptr<WfModule> module)
			{
				module->codeRange.codeIndex = usedCodeIndex;
				modules.Add(module);
				moduleCodes.Add(L"");
				return usedCodeIndex++;
			}

			WfLexicalScopeManager::ModuleList& WfLexicalScopeManager::GetModules()
			{
				return modules;
			}

			WfLexicalScopeManager::ModuleCodeList& WfLexicalScopeManager::GetModuleCodes()
			{
				return moduleCodes;
			}

			void WfLexicalScopeManager::Clear(bool keepTypeDescriptorNames, bool deleteModules)
			{
				if (globalName)
				{
					if (keepTypeDescriptorNames)
					{
						globalName->RemoveNonTypeDescriptorNames(this);
					}
					else
					{
						globalName = 0;
						typeNames.Clear();
					}
				}
				
				if (deleteModules)
				{
					modules.Clear();
					moduleCodes.Clear();
					usedCodeIndex = 0;
					usedTempVars = 0;
				}

				errors.Clear();
				namespaceNames.Clear();

				nodeScopes.Clear();
				expressionResolvings.Clear();
				lambdaCaptures.Clear();
				interfaceMethodImpls.Clear();
				declarationTypes.Clear();
				declarationMemberInfos.Clear();
				baseConstructorCallResolvings.Clear();
			}

			void WfLexicalScopeManager::Rebuild(bool keepTypeDescriptorNames)
			{
				Clear(keepTypeDescriptorNames, false);
				if (!globalName)
				{
					globalName = new WfLexicalScopeName(true);
					BuildGlobalNameFromTypeDescriptors(this);
				}

				vint errorCount = errors.Count();

#define EXIT_IF_ERRORS_EXIST\
				do\
				{\
					if (errors.Count() != errorCount) return;\
				}while (0)
				
				EXIT_IF_ERRORS_EXIST;
				FOREACH(Ptr<WfModule>, module, modules)
				{
					ContextFreeModuleDesugar(this, module);
					ValidateModuleStructure(this, module);
				}
				
				EXIT_IF_ERRORS_EXIST;
				BuildGlobalNameFromModules(this);
				FOREACH(Ptr<WfModule>, module, modules)
				{
					BuildScopeForModule(this, module);
				}
				ValidateScopeName(this, globalName);
				CheckScopes_DuplicatedSymbol(this);
				
				EXIT_IF_ERRORS_EXIST;
				FOREACH(Ptr<WfModule>, module, modules)
				{
					CompleteScopeForModule(this, module);
				}
				CheckScopes_BaseType(this);
				CheckScopes_SymbolType(this);
				
				EXIT_IF_ERRORS_EXIST;
				FOREACH(Ptr<WfModule>, module, modules)
				{
					ValidateModuleSemantic(this, module);
				}

#undef EXIT_IF_ERRORS_EXIST
			}

			bool WfLexicalScopeManager::ResolveMember(ITypeDescriptor* typeDescriptor, const WString& name, bool preferStatic, collections::SortedList<ITypeDescriptor*>& searchedTypes, collections::List<ResolveExpressionResult>& results)
			{
				if (searchedTypes.Contains(typeDescriptor))
				{
					return true;
				}
				searchedTypes.Add(typeDescriptor);

				bool found = false;
				bool foundStaticMember = false;


				if ((typeDescriptor->GetTypeDescriptorFlags() & TypeDescriptorFlags::EnumType) != TypeDescriptorFlags::Undefined)
				{
					if (preferStatic)
					{
						auto enumType = typeDescriptor->GetEnumType();
						vint index = enumType->IndexOfItem(name);
						if (index != -1)
						{
							results.Add(ResolveExpressionResult::ReadonlyType(MakePtr<TypeDescriptorTypeInfo>(typeDescriptor, TypeInfoHint::Normal)));
							return true;
						}
					}
					return false;
				}

				{
					auto scopeName = typeNames[typeDescriptor];
					vint index = scopeName->children.Keys().IndexOf(name);
					if (index != -1)
					{
						auto subScopeName = scopeName->children.Values()[index];
						found = true;
						foundStaticMember = true;
						results.Add(ResolveExpressionResult::ScopeName(subScopeName));
					}
				}

				if (auto group = typeDescriptor->GetMethodGroupByName(name, false))
				{
					for (vint i = 0; i < group->GetMethodCount(); i++)
					{
						auto info = group->GetMethod(i);
						if (info->IsStatic())
						{
							found = true;
							foundStaticMember = true;
							results.Add(ResolveExpressionResult::Method(info));
						}
					}
				}

				if (foundStaticMember && preferStatic)
				{
					return true;
				}

				if (auto group = typeDescriptor->GetMethodGroupByName(name, false))
				{
					for (vint i = 0; i < group->GetMethodCount(); i++)
					{
						auto info = group->GetMethod(i);
						if (!info->IsStatic())
						{
							found = true;
							results.Add(ResolveExpressionResult::Method(info));
						}
					}
				}
				if (auto info = typeDescriptor->GetPropertyByName(name, false))
				{
					found = true;
					results.Add(ResolveExpressionResult::Property(info));
				}
				if (auto info = typeDescriptor->GetEventByName(name, false))
				{
					found = true;
					results.Add(ResolveExpressionResult::Event(info));
				}

				if (!found)
				{
					vint count = typeDescriptor->GetBaseTypeDescriptorCount();
					for (vint i = 0; i < count; i++)
					{
						if (ResolveMember(typeDescriptor->GetBaseTypeDescriptor(i), name, preferStatic, searchedTypes, results))
						{
							found = true;
						}
					}
				}
				return found;
			}

			class UsingPathToNameVisitor :public Object, public WfModuleUsingFragment::IVisitor
			{
			public:
				WString					name;
				WString					result;

				UsingPathToNameVisitor(const WString& _name)
					:name(_name)
				{
				}

				void Visit(WfModuleUsingNameFragment* node)
				{
					result = node->name.value;
				}

				void Visit(WfModuleUsingWildCardFragment* node)
				{
					result = name;
				}

				static WString Execute(Ptr<WfModuleUsingFragment> fragment, const WString& name)
				{
					UsingPathToNameVisitor visitor(name);
					fragment->Accept(&visitor);
					return visitor.result;
				}
			};

			bool WfLexicalScopeManager::ResolveName(WfLexicalScope* scope, const WString& name, collections::List<ResolveExpressionResult>& results)
			{
				vint oldResultCount = results.Count();
				bool visibleToNonStatic = false;
				WfLexicalScope* firstConfigScope = nullptr;
				while (scope)
				{
					if (scope->ownerNode.Cast<WfModule>() || scope->ownerNode.Cast<WfNamespaceDeclaration>())
					{
						break;
					}

					if (scope->functionConfig)
					{
						visibleToNonStatic = scope->functionConfig->thisAccessable || scope->functionConfig->parentThisAccessable;
						if (!firstConfigScope)
						{
							firstConfigScope = scope;
						}
					}
					
					vint index = scope->symbols.Keys().IndexOf(name);
					if (index != -1)
					{
						if (scope->typeOfThisExpr)
						{
							if (scope->ownerNode.Cast<WfNewInterfaceExpression>())
							{
								FOREACH(Ptr<WfLexicalSymbol>, symbol, scope->symbols.GetByIndex(index))
								{
									if (symbol->creatorNode.Cast<WfVariableDeclaration>())
									{
										auto result = ResolveExpressionResult::Symbol(symbol);
										if (!results.Contains(result))
										{
											results.Add(result);
										}
									}
									else if (symbol->creatorNode.Cast<WfDeclaration>()->classMember->kind == WfClassMemberKind::Normal)
									{
										if (firstConfigScope->parentScope == scope)
										{
											auto result = ResolveExpressionResult::Symbol(symbol);
											if (!results.Contains(result))
											{
												results.Add(result);
											}
										}
									}
								}
							}
						}
						else
						{
							FOREACH(Ptr<WfLexicalSymbol>, symbol, scope->symbols.GetByIndex(index))
							{
								auto result = ResolveExpressionResult::Symbol(symbol);
								if (!results.Contains(result))
								{
									results.Add(result);
								}
							}
						}
					}

					if (scope->typeOfThisExpr)
					{
						SortedList<ITypeDescriptor*> searchedTypes;
						ResolveMember(scope->typeOfThisExpr, name, !visibleToNonStatic, searchedTypes, results);
					}

					scope = scope->parentScope.Obj();
				}
				
				while (scope)
				{
					if (auto nsDecl = scope->ownerNode.Cast<WfNamespaceDeclaration>())
					{
						auto scopeName = namespaceNames[nsDecl.Obj()];
						vint index = scopeName->children.Keys().IndexOf(name);
						if (index != -1)
						{
							auto subScopeName = scopeName->children.Values()[index];
							auto result = ResolveExpressionResult::ScopeName(subScopeName);
							if (!results.Contains(result))
							{
								results.Add(result);
							}
						}
						scope = scope->parentScope.Obj();
					}
					else
					{
						break;
					}
				}
				
				vint index = globalName->children.Keys().IndexOf(name);
				if (index != -1)
				{
					auto subScopeName = globalName->children.Values()[index];
					auto result = ResolveExpressionResult::ScopeName(subScopeName);
					if (!results.Contains(result))
					{
						results.Add(result);
					}
				}

				if (auto module = scope->ownerNode.Cast<WfModule>())
				{
					FOREACH(Ptr<WfModuleUsingPath>, path, module->paths)
					{
						auto scopeName = globalName;
						FOREACH(Ptr<WfModuleUsingItem>, item, path->items)
						{
							WString fragmentName;
							FOREACH(Ptr<WfModuleUsingFragment>, fragment, item->fragments)
							{
								fragmentName += UsingPathToNameVisitor::Execute(fragment, name);
							}
							vint index = scopeName->children.Keys().IndexOf(fragmentName);
							if (index == -1) goto USING_PATH_MATCHING_FAILED;
							scopeName = scopeName->children.Values()[index];
						}

						{
							auto result = ResolveExpressionResult::ScopeName(scopeName);
							if (!results.Contains(result))
							{
								results.Add(result);
							}
						}
					USING_PATH_MATCHING_FAILED:;
					}
				}

				return results.Count() > oldResultCount;
			}

			Ptr<WfLexicalSymbol> WfLexicalScopeManager::GetDeclarationSymbol(WfLexicalScope* scope, WfDeclaration* node)
			{
				auto symbol = From(scope->parentScope->symbols[node->name.value])
					.Where([=](Ptr<WfLexicalSymbol> symbol)
					{
						return symbol->creatorNode == node;
					})
					.First();
				return symbol;
			}

			void WfLexicalScopeManager::CreateLambdaCapture(parsing::ParsingTreeCustomBase* node, Ptr<WfLexicalCapture> capture)
			{
				if (!capture)
				{
					capture = MakePtr<WfLexicalCapture>();
				}
				lambdaCaptures.Add(node, capture);
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_BUILDGLOBALNAME.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection::description;
			using namespace typeimpl;

/***********************************************************************
BuildGlobalNameFromTypeDescriptors
***********************************************************************/

			void BuildGlobalNameFromTypeDescriptors(WfLexicalScopeManager* manager)
			{
				for (vint i = 0; i < GetGlobalTypeManager()->GetTypeDescriptorCount(); i++)
				{
					ITypeDescriptor* typeDescriptor = GetGlobalTypeManager()->GetTypeDescriptor(i);
					WString name = typeDescriptor->GetTypeName();
					const wchar_t* reading = name.Buffer();
					Ptr<WfLexicalScopeName> currentName = manager->globalName;

					while (true)
					{
						WString fragment;
						const wchar_t* delimiter = wcsstr(reading, L"::");
						if (delimiter)
						{
							fragment = WString(reading, vint(delimiter - reading));
							reading = delimiter + 2;
						}
						else
						{
							fragment = reading;
							reading = 0;
						}

						currentName = currentName->AccessChild(fragment, true);
						if (!reading)
						{
							currentName->typeDescriptor = typeDescriptor;
							manager->typeNames.Add(typeDescriptor, currentName);
							break;
						}
					}
				}
			}

/***********************************************************************
BuildGlobalNameFromModules
***********************************************************************/

			class BuildClassMemberVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*			manager;
				Ptr<WfLexicalScopeName>			scopeName;
				Ptr<WfClassDeclaration>			classDecl;
				Ptr<WfCustomType>				td;

				BuildClassMemberVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalScopeName> _scopeName, Ptr<WfClassDeclaration> _classDecl, Ptr<WfCustomType> _td)
					:manager(_manager)
					, scopeName(_scopeName)
					, classDecl(_classDecl)
					, td(_td)
				{
				}

				static WString GetTypeName(WfLexicalScopeManager* manager, Ptr<WfLexicalScopeName> scopeName)
				{
					WString typeName = scopeName->name;
					{
						WfLexicalScopeName* name = scopeName->parent;
						while (name && name != manager->globalName.Obj())
						{
							typeName = name->name + L"::" + typeName;
							name = name->parent;
						}
					}
					return typeName;
				}

				static void AddCustomType(WfLexicalScopeManager* manager, Ptr<WfLexicalScopeName> scopeName, Ptr<WfDeclaration> declaration, Ptr<ITypeDescriptor> td)
				{
					manager->declarationTypes.Add(declaration, td);

					if (!scopeName->typeDescriptor)
					{
						scopeName->typeDescriptor = td.Obj();
						manager->typeNames.Add(td.Obj(), scopeName);
					}
				}

				static void BuildClass(WfLexicalScopeManager* manager, Ptr<WfLexicalScopeName> scopeName, Ptr<WfClassDeclaration> declaration)
				{
					WString typeName = GetTypeName(manager, scopeName);
					Ptr<WfCustomType> td;
					switch (declaration->kind)
					{
					case WfClassKind::Class:
						td = MakePtr<WfClass>(typeName);
						break;
					case WfClassKind::Interface:
						td = MakePtr<WfInterface>(typeName);
						break;
					}
					AddCustomType(manager, scopeName, declaration, td);

					FOREACH(Ptr<WfDeclaration>, memberDecl, declaration->declarations)
					{
						BuildClassMemberVisitor visitor(manager, scopeName, declaration, td);
						memberDecl->Accept(&visitor);
					}
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (node->classMember->kind == WfClassMemberKind::Static)
					{
						auto info = MakePtr<WfStaticMethod>();
						td->AddMember(node->name.value, info);
						manager->declarationMemberInfos.Add(node, info);
					}
					else
					{
						switch (classDecl->kind)
						{
						case WfClassKind::Class:
							{
								auto info = MakePtr<WfClassMethod>();
								td->AddMember(node->name.value, info);
								manager->declarationMemberInfos.Add(node, info);
							}
							break;
						case WfClassKind::Interface:
							{
								auto info = MakePtr<WfInterfaceMethod>();
								td->AddMember(node->name.value, info);
								manager->declarationMemberInfos.Add(node, info);
							}
							break;
						}
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					auto info = MakePtr<WfField>(td.Obj(), node->name.value);
					td->AddMember(info);
					manager->declarationMemberInfos.Add(node, info);
				}

				void Visit(WfEventDeclaration* node)override
				{
					auto info = MakePtr<WfEvent>(td.Obj(), node->name.value);
					td->AddMember(info);
					manager->declarationMemberInfos.Add(node, info);
				}

				void Visit(WfPropertyDeclaration* node)override
				{
					auto info = MakePtr<WfProperty>(td.Obj(), node->name.value);
					td->AddMember(info);
					manager->declarationMemberInfos.Add(node, info);
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					Ptr<ITypeInfo> typeInfo;
					{
						auto elementType = MakePtr<TypeDescriptorTypeInfo>(td.Obj(), TypeInfoHint::Normal);
						if (node->constructorType == WfConstructorType::RawPtr)
						{
							typeInfo = MakePtr<RawPtrTypeInfo>(elementType);
						}
						else
						{
							typeInfo = MakePtr<SharedPtrTypeInfo>(elementType);
						}
					}

					auto info = MakePtr<WfClassConstructor>(typeInfo);
					td->AddMember(info);
					manager->declarationMemberInfos.Add(node, info);
				}
				
				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					auto newScopeName = scopeName->AccessChild(node->name.value, false);
					newScopeName->declarations.Add(node);
					BuildClass(manager, newScopeName, node);
				}

				void Visit(WfEnumDeclaration* node)override
				{
					BuildNameForDeclaration(manager, scopeName, node);
				}

				void Visit(WfStructDeclaration* node)override
				{
					BuildNameForDeclaration(manager, scopeName, node);
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			class BuildNameDeclarationVisitor
				: public empty_visitor::DeclarationVisitor
			{
			public:
				WfLexicalScopeManager*			manager;
				Ptr<WfLexicalScopeName>			scopeName;

				BuildNameDeclarationVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalScopeName> _scopeName)
					:manager(_manager)
					, scopeName(_scopeName)
				{
				}

				void Dispatch(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					manager->namespaceNames.Add(node, scopeName);
					FOREACH(Ptr<WfDeclaration>, subDecl, node->declarations)
					{
						BuildNameForDeclaration(manager, scopeName, subDecl.Obj());
					}
				}

				void Visit(WfClassDeclaration* node)override
				{
					BuildClassMemberVisitor::BuildClass(manager, scopeName, node);
				}

				void Visit(WfEnumDeclaration* node)override
				{
					auto td = MakePtr<WfEnum>(node->kind == WfEnumKind::Flag, BuildClassMemberVisitor::GetTypeName(manager, scopeName));
					BuildClassMemberVisitor::AddCustomType(manager, scopeName, node, td);
				}

				void Visit(WfStructDeclaration* node)override
				{
					auto td = MakePtr<WfStruct>(BuildClassMemberVisitor::GetTypeName(manager, scopeName));
					BuildClassMemberVisitor::AddCustomType(manager, scopeName, node, td);
				}
			};

			void BuildNameForDeclaration(WfLexicalScopeManager* manager, Ptr<WfLexicalScopeName> name, WfDeclaration* decl)
			{
				auto scopeName = name->AccessChild(decl->name.value, false);
				scopeName->declarations.Add(decl);

				BuildNameDeclarationVisitor visitor(manager, scopeName);
				decl->Accept(&visitor);
			}

			void BuildGlobalNameFromModules(WfLexicalScopeManager* manager)
			{
				FOREACH(Ptr<WfModule>, module, manager->GetModules())
				{
					FOREACH(Ptr<WfDeclaration>, decl, module->declarations)
					{
						BuildNameForDeclaration(manager, manager->globalName, decl.Obj());
					}
				}
			}

/***********************************************************************
ValidateScopeName
***********************************************************************/

			class ValidateScopeNameDeclarationVisitor
				: public Object
				, public WfDeclaration::IVisitor
			{
			public:
				enum Category
				{
					None,
					Type,
					Variable,
					Function,
					Event,
					Property,
					Namespace,
				};

				WfLexicalScopeManager*				manager;
				Ptr<WfLexicalScopeName>				name;
				Category							category;

				ValidateScopeNameDeclarationVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalScopeName> _name)
					:manager(_manager)
					, name(_name)
					, category(name->typeDescriptor && name->imported ? Type : None)
				{
				}

				void AddError(WfDeclaration* node)
				{
					WString categoryName;
					switch (category)
					{
					case Type:
						categoryName = L"type";
						break;
					case Variable:
						categoryName = L"variable";
						break;
					case Function:
						categoryName = L"function";
						break;
					case Event:
						categoryName = L"event";
						break;
					case Property:
						categoryName = L"property";
						break;
					case Namespace:
						categoryName = L"namespace";
						break;
					default:
						CHECK_FAIL(L"ValidateScopeNameDeclarationVisitor::AddError(WfDeclaration*)#Internal error.");
					}
					manager->errors.Add(WfErrors::DuplicatedDeclaration(node, categoryName));
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					if (category == None)
					{
						category = Namespace;
					}
					else if (category != Namespace)
					{
						AddError(node);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (category == None)
					{
						category = Function;
					}
					else if (category != Function)
					{
						AddError(node);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					if (category == None)
					{
						category = Variable;
					}
					else
					{
						AddError(node);
					}
				}

				void Visit(WfEventDeclaration* node)override
				{
					if (category == None)
					{
						category = Event;
					}
					else
					{
						AddError(node);
					}
				}

				void Visit(WfPropertyDeclaration* node)override
				{
					if (category == None)
					{
						category = Property;
					}
					else
					{
						AddError(node);
					}
				}

				void Visit(WfConstructorDeclaration* node)override
				{
				}
				
				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					if (category == None)
					{
						category = Type;
					}
					else
					{
						AddError(node);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
					if (category == None)
					{
						category = Type;
					}
					else
					{
						AddError(node);
					}
				}

				void Visit(WfStructDeclaration* node)override
				{
					if (category == None)
					{
						category = Type;
					}
					else
					{
						AddError(node);
					}
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			void ValidateScopeName(WfLexicalScopeManager* manager, Ptr<WfLexicalScopeName> name)
			{
				ValidateScopeNameDeclarationVisitor visitor(manager, name);
				FOREACH(Ptr<WfDeclaration>, declaration, name->declarations)
				{
					declaration->Accept(&visitor);
				}

				FOREACH(Ptr<WfLexicalScopeName>, child, name->children.Values())
				{
					ValidateScopeName(manager, child);
				}
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_BUILDSCOPE.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection;
			using namespace reflection::description;
			using namespace typeimpl;

/***********************************************************************
BuildScopeForDeclaration
***********************************************************************/

			class BuildScopeForDeclarationVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				ParsingTreeCustomBase*					source;
				Ptr<WfLexicalScope>						parentScope;

				Ptr<WfLexicalScope>						resultScope;

				BuildScopeForDeclarationVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalScope> _parentScope, ParsingTreeCustomBase* _source)
					:manager(_manager)
					, source(_source)
					, parentScope(_parentScope)
				{
				}

				void Visit(Ptr<WfLexicalScope> scope, List<Ptr<WfAttribute>>& attributes)
				{
					FOREACH(Ptr<WfAttribute>, attribute, attributes)
					{
						if (attribute->value)
						{
							BuildScopeForExpression(manager, scope, attribute->value);
						}
					}
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					parentScope->symbols.Add(symbol->name, symbol);

					resultScope = new WfLexicalScope(parentScope);
					FOREACH(Ptr<WfDeclaration>, declaration, node->declarations)
					{
						BuildScopeForDeclaration(manager, resultScope, declaration, node);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					resultScope = new WfLexicalScope(parentScope);
					auto config = MakePtr<WfLexicalFunctionConfig>();
					resultScope->functionConfig = config;
					resultScope->ownerNodeSource = source;

					if (source)
					{
						if (dynamic_cast<WfFunctionExpression*>(source))
						{
							config->lambda = true;
							config->thisAccessable = false;
							config->parentThisAccessable = true;
						}
						else if (dynamic_cast<WfNewInterfaceExpression*>(source))
						{
							config->lambda = true;
							config->thisAccessable = true;
							config->parentThisAccessable = true;
						}
						else if (dynamic_cast<WfClassDeclaration*>(source))
						{
							config->lambda = false;
							config->thisAccessable = node->classMember->kind != WfClassMemberKind::Static;
							config->parentThisAccessable = false;
						}
					}

					if (node->anonymity == WfFunctionAnonymity::Named)
					{
						Ptr<WfLexicalScope> functionNameScope = parentScope;
						if (source && dynamic_cast<WfFunctionExpression*>(source))
						{
							functionNameScope = resultScope;
						}

						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(functionNameScope.Obj());
						symbol->name = node->name.value;
						symbol->creatorNode = node;
						{
							Ptr<WfFunctionType> type = new WfFunctionType;
							type->result = node->returnType;
							FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
							{
								type->arguments.Add(argument->type);
							}
							symbol->type = type;
						}
						functionNameScope->symbols.Add(symbol->name, symbol);
					}

					if (node->statement)
					{
						FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
						{
							Ptr<WfLexicalSymbol> argumentSymbol = new WfLexicalSymbol(resultScope.Obj());
							argumentSymbol->name = argument->name.value;
							argumentSymbol->type = argument->type;
							argumentSymbol->creatorNode = argument;
							resultScope->symbols.Add(argumentSymbol->name, argumentSymbol);

							Visit(parentScope, argument->attributes);
						}

						BuildScopeForStatement(manager, resultScope, node->statement);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					symbol->type = node->type;
					parentScope->symbols.Add(symbol->name, symbol);

					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfEventDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					parentScope->symbols.Add(symbol->name, symbol);
				}

				void Visit(WfPropertyDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					symbol->type = node->type;
					parentScope->symbols.Add(symbol->name, symbol);
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					resultScope = new WfLexicalScope(parentScope);

					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						Ptr<WfLexicalSymbol> argumentSymbol = new WfLexicalSymbol(resultScope.Obj());
						argumentSymbol->name = argument->name.value;
						argumentSymbol->type = argument->type;
						argumentSymbol->creatorNode = argument;
						resultScope->symbols.Add(argumentSymbol->name, argumentSymbol);
					}

					FOREACH(Ptr<WfBaseConstructorCall>, call, node->baseConstructorCalls)
					{
						FOREACH(Ptr<WfExpression>, argument, call->arguments)
						{
							BuildScopeForExpression(manager, resultScope, argument);
						}
					}

					auto bodyScope = MakePtr<WfLexicalScope>(resultScope);
					{
						auto config = MakePtr<WfLexicalFunctionConfig>();
						bodyScope->functionConfig = config;

						config->lambda = false;
						config->thisAccessable = true;
						config->parentThisAccessable = false;
					}
					BuildScopeForStatement(manager, bodyScope, node->statement);
				}

				void Visit(WfDestructorDeclaration* node)override
				{
					resultScope = new WfLexicalScope(parentScope);
					{
						auto config = MakePtr<WfLexicalFunctionConfig>();
						resultScope->functionConfig = config;

						config->lambda = false;
						config->thisAccessable = true;
						config->parentThisAccessable = false;
					}
					BuildScopeForStatement(manager, resultScope, node->statement);
				}

				void Visit(WfClassDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					parentScope->symbols.Add(symbol->name, symbol);
					
					auto td = manager->declarationTypes[node];
					resultScope = new WfLexicalScope(parentScope);
					resultScope->typeOfThisExpr = td.Obj();
					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						BuildScopeForDeclaration(manager, resultScope, memberDecl, node);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					parentScope->symbols.Add(symbol->name, symbol);

					FOREACH(Ptr<WfEnumItem>, item, node->items)
					{
						Visit(parentScope, item->attributes);
					}
				}

				void Visit(WfStructDeclaration* node)override
				{
					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					parentScope->symbols.Add(symbol->name, symbol);

					FOREACH(Ptr<WfStructMember>, member, node->members)
					{
						Visit(parentScope, member->attributes);
					}
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						Execute(manager, parentScope, source, decl);
					}
				}

				static Ptr<WfLexicalScope> Execute(WfLexicalScopeManager* manager, Ptr<WfLexicalScope> parentScope, ParsingTreeCustomBase* source, Ptr<WfDeclaration> declaration)
				{
					BuildScopeForDeclarationVisitor visitor(manager, parentScope, source);
					declaration->Accept(&visitor);
					visitor.Visit(parentScope, declaration->attributes);
					if (visitor.resultScope)
					{
						manager->nodeScopes.Add(declaration.Obj(), visitor.resultScope);
						visitor.resultScope->ownerNode = declaration;
					}
					else
					{
						manager->nodeScopes.Add(declaration.Obj(), parentScope);
					}
					return visitor.resultScope;
				}
			};

/***********************************************************************
BuildScopeForStatement
***********************************************************************/

			class BuildScopeForStatementVisitor
				: public Object
				, public WfStatement::IVisitor
				, public WfVirtualStatement::IVisitor
				, public WfCoroutineStatement::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				Ptr<WfLexicalScope>						parentScope;
				Ptr<WfLexicalScope>						resultScope;

				BuildScopeForStatementVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalScope> _parentScope)
					:manager(_manager)
					, parentScope(_parentScope)
				{
				}

				void Visit(WfBreakStatement* node)override
				{
				}

				void Visit(WfContinueStatement* node)override
				{
				}

				void Visit(WfReturnStatement* node)override
				{
					if (node->expression)
					{
						BuildScopeForExpression(manager, parentScope, node->expression);
					}
				}

				void Visit(WfDeleteStatement* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfRaiseExceptionStatement* node)override
				{
					if (node->expression)
					{
						BuildScopeForExpression(manager, parentScope, node->expression);
					}
				}

				void Visit(WfIfStatement* node)override
				{
					resultScope = new WfLexicalScope(parentScope);
					if (node->type)
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = node->name.value;
						symbol->type = node->type;
						symbol->creatorNode = node;
						resultScope->symbols.Add(symbol->name, symbol);
					}

					BuildScopeForExpression(manager, resultScope, node->expression);
					BuildScopeForStatement(manager, resultScope, node->trueBranch);
					if (node->falseBranch)
					{
						BuildScopeForStatement(manager, resultScope, node->falseBranch);
					}
				}

				void Visit(WfWhileStatement* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->condition);
					BuildScopeForStatement(manager, parentScope, node->statement);
				}

				void Visit(WfTryStatement* node)override
				{
					BuildScopeForStatement(manager, parentScope, node->protectedStatement);
					if (node->catchStatement)
					{
						resultScope = new WfLexicalScope(parentScope);

						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = node->name.value;
						symbol->creatorNode = node;
						{
							auto system = MakePtr<WfTopQualifiedType>();
							system->name.value = L"system";

							auto exception = MakePtr<WfChildType>();
							exception->parent = system;
							exception->name.value = L"Exception";

							auto sharedPtr = MakePtr<WfSharedPointerType>();
							sharedPtr->element = exception;

							symbol->type = sharedPtr;
						}
						resultScope->symbols.Add(symbol->name, symbol);

						BuildScopeForStatement(manager, resultScope, node->catchStatement);
					}
					if (node->finallyStatement)
					{
						BuildScopeForStatement(manager, parentScope, node->finallyStatement);
					}
				}

				void Visit(WfBlockStatement* node)override
				{
					resultScope = new WfLexicalScope(parentScope);

					FOREACH(Ptr<WfStatement>, statement, node->statements)
					{
						BuildScopeForStatement(manager, resultScope, statement);
					}
				}

				void Visit(WfExpressionStatement* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfVariableStatement* node)override
				{
					BuildScopeForDeclaration(manager, parentScope, node->variable, node);
				}

				void Visit(WfVirtualStatement* node)override
				{
					node->Accept((WfVirtualStatement::IVisitor*)this);
					if (node->expandedStatement)
					{
						BuildScopeForStatement(manager, parentScope, node->expandedStatement);
					}
				}

				void Visit(WfSwitchStatement* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
					FOREACH(Ptr<WfSwitchCase>, switchCase, node->caseBranches)
					{
						BuildScopeForExpression(manager, parentScope, switchCase->expression);
						BuildScopeForStatement(manager, parentScope, switchCase->statement);
					}
					if (node->defaultBranch)
					{
						BuildScopeForStatement(manager, parentScope, node->defaultBranch);
					}
				}

				void Visit(WfForEachStatement* node)override
				{
					resultScope = new WfLexicalScope(parentScope);

					Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
					symbol->name = node->name.value;
					symbol->creatorNode = node;
					resultScope->symbols.Add(symbol->name, symbol);

					BuildScopeForExpression(manager, parentScope, node->collection);
					BuildScopeForStatement(manager, resultScope, node->statement);
				}

				void Visit(WfCoProviderStatement* node)override
				{
					resultScope = new WfLexicalScope(parentScope);
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = L"$PROVIDER";
						symbol->creatorNode = node;
						resultScope->symbols.Add(symbol->name, symbol);
					}
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = L"$IMPL";
						symbol->creatorNode = node;
						resultScope->symbols.Add(symbol->name, symbol);
					}
					BuildScopeForStatement(manager, resultScope, node->statement);
				}

				void Visit(WfCoroutineStatement* node)override
				{
					node->Accept((WfCoroutineStatement::IVisitor*)this);
				}

				void Visit(WfCoPauseStatement* node)override
				{
					if (node->statement)
					{
						BuildScopeForStatement(manager, parentScope, node->statement);
					}
				}

				void Visit(WfCoOperatorStatement* node)override
				{
					if (node->varName.value != L"")
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(parentScope.Obj());
						symbol->name = node->varName.value;
						symbol->creatorNode = node;
						parentScope->symbols.Add(symbol->name, symbol);
					}

					FOREACH(Ptr<WfExpression>, argument, node->arguments)
					{
						BuildScopeForExpression(manager, parentScope, argument);
					}
				}

				static Ptr<WfLexicalScope> Execute(WfLexicalScopeManager* manager, Ptr<WfLexicalScope> parentScope, Ptr<WfStatement> statement)
				{
					BuildScopeForStatementVisitor visitor(manager, parentScope);
					statement->Accept(&visitor);
					if (visitor.resultScope)
					{
						manager->nodeScopes.Add(statement.Obj(), visitor.resultScope);
						visitor.resultScope->ownerNode = statement;
					}
					else
					{
						manager->nodeScopes.Add(statement.Obj(), parentScope);
					}
					return visitor.resultScope;
				}
			};

/***********************************************************************
BuildScopeForExpression
***********************************************************************/

			class BuildScopeForExpressionVisitor
				: public Object
				, public WfExpression::IVisitor
				, public WfVirtualExpression::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				Ptr<WfLexicalScope>						parentScope;
				Ptr<WfLexicalScope>						resultScope;

				BuildScopeForExpressionVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalScope> _parentScope)
					:manager(_manager)
					, parentScope(_parentScope)
				{
				}

				void Visit(WfThisExpression* node)override
				{
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
				}

				void Visit(WfReferenceExpression* node)override
				{
				}

				void Visit(WfOrderedNameExpression* node)override
				{
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					manager->CreateLambdaCapture(node);

					SortedList<vint> names;
					SearchOrderedName(parentScope.Obj(), node->body, names);

					resultScope = new WfLexicalScope(parentScope);
					auto config = MakePtr<WfLexicalFunctionConfig>();
					resultScope->functionConfig = config;

					config->lambda = true;
					config->thisAccessable = false;
					config->parentThisAccessable = true;

					FOREACH(vint, name, names)
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = L"$" + itow(name);
						symbol->creatorNode = node;
						resultScope->symbols.Add(symbol->name, symbol);
					}

					BuildScopeForExpression(manager, resultScope, node->body);
				}

				void Visit(WfMemberExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->parent);
				}

				void Visit(WfChildExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->parent);
				}

				void Visit(WfLiteralExpression* node)override
				{
				}

				void Visit(WfFloatingExpression* node)override
				{
				}

				void Visit(WfIntegerExpression* node)override
				{
				}

				void Visit(WfStringExpression* node)override
				{
				}

				void Visit(WfUnaryExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->operand);
				}

				void Visit(WfBinaryExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->first);
					BuildScopeForExpression(manager, parentScope, node->second);
				}

				void Visit(WfLetExpression* node)override
				{
					resultScope = new WfLexicalScope(parentScope);
					FOREACH(Ptr<WfLetVariable>, variable, node->variables)
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = variable->name.value;
						symbol->creatorNode = node;
						resultScope->symbols.Add(symbol->name, symbol);
						BuildScopeForExpression(manager, resultScope, variable->value);
					}

					BuildScopeForExpression(manager, resultScope, node->expression);
				}

				void Visit(WfIfExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->condition);
					BuildScopeForExpression(manager, parentScope, node->trueBranch);
					BuildScopeForExpression(manager, parentScope, node->falseBranch);
				}

				void Visit(WfRangeExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->begin);
					BuildScopeForExpression(manager, parentScope, node->end);
				}

				void Visit(WfSetTestingExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->element);
					BuildScopeForExpression(manager, parentScope, node->collection);
				}

				void Visit(WfConstructorExpression* node)override
				{
					FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
					{
						BuildScopeForExpression(manager, parentScope, argument->key);
						if (argument->value)
						{
							BuildScopeForExpression(manager, parentScope, argument->value);
						}
					}
				}

				void Visit(WfInferExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfTypeCastingExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfTypeTestingExpression* node)override
				{
					if (node->expression)
					{
						BuildScopeForExpression(manager, parentScope, node->expression);
					}
				}

				void Visit(WfTypeOfTypeExpression* node)override
				{
				}

				void Visit(WfTypeOfExpressionExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfAttachEventExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->event);
					BuildScopeForExpression(manager, parentScope, node->function);
				}

				void Visit(WfDetachEventExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->event);
					BuildScopeForExpression(manager, parentScope, node->handler);
				}

				void Visit(WfObserveExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->parent);
					if (node->observeType == WfObserveType::SimpleObserve)
					{
						BuildScopeForExpression(manager, parentScope, node->expression);
						FOREACH(Ptr<WfExpression>, event, node->events)
						{
							BuildScopeForExpression(manager, parentScope, event);
						}
					}
					else
					{
						resultScope = new WfLexicalScope(parentScope);
						{
							Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
							symbol->name = node->name.value;
							symbol->creatorNode = node;
							resultScope->symbols.Add(symbol->name, symbol);
						}

						BuildScopeForExpression(manager, resultScope, node->expression);
						FOREACH(Ptr<WfExpression>, event, node->events)
						{
							BuildScopeForExpression(manager, resultScope, event);
						}
					}
				}

				void Visit(WfCallExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->function);
					FOREACH(Ptr<WfExpression>, argument, node->arguments)
					{
						BuildScopeForExpression(manager, parentScope, argument);
					}
				}

				void Visit(WfFunctionExpression* node)override
				{
					manager->CreateLambdaCapture(node->function.Obj());
					BuildScopeForDeclaration(manager, parentScope, node->function, node);
				}

				void Visit(WfNewClassExpression* node)override
				{
					FOREACH(Ptr<WfExpression>, argument, node->arguments)
					{
						BuildScopeForExpression(manager, parentScope, argument);
					}
				}

				class CreateLambdaCaptureVisitor
					: public empty_visitor::DeclarationVisitor
				{
				public:
					WfLexicalScopeManager*				manager;
					Ptr<WfLexicalCapture>				capture;

					CreateLambdaCaptureVisitor(WfLexicalScopeManager* _manager, Ptr<WfLexicalCapture> _capture)
						:manager(_manager)
						, capture(_capture)
					{
					}

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							decl->Accept(this);
						}
					}

					void Visit(WfFunctionDeclaration* node)override
					{
						manager->CreateLambdaCapture(node, capture);
					}
				};

				void Visit(WfNewInterfaceExpression* node)override
				{
					resultScope = new WfLexicalScope(parentScope);
					auto capture = MakePtr<WfLexicalCapture>();
					manager->CreateLambdaCapture(node, capture);

					CreateLambdaCaptureVisitor visitor(manager, capture);
					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						memberDecl->Accept(&visitor);
						BuildScopeForDeclaration(manager, resultScope, memberDecl, node);
					}
				}

				void Visit(WfVirtualExpression* node)override
				{
					node->Accept((WfVirtualExpression::IVisitor*)this);
					if (node->expandedExpression)
					{
						BuildScopeForExpression(manager, parentScope, node->expandedExpression);
					}
				}

				void Visit(WfBindExpression* node)override
				{
					BuildScopeForExpression(manager, parentScope, node->expression);
				}

				void Visit(WfFormatExpression* node)override
				{
				}

				void Visit(WfNewCoroutineExpression* node)override
				{
					manager->CreateLambdaCapture(node);

					resultScope = new WfLexicalScope(parentScope);
					auto config = MakePtr<WfLexicalFunctionConfig>();
					resultScope->functionConfig = config;

					if (node->name.value != L"")
					{
						Ptr<WfLexicalSymbol> symbol = new WfLexicalSymbol(resultScope.Obj());
						symbol->name = node->name.value;
						symbol->creatorNode = node;
						symbol->typeInfo = TypeInfoRetriver<Ptr<CoroutineResult>>::CreateTypeInfo();
						symbol->type = GetTypeFromTypeInfo(symbol->typeInfo.Obj());
						resultScope->symbols.Add(symbol->name, symbol);
					}

					config->lambda = true;
					config->thisAccessable = false;
					config->parentThisAccessable = true;

					BuildScopeForStatement(manager, resultScope, node->statement);
				}

				static Ptr<WfLexicalScope> Execute(WfLexicalScopeManager* manager, Ptr<WfLexicalScope> parentScope, Ptr<WfExpression> expression)
				{
					BuildScopeForExpressionVisitor visitor(manager, parentScope);
					expression->Accept(&visitor);
					if (visitor.resultScope)
					{
						manager->nodeScopes.Add(expression.Obj(), visitor.resultScope);
						visitor.resultScope->ownerNode = expression;
					}
					else
					{
						manager->nodeScopes.Add(expression.Obj(), parentScope);
					}
					return visitor.resultScope;
				}
			};

/***********************************************************************
BuildScope
***********************************************************************/

			void BuildScopeForModule(WfLexicalScopeManager* manager, Ptr<WfModule> module)
			{
				Ptr<WfLexicalScope> scope = new WfLexicalScope(manager);
				scope->ownerNode = module;
				manager->nodeScopes.Add(module.Obj(), scope);

				FOREACH(Ptr<WfDeclaration>, declaration, module->declarations)
				{
					BuildScopeForDeclaration(manager, scope, declaration, module.Obj());
				}
			}

			void BuildScopeForDeclaration(WfLexicalScopeManager* manager, Ptr<WfLexicalScope> parentScope, Ptr<WfDeclaration> declaration, parsing::ParsingTreeCustomBase* source)
			{
				BuildScopeForDeclarationVisitor::Execute(manager, parentScope, source, declaration);
			}

			void BuildScopeForStatement(WfLexicalScopeManager* manager, Ptr<WfLexicalScope> parentScope, Ptr<WfStatement> statement)
			{
				BuildScopeForStatementVisitor::Execute(manager, parentScope, statement);
			}

			void BuildScopeForExpression(WfLexicalScopeManager* manager, Ptr<WfLexicalScope> parentScope, Ptr<WfExpression> expression)
			{
				BuildScopeForExpressionVisitor::Execute(manager, parentScope, expression);
			}

/***********************************************************************
CheckScopes_DuplicatedSymbol
***********************************************************************/

			bool CheckScopes_DuplicatedSymbol(WfLexicalScopeManager* manager)
			{
				SortedList<WfLexicalScope*> analyzedScopes;
				vint errorCount = manager->errors.Count();
				FOREACH(Ptr<WfLexicalScope>, scope, manager->nodeScopes.Values())
				{
					if (!analyzedScopes.Contains(scope.Obj()))
					{
						analyzedScopes.Add(scope.Obj());

						for (vint i = 0; i < scope->symbols.Count(); i++)
						{
							const auto& symbols = scope->symbols.GetByIndex(i);
							if (symbols.Count() > 1)
							{
								if (!scope->ownerNode.Cast<WfModule>() && !scope->ownerNode.Cast<WfNamespaceDeclaration>())
								{
									if (symbols.Count() > 1)
									{
										FOREACH(Ptr<WfLexicalSymbol>, symbol, From(symbols))
										{
											if (auto decl = symbol->creatorNode.Cast<WfDeclaration>())
											{
												if (!decl.Cast<WfFunctionDeclaration>())
												{
													manager->errors.Add(WfErrors::DuplicatedSymbol(decl.Obj(), symbol));
												}
											}
											else if (auto arg = symbol->creatorNode.Cast<WfFunctionArgument>())
											{
												manager->errors.Add(WfErrors::DuplicatedSymbol(arg.Obj(), symbol));
											}
											else if (auto stat = symbol->creatorNode.Cast<WfStatement>())
											{
												manager->errors.Add(WfErrors::DuplicatedSymbol(stat.Obj(), symbol));
											}
											else if (auto expr = symbol->creatorNode.Cast<WfExpression>())
											{
												manager->errors.Add(WfErrors::DuplicatedSymbol(expr.Obj(), symbol));
											}
										}
									}
								}
							}
						}
					}
				}
				return errorCount == manager->errors.Count();
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_COMPLETESCOPE.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection;
			using namespace reflection::description;
			using namespace typeimpl;

/***********************************************************************
CompleteScopeForClassMember
***********************************************************************/

			class CompleteScopeForClassMemberVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				Ptr<WfCustomType>						td;
				Ptr<WfClassDeclaration>					classDecl;

				CompleteScopeForClassMemberVisitor(WfLexicalScopeManager* _manager, Ptr<WfCustomType> _td, Ptr<WfClassDeclaration> _classDecl)
					:manager(_manager)
					, td(_td)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto info = manager->declarationMemberInfos[node].Cast<WfMethodBase>();

					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), argument->type))
						{
							auto paramInfo = MakePtr<ParameterInfoImpl>(info.Obj(), argument->name.value, typeInfo);
							info->AddParameter(paramInfo);
						}
					}

					if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), node->returnType))
					{
						info->SetReturn(typeInfo);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), node->type))
					{
						auto info = manager->declarationMemberInfos[node].Cast<WfField>();
						info->SetReturn(typeInfo);
					}
				}

				void Visit(WfEventDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto type = MakePtr<WfFunctionType>();
					{
						auto voidType = MakePtr<WfPredefinedType>();
						voidType->name = WfPredefinedTypeName::Void;
						type->result = voidType;
					}
					FOREACH(Ptr<WfType>, argument, node->arguments)
					{
						type->arguments.Add(argument);
					}

					if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), type))
					{
						auto info = manager->declarationMemberInfos[node].Cast<WfEvent>();
						info->SetHandlerType(typeInfo);
					}
				}

				void Visit(WfPropertyDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto info = manager->declarationMemberInfos[node].Cast<WfProperty>();

					if (node->getter.value != L"")
					{
						info->SetGetter(dynamic_cast<MethodInfoImpl*>(td->GetMethodGroupByName(node->getter.value, false)->GetMethod(0)));
					}

					if (node->setter.value != L"")
					{
						info->SetSetter(dynamic_cast<MethodInfoImpl*>(td->GetMethodGroupByName(node->setter.value, false)->GetMethod(0)));
					}

					if (node->valueChangedEvent.value != L"")
					{
						info->SetValueChangedEvent(dynamic_cast<EventInfoImpl*>(td->GetEventByName(node->valueChangedEvent.value, false)));
					}
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto info = manager->declarationMemberInfos[node].Cast<WfClassConstructor>();

					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), argument->type))
						{
							auto paramInfo = MakePtr<ParameterInfoImpl>(info.Obj(), argument->name.value, typeInfo);
							info->AddParameter(paramInfo);
						}
					}
				}

				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					CompleteScopeForDeclaration(manager, node);
				}

				void Visit(WfEnumDeclaration* node)override
				{
					CompleteScopeForDeclaration(manager, node);
				}

				void Visit(WfStructDeclaration* node)override
				{
					CompleteScopeForDeclaration(manager, node);
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				static void Execute(WfLexicalScopeManager* manager, Ptr<WfCustomType> td, Ptr<WfClassDeclaration> classDecl, Ptr<WfDeclaration> memberDecl)
				{
					CompleteScopeForClassMemberVisitor visitor(manager, td, classDecl);
					memberDecl->Accept(&visitor);
				}
			};

/***********************************************************************
CompleteScopeForDeclaration
***********************************************************************/

			class CompleteScopeForDeclarationVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				Ptr<WfDeclaration>						declaration;

				CompleteScopeForDeclarationVisitor(WfLexicalScopeManager* _manager, Ptr<WfDeclaration> _declaration)
					:manager(_manager)
					, declaration(_declaration)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->declarations)
					{
						CompleteScopeForDeclaration(manager, decl);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
				}

				void Visit(WfVariableDeclaration* node)override
				{
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
				}

				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto td = manager->declarationTypes[node].Cast<WfCustomType>();

					if (node->baseTypes.Count() > 0)
					{
						FOREACH(Ptr<WfType>, baseType, node->baseTypes)
						{
							if (auto scopeName = GetScopeNameFromReferenceType(scope->parentScope.Obj(), baseType))
							{
								if (scopeName->typeDescriptor)
								{
									td->AddBaseType(scopeName->typeDescriptor);
								}
							}
						}
					}
					else if (node->kind == WfClassKind::Class)
					{
						td->AddBaseType(description::GetTypeDescriptor<DescriptableObject>());
					}
					else if (node->kind == WfClassKind::Interface)
					{
						td->AddBaseType(description::GetTypeDescriptor<IDescriptable>());
					}

					if (node->kind == WfClassKind::Interface)
					{
						switch (node->constructorType)
						{
						case WfConstructorType::SharedPtr:
							{
								auto elementType = MakePtr<TypeDescriptorTypeInfo>(td.Obj(), TypeInfoHint::Normal);
								auto pointerType = MakePtr<SharedPtrTypeInfo>(elementType);

								auto ctor = MakePtr<WfInterfaceConstructor>(pointerType);
								td->AddMember(ctor);
							}
							break;
						case WfConstructorType::RawPtr:
							{
								auto elementType = MakePtr<TypeDescriptorTypeInfo>(td.Obj(), TypeInfoHint::Normal);
								auto pointerType = MakePtr<RawPtrTypeInfo>(elementType);

								auto ctor = MakePtr<WfInterfaceConstructor>(pointerType);
								td->AddMember(ctor);
							}
							break;
						default:;
						}
					}

					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						CompleteScopeForClassMember(manager, td, node, memberDecl);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
					auto td = manager->declarationTypes[node].Cast<WfEnum>();
					Dictionary<WString, vuint64_t> items;
					FOREACH(Ptr<WfEnumItem>, item, node->items)
					{
						vuint64_t value = 0;
						switch (item->kind)
						{
						case WfEnumItemKind::Constant:
							TypedValueSerializerProvider<vuint64_t>::Deserialize(item->number.value, value);
							break;
						case WfEnumItemKind::Intersection:
							FOREACH(Ptr<WfEnumItemIntersection>, itemInt, item->intersections)
							{
								value |= items[itemInt->name.value];
							}
							break;
						}
						td->AddEnumItem(item->name.value, value);
						items.Add(item->name.value, value);
					}
				}

				void Visit(WfStructDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto td = manager->declarationTypes[node].Cast<WfStruct>();
					FOREACH(Ptr<WfStructMember>, member, node->members)
					{
						if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), member->type))
						{
							auto field = MakePtr<WfStructField>(td.Obj(), member->name.value);
							field->SetReturn(typeInfo);
							td->AddMember(field);
						}
					}
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				static void Execute(WfLexicalScopeManager* manager, Ptr<WfDeclaration> declaration)
				{
					CompleteScopeForDeclarationVisitor visitor(manager, declaration);
					declaration->Accept(&visitor);
				}
			};

/***********************************************************************
CheckBaseClass
***********************************************************************/

			class CheckBaseClassDeclarationVisitor : public empty_visitor::DeclarationVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				SortedList<ITypeDescriptor*>			checkedInterfaces;
				SortedList<ITypeDescriptor*>			traversedInterfaces;

				CheckBaseClassDeclarationVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				void Dispatch(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->declarations)
					{
						decl->Accept(this);
					}
				}

				void CheckDuplicatedBaseClass(WfClassDeclaration* node, ITypeDescriptor* td)
				{
					List<ITypeDescriptor*> baseTypes;
					SortedList<ITypeDescriptor*> duplicatedTypes;
					baseTypes.Add(td);

					for (vint i = 0; i < baseTypes.Count(); i++)
					{
						auto currentTd = baseTypes[i];
						vint count = currentTd->GetBaseTypeDescriptorCount();
						for (vint j = 0; j < count; j++)
						{
							auto baseTd = currentTd->GetBaseTypeDescriptor(j);
							if (baseTd->GetTypeDescriptorFlags() == TypeDescriptorFlags::Class && baseTd != description::GetTypeDescriptor<DescriptableObject>())
							{
								if (baseTypes.Contains(baseTd))
								{
									if (!duplicatedTypes.Contains(baseTd))
									{
										duplicatedTypes.Add(baseTd);
										manager->errors.Add(WfErrors::DuplicatedBaseClass(node, baseTd));
									}
								}
								else
								{
									baseTypes.Add(baseTd);
								}
							}
						}
					}
				}

				void CheckDuplicatedBaseInterface(WfClassDeclaration* node, ITypeDescriptor* td)
				{
					if (traversedInterfaces.Contains(td))
					{
						manager->errors.Add(WfErrors::DuplicatedBaseInterface(node, td));
					}
					else
					{
						if (checkedInterfaces.Contains(td))
						{
							return;
						}
						checkedInterfaces.Add(td);

						vint index = traversedInterfaces.Add(td);
						vint count = td->GetBaseTypeDescriptorCount();
						for (vint i = 0; i < count; i++)
						{
							CheckDuplicatedBaseInterface(node, td->GetBaseTypeDescriptor(i));
						}
						traversedInterfaces.RemoveAt(index);
					}
				}

				void Visit(WfClassDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto td = manager->declarationTypes[node].Obj();

					FOREACH(Ptr<WfType>, baseType, node->baseTypes)
					{
						if (auto scopeName = GetScopeNameFromReferenceType(scope->parentScope.Obj(), baseType))
						{
							if (auto baseTd = scopeName->typeDescriptor)
							{
								bool isClass = baseTd->GetTypeDescriptorFlags() == TypeDescriptorFlags::Class;
								bool isInterface = baseTd->GetTypeDescriptorFlags() == TypeDescriptorFlags::Interface;

								switch (node->kind)
								{
								case WfClassKind::Class:
									{
										if (!isClass || !baseTd->IsAggregatable())
										{
											if (!dynamic_cast<WfClass*>(baseTd))
											{
												manager->errors.Add(WfErrors::WrongBaseTypeOfClass(node, baseTd));
											}
										}
									}
									break;
								case WfClassKind::Interface:
									{
										if (!isInterface)
										{
											manager->errors.Add(WfErrors::WrongBaseTypeOfInterface(node, baseTd));
										}
									}
									break;
								}
							}
						}
					}

					if (node->kind == WfClassKind::Class)
					{
						CheckDuplicatedBaseClass(node, td);
					}
					else
					{
						CheckDuplicatedBaseInterface(node, td);
					}

					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						memberDecl->Accept(this);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				static void Execute(WfLexicalScopeManager* manager, Ptr<WfDeclaration> declaration)
				{
					CompleteScopeForDeclarationVisitor visitor(manager, declaration);
					declaration->Accept(&visitor);
				}
			};

/***********************************************************************
CompleteScope
***********************************************************************/

			void CompleteScopeForClassMember(WfLexicalScopeManager* manager, Ptr<WfCustomType> td, Ptr<WfClassDeclaration> classDecl, Ptr<WfDeclaration> memberDecl)
			{
				CompleteScopeForClassMemberVisitor::Execute(manager, td, classDecl, memberDecl);
			}

			void CompleteScopeForDeclaration(WfLexicalScopeManager* manager, Ptr<WfDeclaration> declaration)
			{
				CompleteScopeForDeclarationVisitor::Execute(manager, declaration);
			}

			void CompleteScopeForModule(WfLexicalScopeManager* manager, Ptr<WfModule> module)
			{
				FOREACH(Ptr<WfDeclaration>, declaration, module->declarations)
				{
					CompleteScopeForDeclaration(manager, declaration);
				}
			}

/***********************************************************************
CheckScopes_SymbolType
***********************************************************************/

			bool CheckScopes_SymbolType(WfLexicalScopeManager* manager)
			{
				SortedList<WfLexicalScope*> analyzedScopes;
				vint errorCount = manager->errors.Count();
				FOREACH(Ptr<WfLexicalScope>, scope, manager->nodeScopes.Values())
				{
					if (!analyzedScopes.Contains(scope.Obj()))
					{
						analyzedScopes.Add(scope.Obj());

						for (vint i = 0; i < scope->symbols.Count(); i++)
						{
							FOREACH(Ptr<WfLexicalSymbol>, symbol, scope->symbols.GetByIndex(i))
							{
								if (symbol->type)
								{
									symbol->typeInfo = CreateTypeInfoFromType(scope.Obj(), symbol->type);
								}
							}
						}
					}
				}
				return errorCount == manager->errors.Count();
			}

/***********************************************************************
CheckScopes_BaseType
***********************************************************************/

			bool CheckScopes_BaseType(WfLexicalScopeManager* manager)
			{
				vint errorCount = manager->errors.Count();
				CheckBaseClassDeclarationVisitor visitor(manager);
				FOREACH(Ptr<WfModule>, module, manager->GetModules())
				{
					FOREACH(Ptr<WfDeclaration>, declaration, module->declarations)
					{
						declaration->Accept(&visitor);
					}
				}
				return errorCount == manager->errors.Count();
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_CONTEXTFREEDESUGAR.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection::description;

/***********************************************************************
SetCodeRange
***********************************************************************/

			class SetCodeRangeVisitor : public traverse_visitor::ModuleVisitor
			{
			public:
				ParsingTextRange						range;

				SetCodeRangeVisitor(ParsingTextRange _range)
					:range(_range)
				{
				}

				void Traverse(ParsingTreeCustomBase* node)override
				{
					if (node->codeRange == ParsingTextRange())
					{
						node->codeRange = range;
					}
				}

				void Traverse(ParsingToken& token)override
				{
					if (token.codeRange == ParsingTextRange())
					{
						token.codeRange = range;
					}
				}
			};

			void SetCodeRange(Ptr<WfType> node, parsing::ParsingTextRange codeRange)
			{
				SetCodeRangeVisitor(codeRange).VisitField(node.Obj());
			}

			void SetCodeRange(Ptr<WfExpression> node, parsing::ParsingTextRange codeRange)
			{
				SetCodeRangeVisitor(codeRange).VisitField(node.Obj());
			}

			void SetCodeRange(Ptr<WfStatement> node, parsing::ParsingTextRange codeRange)
			{
				SetCodeRangeVisitor(codeRange).VisitField(node.Obj());
			}

			void SetCodeRange(Ptr<WfDeclaration> node, parsing::ParsingTextRange codeRange)
			{
				SetCodeRangeVisitor(codeRange).VisitField(node.Obj());
			}

			void SetCodeRange(Ptr<WfModule> node, parsing::ParsingTextRange codeRange)
			{
				SetCodeRangeVisitor(codeRange).VisitField(node.Obj());
			}

/***********************************************************************
ContextFreeModuleDesugar
***********************************************************************/

			class ContextFreeDesugarVisitor : public traverse_visitor::ModuleVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				WfClassDeclaration*						surroundingClassDecl = nullptr;
				WfNewInterfaceExpression*				surroundingLambda = nullptr;

				ContextFreeDesugarVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				void Traverse(WfFormatExpression* node)override
				{
					if (node->expandedExpression)
					{
						return;
					}

					List<Ptr<WfExpression>> expressions;
					const wchar_t* reading = node->value.value.Buffer();

					while (*reading)
					{
						const wchar_t* begin = wcsstr(reading, L"$(");
						if (begin)
						{
							Ptr<WfStringExpression> expression = new WfStringExpression;
							expression->codeRange = node->codeRange;
							expression->value.value = WString(reading, vint(begin - reading));
							expressions.Add(expression);
						}
						else
						{
							break;
						}

						const wchar_t* end = begin + 2;
						vint counter = 1;
						while (wchar_t c = *end++)
						{
							switch (c)
							{
							case L'(':
								counter++;
								break;
							case L')':
								counter--;
								break;
							}
							if (counter == 0)
							{
								break;
							}
						}

						if (counter != 0)
						{
							auto error = WfErrors::WrongFormatStringSyntax(node);
							error->errorMessage += L" (Does not find matched close bracket.)";
							manager->errors.Add(error);
							return;
						}
						else
						{
							WString input(begin + 2, vint(end - begin - 3));
							List<Ptr<ParsingError>> errors;
							if (auto expression = WfParseExpression(input, manager->parsingTable, errors))
							{
								expressions.Add(expression);
							}
							FOREACH(Ptr<ParsingError>, originalError, errors)
							{
								auto error = WfErrors::WrongFormatStringSyntax(node);
								error->errorMessage += L" (" + originalError->errorMessage + L")";
								manager->errors.Add(error);
							}
							reading = end;
						}
					}
					if (*reading || expressions.Count() == 0)
					{
						Ptr<WfStringExpression> expression = new WfStringExpression;
						expression->codeRange = node->codeRange;
						expression->value.value = reading;
						expressions.Add(expression);
					}

					if (expressions.Count() > 0)
					{
						Ptr<WfExpression> current = expressions[0];
						FOREACH(Ptr<WfExpression>, expression, From(expressions).Skip(1))
						{
							Ptr<WfBinaryExpression> binary = new WfBinaryExpression;
							binary->codeRange = node->codeRange;
							binary->first = current;
							binary->second = expression;
							binary->op = WfBinaryOperator::Union;
							current = binary;
						}

						node->expandedExpression = current;
						SetCodeRange(node->expandedExpression, node->codeRange);
					}
				}

				void Traverse(WfAutoPropertyDeclaration* node)override
				{
					if (node->expandedDeclarations.Count() > 0)
					{
						return;
					}

					bool needVariable = false;
					bool needVirtual = false;
					bool needEvent = false;
					bool needProperty = false;

					if (surroundingClassDecl)
					{
						switch (surroundingClassDecl->kind)
						{
						case WfClassKind::Class:
							{
								needVariable = true;
								needVirtual = false;
								needEvent = node->configObserve == WfAPObserve::Observable;
								needProperty = true;
							}
							break;
						case WfClassKind::Interface:
							{
								needVariable = false;
								needVirtual = true;
								needEvent = node->configObserve == WfAPObserve::Observable;
								needProperty = true;
							}
							break;
						}
					}
					else if (surroundingLambda)
					{
						needVariable = true;
						needVirtual = false;
						needEvent = false;
						needProperty = false;
					}

					auto varName = L"<prop>" + node->name.value;
					auto getterName = L"Get" + node->name.value;
					auto setterName = L"Set" + node->name.value;
					auto eventName = node->name.value + L"Changed";

					if (needVariable && node->expression)
					{
						auto decl = MakePtr<WfVariableDeclaration>();
						node->expandedDeclarations.Add(decl);

						decl->name.value = varName;
						decl->type = CopyType(node->type);
						decl->expression = CopyExpression(node->expression);

						auto att = MakePtr<WfAttribute>();
						att->category.value = L"cpp";
						att->name.value = L"Private";
						decl->attributes.Add(att);
					}

					{
						auto decl = MakePtr<WfFunctionDeclaration>();
						node->expandedDeclarations.Add(decl);

						decl->anonymity = WfFunctionAnonymity::Named;
						decl->name.value = getterName;
						decl->returnType = CopyType(node->type);

						if (!needVirtual)
						{
							auto refExpr = MakePtr<WfReferenceExpression>();
							refExpr->name.value = varName;

							auto returnStat = MakePtr<WfReturnStatement>();
							returnStat->expression = refExpr;

							auto block = MakePtr<WfBlockStatement>();
							block->statements.Add(returnStat);
							decl->statement = block;
						}
					}

					if (!needVirtual || node->configConst == WfAPConst::Writable)
					{
						auto decl = MakePtr<WfFunctionDeclaration>();
						node->expandedDeclarations.Add(decl);

						decl->anonymity = WfFunctionAnonymity::Named;
						decl->name.value = setterName;

						if (node->configConst == WfAPConst::Readonly)
						{
							auto att = MakePtr<WfAttribute>();
							att->category.value = L"cpp";
							att->name.value = L"Protected";
							decl->attributes.Add(att);
						}

						{
							auto argument = MakePtr<WfFunctionArgument>();
							argument->name.value = L"<value>";
							argument->type = CopyType(node->type);
							decl->arguments.Add(argument);
						}
						{
							auto voidType = MakePtr<WfPredefinedType>();
							voidType->name = WfPredefinedTypeName::Void;
							decl->returnType = voidType;
						}

						if (!needVirtual)
						{
							auto block = MakePtr<WfBlockStatement>();
							decl->statement = block;

							auto createBinaryExpr = [&](WfBinaryOperator op)
							{
								auto refArgument = MakePtr<WfReferenceExpression>();
								refArgument->name.value = L"<value>";

								auto refVar = MakePtr<WfReferenceExpression>();
								refVar->name.value = varName;

								auto binaryExpr = MakePtr<WfBinaryExpression>();
								binaryExpr->first = refVar;
								binaryExpr->second = refArgument;
								binaryExpr->op = op;

								return binaryExpr;
							};

							if (node->configObserve == WfAPObserve::Observable)
							{
								auto ifStat = MakePtr<WfIfStatement>();
								ifStat->expression = createBinaryExpr(WfBinaryOperator::NE);

								auto trueBlock = MakePtr<WfBlockStatement>();
								ifStat->trueBranch = trueBlock;

								{
									auto stat = MakePtr<WfExpressionStatement>();
									stat->expression = createBinaryExpr(WfBinaryOperator::Assign);
									trueBlock->statements.Add(stat);
								}
								{
									auto refEvent = MakePtr<WfReferenceExpression>();
									refEvent->name.value = eventName;

									auto callExpr = MakePtr<WfCallExpression>();
									callExpr->function = refEvent;

									auto stat = MakePtr<WfExpressionStatement>();
									stat->expression = callExpr;
									trueBlock->statements.Add(stat);
								}

								block->statements.Add(ifStat);
							}
							else
							{
								auto stat = MakePtr<WfExpressionStatement>();
								stat->expression = createBinaryExpr(WfBinaryOperator::Assign);

								block->statements.Add(stat);
							}
						}
					}

					if (needEvent)
					{
						auto decl = MakePtr<WfEventDeclaration>();
						node->expandedDeclarations.Add(decl);

						decl->name.value = eventName;
					}

					if (needProperty)
					{
						auto decl = MakePtr<WfPropertyDeclaration>();
						node->expandedDeclarations.Add(decl);

						decl->type = CopyType(node->type);
						decl->name.value = node->name.value;
						decl->getter.value = getterName;
						if (node->configConst == WfAPConst::Writable)
						{
							decl->setter.value = setterName;
						}
						if (node->configObserve == WfAPObserve::Observable)
						{
							decl->valueChangedEvent.value = eventName;
						}
					}

					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						auto classMember = MakePtr<WfClassMember>();
						decl->classMember = classMember;

						classMember->kind = WfClassMemberKind::Normal;
						if (surroundingLambda)
						{
							if (decl->name.value == getterName)
							{
								classMember->kind = WfClassMemberKind::Override;
							}
							else if (decl->name.value == setterName)
							{
								if (node->configConst == WfAPConst::Writable)
								{
									classMember->kind = WfClassMemberKind::Override;
								}
							}
						}

						SetCodeRange(decl, node->codeRange);
					}
				}

				void Traverse(WfCastResultInterfaceDeclaration* node)override
				{
					auto decl = MakePtr<WfClassDeclaration>();
					node->expandedDeclarations.Add(decl);
					decl->kind = WfClassKind::Interface;
					decl->constructorType = WfConstructorType::SharedPtr;
					decl->name.value = node->name.value;
					decl->baseTypes.Add(CopyType(node->baseType));

					auto funcDecl = MakePtr<WfFunctionDeclaration>();
					decl->declarations.Add(funcDecl);
					{
						funcDecl->classMember = MakePtr<WfClassMember>();
						funcDecl->classMember->kind = WfClassMemberKind::Static;
					}
					funcDecl->anonymity = WfFunctionAnonymity::Named;
					funcDecl->name.value = L"CastResult";
					funcDecl->returnType = CopyType(node->elementType);
					{
						auto argument = MakePtr<WfFunctionArgument>();
						funcDecl->arguments.Add(argument);
						argument->name.value = L"value";
						argument->type = GetTypeFromTypeInfo(TypeInfoRetriver<Value>::CreateTypeInfo().Obj());
					}
					{
						auto block = MakePtr<WfBlockStatement>();
						funcDecl->statement = block;

						auto refValue = MakePtr<WfReferenceExpression>();
						refValue->name.value = L"value";

						auto castExpr = MakePtr<WfTypeCastingExpression>();
						castExpr->strategy = WfTypeCastingStrategy::Strong;
						castExpr->type = CopyType(node->elementType);
						castExpr->expression = refValue;

						auto stat = MakePtr<WfReturnStatement>();
						stat->expression = castExpr;

						block->statements.Add(stat);
					}

					SetCodeRange(Ptr<WfDeclaration>(decl), node->codeRange);
				}

#define PUSH_SURROUNDING\
					auto o1 = surroundingClassDecl;\
					auto o2 = surroundingLambda;\
					surroundingClassDecl = nullptr;\
					surroundingLambda = nullptr;\

#define POP_SURROUNDING\
					surroundingClassDecl = o1;\
					surroundingLambda = o2;\

				void Visit(WfClassDeclaration* node)override
				{
					PUSH_SURROUNDING
					surroundingClassDecl = node;
					traverse_visitor::DeclarationVisitor::Visit(node);
					POP_SURROUNDING
				}

				void Visit(WfNewInterfaceExpression* node)override
				{
					PUSH_SURROUNDING
					surroundingLambda = node;
					traverse_visitor::ExpressionVisitor::Visit(node);
					POP_SURROUNDING
				}

#undef PUSH_SURROUNDING
#undef POP_SURROUNDING
			};

			void ContextFreeModuleDesugar(WfLexicalScopeManager* manager, Ptr<WfModule> module)
			{
				ContextFreeDesugarVisitor(manager).VisitField(module.Obj());
			}

			void ContextFreeDeclarationDesugar(WfLexicalScopeManager* manager, Ptr<WfDeclaration> declaration)
			{
				ContextFreeDesugarVisitor(manager).VisitField(declaration.Obj());
			}

			void ContextFreeStatementDesugar(WfLexicalScopeManager* manager, Ptr<WfStatement> statement)
			{
				ContextFreeDesugarVisitor(manager).VisitField(statement.Obj());
			}

			void ContextFreeExpressionDesugar(WfLexicalScopeManager* manager, Ptr<WfExpression> expression)
			{
				ContextFreeDesugarVisitor(manager).VisitField(expression.Obj());
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_ERRORS.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
WfErrors
***********************************************************************/

			Ptr<parsing::ParsingError> WfErrors::WrongFormatStringSyntax(WfExpression* node)
			{
				return new ParsingError(node, L"A0: Wrong format string syntax.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongSimpleObserveExpression(WfExpression* node)
			{
				return new ParsingError(node, L"A1: Simple observe expression should observe a property under the observed object.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongSimpleObserveEvent(WfExpression* node)
			{
				return new ParsingError(node, L"A2: Simple observe expression should react to an event under the observed object.");
			}

			Ptr<parsing::ParsingError> WfErrors::EmptyObserveEvent(WfExpression* node)
			{
				return new ParsingError(node, L"A2: Observe expression should react to at least one event.");
			}

			Ptr<parsing::ParsingError> WfErrors::ObserveNotInBind(WfExpression* node)
			{
				return new ParsingError(node, L"A3: Observe expression should appear in a bind expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ObserveInObserveEvent(WfExpression* node)
			{
				return new ParsingError(node, L"A4: Observe expression should not appear in the event expression in another observe expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::BindInBind(WfExpression* node)
			{
				return new ParsingError(node, L"A4: Bind expression should not appear in another bind expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::AttachInBind(WfExpression* node)
			{
				return new ParsingError(node, L"A4: Attach expression should not appear in another bind expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::DetachInBind(WfExpression* node)
			{
				return new ParsingError(node, L"A4: Detach expression should not appear in another bind expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorMixMapAndList(WfExpression* node)
			{
				return new ParsingError(node, L"A5: Key-value pairs are not allowed in list constructor expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorMixStructAndList(WfExpression* node)
			{
				return new ParsingError(node, L"A5: Field-value pairs are expected in struct constructor expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedConstructorField(WfReferenceExpression* node)
			{
				return new ParsingError(node, L"A5: The same field cannot be assigned more than once in struct constructor expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorMixClassAndInterface(WfNewClassExpression* node)
			{
				return new ParsingError(node, L"A6: Arguments are not allowed in new interface expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorMixClassAndInterface(WfNewInterfaceExpression* node)
			{
				return new ParsingError(node, L"A6: Members are not allowed in new class expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ScopeNameIsNotExpression(WfExpression* node, Ptr<WfLexicalScopeName> scopeName)
			{
				return new ParsingError(node, L"A7: Symbol \"" + scopeName->GetFriendlyName() + L"\" cannot be used as an expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::EventIsNotExpression(WfExpression* node, reflection::description::IEventInfo* eventInfo)
			{
				return new ParsingError(node, L"A7: Event \"" + eventInfo->GetName() + L"\" of type \"" + eventInfo->GetOwnerTypeDescriptor()->GetTypeName() + L"\" cannot be used as an expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionIsNotScopeName(WfExpression* node)
			{
				return new ParsingError(node, L"A8: Expression does not reference to a declaration.");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionIsNotEvent(WfExpression* node)
			{
				return new ParsingError(node, L"A8: Expression does not reference to an event.");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionCannotResolveType(WfExpression* node, Ptr<WfLexicalSymbol> symbol)
			{
				return new ParsingError(node, L"A9: Expression referencing to symbol \"" + symbol->name + L"\" failed to resolve its type.");
			}

			Ptr<parsing::ParsingError> WfErrors::NullCannotResolveType(WfExpression* node)
			{
				return new ParsingError(node, L"A9: Expression \"null\" failed to resolve its type.");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorCannotResolveType(WfExpression* node)
			{
				return new ParsingError(node, L"A9: Expression \"{}\" failed to resolve its type.");
			}

			Ptr<parsing::ParsingError> WfErrors::OrderedLambdaCannotResolveType(WfExpression* node)
			{
				return new ParsingError(node, L"A9: Ordered lambda expression failed to resolve its type.");
			}

			Ptr<parsing::ParsingError> WfErrors::NullCannotImplicitlyConvertToType(WfExpression* node, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A10: Expression \"null\" cannot implicitly convert to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorCannotImplicitlyConvertToType(WfExpression* node, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A10: Expression \"{}\" cannot implicitly convert to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::OrderedLambdaCannotImplicitlyConvertToType(WfExpression* node, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A10: Ordered lambda expression cannot implicitly convert to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionCannotImplicitlyConvertToType(WfExpression* node, reflection::description::ITypeInfo* fromType, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A10: Expression of type \"" + fromType->GetTypeFriendlyName() + L"\" cannot implicitly convert to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionCannotExplicitlyConvertToType(WfExpression* node, reflection::description::ITypeInfo* fromType, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A11: Expression of type \"" + fromType->GetTypeFriendlyName() + L"\" cannot explicitly convert to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotWeakCastToType(WfExpression* node, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A12: Expression cannot weakly cast to \"" + toType->GetTypeFriendlyName() + L"\" because it cannot be \"null\".");
			}

			Ptr<parsing::ParsingError> WfErrors::IntegerLiteralOutOfRange(WfIntegerExpression* node)
			{
				return new ParsingError(node, L"A13: Integer literal \"" + node->value.value + L"\" out of range.");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotMergeTwoType(WfExpression* node, reflection::description::ITypeInfo* firstType, reflection::description::ITypeInfo* secondType)
			{
				return new ParsingError(node, L"A14: Failed to merge type \"" + firstType->GetTypeFriendlyName() + L"\" with type \"" + secondType->GetTypeFriendlyName() + L"\" together to calculate the result type.");
			}

			Ptr<parsing::ParsingError> WfErrors::RangeShouldBeInteger(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A15: Elements in a range expression should be integer, not \"" + type->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::UnaryOperatorOnWrongType(WfUnaryExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A16: Unary operator cannot apply on expression of type \"" + type->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::BinaryOperatorOnWrongType(WfBinaryExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A16: Binary operator cannot apply on expression of type \"" + type->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::IndexOperatorOnWrongType(WfBinaryExpression* node, reflection::description::ITypeInfo* containerType)
			{
				return new ParsingError(node, L"A17: Container of type \"" + containerType->GetTypeFriendlyName() + L"\" cannot be accessed using index.");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionIsNotCollection(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A18: Expression of type \"" + type->GetTypeFriendlyName() + L"\" is not an enumerable type.");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionIsNotFunction(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A19: Expression of type \"" + type->GetTypeFriendlyName() + L"\" is not an invokable function type.");
			}

			Ptr<parsing::ParsingError> WfErrors::FunctionArgumentCountMismatched(parsing::ParsingTreeCustomBase* node, vint expectedCount, const ResolveExpressionResult& function)
			{
				return new ParsingError(node, L"A20: Function " + function.GetFriendlyName() + L"\" is not allowed to call with " + itow(expectedCount) + L" arguments.");
			}

			Ptr<parsing::ParsingError> WfErrors::FunctionArgumentTypeMismatched(parsing::ParsingTreeCustomBase* node, const ResolveExpressionResult& function, vint index, reflection::description::ITypeInfo* fromType, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A21: The " + itow(index) + L"-th argument of function " + function.GetFriendlyName() + L" cannot implicitly convert from \"" + fromType->GetTypeFriendlyName() + L"\" to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotPickOverloadedFunctions(parsing::ParsingTreeCustomBase* node, collections::List<ResolveExpressionResult>& results)
			{
				WString description;
				FOREACH_INDEXER(ResolveExpressionResult, result, index, results)
				{
					description += L"\r\n\t";
					description += result.GetFriendlyName();
				}
				return new ParsingError(node, L"A22: Cannot decide which function to call in multiple targets: " + description + L".");
			}

			Ptr<parsing::ParsingError> WfErrors::ClassContainsNoConstructor(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A23: Class \"" + type->GetTypeFriendlyName() + L"\" does not contain any constructor.");
			}

			Ptr<parsing::ParsingError> WfErrors::InterfaceContainsNoConstructor(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				Ptr<ITypeInfo> proxy = TypeInfoRetriver<Ptr<IValueInterfaceProxy>>::CreateTypeInfo();
				return new ParsingError(node, L"A23: Interface \"" + type->GetTypeFriendlyName() + L"\" does not contain any constructor receiving an \"" + proxy->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ConstructorReturnTypeMismatched(WfExpression* node, const ResolveExpressionResult& function, reflection::description::ITypeInfo* fromType, reflection::description::ITypeInfo* toType)
			{
				return new ParsingError(node, L"A24: The return type of " + function.GetFriendlyName() + L" cannot implicitly convert from \"" + fromType->GetTypeFriendlyName() + L"\" to \"" + toType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionIsNotLeftValue(WfExpression* node, const ResolveExpressionResult& result)
			{
				return new ParsingError(node, L"A25: " + result.GetFriendlyName(true) + L" is not assignable.");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotCallMemberOutsideOfClass(WfExpression* node, const ResolveExpressionResult& result)
			{
				return new ParsingError(node, L"A26: " + result.GetFriendlyName(true) + L" cannot be called as a static member.");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotCallMemberInStaticFunction(WfExpression* node, const ResolveExpressionResult& result)
			{
				return new ParsingError(node, L"A27: " + result.GetFriendlyName(true) + L" cannot be called in static functions of its class or interface.");
			}

			Ptr<parsing::ParsingError> WfErrors::FieldCannotInitializeUsingEachOther(WfExpression* node, const ResolveExpressionResult& result)
			{
				return new ParsingError(node, L"A28: " + result.GetFriendlyName(true) + L" cannot be used to initialize other fields in the same type or new interface expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongThisExpression(WfExpression* node)
			{
				return new ParsingError(node, L"A29: The \"this\" expression can only be used in class methods or functions in new interface expressions");
			}

			Ptr<parsing::ParsingError> WfErrors::IncorrectTypeForUnion(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A30: Expression of type \"" + type->GetTypeFriendlyName() + L"\" cannot be used in union (&) expression because it is not string or flag enum.");
			}

			Ptr<parsing::ParsingError> WfErrors::IncorrectTypeForIntersect(WfExpression* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"A30: Expression of type \"" + type->GetTypeFriendlyName() + L"\" cannot be used in intersect (|) expression because it is not flag enum.");
			}

			Ptr<parsing::ParsingError> WfErrors::ExpressionIsNotConstant(WfExpression* node)
			{
				return new ParsingError(node, L"A31: Expression is not constant. A constant expression consists of:\r\n"
					L"\tconstant primitive values\r\n"
					L"\tenum items\r\n"
					L"\tconstant unary (+, -, not) expressions\r\n"
					L"\tconstant binary (|) expressions\r\n"
					L"\tconstant range expressions\r\n"
					L"\tconstant constructor expressions (to create values of structs, lists or dictionarys)\r\n"
					L"\ttype() or typeof() expressions.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongVoidType(WfType* node)
			{
				return new ParsingError(node, L"B0: Void is not a type for a value.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongInterfaceType(WfType* node)
			{
				return new ParsingError(node, L"B1: Interface is not a type for a value.");
			}

			Ptr<parsing::ParsingError> WfErrors::RawPointerToNonReferenceType(WfType* node, reflection::description::ITypeInfo* typeInfo)
			{
				return new ParsingError(node, L"B2: A raw pointer" + (typeInfo ? L" \"" + typeInfo->GetTypeFriendlyName() + L"\"" : L"") + L" should point to a class or interface.");
			}

			Ptr<parsing::ParsingError> WfErrors::SharedPointerToNonReferenceType(WfType* node, reflection::description::ITypeInfo* typeInfo)
			{
				return new ParsingError(node, L"B3: A shared pointer" + (typeInfo ? L" \"" + typeInfo->GetTypeFriendlyName() + L"\"" : L"") + L" should point to a class or interface.");
			}

			Ptr<parsing::ParsingError> WfErrors::NullableToNonReferenceType(WfType* node, reflection::description::ITypeInfo* typeInfo)
			{
				return new ParsingError(node, L"B4: A nullable value" + (typeInfo ? L" \"" + typeInfo->GetTypeFriendlyName() + L"\"" : L"") + L" should point to a struct.");
			}

			Ptr<parsing::ParsingError> WfErrors::ChildOfNonReferenceType(WfType* node)
			{
				return new ParsingError(node, L"B5: Only a reference type have child types.");
			}

			Ptr<parsing::ParsingError> WfErrors::TypeNotExists(WfType* node, Ptr<WfLexicalScopeName> scopeName)
			{
				return new ParsingError(node, L"B6: \"" + scopeName->GetFriendlyName() + L"\" is not a type.");
			}

			Ptr<parsing::ParsingError> WfErrors::TypeNotExists(WfType* node, Ptr<WfLexicalSymbol> symbol)
			{
				return new ParsingError(node, L"B6: \"" + symbol->name + L"\" is not a type.");
			}

			Ptr<parsing::ParsingError> WfErrors::TypeNotForValue(WfType* node, reflection::description::ITypeInfo* typeInfo)
			{
				return new ParsingError(node, L"B7: Type \"" + typeInfo->GetTypeFriendlyName() + L"\" is not a type for a value.");
			}

			Ptr<parsing::ParsingError> WfErrors::BreakNotInLoop(WfStatement* node)
			{
				return new ParsingError(node, L"C0: Break statement should appear in a loop.");
			}

			Ptr<parsing::ParsingError> WfErrors::ContinueNotInLoop(WfStatement* node)
			{
				return new ParsingError(node, L"C1: Continue statement should appear in a loop.");
			}

			Ptr<parsing::ParsingError> WfErrors::RethrowNotInCatch(WfStatement* node)
			{
				return new ParsingError(node, L"C2: Re-raise exception statement should appear in catch.");
			}

			Ptr<parsing::ParsingError> WfErrors::TryMissCatchAndFinally(WfStatement* node)
			{
				return new ParsingError(node, L"C3: Try statement should not appear without both catch and finally.");
			}

			Ptr<parsing::ParsingError> WfErrors::ReturnMissExpression(WfStatement* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"C4: Return statement requires an expression of type \"" + type->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::DeleteNonRawPointer(WfStatement* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"C5: Delete statement cannot apply on an expression of type \"" + type->GetTypeFriendlyName() + L"\", which is expected to be a raw pointer.");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotReturnExpression(WfStatement* node)
			{
				return new ParsingError(node, L"C6: Return statement cannot have a value inside void functions, constructors, destructors or $coroutine expressions.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongCoPause(WfStatement* node)
			{
				return new ParsingError(node, L"C7: $pause statement should appear inside a $coroutine expression, and it cannot be nested.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongCoOperator(WfStatement* node)
			{
				return new ParsingError(node, L"C8: $Operator statement should appear inside a coroutine function (which has a functiona body like ${} or $Provider{}).");
			}

			Ptr<parsing::ParsingError> WfErrors::CoProviderNotExists(WfCoProviderStatement* node, collections::List<WString>& candidates)
			{
				WString description;
				FOREACH(WString, candidate, candidates)
				{
					description += L"\r\n\t";
					description += candidate;
				}
				if (node->name.value == L"")
				{
					return new ParsingError(node, L"C9: Cannot find a coroutine provider based on the function return type, all of the following types do not exist: " + description + L".");
				}
				else
				{
					return new ParsingError(node, L"C9: Cannot find a coroutine provider based on the provider name \"" + node->name.value.Right(node->name.value.Length() - 1) + L"\", all of the following types do not exist: " + description + L".");
				}
			}

			Ptr<parsing::ParsingError> WfErrors::CoOperatorNotExists(WfReturnStatement* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"C10: Static function \"ReturnAndExit\" does not exist in coroutine provider \"" + type->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::CoOperatorNotExists(WfCoOperatorStatement* node, reflection::description::ITypeInfo* type)
			{
				auto operatorName = node->opName.value.Right(node->opName.value.Length() - 1);
				if (node->varName.value == L"")
				{
					return new ParsingError(node, L"C10: Static functions \"" + operatorName + L"AndPause\" and \"" + operatorName + L"AndRead\" do not exist in coroutine provider \"" + type->GetTypeFriendlyName() + L"\".");
				}
				else
				{
					return new ParsingError(node, L"C10: Static function \"" + operatorName + L"AndRead\" does not exist in coroutine provider \"" + type->GetTypeFriendlyName() + L"\".");
				}
			}

			Ptr<parsing::ParsingError> WfErrors::CoOperatorCannotResolveResultType(WfCoOperatorStatement* node, collections::List<reflection::description::ITypeInfo*>& types)
			{
				auto operatorName = node->opName.value.Right(node->opName.value.Length() - 1);
				if (node->arguments.Count() == 0)
				{
					return new ParsingError(node, L"C11: Failed to resolve the result type of coroutine operator \"" + operatorName + L"\", since there is no argument.");
				}
				else
				{
					WString description;
					FOREACH(ITypeInfo*, type, types)
					{
						description += L"\r\n\t";
						description += type->GetTypeFriendlyName();
					}
					return new ParsingError(node, L"C11: Failed to resolve the result type of coroutine operator \"" + operatorName + L"\", no appropriate static function \"CastResult\" is found in the following types. It requires exactly one argument of type \"object\" with a return type which is not \"void\": " + description + L".");
				}
			}

			Ptr<parsing::ParsingError> WfErrors::CoProviderCreateNotExists(WfCoProviderStatement* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"C12: The required static function \"Create\" does not exist in coroutine provider \"" + type->GetTypeFriendlyName() + L"\". It is required to have exactly one argument of a function type, which consumes a pointer type and returns system::Coroutine^");
			}

			Ptr<parsing::ParsingError> WfErrors::CoProviderCreateAndRunNotExists(WfCoProviderStatement* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"C12: The required static function \"CreateAndRun\" does not exist in coroutine provider \"" + type->GetTypeFriendlyName() + L"\". It is required to have exactly one argument of a function type, which consumes a pointer type and returns system::Coroutine^");
			}

			Ptr<parsing::ParsingError> WfErrors::FunctionShouldHaveName(WfDeclaration* node)
			{
				return new ParsingError(node, L"D0: Function should have a name.");
			}

			Ptr<parsing::ParsingError> WfErrors::FunctionShouldHaveImplementation(WfDeclaration* node)
			{
				return new ParsingError(node, L"D0: Function should be implemented.");
			}

			Ptr<parsing::ParsingError> WfErrors::InterfaceMethodShouldNotHaveImplementation(WfDeclaration* node)
			{
				return new ParsingError(node, L"D0: Interface method should not be implemented.");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedDeclaration(WfDeclaration* node, const WString& firstDeclarationCategory)
			{
				return new ParsingError(node, L"D1: Duplicated declaration \"" + node->name.value + L"\", it has already beed defined as a " + firstDeclarationCategory + L".");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedSymbol(WfDeclaration* node, Ptr<WfLexicalSymbol> symbol)
			{
				return new ParsingError(node, L"D2: Duplicated symbol \"" + symbol->name + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedSymbol(WfFunctionArgument* node, Ptr<WfLexicalSymbol> symbol)
			{
				return new ParsingError(node, L"D2: Duplicated symbol \"" + symbol->name + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedSymbol(WfStatement* node, Ptr<WfLexicalSymbol> symbol)
			{
				return new ParsingError(node, L"D2: Duplicated symbol \"" + symbol->name + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedSymbol(WfExpression* node, Ptr<WfLexicalSymbol> symbol)
			{
				return new ParsingError(node, L"D2: Duplicated symbol \"" + symbol->name + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::InterfaceMethodNotImplemented(WfNewInterfaceExpression* node, reflection::description::IMethodInfo* method)
			{
				auto result = ResolveExpressionResult::Method(method);
				return new ParsingError(node, L"D3: Interface method not implemented: " + result.GetFriendlyName() + L".");
			}

			Ptr<parsing::ParsingError> WfErrors::InterfaceMethodNotFound(WfFunctionDeclaration* node, reflection::description::ITypeInfo* interfaceType, reflection::description::ITypeInfo* methodType)
			{
				return new ParsingError(node, L"D4: Interface \"" + interfaceType->GetTypeFriendlyName() + L"\" does not contain method \"" + node->name.value + L"\" which is in type \"" + methodType->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotPickOverloadedInterfaceMethods(WfExpression* node, collections::List<ResolveExpressionResult>& results)
			{
				WString description;
				FOREACH_INDEXER(ResolveExpressionResult, result, index, results)
				{
					description += L"\r\n\t";
					description += result.GetFriendlyName();
				}
				return new ParsingError(node, L"D5: Cannot decide which function to implement in multiple targets: " + description + L".");
			}

			Ptr<parsing::ParsingError> WfErrors::CannotPickOverloadedImplementMethods(WfFunctionDeclaration* node, reflection::description::ITypeInfo* type)
			{
				return new ParsingError(node, L"D6: There are some other methods named \"" + node->name.value + L"\" whose types are also \"" + type->GetTypeFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongDeclaration(WfEventDeclaration* node)
			{
				return new ParsingError(node, L"D7: Event \"" + node->name.value + L"\" cannot be defined outside of classes or interfaces.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongDeclaration(WfPropertyDeclaration* node)
			{
				return new ParsingError(node, L"D7: Property \"" + node->name.value + L"\" cannot be defined outside of classes or interfaces.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongDeclaration(WfConstructorDeclaration* node)
			{
				return new ParsingError(node, L"D7: Constructor cannot be defined outside of classes.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongDeclaration(WfDestructorDeclaration* node)
			{
				return new ParsingError(node, L"D7: Destructor cannot be defined outside of classes.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongDeclaration(WfAutoPropertyDeclaration* node)
			{
				return new ParsingError(node, L"D7: Auto-property cannot be defined outside of classes.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongDeclarationInInterfaceConstructor(WfDeclaration* node)
			{
				return new ParsingError(node, L"D8: \"" + node->name.value + L"\" cannot be defined in an new interface expression, only functions, variables and auto-properties are allowed.");
			}

			Ptr<parsing::ParsingError> WfErrors::EnumValuesNotConsecutiveFromZero(WfEnumDeclaration* node)
			{
				return new ParsingError(node, L"D9: Item values in enum \"" + node->name.value + L"\" should be consecutive and starts from zero, like 0, 1, 2, 3, 4, ...");
			}

			Ptr<parsing::ParsingError> WfErrors::FlagValuesNotConsecutiveFromZero(WfEnumDeclaration* node)
			{
				return new ParsingError(node, L"D9: Item values in flag enum \"" + node->name.value + L"\" should be consecutive powers of 2 and starts from zero, like 0, 1, 2, 4, 8, ...");
			}

			Ptr<parsing::ParsingError> WfErrors::FlagValueNotExists(WfEnumItemIntersection* node, WfEnumDeclaration* owner)
			{
				return new ParsingError(node, L"D10: Item \"" + node->name.value + L" does not exists in the current flag enum \"" + owner->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedEnumValue(WfEnumItem* node, WfEnumDeclaration* owner)
			{
				return new ParsingError(node, L"D11: Item \"" + node->name.value + L" already exists in the current enum \"" + owner->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::StructContainsNonValueType(WfStructMember* node, WfStructDeclaration* owner)
			{
				return new ParsingError(node, L"D12: Type of member \"" + node->name.value + L"\" of struct \"" + owner->name.value + L"\" is not value type.");
			}

			Ptr<parsing::ParsingError> WfErrors::StructRecursivelyIncludeItself(WfStructDeclaration* node, const WString& path)
			{
				return new ParsingError(node, L"D13: Struct \"" + node->name.value + L"\" recursively include itself via \"" + path + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedStructMember(WfStructMember* node, WfStructDeclaration* owner)
			{
				return new ParsingError(node, L"D14: Member \"" + node->name.value + L"\" already exists in struct \"" + owner->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::AttributeNotExists(WfAttribute* node)
			{
				return new ParsingError(node, L"D15: Attribute \"" + node->category.value + L":" + node->name.value + L"\" does not exist.");
			}

			Ptr<parsing::ParsingError> WfErrors::AttributeMissValue(WfAttribute* node)
			{
				return new ParsingError(node, L"D15: Value of attribute \"" + node->category.value + L":" + node->name.value + L"\" is missing.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongUsingPathWildCard(WfModuleUsingPath* node)
			{
				return new ParsingError(node, L"E0: Wild card \"*\" should only appear in the last item of the using path and should appear once.");
			}

			Ptr<parsing::ParsingError> WfErrors::TopQualifiedSymbolNotExists(parsing::ParsingTreeCustomBase* node, const WString& name)
			{
				return new ParsingError(node, L"F0: Top qualified symbol \"" + name + L"\" does not exist.");
			}

			Ptr<parsing::ParsingError> WfErrors::ChildSymbolNotExists(parsing::ParsingTreeCustomBase* node, Ptr<WfLexicalScopeName> scopeName, const WString& name)
			{
				return new ParsingError(node, L"F1: Symbol \"" + name + L"\" does not exist in \"" + scopeName->GetFriendlyName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::MemberNotExists(parsing::ParsingTreeCustomBase* node, reflection::description::ITypeDescriptor* typeDescriptor, const WString& name)
			{
				return new ParsingError(node, L"F1: Member \"" + name + L"\" does not exist in \"" + typeDescriptor->GetTypeName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ReferenceNotExists(parsing::ParsingTreeCustomBase* node, const WString& name)
			{
				return new ParsingError(node, L"F2: Symbol \"" + name + L"\" does not exist in the current scope.");
			}

			Ptr<parsing::ParsingError> WfErrors::TooManyTargets(parsing::ParsingTreeCustomBase* node, collections::List<ResolveExpressionResult>& results, const WString& name)
			{
				WString description;
				FOREACH_INDEXER(ResolveExpressionResult, result, index, results)
				{
					description += L"\r\n\t";
					description += result.GetFriendlyName();
				}
				return new ParsingError(node, L"F3: Symbol \"" + name + L"\" references to too many targets: " + description + L".");
			}

			Ptr<parsing::ParsingError> WfErrors::EnumItemNotExists(parsing::ParsingTreeCustomBase* node, reflection::description::ITypeDescriptor* typeDescriptor, const WString& name)
			{
				return new ParsingError(node, L"F2: Enum item \"" + name + L"\" does not exist in enum type \"" + typeDescriptor->GetTypeName() + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongClassMemberConfig(WfDeclaration* node)
			{
				return new ParsingError(node, L"G1: Class member \"" + node->name.value + L"\" cannot be static or override because it is not a function or a auto-property.");
			}

			Ptr<parsing::ParsingError> WfErrors::FunctionInNewTypeExpressionCannotBeStatic(WfDeclaration* node)
			{
				return new ParsingError(node, L"G1: Class member \"" + node->name.value + L"\" cannot be static because it is in a new interface expression.");
			}

			Ptr<parsing::ParsingError> WfErrors::AutoPropertyCannotBeNormalOutsideOfClass(WfDeclaration* node)
			{
				return new ParsingError(node, L"G1: Auto property \"" + node->name.value + L"\" cannot be normal outside of classes or interfaces.");
			}

			Ptr<parsing::ParsingError> WfErrors::AutoPropertyCannotBeStatic(WfDeclaration* node)
			{
				return new ParsingError(node, L"G1: Auto property \"" + node->name.value + L"\" cannot be static  .");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongClassMember(WfNamespaceDeclaration* node)
			{
				return new ParsingError(node, L"G2: Namespace \"" + node->name.value + L"\" cannot be a class member.");
			}

			Ptr<parsing::ParsingError> WfErrors::PropertyGetterNotFound(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G3: Cannot find the getter \"" + node->getter.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\". A property getter should be a non-static method in the same type.");
			}

			Ptr<parsing::ParsingError> WfErrors::PropertySetterNotFound(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G3: Cannot find the setter \"" + node->setter.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\". A property setter should be a non-static method in the same type.");
			}

			Ptr<parsing::ParsingError> WfErrors::PropertyEventNotFound(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G3: Cannot find the event \"" + node->valueChangedEvent.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::TooManyPropertyGetter(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G4: Too many symbols found for the getter \"" + node->getter.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::TooManyPropertySetter(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G4: Too many symbols found for the setter \"" + node->setter.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::TooManyPropertyEvent(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G4: Too many symbols found for the event \"" + node->valueChangedEvent.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::PropertyGetterTypeMismatched(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G5: Cannot match the getter \"" + node->getter.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\". A property getter should have no argument, and its return type should be identical to the property type.");
			}

			Ptr<parsing::ParsingError> WfErrors::PropertySetterTypeMismatched(WfPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G5: Cannot match the setter \"" + node->getter.value + L"\" of property \"" + node->name.value + L"\" in type \"" + classDecl->name.value + L"\". A property setter should have no return value and have only one argument, and the argument type should be identical to the property type.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongBaseType(WfClassDeclaration* node, WfType* type)
			{
				return new ParsingError(node, L"G6: A base type of the type \"" + node->name.value + L"\" should be another custom type, it cannot be any predefined type, pointer type, shared pointer type, nullable type, collection type, or function type");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongBaseTypeOfClass(WfClassDeclaration* node, reflection::description::ITypeDescriptor* type)
			{
				return new ParsingError(node, L"G6: Base type \"" + type->GetTypeName() + L"\" of class \"" + node->name.value + L"\" is not a class, or it is a class but it is not aggregatable.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongBaseTypeOfInterface(WfClassDeclaration* node, reflection::description::ITypeDescriptor* type)
			{
				return new ParsingError(node, L"G6: Base type \"" + type->GetTypeName() + L"\" of interface \"" + node->name.value + L"\" is not an interface.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongInterfaceBaseType(WfClassDeclaration* node, reflection::description::ITypeDescriptor* type)
			{
				Ptr<ITypeInfo> proxy = TypeInfoRetriver<Ptr<IValueInterfaceProxy>>::CreateTypeInfo();
				return new ParsingError(node, L"G6: Interface \"" + type->GetTypeName() + L"\" should contain a constructor receiving an \"" + proxy->GetTypeFriendlyName() + L"\" to be the base type of \"" + node->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::ClassWithInterfaceConstructor(WfClassDeclaration* node)
			{
				return new ParsingError(node, L"G7: Cannot use interface constructor type on class \"" + node->name.value + L"\".");
			}

			Ptr<parsing::ParsingError> WfErrors::OverrideShouldImplementInterfaceMethod(WfFunctionDeclaration* node)
			{
				return new ParsingError(node, L"G8: Function \"" + node->name.value + L"\" cannot be override because it doesn't implement any interface methods.");
			}

			Ptr<parsing::ParsingError> WfErrors::OverrideShouldImplementInterfaceMethod(WfAutoPropertyDeclaration* node)
			{
				return new ParsingError(node, L"G8: Auto-property \"" + node->name.value + L"\" cannot be override because it doesn't implement any interface methods.");
			}

			Ptr<parsing::ParsingError> WfErrors::MissingFieldType(WfVariableDeclaration* node)
			{
				return new ParsingError(node, L"G9: Type of field \"" + node->name.value + L"\" is missing.");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedBaseClass(WfClassDeclaration* node, reflection::description::ITypeDescriptor* type)
			{
				return new ParsingError(node, L"G10: Class \"" + node->name.value + L"\" inherits from another class \"" + type->GetTypeName() + L"\" for multiple times.");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedBaseInterface(WfClassDeclaration* node, reflection::description::ITypeDescriptor* type)
			{
				return new ParsingError(node, L"G10: Interface \"" + type->GetTypeName() + L"\" directly or indirectly inherits from itself.");
			}

			Ptr<parsing::ParsingError> WfErrors::WrongBaseConstructorCall(WfBaseConstructorCall* node, reflection::description::ITypeDescriptor* type)
			{
				return new ParsingError(node, L"G11: Type \"" + type->GetTypeName() + L"\" is not a base type of this class.");
			}

			Ptr<parsing::ParsingError> WfErrors::DuplicatedBaseConstructorCall(WfBaseConstructorCall* node, reflection::description::ITypeDescriptor* type)
			{
				return new ParsingError(node, L"G12: Base type \"" + type->GetTypeName() + L"\" has already been initialized.");
			}
			
			Ptr<parsing::ParsingError> WfErrors::TooManyDestructor(WfDestructorDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G13: Class \"" + classDecl->name.value + L"\" has too many destructors.");
			}

			Ptr<parsing::ParsingError> WfErrors::AutoPropertyShouldBeInitialized(WfAutoPropertyDeclaration* node)
			{
				return new ParsingError(node, L"G13: Auto property \"" + node->name.value + L"\" should be initialized.");
			}

			Ptr<parsing::ParsingError> WfErrors::AutoPropertyCannotBeInitializedInInterface(WfAutoPropertyDeclaration* node, WfClassDeclaration* classDecl)
			{
				return new ParsingError(node, L"G13: Auto property \"" + node->name.value + L"\" cannot be initialized in interface \"" + classDecl->name.value + L"\".");
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_EXPANDBINDEXPRESSION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
WfObservingDependency
***********************************************************************/

			WfObservingDependency::WfObservingDependency(WfObservingDependency& dependency)
				:dependencies(dependency.dependencies)
			{
				CopyFrom(inputObserves, dependency.inputObserves);
			}

			WfObservingDependency::WfObservingDependency(DependencyGroup& _dependencies)
				:dependencies(_dependencies)
			{
			}

			WfObservingDependency::WfObservingDependency(DependencyGroup& _dependencies, ObserveList& _inputObserves)
				:dependencies(_dependencies)
			{
				CopyFrom(inputObserves, _inputObserves);
			}

			void WfObservingDependency::AddInternal(WfExpression* observe, WfExpression* dependedObserve)
			{
				auto index = dependencies.Keys().IndexOf(dependedObserve);
				if (index == -1)
				{
					dependencies.Add(dependedObserve, observe);
				}
				else if (!dependencies.GetByIndex(index).Contains(observe))
				{
					dependencies.Add(dependedObserve, observe);
				}
			}

			void WfObservingDependency::Prepare(WfExpression* observe)
			{
				AddInternal(0, observe);

				if (!outputObserves.Contains(observe))
				{
					outputObserves.Add(observe);
				}
			}

			void WfObservingDependency::Add(WfExpression* observe)
			{
				Add(observe, *this);
			}

			void WfObservingDependency::Add(WfExpression* observe, WfObservingDependency& dependency)
			{
				Prepare(observe);
				FOREACH(WfExpression*, dependedObserve, dependency.inputObserves)
				{
					AddInternal(observe, dependedObserve);
				}
			}

			void WfObservingDependency::TurnToInput()
			{
				if (outputObserves.Count() > 0)
				{
					CopyFrom(inputObserves, outputObserves);
					outputObserves.Clear();
				}
			}

			void WfObservingDependency::Cleanup()
			{
				SortedList<WfExpression*> all;
				CopyFrom(all, From(dependencies.Keys()).Distinct());

				vint count = dependencies.Keys().Count();
				for (vint i = 0; i < count; i++)
				{
					const auto& values = dependencies.GetByIndex(i);
					if (values.Contains(0) && values.Count()>1)
					{
						dependencies.Remove(dependencies.Keys()[i], 0);
					}

					FOREACH(WfExpression*, value, values)
					{
						all.Remove(value);
					}
				}

				FOREACH(WfExpression*, observe, all)
				{
					dependencies.Add(0, observe);
				}
			}

/***********************************************************************
GetObservingDependency
***********************************************************************/

			class GetObservingDependencyVisitor
				: public traverse_visitor::ExpressionVisitor
				, public traverse_visitor::VirtualExpressionVisitor
			{
			public:
				WfLexicalScopeManager*				manager;
				WfObservingDependency&				dependency;

				GetObservingDependencyVisitor(WfLexicalScopeManager* _manager, WfObservingDependency& _dependency)
					:manager(_manager)
					, dependency(_dependency)
				{
				}

				void VisitField(WfExpression* node)override
				{
					node->Accept(this);
				}

				void VisitField(WfType* node)override
				{
					// No need to traverse inside a type
				}

				void VisitField(WfStatement* node)override
				{
					// No need to traverse inside a statement
				}

				void VisitField(WfDeclaration* node)override
				{
					// No need to traverse inside a declaration
				}

				void Dispatch(WfVirtualExpression* node)override
				{
					node->Accept(static_cast<traverse_visitor::VirtualExpressionVisitor*>(this));
				}

				void Visit(WfMemberExpression* node)override
				{
					WfObservingDependency parent(dependency);
					GetObservingDependency(manager, node->parent, parent);
					parent.TurnToInput();

					if (dependency.inputObserves.Count() == 0)
					{
						auto memberResult = manager->expressionResolvings[node];
						if (memberResult.propertyInfo)
						{
							auto td = memberResult.propertyInfo->GetOwnerTypeDescriptor();
							auto ev = memberResult.propertyInfo->GetValueChangedEvent();
							if (!ev)
							{
								ev = td->GetEventByName(memberResult.propertyInfo->GetName() + L"Changed", true);
							}
							if (ev)
							{
								dependency.Add(node, parent);
							}
						}
					}
				}

				void Visit(WfObserveExpression* node)override
				{
					WfObservingDependency parent(dependency);
					GetObservingDependency(manager, node->parent, parent);
					parent.TurnToInput();

					dependency.Add(node, parent);
					dependency.TurnToInput();
					GetObservingDependency(manager, node->expression, dependency);
				}
			};

			void GetObservingDependency(WfLexicalScopeManager* manager, Ptr<WfExpression> expression, WfObservingDependency& dependency)
			{
				GetObservingDependencyVisitor visitor(manager, dependency);
				expression->Accept(&visitor);
			}

/***********************************************************************
Copy(Type|Expression|Statement|Declaration)
***********************************************************************/

			Ptr<WfType> CopyType(Ptr<WfType> type)
			{
				return copy_visitor::ModuleVisitor().CreateField(type);
			}

			Ptr<WfExpression> CopyExpression(Ptr<WfExpression> expression)
			{
				return copy_visitor::ModuleVisitor().CreateField(expression);
			}

			Ptr<WfStatement> CopyStatement(Ptr<WfStatement> statement)
			{
				return copy_visitor::ModuleVisitor().CreateField(statement);
			}

			Ptr<WfDeclaration> CopyDeclaration(Ptr<WfDeclaration> declaration)
			{
				return copy_visitor::ModuleVisitor().CreateField(declaration);
			}

/***********************************************************************
ExpandObserveExpression
***********************************************************************/

			Ptr<WfExpression> CreateReference(const WString& name)
			{
				auto ref = MakePtr<WfReferenceExpression>();
				ref->name.value = name;
				return ref;
			}

			class ExpandObserveExpressionVisitor
				: public copy_visitor::ExpressionVisitor
				, public copy_visitor::VirtualExpressionVisitor
			{
			public:
				Dictionary<WfExpression*, WString>&		cacheNames;
				Dictionary<WString, WString>&			referenceReplacement;

				ExpandObserveExpressionVisitor(Dictionary<WfExpression*, WString>& _cacheNames, collections::Dictionary<WString, WString>& _referenceReplacement)
					:cacheNames(_cacheNames)
					, referenceReplacement(_referenceReplacement)
				{
				}

				vl::Ptr<WfExpression> CreateField(vl::Ptr<WfExpression> from)override
				{
					return ExpandObserveExpression(from.Obj(), cacheNames, referenceReplacement);
				}

				vl::Ptr<WfType> CreateField(vl::Ptr<WfType> from)override
				{
					return CopyType(from);
				}

				vl::Ptr<WfStatement> CreateField(vl::Ptr<WfStatement> from)override
				{
					return CopyStatement(from);
				}

				vl::Ptr<WfDeclaration> CreateField(vl::Ptr<WfDeclaration> from)override
				{
					return CopyDeclaration(from);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> Dispatch(WfVirtualExpression* node)override
				{
					node->Accept((WfVirtualExpression::IVisitor*)this);
					return result;
				}

				void Visit(WfReferenceExpression* node)override
				{
					vint index = referenceReplacement.Keys().IndexOf(node->name.value);
					if (index == -1)
					{
						result = CopyExpression(node);
					}
					else
					{
						result = CreateReference(referenceReplacement.Values()[index]);
					}
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					result = CopyExpression(node);
				}

				void Visit(WfLetExpression* node)override
				{
					Dictionary<WString, WString> overrided;
					auto expr = MakePtr<WfLetExpression>();

					FOREACH(Ptr<WfLetVariable>, var, node->variables)
					{
						auto key = var->name.value;
						vint index = referenceReplacement.Keys().IndexOf(key);
						if (index != -1)
						{
							auto value = referenceReplacement.Values()[index];
							referenceReplacement.Remove(key);
							overrided.Add(key, value);
						}

						auto newVar = MakePtr<WfLetVariable>();
						newVar->name.value = key;
						newVar->value = CreateField(var->value);
						expr->variables.Add(newVar);
					}

					expr->expression = CreateField(node->expression);
					CopyFrom(referenceReplacement, overrided, true);

					result = expr;
				}

				void Visit(WfObserveExpression* node)override
				{
					if (cacheNames.Count() == 0)
					{
						result = CopyExpression(node);
					}
					else if (node->observeType == WfObserveType::SimpleObserve)
					{
						auto expr = MakePtr<WfMemberExpression>();
						expr->parent = CreateField(node->parent);
						expr->name.value = node->expression.Cast<WfReferenceExpression>()->name.value;
						result = expr;
					}
					else
					{
						auto var = MakePtr<WfLetVariable>();
						var->name.value = node->name.value;
						var->value = CreateField(node->parent);

						auto expr = MakePtr<WfLetExpression>();
						expr->variables.Add(var);
						expr->expression = CreateField(node->expression);
						result = expr;
					}
				}

				void Visit(WfBindExpression* node)override
				{
					result = CopyExpression(node);
				}
			};

			Ptr<WfExpression> ExpandObserveExpression(WfExpression* expression, collections::Dictionary<WfExpression*, WString>& cacheNames, collections::Dictionary<WString, WString>& referenceReplacement, bool useCache)
			{
				if (!expression)
				{
					return nullptr;
				}

				if (useCache)
				{
					vint index = cacheNames.Keys().IndexOf(expression);
					if (index != -1)
					{
						return CreateReference(cacheNames.Values()[index]);
					}
				}

				ExpandObserveExpressionVisitor visitor(cacheNames, referenceReplacement);
				expression->Accept(&visitor);
				return visitor.result.Cast<WfExpression>();
			}

/***********************************************************************
DecodeObserveExpression
***********************************************************************/

			void DecodeObserveExpression(WfLexicalScopeManager* manager, WfExpression* observe, List<IEventInfo*>& events, WfExpression*& parent)
			{
				if (auto observeExpr = dynamic_cast<WfObserveExpression*>(observe))
				{
					parent = observeExpr->parent.Obj();
					FOREACH(Ptr<WfExpression>, eventExpr, observeExpr->events)
					{
						auto result = manager->expressionResolvings[eventExpr.Obj()];
						events.Add(result.eventInfo);
					}
				}
				else if (auto memberExpr = dynamic_cast<WfMemberExpression*>(observe))
				{
					parent = memberExpr->parent.Obj();
					auto result = manager->expressionResolvings[memberExpr];
					auto td = result.propertyInfo->GetOwnerTypeDescriptor();
					auto ev = result.propertyInfo->GetValueChangedEvent();
					if (!ev)
					{
						ev = td->GetEventByName(result.propertyInfo->GetName() + L"Changed", true);
					}
					events.Add(ev);
				}
			}

/***********************************************************************
CreateDefaultValue
***********************************************************************/

			Ptr<WfExpression> CreateDefaultValue(ITypeInfo* elementType)
			{
				auto valueType = elementType->GetTypeDescriptor()->GetValueType();
				if (elementType->GetDecorator()==ITypeInfo::TypeDescriptor && valueType != nullptr)
				{
					auto value = valueType->CreateDefault();
					switch (GetTypeFlag(elementType))
					{
					case TypeFlag::Enum:
						{
							auto intExpr = MakePtr<WfIntegerExpression>();
							intExpr->value.value = u64tow(elementType->GetTypeDescriptor()->GetEnumType()->FromEnum(value));

							auto inferExpr = MakePtr<WfInferExpression>();
							inferExpr->expression = inferExpr;
							inferExpr->type = GetTypeFromTypeInfo(CreateTypeInfoFromTypeFlag(TypeFlag::U8).Obj());

							auto castExpr = MakePtr<WfTypeCastingExpression>();
							castExpr->strategy = WfTypeCastingStrategy::Strong;
							castExpr->expression = inferExpr;
							castExpr->type = GetTypeFromTypeInfo(elementType);

							return castExpr;
						}
					case TypeFlag::String:
						{
							auto stringExpr = MakePtr<WfStringExpression>();
							elementType->GetTypeDescriptor()->GetSerializableType()->Serialize(value, stringExpr->value.value);
							return stringExpr;
						}
						break;
					case TypeFlag::Struct:
						if (elementType->GetTypeDescriptor()->GetSerializableType() == nullptr)
						{
							auto ctorExpr = MakePtr<WfConstructorExpression>();

							auto castExpr = MakePtr<WfTypeCastingExpression>();
							castExpr->strategy = WfTypeCastingStrategy::Strong;
							castExpr->expression = ctorExpr;
							castExpr->type = GetTypeFromTypeInfo(elementType);

							return castExpr;
						}
					default:
						{
							auto td = elementType->GetTypeDescriptor();
							if (td == description::GetTypeDescriptor<bool>())
							{
								auto expr = MakePtr<WfLiteralExpression>();
								expr->value = WfLiteralValue::False;
								return expr;
							}
							else if (td == description::GetTypeDescriptor<float>()
								|| td == description::GetTypeDescriptor<double>())
							{
								auto valueExpr = MakePtr<WfFloatingExpression>();
								valueExpr->value.value = L"0";

								auto inferExpr = MakePtr<WfInferExpression>();
								inferExpr->expression = valueExpr;
								inferExpr->type = GetTypeFromTypeInfo(elementType);

								return inferExpr;
							}
							else if (td == description::GetTypeDescriptor<vint8_t>()
								|| td == description::GetTypeDescriptor<vint16_t>()
								|| td == description::GetTypeDescriptor<vint32_t>()
								|| td == description::GetTypeDescriptor<vint64_t>()
								|| td == description::GetTypeDescriptor<vuint8_t>()
								|| td == description::GetTypeDescriptor<vuint16_t>()
								|| td == description::GetTypeDescriptor<vuint32_t>()
								|| td == description::GetTypeDescriptor<vuint64_t>())
							{
								auto valueExpr = MakePtr<WfIntegerExpression>();
								valueExpr->value.value = L"0";

								auto inferExpr = MakePtr<WfInferExpression>();
								inferExpr->expression = valueExpr;
								inferExpr->type = GetTypeFromTypeInfo(elementType);

								return inferExpr;
							}
							else
							{
								auto stringExpr = MakePtr<WfStringExpression>();
								elementType->GetTypeDescriptor()->GetSerializableType()->Serialize(value, stringExpr->value.value);

								auto castExpr = MakePtr<WfTypeCastingExpression>();
								castExpr->strategy = WfTypeCastingStrategy::Strong;
								castExpr->expression = stringExpr;
								castExpr->type = GetTypeFromTypeInfo(elementType);

								return castExpr;
							}
						}
					}
				}
				else
				{
					auto nullExpr = MakePtr<WfLiteralExpression>();
					nullExpr->value = WfLiteralValue::Null;

					auto inferExpr = MakePtr<WfInferExpression>();
					inferExpr->expression = nullExpr;
					inferExpr->type = GetTypeFromTypeInfo(elementType);

					return inferExpr;
				}
			}

/***********************************************************************
CreateBindWritableVariable
***********************************************************************/

			Ptr<WfVariableDeclaration> CreateWritableVariable(const WString& name, ITypeInfo* type, Ptr<WfExpression> value = nullptr)
			{
				auto decl = MakePtr<WfVariableDeclaration>();
				decl->name.value = name;
				decl->type = GetTypeFromTypeInfo(type);
				decl->expression = value ? value : CreateDefaultValue(type);
				return decl;
			}

			Ptr<WfVariableStatement> CreateWritableVariableStatement(const WString& name, ITypeInfo* type, Ptr<WfExpression> value = nullptr)
			{
				auto stat = MakePtr<WfVariableStatement>();
				stat->variable = CreateWritableVariable(name, type, value);
				return stat;
			}

/***********************************************************************
IValueListener::GetSubscription
***********************************************************************/

			Ptr<WfFunctionDeclaration> CreateListenerGetSubscriptionFunction()
			{
				auto func = MakePtr<WfFunctionDeclaration>();
				func->name.value = L"GetSubscription";
				func->anonymity = WfFunctionAnonymity::Named;
				{
					auto typeInfo = TypeInfoRetriver<IValueSubscription*>::CreateTypeInfo();
					func->returnType = GetTypeFromTypeInfo(typeInfo.Obj());
				}

				auto block = MakePtr<WfBlockStatement>();
				func->statement = block;
				{
					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression =  CreateReference(L"<subscription>");
					block->statements.Add(returnStat);
				}
				return func;
			}

/***********************************************************************
IValueListener::GetStopped
***********************************************************************/

			Ptr<WfFunctionDeclaration> CreateListenerGetStoppedFunction()
			{
				auto func = MakePtr<WfFunctionDeclaration>();
				func->name.value = L"GetStopped";
				func->anonymity = WfFunctionAnonymity::Named;
				{
					auto typeInfo = TypeInfoRetriver<bool>::CreateTypeInfo();
					func->returnType = GetTypeFromTypeInfo(typeInfo.Obj());
				}

				auto block = MakePtr<WfBlockStatement>();
				func->statement = block;
				{
					auto listenersRef = CreateReference(L"<bind-listeners>");

					auto keysExpr = MakePtr<WfMemberExpression>();
					keysExpr->parent = listenersRef;
					keysExpr->name.value = L"Keys";

					auto containsExpr = MakePtr<WfMemberExpression>();
					containsExpr->parent = keysExpr;
					containsExpr->name.value = L"Contains";

					auto callExpr = MakePtr<WfCallExpression>();
					callExpr->function = containsExpr;
					callExpr->arguments.Add(MakePtr<WfThisExpression>());

					auto notExpr = MakePtr<WfUnaryExpression>();
					notExpr->op = WfUnaryOperator::Not;
					notExpr->operand = callExpr;

					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression = notExpr;
					block->statements.Add(returnStat);
				}
				return func;
			}

/***********************************************************************
IValueListener::StopListening
***********************************************************************/

			Ptr<WfFunctionDeclaration> CreateListenerStopListeningFunction()
			{
				auto func = MakePtr<WfFunctionDeclaration>();
				func->name.value = L"StopListening";
				func->anonymity = WfFunctionAnonymity::Named;
				{
					auto typeInfo = TypeInfoRetriver<bool>::CreateTypeInfo();
					func->returnType = GetTypeFromTypeInfo(typeInfo.Obj());
				}

				auto block = MakePtr<WfBlockStatement>();
				func->statement = block;
				{
					auto ifStat = MakePtr<WfIfStatement>();
					block->statements.Add(ifStat);
					{
						auto listenersRef = CreateReference(L"<bind-listeners>");

						auto keysExpr = MakePtr<WfMemberExpression>();
						keysExpr->parent = listenersRef;
						keysExpr->name.value = L"Keys";

						auto containsExpr = MakePtr<WfMemberExpression>();
						containsExpr->parent = keysExpr;
						containsExpr->name.value = L"Contains";

						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = containsExpr;
						callExpr->arguments.Add(MakePtr<WfThisExpression>());
						ifStat->expression = callExpr;
					}

					auto ifBlock = MakePtr<WfBlockStatement>();
					ifStat->trueBranch = ifBlock;
					{
						auto listenersRef = CreateReference(L"<bind-listeners>");

						auto removeExpr = MakePtr<WfMemberExpression>();
						removeExpr->parent = listenersRef;
						removeExpr->name.value = L"Remove";

						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = removeExpr;
						callExpr->arguments.Add(MakePtr<WfThisExpression>());

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = callExpr;
						ifBlock->statements.Add(stat);
					}
					{
						auto literal = MakePtr<WfLiteralExpression>();
						literal->value = WfLiteralValue::True;

						auto returnStat = MakePtr<WfReturnStatement>();
						returnStat->expression = literal;
						ifBlock->statements.Add(returnStat);
					}
				}
				{
					auto literal = MakePtr<WfLiteralExpression>();
					literal->value = WfLiteralValue::False;

					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression = literal;
					block->statements.Add(returnStat);
				}
				return func;
			}

/***********************************************************************
IValueSubscription::Subscribe
***********************************************************************/

			Ptr<WfDeclaration> AssignNormalMember(Ptr<WfDeclaration> decl)
			{
				decl->classMember = MakePtr<WfClassMember>();
				decl->classMember->kind = WfClassMemberKind::Normal;
				return decl;
			}

			Ptr<WfDeclaration> AssignOverrideMember(Ptr<WfDeclaration> decl)
			{
				decl->classMember = MakePtr<WfClassMember>();
				decl->classMember->kind = WfClassMemberKind::Override;
				return decl;
			}

			Ptr<WfFunctionDeclaration> CreateBindSubscribeFunction()
			{
				auto func = MakePtr<WfFunctionDeclaration>();
				func->name.value = L"Subscribe";
				func->anonymity = WfFunctionAnonymity::Named;
				{
					auto typeInfo = TypeInfoRetriver<Ptr<IValueListener>>::CreateTypeInfo();
					func->returnType = GetTypeFromTypeInfo(typeInfo.Obj());
				}
				{
					auto typeInfo = TypeInfoRetriver<Func<void(Value)>>::CreateTypeInfo();
					auto argument = MakePtr<WfFunctionArgument>();
					argument->name.value = L"<bind-callback>";
					argument->type = GetTypeFromTypeInfo(typeInfo.Obj());
					func->arguments.Add(argument);
				}

				auto block = MakePtr<WfBlockStatement>();
				func->statement = block;
				{
					auto notOpenedRef = MakePtr<WfUnaryExpression>();
					notOpenedRef->op = WfUnaryOperator::Not;
					notOpenedRef->operand = CreateReference(L"<bind-opened>");

					auto ifStat = MakePtr<WfIfStatement>();
					block->statements.Add(ifStat);
					ifStat->expression = notOpenedRef;

					auto block = MakePtr<WfBlockStatement>();
					ifStat->trueBranch = block;

					{
						auto assignExpr = MakePtr<WfBinaryExpression>();
						assignExpr->op = WfBinaryOperator::Assign;
						assignExpr->first = CreateReference(L"<bind-opened>");

						auto trueValue = MakePtr<WfLiteralExpression>();
						trueValue->value = WfLiteralValue::True;
						assignExpr->second = trueValue;

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = assignExpr;
						block->statements.Add(stat);
					}
					{
						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = CreateReference(L"<bind-initialize>");

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = callExpr;
						block->statements.Add(stat);
					}
				}
				{
					auto thisExpr = MakePtr<WfThisExpression>();
					block->statements.Add(CreateWritableVariableStatement(L"<subscription>", TypeInfoRetriver<IValueSubscription*>::CreateTypeInfo().Obj(), thisExpr));
				}
				{
					auto newListener = MakePtr<WfNewInterfaceExpression>();
					{
						auto typeInfo = TypeInfoRetriver<Ptr<IValueListener>>::CreateTypeInfo();
						newListener->type = GetTypeFromTypeInfo(typeInfo.Obj());
					}
					newListener->declarations.Add(AssignOverrideMember(CreateListenerGetSubscriptionFunction()));
					newListener->declarations.Add(AssignOverrideMember(CreateListenerGetStoppedFunction()));
					newListener->declarations.Add(AssignOverrideMember(CreateListenerStopListeningFunction()));

					auto variable = MakePtr<WfVariableDeclaration>();
					variable->name.value = L"<listener-shared>";
					variable->expression = newListener;
					
					auto variableStat = MakePtr<WfVariableStatement>();
					variableStat->variable = variable;
					block->statements.Add(variableStat);
				}
				{
					auto callbackRef = CreateReference(L"<bind-callback>");

					auto mapRef = CreateReference(L"<bind-listeners>");

					auto func = MakePtr<WfMemberExpression>();
					func->parent = mapRef;
					func->name.value = L"Set";

					auto call = MakePtr<WfCallExpression>();
					call->function = func;
					call->arguments.Add(CreateReference(L"<listener-shared>"));
					call->arguments.Add(callbackRef);

					auto stat = MakePtr<WfExpressionStatement>();
					stat->expression = call;
					block->statements.Add(stat);
				}
				{
					auto listenerRef = CreateReference(L"<listener-shared>");

					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression = listenerRef;
					block->statements.Add(returnStat);
				}
				return func;
			}

/***********************************************************************
ExpandObserveEvent
***********************************************************************/

			Ptr<WfExpression> ExpandObserveEvent(WfLexicalScopeManager* manager, const WString& cacheName, WfExpression* observe, vint eventIndex)
			{
				if (auto observeExpr = dynamic_cast<WfObserveExpression*>(observe))
				{
					if (observeExpr->observeType == WfObserveType::SimpleObserve)
					{
						auto expr = MakePtr<WfMemberExpression>();
						expr->parent = CreateReference(cacheName);
						expr->name.value = observeExpr->events[eventIndex].Cast<WfReferenceExpression>()->name.value;
						return expr;
					}
					else
					{
						Dictionary<WfExpression*, WString> cacheNames;
						Dictionary<WString, WString> referenceReplacement;
						referenceReplacement.Add(observeExpr->name.value, cacheName);
						return ExpandObserveExpression(observeExpr->events[eventIndex].Obj(), cacheNames, referenceReplacement);
					}
				}
				else
				{
					auto memberExpr = dynamic_cast<WfMemberExpression*>(observe);
					auto result = manager->expressionResolvings[memberExpr];
					auto td = result.propertyInfo->GetOwnerTypeDescriptor();
					auto ev = result.propertyInfo->GetValueChangedEvent();
					if (!ev)
					{
						ev = td->GetEventByName(result.propertyInfo->GetName() + L"Changed", true);
					}
					auto eventName = ev->GetName();

					auto expr = MakePtr<WfMemberExpression>();
					expr->parent = CreateReference(cacheName);
					expr->name.value = eventName;

					return expr;
				}
			}

/***********************************************************************
ObserveInfo
***********************************************************************/

			struct CallbackInfo
			{
				WfExpression*									observe;
				IEventInfo*										eventInfo;
				vint											eventIndex;
				WString											handlerName;
				WString											callbackName;
			};

			struct BindCallbackInfo
			{
				Dictionary<WfExpression*, WfExpression*>		observeParents;
				Dictionary<WfExpression*, WString>				cacheNames;
				Dictionary<WString, Ptr<ITypeInfo>>				variableTypes;

				Dictionary<vint, WfExpression*>					orderedObserves;
				Group<WfExpression*, CallbackInfo>				observeCallbackInfos;
			};

/***********************************************************************
CreateBindAttachStatement
***********************************************************************/

			void CreateBindAttachStatement(Ptr<WfBlockStatement> block, WfLexicalScopeManager* manager, WfExpression* observe, BindCallbackInfo& info)
			{
				auto cachedName = info.cacheNames[info.observeParents[observe]];
				FOREACH(CallbackInfo, callbackInfo, info.observeCallbackInfos[observe])
				{
					auto attach = MakePtr<WfAttachEventExpression>();
					attach->event = ExpandObserveEvent(manager, cachedName, observe, callbackInfo.eventIndex);
					attach->function = CreateReference(callbackInfo.callbackName);

					auto assign = MakePtr<WfBinaryExpression>();
					assign->op = WfBinaryOperator::Assign;
					assign->first = CreateReference(callbackInfo.handlerName);
					assign->second = attach;

					auto stat = MakePtr<WfExpressionStatement>();
					stat->expression = assign;
					block->statements.Add(stat);
				}
			}

/***********************************************************************
CreateBindDetachStatement
***********************************************************************/

			void CreateBindDetachStatement(Ptr<WfBlockStatement> block, WfLexicalScopeManager* manager, WfExpression* observe, BindCallbackInfo& info)
			{
				auto cachedName = info.cacheNames[info.observeParents[observe]];
				FOREACH(CallbackInfo, callbackInfo, info.observeCallbackInfos[observe])
				{
					auto detach = MakePtr<WfDetachEventExpression>();
					detach->event = ExpandObserveEvent(manager, cachedName, observe, callbackInfo.eventIndex);
					detach->handler = CreateReference(callbackInfo.handlerName);

					auto stat = MakePtr<WfExpressionStatement>();
					stat->expression = detach;
					block->statements.Add(stat);
				}
			}

/***********************************************************************
CreateBindCacheAssignStatement
***********************************************************************/

			void CreateBindCacheAssignStatement(Ptr<WfBlockStatement> block, WfExpression* observe, BindCallbackInfo& info)
			{
				auto parent = info.observeParents[observe];
				auto name = info.cacheNames[parent];

				auto assign = MakePtr<WfBinaryExpression>();
				assign->op = WfBinaryOperator::Assign;
				assign->first = CreateReference(name);
				Dictionary<WString, WString> referenceReplacement;
				assign->second = ExpandObserveExpression(parent, info.cacheNames, referenceReplacement, false);

				auto stat = MakePtr<WfExpressionStatement>();
				stat->expression = assign;
				block->statements.Add(stat);
			}

/***********************************************************************
IValueSubscription::Update
***********************************************************************/

			Ptr<WfFunctionDeclaration> CreateBindUpdateFunction(BindCallbackInfo& info)
			{
				auto func = MakePtr<WfFunctionDeclaration>();
				func->name.value = L"Update";
				func->anonymity = WfFunctionAnonymity::Named;
				{
					auto typeInfo = TypeInfoRetriver<bool>::CreateTypeInfo();
					func->returnType = GetTypeFromTypeInfo(typeInfo.Obj());
				}

				auto block = MakePtr<WfBlockStatement>();
				func->statement = block;
				{
					auto ifStat = MakePtr<WfIfStatement>();
					block->statements.Add(ifStat);
					{
						auto notExpr = MakePtr<WfUnaryExpression>();
						notExpr->op = WfUnaryOperator::Not;
						notExpr->operand = CreateReference(L"<bind-closed>");
						ifStat->expression = notExpr;
					}

					auto ifBlock = MakePtr<WfBlockStatement>();
					ifStat->trueBranch = ifBlock;
					{
						auto ref = CreateReference(L"<bind-activator>");

						auto call = MakePtr<WfCallExpression>();
						call->function = ref;

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = call;
						ifBlock->statements.Add(stat);
					}
					{
						auto literal = MakePtr<WfLiteralExpression>();
						literal->value = WfLiteralValue::True;

						auto returnStat = MakePtr<WfReturnStatement>();
						returnStat->expression = literal;
						ifBlock->statements.Add(returnStat);
					}
				}
				{
					auto literal = MakePtr<WfLiteralExpression>();
					literal->value = WfLiteralValue::False;

					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression = literal;
					block->statements.Add(returnStat);
				}

				return func;
			}

/***********************************************************************
IValueSubscription::Close
***********************************************************************/

			Ptr<WfFunctionDeclaration> CreateBindCloseFunction(WfLexicalScopeManager* manager, BindCallbackInfo& info)
			{
				auto func = MakePtr<WfFunctionDeclaration>();
				func->name.value = L"Close";
				func->anonymity = WfFunctionAnonymity::Named;
				{
					auto typeInfo = TypeInfoRetriver<bool>::CreateTypeInfo();
					func->returnType = GetTypeFromTypeInfo(typeInfo.Obj());
				}

				auto block = MakePtr<WfBlockStatement>();
				func->statement = block;
				{
					auto ifStat = MakePtr<WfIfStatement>();
					block->statements.Add(ifStat);
					{
						auto notExpr = MakePtr<WfUnaryExpression>();
						notExpr->op = WfUnaryOperator::Not;
						notExpr->operand = CreateReference(L"<bind-closed>");
						ifStat->expression = notExpr;
					}

					auto ifBlock = MakePtr<WfBlockStatement>();
					ifStat->trueBranch = ifBlock;
					{
						auto literal = MakePtr<WfLiteralExpression>();
						literal->value = WfLiteralValue::True;

						auto assign = MakePtr<WfBinaryExpression>();
						assign->op = WfBinaryOperator::Assign;
						assign->first = CreateReference(L"<bind-closed>");
						assign->second = literal;

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = assign;
						ifBlock->statements.Add(stat);
					}
					FOREACH(WfExpression*, observe, info.orderedObserves.Values())
					{
						WString cachedName = info.cacheNames[info.observeParents[observe]];
						CreateBindDetachStatement(ifBlock, manager, observe, info);
					}

					SortedList<WString> callbackFunctions;
					for (vint i = 0; i < info.observeCallbackInfos.Count(); i++)
					{
						const auto& values = info.observeCallbackInfos.GetByIndex(i);
						FOREACH(CallbackInfo, callbackInfo, values)
						{
							callbackFunctions.Add(callbackInfo.callbackName);
						}
					}
					FOREACH_INDEXER(WString, name, index, info.variableTypes.Keys())
					{
						if (!callbackFunctions.Contains(name))
						{
							auto assign = MakePtr<WfBinaryExpression>();
							assign->op = WfBinaryOperator::Assign;
							assign->first = CreateReference(name);
							assign->second = CreateDefaultValue(info.variableTypes.Values()[index].Obj());

							auto stat = MakePtr<WfExpressionStatement>();
							stat->expression = assign;
							ifBlock->statements.Add(stat);
						}
					}
					{
						auto ref = CreateReference(L"<bind-listeners>");

						auto func = MakePtr<WfMemberExpression>();
						func->parent = ref;
						func->name.value = L"Clear";

						auto call = MakePtr<WfCallExpression>();
						call->function = func;

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = call;
						ifBlock->statements.Add(stat);
					}
					{
						auto literal = MakePtr<WfLiteralExpression>();
						literal->value = WfLiteralValue::True;

						auto returnStat = MakePtr<WfReturnStatement>();
						returnStat->expression = literal;
						ifBlock->statements.Add(returnStat);
					}
				}
				{
					auto literal = MakePtr<WfLiteralExpression>();
					literal->value = WfLiteralValue::False;

					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression = literal;
					block->statements.Add(returnStat);
				}

				return func;
			}

/***********************************************************************
ExpandBindExpression
***********************************************************************/

			void ExpandBindExpression(WfLexicalScopeManager* manager, WfBindExpression* node)
			{
				Group<WfExpression*, WfExpression*> group;
				WfObservingDependency dependency(group);
				GetObservingDependency(manager, node->expression, dependency);
				dependency.Cleanup();

				BindCallbackInfo bcInfo;
						
				auto newSubscription = MakePtr<WfNewInterfaceExpression>();
				{
					auto typeInfo = TypeInfoRetriver<Ptr<IValueSubscription>>::CreateTypeInfo();
					newSubscription->type = GetTypeFromTypeInfo(typeInfo.Obj());
				}
				{
					// stable symbol order by sorting them by code
					List<WfExpression*> orderedObserves;

					auto printExpression = [](WfExpression* observe)
					{
						stream::MemoryStream stream;
						{
							stream::StreamWriter writer(stream);
							WfPrint(observe, WString::Empty, writer);
						}
						stream.SeekFromBegin(0);
						{
							stream::StreamReader reader(stream);
							return reader.ReadToEnd();
						}
					};

					CopyFrom(
						orderedObserves,
						From(dependency.dependencies.Keys())
							.Where([](WfExpression* expr)
							{
								return expr != nullptr;
							})
							.OrderBy([&](WfExpression* a, WfExpression* b)
							{
								auto codeA = printExpression(a);
								auto codeB = printExpression(b);
								auto compare = WString::Compare(codeA, codeB);
								if (compare) return compare;
								return a->codeRange.start.index - b->codeRange.start.index;
							})
						);

					FOREACH_INDEXER(WfExpression*, observe, observeIndex, orderedObserves)
					{
						List<IEventInfo*> events;
						WfExpression* parent = 0;
						DecodeObserveExpression(manager, observe, events, parent);

						WString cacheName = L"<bind-cache>" + itow(observeIndex);
						bcInfo.cacheNames.Add(parent, cacheName);
						bcInfo.observeParents.Add(observe, parent);
						bcInfo.orderedObserves.Add(observeIndex, observe);
						{
							auto elementType = manager->expressionResolvings[parent].type;
							bcInfo.variableTypes.Add(cacheName, elementType);
							newSubscription->declarations.Add(AssignNormalMember(CreateWritableVariable(cacheName, elementType.Obj())));
						}

						FOREACH_INDEXER(IEventInfo*, ev, eventIndex, events)
						{
							WString handlerName = L"<bind-handler>" + itow(observeIndex) + L"_" + itow(eventIndex);
							{
								auto elementType = TypeInfoRetriver<Ptr<IEventHandler>>::CreateTypeInfo();
								bcInfo.variableTypes.Add(handlerName, elementType);
								newSubscription->declarations.Add(AssignNormalMember(CreateWritableVariable(handlerName, elementType.Obj())));
							}
						
							WString callbackName = L"<bind-callback>" + itow(observeIndex) + L"_" + itow(eventIndex);
							{
								auto elementType = CopyTypeInfo(ev->GetHandlerType());
								bcInfo.variableTypes.Add(callbackName, elementType);
							}

							CallbackInfo callbackInfo;
							callbackInfo.observe = observe;
							callbackInfo.eventInfo = ev;
							callbackInfo.eventIndex = eventIndex;
							callbackInfo.callbackName = callbackName;
							callbackInfo.handlerName = handlerName;
							bcInfo.observeCallbackInfos.Add(observe, callbackInfo);
						}
					}
					newSubscription->declarations.Add(AssignNormalMember(CreateWritableVariable(L"<bind-opened>", TypeInfoRetriver<bool>::CreateTypeInfo().Obj())));
					newSubscription->declarations.Add(AssignNormalMember(CreateWritableVariable(L"<bind-closed>", TypeInfoRetriver<bool>::CreateTypeInfo().Obj())));
					{
						auto typeInfo = TypeInfoRetriver<Dictionary<Ptr<IValueListener>, Func<void(Value)>>>::CreateTypeInfo();
						auto decl = MakePtr<WfVariableDeclaration>();
						decl->name.value = L"<bind-listeners>";
						decl->type = GetTypeFromTypeInfo(typeInfo.Obj());
						decl->expression = MakePtr<WfConstructorExpression>();
						newSubscription->declarations.Add(AssignNormalMember(decl));
					}
					{
						auto func = MakePtr<WfFunctionDeclaration>();
						func->name.value = L"<bind-activator>";
						func->anonymity = WfFunctionAnonymity::Named;
						func->returnType = GetTypeFromTypeInfo(TypeInfoRetriver<void>::CreateTypeInfo().Obj());
					
						auto block = MakePtr<WfBlockStatement>();
						func->statement = block;
						{
							auto var = MakePtr<WfVariableDeclaration>();
							var->name.value = L"<bind-activator-result>";
							Dictionary<WString, WString> referenceReplacement;
							var->expression = ExpandObserveExpression(node->expression.Obj(), bcInfo.cacheNames, referenceReplacement);

							auto varStat = MakePtr<WfVariableStatement>();
							varStat->variable = var;
							block->statements.Add(varStat);
						}
						{
							auto ref = CreateReference(L"<bind-listeners>");

							auto values = MakePtr<WfMemberExpression>();
							values->parent = ref;
							values->name.value = L"Values";

							auto forStat = MakePtr<WfForEachStatement>();
							block->statements.Add(forStat);
							forStat->name.value = L"<bind-callback>";
							forStat->collection = values;
							forStat->direction = WfForEachDirection::Normal;

							auto forBlock = MakePtr<WfBlockStatement>();
							forStat->statement = forBlock;

							auto refResult = CreateReference(L"<bind-activator-result>");

							auto refFunction = CreateReference(L"<bind-callback>");

							auto cast = MakePtr<WfTypeCastingExpression>();
							cast->expression = refFunction;
							cast->type = GetTypeFromTypeInfo(TypeInfoRetriver<Func<void(Value)>>::CreateTypeInfo().Obj());
							cast->strategy = WfTypeCastingStrategy::Strong;

							auto call = MakePtr<WfCallExpression>();
							call->function = cast;
							call->arguments.Add(refResult);

							auto stat = MakePtr<WfExpressionStatement>();
							stat->expression = call;
							forBlock->statements.Add(stat);
						}
					
						newSubscription->declarations.Add(AssignNormalMember(func));
					}
					FOREACH(WfExpression*, observe, bcInfo.orderedObserves.Values())
					{
						FOREACH(CallbackInfo, callbackInfo, bcInfo.observeCallbackInfos[observe])
						{
							auto func = MakePtr<WfFunctionDeclaration>();
							func->name.value = callbackInfo.callbackName;
							func->anonymity = WfFunctionAnonymity::Named;
							{
								auto genericType = bcInfo.variableTypes[callbackInfo.callbackName]->GetElementType();
								func->returnType = GetTypeFromTypeInfo(genericType->GetGenericArgument(0));
								vint count = genericType->GetGenericArgumentCount();
								for (vint i = 1; i < count; i++)
								{
									auto arg = MakePtr<WfFunctionArgument>();
									arg->name.value = L"<bind-callback-argument>" + itow(i - 1);
									arg->type = GetTypeFromTypeInfo(genericType->GetGenericArgument(i));
									func->arguments.Add(arg);
								}
							}
							auto block = MakePtr<WfBlockStatement>();
							func->statement = block;
							{
								List<WfExpression*> affected;
								affected.Add(observe);
								for (vint i = 0; i < affected.Count(); i++)
								{
									auto current = affected[i];
									vint dependencyIndex = dependency.dependencies.Keys().IndexOf(current);
									if (dependencyIndex != -1)
									{
										FOREACH(WfExpression*, affectedObserve, dependency.dependencies.GetByIndex(dependencyIndex))
										{
											if (affectedObserve && !affected.Contains(affectedObserve))
											{
												affected.Add(affectedObserve);
											}
										}
									}
								}
								affected.Remove(observe);

								FOREACH(WfExpression*, affectedObserve, From(affected).Reverse())
								{
									CreateBindDetachStatement(block, manager, affectedObserve, bcInfo);
								}
								FOREACH(WfExpression*, affectedObserve, affected)
								{
									CreateBindCacheAssignStatement(block, affectedObserve, bcInfo);
								}
								FOREACH(WfExpression*, affectedObserve, affected)
								{
									CreateBindAttachStatement(block, manager, affectedObserve, bcInfo);
								}
							}
							{
								auto ref = CreateReference(L"<bind-activator>");

								auto call = MakePtr<WfCallExpression>();
								call->function = ref;

								auto stat = MakePtr<WfExpressionStatement>();
								stat->expression = call;
								block->statements.Add(stat);
							}

							newSubscription->declarations.Add(AssignNormalMember(func));
						}
					}
					{
						auto func = MakePtr<WfFunctionDeclaration>();
						func->name.value = L"<bind-initialize>";
						func->anonymity = WfFunctionAnonymity::Named;
						func->returnType = GetTypeFromTypeInfo(TypeInfoRetriver<void>::CreateTypeInfo().Obj());
					
						auto block = MakePtr<WfBlockStatement>();
						func->statement = block;
						{
							Group<WfExpression*, WfExpression*> reversedDependencies;
							FOREACH_INDEXER(WfExpression*, key, index, dependency.dependencies.Keys())
							{
								FOREACH(WfExpression*, value, dependency.dependencies.GetByIndex(index))
								{
									if (value)
									{
										reversedDependencies.Add(value, key);
									}
								}
							}

							SortedList<WfExpression*> freeObserves;
							while (reversedDependencies.Count() > 0)
							{
								CopyFrom(
									freeObserves,
									From(reversedDependencies.Keys())
										.Where([&](WfExpression* observe)
										{
											return From(reversedDependencies[observe])
												.All([&](WfExpression* parent)
											{
												return !reversedDependencies.Contains(parent);
											});
										})
									);

								FOREACH(WfExpression*, observe, bcInfo.orderedObserves.Values())
								{
									if (freeObserves.Contains(observe))
									{
										CreateBindCacheAssignStatement(block, observe, bcInfo);
									}
								}

								FOREACH(WfExpression*, observe, freeObserves)
								{
									reversedDependencies.Remove(observe);
								}
								freeObserves.Clear();
							}
						}
						{
							FOREACH(WfExpression*, observe, bcInfo.orderedObserves.Values())
							{
								CreateBindAttachStatement(block, manager, observe, bcInfo);
							}
						}
					
						newSubscription->declarations.Add(AssignNormalMember(func));
					}
				}
				newSubscription->declarations.Add(AssignOverrideMember(CreateBindSubscribeFunction()));
				newSubscription->declarations.Add(AssignOverrideMember(CreateBindUpdateFunction(bcInfo)));
				newSubscription->declarations.Add(AssignOverrideMember(CreateBindCloseFunction(manager, bcInfo)));
				node->expandedExpression = newSubscription;
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_EXPANDNEWCOROUTINEEXPRESSION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
FindCoroutineAwaredStatements
***********************************************************************/

			class FindCoroutineAwaredStatementVisitor : public empty_visitor::StatementVisitor
			{
			public:
				List<WfStatement*>&						awaredStatements;
				bool									awared = false;

				FindCoroutineAwaredStatementVisitor(List<WfStatement*>& _awaredStatements)
					:awaredStatements(_awaredStatements)
				{
				}

				bool Call(Ptr<WfStatement> node)
				{
					if (!node) return false;

					awared = false;
					node->Accept(this);
					if (awared)
					{
						awaredStatements.Add(node.Obj());
					}
					return awared;
				}

				void Dispatch(WfVirtualStatement* node)override
				{
					awared = Call(node->expandedStatement);
				}

				void Dispatch(WfCoroutineStatement* node)override
				{
					awared = true;
				}

				void Visit(WfReturnStatement* node)override
				{
					awared = true;
				}

				void Visit(WfIfStatement* node)override
				{
					bool a = Call(node->trueBranch);
					bool b = Call(node->falseBranch);
					awared = a || b;
				}

				void Visit(WfWhileStatement* node)override
				{
					awared = Call(node->statement);
				}

				void Visit(WfTryStatement* node)override
				{
					bool a = Call(node->protectedStatement);
					bool b = Call(node->catchStatement);
					bool c = Call(node->finallyStatement);
					awared = a || b || c;
				}

				void Visit(WfBlockStatement* node)override
				{
					bool result = false;
					FOREACH(Ptr<WfStatement>, stat, node->statements)
					{
						bool a = Call(stat);
						result |= a;
					}
					awared = result;
				}
			};

			void FindCoroutineAwaredStatements(Ptr<WfStatement> node, List<WfStatement*>& awaredStatements)
			{
				FindCoroutineAwaredStatementVisitor(awaredStatements).Call(node);
			}

/***********************************************************************
FindCoroutineAwaredVariables
***********************************************************************/

			class FindCoroutineAwaredVariableVisitor : public empty_visitor::StatementVisitor
			{
			public:
				List<WfVariableStatement*>&				awaredVariables;

				FindCoroutineAwaredVariableVisitor(List<WfVariableStatement*>& _awaredVariables)
					:awaredVariables(_awaredVariables)
				{
				}

				void Dispatch(WfVirtualStatement* node)override
				{
					node->expandedStatement->Accept(this);
				}

				void Dispatch(WfCoroutineStatement* node)override
				{
				}

				void Visit(WfVariableStatement* node)override
				{
					awaredVariables.Add(node);
				}
			};

			class FindCoroutineAwaredBlockVisitor : public empty_visitor::StatementVisitor
			{
			public:
				List<WfVariableStatement*>&				awaredVariables;

				FindCoroutineAwaredBlockVisitor(List<WfVariableStatement*>& _awaredVariables)
					:awaredVariables(_awaredVariables)
				{
				}

				void Dispatch(WfVirtualStatement* node)override
				{
					// If an virtual node is coroutine awared
					// than its expandedStatement is also in the list
					// no need to find variables again
				}

				void Dispatch(WfCoroutineStatement* node)override
				{
				}

				void Visit(WfBlockStatement* node)override
				{
					FindCoroutineAwaredVariableVisitor visitor(awaredVariables);
					FOREACH(Ptr<WfStatement>, stat, node->statements)
					{
						stat->Accept(&visitor);
					}
				}
			};

			void FindCoroutineAwaredVariables(WfStatement* node, List<WfVariableStatement*>& awaredVariables)
			{
				FindCoroutineAwaredBlockVisitor visitor(awaredVariables);
				node->Accept(&visitor);
			}

/***********************************************************************
FindCoroutineReferenceRenaming
***********************************************************************/

			void FindCoroutineReferenceRenaming(WfLexicalScopeManager* manager, List<WfStatement*>& awaredStatements, List<WfVariableStatement*>& awaredVariables, Dictionary<WfLexicalSymbol*, WString>& referenceRenaming)
			{
				vint renameCounter = 0;
				auto rename = [&](const WString& name)
				{
					if (name.Length() > 0 && name[0] == L'<')
					{
						vint index = INVLOC.FindFirst(name, L">", Locale::None).key;
						auto category = name.Sub(1, index - 1);
						auto local = name.Sub(index + 1, name.Length() - index - 1);
						return L"<co" + itow(renameCounter++) + L"-" + category + L">" + local;
					}
					else
					{
						return L"<co" + itow(renameCounter++) + L">" + name;
					}
				};

				FOREACH(WfVariableStatement*, stat, awaredVariables)
				{
					auto scope = manager->nodeScopes[stat];
					auto symbol = scope->symbols[stat->variable->name.value][0];
					auto name = rename(stat->variable->name.value);
					referenceRenaming.Add(symbol.Obj(), name);
				}

				FOREACH(WfStatement*, stat, awaredStatements)
				{
					if (auto tryStat = dynamic_cast<WfTryStatement*>(stat))
					{
						if (tryStat->catchStatement)
						{
							auto scope = manager->nodeScopes[tryStat->catchStatement.Obj()]->parentScope.Obj();
							auto symbol = scope->symbols[tryStat->name.value][0];
							auto name = rename(tryStat->name.value);
							referenceRenaming.Add(symbol.Obj(), name);
						}
					}
					else if (auto ifStat = dynamic_cast<WfIfStatement*>(stat))
					{
						if (ifStat->name.value != L"")
						{
							auto scope = manager->nodeScopes[ifStat->trueBranch.Obj()]->parentScope.Obj();
							auto symbol = scope->symbols[ifStat->name.value][0];
							auto name = rename(ifStat->name.value);
							referenceRenaming.Add(symbol.Obj(), name);
						}
					}
				}
			}

/***********************************************************************
FlowChart
***********************************************************************/

			class FlowChartNode;

			class FlowChartBranch : public Object
			{
			public:
				Ptr<WfExpression>						condition;
				FlowChartNode*							destination = nullptr;
			};

			enum class FlowChartNodeAction
			{
				None,
				SetPause,
			};

			class FlowChartNode : public Object
			{
			public:
				FlowChartNodeAction						action = FlowChartNodeAction::None;
				bool									embedInBranch = false;
				List<Ptr<WfStatement>>					statements;
				List<Ptr<FlowChartBranch>>				branches;
				FlowChartNode*							destination = nullptr;
				FlowChartNode*							exceptionDestination = nullptr;
				FlowChartNode*							pauseDestination = nullptr;
				WfLexicalSymbol*						exceptionVariable = nullptr;
			};

			class FlowChart : public Object
			{
				typedef Dictionary<WfTryStatement*, Ptr<WfLexicalSymbol>>		TempExVarMap;
			public:
				List<Ptr<FlowChartNode>>				nodes;
				FlowChartNode*							headNode = nullptr;
				FlowChartNode*							lastNode = nullptr;
				TempExVarMap							tempExVars;

				FlowChartNode* CreateNode(FlowChartNode* catchNode)
				{
					auto node = MakePtr<FlowChartNode>();
					node->exceptionDestination = catchNode;
					nodes.Add(node);
					return node.Obj();
				}

				FlowChartNode* AppendNode(FlowChartNode* head, FlowChartNode* catchNode, FlowChartNodeAction action = FlowChartNodeAction::None)
				{
					auto node = CreateNode(catchNode);
					node->action = action;
					if (head)
					{
						CHECK_ERROR(head->destination == nullptr, L"FlowChart::AppendNode(FlowChartNode*, FlowChartNode*, FlowChartNodeAction)#Cannot append a new node to a flow chart node that already has a default destination.");
						head->destination = node;
					}
					return node;
				}

				FlowChartNode* EnsureAppendStatement(FlowChartNode* head, FlowChartNode* catchNode)
				{
					if (head == nullptr)
					{
						return CreateNode(catchNode);
					}
					else if(head->branches.Count() > 0 || head->exceptionDestination != catchNode)
					{
						CHECK_ERROR(head->destination == nullptr, L"FlowChart::EnsureAppendStatement(FlowChartNode*, FlowChartNode*)#Cannot append a statement to a flow chart node that already has a default destination.");
						auto node = CreateNode(catchNode);
						head->destination = node;
						return node;
					}
					else
					{
						return head;
					}
				}
			};

/***********************************************************************
GenerateFlowChart
***********************************************************************/

			class GenerateFlowChartModuleVisitor : public copy_visitor::ModuleVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				Dictionary<WfLexicalSymbol*, WString>&	referenceRenaming;

				GenerateFlowChartModuleVisitor(WfLexicalScopeManager* _manager, Dictionary<WfLexicalSymbol*, WString>& _referenceRenaming)
					:manager(_manager)
					, referenceRenaming(_referenceRenaming)
				{
				}

				void Visit(WfReferenceExpression* node)override
				{
					copy_visitor::ExpressionVisitor::Visit(node);
					auto resolvingResult = manager->expressionResolvings[node];
					vint index = referenceRenaming.Keys().IndexOf(resolvingResult.symbol.Obj());
					if (index != -1)
					{
						result.Cast<WfReferenceExpression>()->name.value = referenceRenaming.Values()[index];
					}
				}
			};

			class GenerateFlowChartStatementVisitor
				: public Object
				, public WfStatement::IVisitor
				, public WfCoroutineStatement::IVisitor
			{
			public:
				enum class ScopeType
				{
					Function,
					Loop,
					TryCatch,
				};

				struct ScopeContext
				{
					ScopeContext*						parent = nullptr;
					ScopeType							type = ScopeType::Function;
					FlowChartNode*						enterNode = nullptr;
					FlowChartNode*						leaveNode = nullptr;
					ScopeContext*						exitStatementScope = nullptr;
					Ptr<WfStatement>					exitStatement;
				};

			public:
				WfLexicalScopeManager*					manager;
				SortedList<WfStatement*>&				awaredStatements;
				Dictionary<WfLexicalSymbol*, WString>&	referenceRenaming;
				Ptr<FlowChart>							flowChart;
				FlowChartNode*							headNode;
				FlowChartNode*							catchNode;
				ScopeContext*							scopeContext;
				FlowChartNode*							resultHead = nullptr;
				FlowChartNode*							resultLast = nullptr;

				GenerateFlowChartStatementVisitor(WfLexicalScopeManager* _manager, SortedList<WfStatement*>& _awaredStatements, Dictionary<WfLexicalSymbol*, WString>& _referenceRenaming, Ptr<FlowChart> _flowChart, FlowChartNode* _headNode, FlowChartNode* _catchNode, ScopeContext* _scopeContext)
					:manager(_manager)
					, awaredStatements(_awaredStatements)
					, referenceRenaming(_referenceRenaming)
					, flowChart(_flowChart)
					, headNode(_headNode)
					, catchNode(_catchNode)
					, scopeContext(_scopeContext)
				{
				}

#define COPY_AST(STATEMENT) GenerateFlowChartModuleVisitor(manager, referenceRenaming).CreateField(STATEMENT)

				void AppendAwaredStatement(FlowChartNode* catchNode, ScopeContext* scopeContext, Ptr<WfStatement> statement)
				{
					if (!resultHead)
					{
						resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
						resultLast = resultHead;
					}
					resultLast = Execute(resultHead, catchNode, scopeContext, statement).value;
				}

				void AppendUnawaredCopiedStatement(FlowChartNode* catchNode, ScopeContext* scopeContext, Ptr<WfStatement> statement)
				{
					if (!resultHead)
					{
						resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
						resultLast = resultHead;
					}
					resultHead->statements.Add(statement);
				}

				ScopeContext* InlineScopeExitCode(ScopeType untilScopeType, bool exclusive)
				{
					auto current = scopeContext;
					while (current)
					{
						if (exclusive && current->type == untilScopeType) break;
						if (current->exitStatement)
						{
							AppendAwaredStatement(catchNode, current->exitStatementScope, current->exitStatement);
						}
						if (!exclusive && current->type == untilScopeType) break;
						current = current->parent;
					}
					return current;
				}

				static Pair<FlowChartNode*, FlowChartNode*> Execute(WfLexicalScopeManager* manager, SortedList<WfStatement*>& awaredStatements, Dictionary<WfLexicalSymbol*, WString>& referenceRenaming, Ptr<FlowChart> flowChart, FlowChartNode* headNode, FlowChartNode* catchNode, ScopeContext* scopeContext, Ptr<WfStatement> statement)
				{
					GenerateFlowChartStatementVisitor visitor(manager, awaredStatements, referenceRenaming, flowChart, headNode, catchNode, scopeContext);
					if (awaredStatements.Contains(statement.Obj()))
					{
						statement->Accept(&visitor);
					}
					else
					{
						visitor.AppendUnawaredCopiedStatement(catchNode, scopeContext, COPY_AST(statement));
					}
					return{ visitor.resultHead,visitor.resultLast };
				}

				Pair<FlowChartNode*, FlowChartNode*> Execute(FlowChartNode* headNode, FlowChartNode* catchNode, ScopeContext* scopeContext, Ptr<WfStatement> statement)
				{
					return Execute(manager, awaredStatements, referenceRenaming, flowChart, headNode, catchNode, scopeContext, statement);
				}

				void Visit(WfBreakStatement* node)override
				{
					auto targetContext = InlineScopeExitCode(ScopeType::Loop, false);
					resultLast->destination = targetContext->leaveNode;
				}

				void Visit(WfContinueStatement* node)override
				{
					auto targetContext = InlineScopeExitCode(ScopeType::Loop, true);
					resultLast->destination = targetContext->enterNode;
				}

				void Visit(WfReturnStatement* node)override
				{
					auto targetContext = InlineScopeExitCode(ScopeType::Function, false);
					AppendUnawaredCopiedStatement(catchNode, scopeContext, COPY_AST(node));
					resultLast->destination = targetContext->leaveNode;
				}

				void Visit(WfDeleteStatement* node)override
				{
					AppendUnawaredCopiedStatement(catchNode, scopeContext, COPY_AST(node));
				}

				void Visit(WfRaiseExceptionStatement* node)override
				{
					AppendUnawaredCopiedStatement(catchNode, scopeContext, COPY_AST(node));
				}

				void GenerateIfWithVar(WfIfStatement* node)
				{
					resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
					{
						auto branch = MakePtr<FlowChartBranch>();
						resultHead->branches.Add(branch);

						auto scope = manager->nodeScopes[node];
						auto symbol = scope->symbols[node->name.value][0].Obj();
						{
							auto refExpr = MakePtr<WfReferenceExpression>();
							refExpr->name.value = referenceRenaming[symbol];

							auto assignExpr = MakePtr<WfBinaryExpression>();
							assignExpr->op = WfBinaryOperator::Assign;
							assignExpr->first = refExpr;
							assignExpr->second = COPY_AST(node->expression);

							auto stat = MakePtr<WfExpressionStatement>();
							stat->expression = assignExpr;

							SetCodeRange((Ptr<WfStatement>)stat, node->expression->codeRange);
							resultHead->statements.Add(stat);
						}
						{
							auto refExpr = MakePtr<WfReferenceExpression>();
							refExpr->name.value = referenceRenaming[symbol];

							auto testExpr = MakePtr<WfTypeTestingExpression>();
							testExpr->test = WfTypeTesting::IsNotNull;
							testExpr->expression = refExpr;

							SetCodeRange((Ptr<WfExpression>)testExpr, node->expression->codeRange);
							branch->condition = testExpr;
						}
					}
					resultLast = flowChart->CreateNode(catchNode);

					{
						auto pair = Execute(nullptr, catchNode, scopeContext, node->trueBranch);
						pair.value->destination = resultLast;
						resultHead->branches[0]->destination = pair.key;
					}

					if (node->falseBranch)
					{
						auto pair = Execute(nullptr, catchNode, scopeContext, node->falseBranch);
						pair.value->destination = resultLast;
						resultHead->destination = pair.key;
					}
					else
					{
						resultHead->destination = resultLast;
					}
				}

				void GenerateIfWithoutVar(WfIfStatement* node)
				{
					resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
					resultLast = flowChart->CreateNode(catchNode);

					while (true)
					{
						auto branch = MakePtr<FlowChartBranch>();
						resultHead->branches.Add(branch);
						branch->condition = COPY_AST(node->expression);

						auto pair = Execute(nullptr, catchNode, scopeContext, node->trueBranch);
						pair.value->destination = resultLast;
						branch->destination = pair.key;

						auto next = dynamic_cast<WfIfStatement*>(node->falseBranch.Obj());
						if (next && next->name.value == L"")
						{
							node = next;
						}
						else
						{
							break;
						}
					}

					if (node->falseBranch)
					{
						auto pair = Execute(nullptr, catchNode, scopeContext, node->falseBranch);
						pair.value->destination = resultLast;
						resultHead->destination = pair.key;
					}
					else
					{
						resultHead->destination = resultLast;
					}
				}

				void Visit(WfIfStatement* node)override
				{
					if (node->name.value == L"")
					{
						GenerateIfWithoutVar(node);
					}
					else
					{
						GenerateIfWithVar(node);
					}
				}

				void Visit(WfWhileStatement* node)override
				{
					resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
					{
						auto branch = MakePtr<FlowChartBranch>();
						resultHead->branches.Add(branch);
						branch->condition = COPY_AST(node->condition);
					}
					auto loopEnd = flowChart->CreateNode(catchNode);
					{
						auto branch = MakePtr<FlowChartBranch>();
						loopEnd->branches.Add(branch);
						branch->condition = COPY_AST(node->condition);
					}
					resultLast = flowChart->CreateNode(catchNode);

					ScopeContext loopContext;
					loopContext.parent = scopeContext;
					loopContext.type = ScopeType::Loop;
					loopContext.enterNode = loopEnd;
					loopContext.leaveNode = resultLast;
					auto pair = Execute(nullptr, catchNode, &loopContext, node->statement);
					pair.value->destination = loopEnd;

					resultHead->branches[0]->destination = pair.key;
					loopEnd->branches[0]->destination = pair.key;
					resultHead->destination = resultLast;
					loopEnd->destination = resultLast;
				}

				WfLexicalSymbol* GetExceptionVariableSymbol(WfTryStatement* node)
				{
					if (node->catchStatement)
					{
						auto scope = manager->nodeScopes[node->catchStatement.Obj()]->parentScope.Obj();
						auto symbol = scope->symbols[node->name.value][0];
						return symbol.Obj();
					}
					else
					{
						vint index = flowChart->tempExVars.Keys().IndexOf(node);
						if (index == -1)
						{
							auto symbol = MakePtr<WfLexicalSymbol>(nullptr);
							symbol->name = L"ex";
							symbol->typeInfo = TypeInfoRetriver<Ptr<IValueException>>::CreateTypeInfo();
							flowChart->tempExVars.Add(node, symbol);

							referenceRenaming.Add(symbol.Obj(), L"<co-tempexvar" + itow(flowChart->tempExVars.Count() - 1) + L">ex");
							return symbol.Obj();
						}
						return flowChart->tempExVars.Values()[index].Obj();
					}
				}

				Pair<FlowChartNode*, FlowChartNode*> GenerateCatch(WfTryStatement* node, FlowChartNode* catchNode)
				{
					auto pair = Execute(nullptr, catchNode, scopeContext, node->catchStatement);
					pair.key->exceptionVariable = GetExceptionVariableSymbol(node);
					return pair;
				}

				Pair<FlowChartNode*, FlowChartNode*> GenerateFinally(WfTryStatement* node, FlowChartNode* catchNode)
				{
					return Execute(nullptr, catchNode, scopeContext, node->finallyStatement);
				}

				Pair<FlowChartNode*, FlowChartNode*> GenerateFinallyAndRaise(WfTryStatement* node, FlowChartNode* catchNode)
				{
					auto pair = Execute(nullptr, catchNode, scopeContext, node->finallyStatement);
					auto raiseNode = flowChart->CreateNode(catchNode);
					{
						pair.key->exceptionVariable = GetExceptionVariableSymbol(node);

						auto refExpr = MakePtr<WfReferenceExpression>();
						refExpr->name.value = referenceRenaming[pair.key->exceptionVariable];

						auto memberExpr = MakePtr<WfMemberExpression>();
						memberExpr->parent = refExpr;
						memberExpr->name.value = L"Message";

						auto raiseStat = MakePtr<WfRaiseExceptionStatement>();
						raiseStat->expression = memberExpr;

						SetCodeRange((Ptr<WfStatement>)raiseStat, node->finallyStatement->codeRange);
						raiseNode->statements.Add(raiseStat);
					}
					pair.value->destination = raiseNode;
					return { pair.key,raiseNode };
				}

				void Visit(WfTryStatement* node)override
				{
					ScopeContext tryContext;
					tryContext.parent = scopeContext;
					tryContext.type = ScopeType::TryCatch;
					if (node->finallyStatement)
					{
						tryContext.exitStatementScope = scopeContext;
						tryContext.exitStatement = node->finallyStatement;
					}

					if (node->catchStatement && !node->finallyStatement)
					{
						auto pairCatch = GenerateCatch(node, catchNode);
						AppendAwaredStatement(pairCatch.key, &tryContext, node->protectedStatement);

						auto endNode = flowChart->CreateNode(catchNode);
						pairCatch.value->destination = endNode;
						resultLast->destination = endNode;
						resultLast = endNode;
					}
					else if (!node->catchStatement && node->finallyStatement)
					{
						auto pairFinallyAndRaise = GenerateFinallyAndRaise(node, catchNode);
						AppendAwaredStatement(pairFinallyAndRaise.key, &tryContext, node->protectedStatement);
						auto pairFinally = GenerateFinally(node, catchNode);

						auto endNode = flowChart->CreateNode(catchNode);
						resultLast->destination = pairFinally.key;
						pairFinally.value->destination = endNode;
						pairFinallyAndRaise.value->destination = endNode;
						resultLast = endNode;
					}
					else
					{
						auto pairFinallyAndRaise = GenerateFinallyAndRaise(node, catchNode);
						auto pairCatch = GenerateCatch(node, pairFinallyAndRaise.key);
						AppendAwaredStatement(pairCatch.key, &tryContext, node->protectedStatement);
						auto pairFinally = GenerateFinally(node, catchNode);

						auto endNode = flowChart->CreateNode(catchNode);
						resultLast->destination = pairFinally.key;
						pairCatch.value->destination = pairFinally.key;
						pairFinally.value->destination = endNode;
						pairFinallyAndRaise.value->destination = endNode;
						resultLast = endNode;
					}
				}

				void Visit(WfBlockStatement* node)override
				{
					resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
					resultLast = resultHead;

					FOREACH_INDEXER(Ptr<WfStatement>, stat, index, node->statements)
					{
						auto pair = Execute(resultLast, catchNode, scopeContext, stat);
						resultLast = pair.value;
					}
				}

				void Visit(WfVariableStatement* node)override
				{
					resultHead = flowChart->EnsureAppendStatement(headNode, catchNode);
					resultLast = resultHead;

					auto scope = manager->nodeScopes[node];
					auto symbol = scope->symbols[node->variable->name.value][0].Obj();

					auto refExpr = MakePtr<WfReferenceExpression>();
					refExpr->name.value = referenceRenaming[symbol];

					auto assignExpr = MakePtr<WfBinaryExpression>();
					assignExpr->op = WfBinaryOperator::Assign;
					assignExpr->first = refExpr;
					assignExpr->second = COPY_AST(node->variable->expression);

					auto stat = MakePtr<WfExpressionStatement>();
					stat->expression = assignExpr;

					SetCodeRange((Ptr<WfStatement>)stat, node->codeRange);
					AppendUnawaredCopiedStatement(catchNode, scopeContext, stat);
				}

				void Visit(WfExpressionStatement* node)override
				{
					AppendUnawaredCopiedStatement(catchNode, scopeContext, COPY_AST(node));
				}

				void Visit(WfVirtualStatement* node)override
				{
					node->expandedStatement->Accept(this);
				}

				void Visit(WfCoroutineStatement* node)override
				{
					node->Accept(static_cast<WfCoroutineStatement::IVisitor*>(this));
				}

				void Visit(WfCoPauseStatement* node)override
				{
					resultHead = flowChart->AppendNode(headNode, catchNode, FlowChartNodeAction::SetPause);
					resultLast = resultHead;
					if (node->statement)
					{
						AppendUnawaredCopiedStatement(catchNode, scopeContext, COPY_AST(node->statement));
					}

					resultLast = flowChart->AppendNode(resultLast, catchNode);
					{
						auto pauseStat = MakePtr<WfCoPauseStatement>();
						SetCodeRange((Ptr<WfStatement>)pauseStat, node->codeRange);
						resultLast->statements.Add(pauseStat);
					}
					resultLast = flowChart->AppendNode(resultLast, catchNode);
					resultHead->pauseDestination = resultLast;
				}

				void Visit(WfCoOperatorStatement* node)override
				{
					CHECK_FAIL(L"GenerateFlowChartStatementVisitor::Visit(WfCoOperatorStatement*)#Internal error, co-operator statement is not allowed in $coroutine expression.");
				}

#undef COPY_STATEMENT
			};

			Ptr<FlowChart> GenerateFlowChart(WfLexicalScopeManager* manager, List<WfStatement*>& awaredStatements, List<WfVariableStatement*>& awaredVariables, Dictionary<WfLexicalSymbol*, WString>& referenceRenaming, Ptr<WfStatement> statement)
			{
				auto flowChart = MakePtr<FlowChart>();
				SortedList<WfStatement*> sortedAwaredStatements;
				CopyFrom(sortedAwaredStatements, awaredStatements, true);
				CopyFrom(sortedAwaredStatements, awaredVariables, true);

				auto endNode = flowChart->CreateNode(nullptr);
				GenerateFlowChartStatementVisitor::ScopeContext context;
				context.leaveNode = endNode;

				auto pair = GenerateFlowChartStatementVisitor::Execute(manager, sortedAwaredStatements, referenceRenaming, flowChart, nullptr, nullptr, &context, statement);
				pair.value->destination = endNode;

				flowChart->headNode = pair.key;
				flowChart->lastNode = endNode;
				return flowChart;
			}

/***********************************************************************
RemoveUnnecessaryNodes
***********************************************************************/

			void CalculateEnterCounts(Ptr<FlowChart> flowChart, Dictionary<FlowChartNode*, vint>& enterCounts)
			{
				const auto& keys = enterCounts.Keys();
				auto& values = const_cast<Dictionary<FlowChartNode*, vint>::ValueContainer&>(enterCounts.Values());

				FOREACH(Ptr<FlowChartNode>, node, flowChart->nodes)
				{
					enterCounts.Add(node.Obj(), 0);
				}
				enterCounts.Set(flowChart->headNode, 1);

				auto Inc = [&](FlowChartNode* node)
				{
					if (node)
					{
						vint index = keys.IndexOf(node);
						values[index]++;
					}
				};

				FOREACH(Ptr<FlowChartNode>, node, flowChart->nodes)
				{
					Inc(node->destination);
					Inc(node->exceptionDestination);
					Inc(node->pauseDestination);
					FOREACH(Ptr<FlowChartBranch>, branch, node->branches)
					{
						Inc(branch->destination);
					}
				}
			}

			void RemoveUnnecessaryNodesPass(Ptr<FlowChart> flowChart)
			{
				Dictionary<FlowChartNode*, vint> enterCounts;
				CalculateEnterCounts(flowChart, enterCounts);

				SortedList<FlowChartNode*> mergableNodes;
				List<Ptr<FlowChartNode>> keepingNodes;
				FOREACH(Ptr<FlowChartNode>, node, flowChart->nodes)
				{
					bool mergable = false;

					if (node->branches.Count() == 0 && node->destination)
					{
						if (node->statements.Count() == 0 && node->action == FlowChartNodeAction::None && !node->exceptionVariable)
						{
							mergable = true;
						}
						else if (node->destination->action == FlowChartNodeAction::None && !node->destination->exceptionVariable && enterCounts[node->destination] == 1)
						{
							mergable = true;
						}
					}

					if (mergable)
					{
						mergableNodes.Add(node.Obj());
					}
					else
					{
						keepingNodes.Add(node);
					}
				}

				Dictionary<FlowChartNode*, FlowChartNode*> merging;
				FOREACH(FlowChartNode*, node, mergableNodes)
				{
					auto current = node;
					while (mergableNodes.Contains(current))
					{
						auto target = current->destination;

						if (current->action == FlowChartNodeAction::SetPause)
						{
							target->action = current->action;
							target->pauseDestination = current->pauseDestination;
						}
						if (current->exceptionVariable)
						{
							target->exceptionVariable = current->exceptionVariable;
						}
						if (current->statements.Count() > 0)
						{
							CopyFrom(current->statements, target->statements, true);
							CopyFrom(target->statements, current->statements);
							current->statements.Clear();
						}

						current = target;
					}
					merging.Add(node, current);
				}

#define MERGE_FLOW_CHART_NODE(DESTINATION)\
				{\
					vint index = merging.Keys().IndexOf(DESTINATION);\
					if (index != -1) DESTINATION = merging.Values()[index];\
				}\

				FOREACH(Ptr<FlowChartNode>, node, flowChart->nodes)
				{
					if (!mergableNodes.Contains(node.Obj()))
					{
						MERGE_FLOW_CHART_NODE(node->destination);
						MERGE_FLOW_CHART_NODE(node->exceptionDestination);
						MERGE_FLOW_CHART_NODE(node->pauseDestination);
						FOREACH(Ptr<FlowChartBranch>, branch, node->branches)
						{
							MERGE_FLOW_CHART_NODE(branch->destination);
						}
					}
				}
				MERGE_FLOW_CHART_NODE(flowChart->headNode);
				MERGE_FLOW_CHART_NODE(flowChart->lastNode);

#undef MERGE_FLOW_CHART_NODE

				vint headNodeIndex = keepingNodes.IndexOf(flowChart->headNode);
				if (headNodeIndex != 0)
				{
					auto headNode = keepingNodes[headNodeIndex];
					keepingNodes.RemoveAt(headNodeIndex);
					keepingNodes.Insert(0, headNode);
				}
				CopyFrom(flowChart->nodes, keepingNodes);
			}

			void RemoveUnnecessaryNodes(Ptr<FlowChart> flowChart)
			{
				RemoveUnnecessaryNodesPass(flowChart);

				FOREACH(Ptr<FlowChartNode>, node, flowChart->nodes)
				{
					if (node->pauseDestination && node->statements.Count() > 0 && node->statements[node->statements.Count() - 1].Cast<WfCoPauseStatement>())
					{
						node->destination = nullptr;
					}
				}

				Dictionary<FlowChartNode*, vint> enterCounts;
				CalculateEnterCounts(flowChart, enterCounts);
				FOREACH(Ptr<FlowChartNode>, node, flowChart->nodes)
				{
					FOREACH(Ptr<FlowChartBranch>, branch, node->branches)
					{
						if (enterCounts[branch->destination] == 1)
						{
							branch->destination->embedInBranch = true;
						}
					}
				}
			}

/***********************************************************************
GenerateSetStatus
***********************************************************************/

			Ptr<WfStatement> GenerateSetStatus(const WString& status)
			{
				auto refExpr = MakePtr<WfReferenceExpression>();
				refExpr->name.value = status;

				auto funcExpr = MakePtr<WfReferenceExpression>();
				funcExpr->name.value = L"SetStatus";

				auto callExpr = MakePtr<WfCallExpression>();
				callExpr->function = funcExpr;
				callExpr->arguments.Add(refExpr);

				auto stat = MakePtr<WfExpressionStatement>();
				stat->expression = callExpr;

				return stat;
			};

/***********************************************************************
GenerateSetCoState
***********************************************************************/

			Ptr<WfStatement> GenerateSetCoState(List<FlowChartNode*>& nodeOrders, FlowChartNode* node)
			{
				auto refState = MakePtr<WfReferenceExpression>();
				refState->name.value = L"<co-state>";

				auto intState = MakePtr<WfIntegerExpression>();
				intState->value.value = itow(nodeOrders.IndexOf(node));

				auto assignExpr = MakePtr<WfBinaryExpression>();
				assignExpr->op = WfBinaryOperator::Assign;
				assignExpr->first = refState;
				assignExpr->second = intState;

				auto stat = MakePtr<WfExpressionStatement>();
				stat->expression = assignExpr;

				return stat;
			};

/***********************************************************************
ExpandExceptionDestination
***********************************************************************/

			Ptr<WfBlockStatement> ExpandExceptionDestination(FlowChartNode* catchNode, Dictionary<WfLexicalSymbol*, WString>& referenceRenaming, List<FlowChartNode*>& nodeOrders, Ptr<WfBlockStatement> stateBlock)
			{
				/////////////////////////////////////////////////////////////////////////////
				// try { ... }
				/////////////////////////////////////////////////////////////////////////////

				auto nodeTryStat = MakePtr<WfTryStatement>();
				auto nodeBlock = MakePtr<WfBlockStatement>();
				nodeTryStat->protectedStatement = nodeBlock;

				/////////////////////////////////////////////////////////////////////////////
				// catch(<co-ex>)
				// {
				//      THE_EXCEPTION_VARIABLE = <co-ex>;
				//      <co-state> = THE_EXCEPTION_STATE;
				//      continue;
				// }
				/////////////////////////////////////////////////////////////////////////////

				nodeTryStat->name.value = L"<co-ex>";
				auto catchBlock = MakePtr<WfBlockStatement>();
				nodeTryStat->catchStatement = catchBlock;
				{
					auto refTarget = MakePtr<WfReferenceExpression>();
					refTarget->name.value = referenceRenaming[catchNode->exceptionVariable];

					auto refEx = MakePtr<WfReferenceExpression>();
					refEx->name.value = L"<co-ex>";

					auto assignExpr = MakePtr<WfBinaryExpression>();
					assignExpr->op = WfBinaryOperator::Assign;
					assignExpr->first = refTarget;
					assignExpr->second = refEx;

					auto stat = MakePtr<WfExpressionStatement>();
					stat->expression = assignExpr;
					catchBlock->statements.Add(stat);
				}
				catchBlock->statements.Add(GenerateSetCoState(nodeOrders, catchNode));
				catchBlock->statements.Add(MakePtr<WfContinueStatement>());

				stateBlock->statements.Add(nodeTryStat);
				return nodeBlock;
			}

/***********************************************************************
ExpandFlowChartNode
***********************************************************************/

			void ExpandFlowChartNode(Ptr<FlowChart> flowChart, FlowChartNode* flowChartNode, Dictionary<WfLexicalSymbol*, WString>& referenceRenaming, List<FlowChartNode*>& nodeOrders, FlowChartNode* parentCatchNode, Ptr<WfBlockStatement> stateBlock)
			{
				if (flowChartNode->action == FlowChartNodeAction::SetPause)
				{
					/////////////////////////////////////////////////////////////////////////////
					// <co-state> = THE_NEXT_STATE;
					// SetStatus(Waiting);
					/////////////////////////////////////////////////////////////////////////////
					stateBlock->statements.Add(GenerateSetStatus(L"Waiting"));
					stateBlock->statements.Add(GenerateSetCoState(nodeOrders, flowChartNode->pauseDestination));
				}

				auto nodeBlock = stateBlock;
				if (flowChartNode->exceptionDestination && parentCatchNode != flowChartNode->exceptionDestination)
				{
					nodeBlock = ExpandExceptionDestination(flowChartNode->exceptionDestination, referenceRenaming, nodeOrders, stateBlock);
				}

				bool exited = false;
				FOREACH(Ptr<WfStatement>, stat, flowChartNode->statements)
				{
					if (stat.Cast<WfCoPauseStatement>())
					{
						exited = true;
						/////////////////////////////////////////////////////////////////////////////
						// return;
						/////////////////////////////////////////////////////////////////////////////
						nodeBlock->statements.Add(MakePtr<WfReturnStatement>());
					}
					else if (stat.Cast<WfReturnStatement>())
					{
						exited = true;
						/////////////////////////////////////////////////////////////////////////////
						// SetStatus(Stopped);
						// return;
						/////////////////////////////////////////////////////////////////////////////
						stateBlock->statements.Add(GenerateSetStatus(L"Stopped"));
						{
							auto returnStat = MakePtr<WfReturnStatement>();
							stateBlock->statements.Add(returnStat);
						}
					}
					else
					{
						if (stat.Cast<WfRaiseExceptionStatement>())
						{
							exited = true;
						}
						nodeBlock->statements.Add(stat);
					}
				}

				FOREACH(Ptr<FlowChartBranch>, branch, flowChartNode->branches)
				{
					auto ifStat = MakePtr<WfIfStatement>();
					ifStat->expression = branch->condition;

					auto trueBlock = MakePtr<WfBlockStatement>();
					ifStat->trueBranch = trueBlock;

					if (branch->destination->embedInBranch)
					{
						ExpandFlowChartNode(flowChart, branch->destination, referenceRenaming, nodeOrders, flowChartNode->exceptionDestination, trueBlock);
					}
					else
					{
						trueBlock->statements.Add(GenerateSetCoState(nodeOrders, branch->destination));
						trueBlock->statements.Add(MakePtr<WfContinueStatement>());
					}

					nodeBlock->statements.Add(ifStat);
				}

				if (!exited)
				{
					if (flowChartNode == flowChart->lastNode)
					{
						/////////////////////////////////////////////////////////////////////////////
						// SetStatus(Stopped);
						// return;
						/////////////////////////////////////////////////////////////////////////////
						stateBlock->statements.Add(GenerateSetStatus(L"Stopped"));
						{
							auto returnStat = MakePtr<WfReturnStatement>();
							stateBlock->statements.Add(returnStat);
						}
					}
					else
					{
						/////////////////////////////////////////////////////////////////////////////
						// <co-state> = THE_NEXT_STATE;
						// continue;
						/////////////////////////////////////////////////////////////////////////////
						stateBlock->statements.Add(GenerateSetCoState(nodeOrders, flowChartNode->destination));
						stateBlock->statements.Add(MakePtr<WfContinueStatement>());
					}
				}
			}

/***********************************************************************
ExpandNewCoroutineExpression
***********************************************************************/

			void ExpandNewCoroutineExpression(WfLexicalScopeManager* manager, WfNewCoroutineExpression* node)
			{
				List<WfStatement*> awaredStatements;
				List<WfVariableStatement*> awaredVariables;
				Dictionary<WfLexicalSymbol*, WString> referenceRenaming;

				FindCoroutineAwaredStatements(node->statement, awaredStatements);
				FOREACH(WfStatement*, stat, awaredStatements)
				{
					FindCoroutineAwaredVariables(stat, awaredVariables);
				}
				FindCoroutineReferenceRenaming(manager, awaredStatements, awaredVariables, referenceRenaming);
				auto flowChart = GenerateFlowChart(manager, awaredStatements, awaredVariables, referenceRenaming, node->statement);
				RemoveUnnecessaryNodes(flowChart);

				List<FlowChartNode*> nodeOrders;
				CopyFrom(
					nodeOrders,
					From(flowChart->nodes)
						.Select([](Ptr<FlowChartNode> node)
						{
							return node.Obj();
						})
						.Where([](FlowChartNode* node)
						{
							return !node->embedInBranch;
						})
				);

				auto newExpr = MakePtr<WfNewInterfaceExpression>();
				node->expandedExpression = newExpr;
				newExpr->type = GetTypeFromTypeInfo(TypeInfoRetriver<Ptr<ICoroutine>>::CreateTypeInfo().Obj());

				/////////////////////////////////////////////////////////////////////////////
				// Coroutine Awared Variables
				/////////////////////////////////////////////////////////////////////////////

				FOREACH(WfLexicalSymbol*, symbol,
					From(referenceRenaming.Keys())
						.OrderBy([&](WfLexicalSymbol* a, WfLexicalSymbol* b)
						{
							return WString::Compare(referenceRenaming[a], referenceRenaming[b]);
						}))
				{
					auto varDecl = MakePtr<WfVariableDeclaration>();
					newExpr->declarations.Add(varDecl);
					{
						auto member = MakePtr<WfClassMember>();
						member->kind = WfClassMemberKind::Normal;
						varDecl->classMember = member;
					}

					varDecl->name.value = referenceRenaming[symbol];
					varDecl->type = GetTypeFromTypeInfo(symbol->typeInfo.Obj());
					varDecl->expression = CreateDefaultValue(symbol->typeInfo.Obj());
				}

				/////////////////////////////////////////////////////////////////////////////
				// <co-state>
				/////////////////////////////////////////////////////////////////////////////

				{
					auto varDecl = MakePtr<WfVariableDeclaration>();
					newExpr->declarations.Add(varDecl);
					{
						auto member = MakePtr<WfClassMember>();
						member->kind = WfClassMemberKind::Normal;
						varDecl->classMember = member;
					}

					varDecl->name.value = L"<co-state>";
					varDecl->type = GetTypeFromTypeInfo(TypeInfoRetriver<vint>::CreateTypeInfo().Obj());

					auto stateExpr = MakePtr<WfIntegerExpression>();
					stateExpr->value.value = L"0";
					varDecl->expression = stateExpr;
				}

				/////////////////////////////////////////////////////////////////////////////
				// prop Failure : Exception^ {const, not observe}
				/////////////////////////////////////////////////////////////////////////////

				{
					auto propDecl = MakePtr<WfAutoPropertyDeclaration>();
					newExpr->declarations.Add(propDecl);
					{
						auto member = MakePtr<WfClassMember>();
						member->kind = WfClassMemberKind::Override;
						propDecl->classMember = member;
					}

					propDecl->name.value = L"Failure";
					propDecl->type = GetTypeFromTypeInfo(TypeInfoRetriver<Ptr<IValueException>>::CreateTypeInfo().Obj());
					propDecl->configConst = WfAPConst::Readonly;
					propDecl->configObserve = WfAPObserve::NotObservable;

					auto nullExpr = MakePtr<WfLiteralExpression>();
					nullExpr->value = WfLiteralValue::Null;
					propDecl->expression = nullExpr;
				}

				/////////////////////////////////////////////////////////////////////////////
				// prop Status : CoroutineStatus^ {const, not observe}
				/////////////////////////////////////////////////////////////////////////////

				{
					auto propDecl = MakePtr<WfAutoPropertyDeclaration>();
					newExpr->declarations.Add(propDecl);
					{
						auto member = MakePtr<WfClassMember>();
						member->kind = WfClassMemberKind::Override;
						propDecl->classMember = member;
					}

					propDecl->name.value = L"Status";
					propDecl->type = GetTypeFromTypeInfo(TypeInfoRetriver<CoroutineStatus>::CreateTypeInfo().Obj());
					propDecl->configConst = WfAPConst::Readonly;
					propDecl->configObserve = WfAPObserve::NotObservable;

					auto refExpr = MakePtr<WfReferenceExpression>();
					refExpr->name.value = L"Waiting";

					propDecl->expression = refExpr;
				}

				/////////////////////////////////////////////////////////////////////////////
				// func Resume(<raise-exception> : bool, <coroutine-output> : CoroutineResult^) : void
				/////////////////////////////////////////////////////////////////////////////

				{
					auto funcDecl = MakePtr<WfFunctionDeclaration>();
					newExpr->declarations.Add(funcDecl);
					{
						auto member = MakePtr<WfClassMember>();
						member->kind = WfClassMemberKind::Override;
						funcDecl->classMember = member;
					}

					funcDecl->name.value = L"Resume";
					funcDecl->returnType = GetTypeFromTypeInfo(TypeInfoRetriver<void>::CreateTypeInfo().Obj());
					{
						auto argument = MakePtr<WfFunctionArgument>();
						funcDecl->arguments.Add(argument);
						argument->name.value = L"<raise-exception>";
						argument->type = GetTypeFromTypeInfo(TypeInfoRetriver<bool>::CreateTypeInfo().Obj());
					}
					{
						auto argument = MakePtr<WfFunctionArgument>();
						funcDecl->arguments.Add(argument);
						if (node->name.value == L"")
						{
							argument->name.value = L"<coroutine-output>";
						}
						else
						{
							argument->name.value = node->name.value;
						}
						argument->type = GetTypeFromTypeInfo(TypeInfoRetriver<Ptr<CoroutineResult>>::CreateTypeInfo().Obj());
					}

					auto block = MakePtr<WfBlockStatement>();
					funcDecl->statement = block;

					/////////////////////////////////////////////////////////////////////////////
					// if (Status != Waiting) raise "...";
					/////////////////////////////////////////////////////////////////////////////

					{
						auto ifStat = MakePtr<WfIfStatement>();
						{
							auto refStatus = MakePtr<WfReferenceExpression>();
							refStatus->name.value = L"Status";

							auto waitingStatus = MakePtr<WfChildExpression>();
							waitingStatus->parent = GetExpressionFromTypeDescriptor(description::GetTypeDescriptor<CoroutineStatus>());
							waitingStatus->name.value = L"Waiting";

							auto compExpr = MakePtr<WfBinaryExpression>();
							compExpr->op = WfBinaryOperator::NE;
							compExpr->first = refStatus;
							compExpr->second = waitingStatus;

							ifStat->expression = compExpr;
						}

						auto trueBlock = MakePtr<WfBlockStatement>();
						ifStat->trueBranch = trueBlock;
						{
							auto exExpr = MakePtr<WfStringExpression>();
							exExpr->value.value = L"Resume should be called only when the coroutine is in the waiting status.";

							auto raiseStat = MakePtr<WfRaiseExceptionStatement>();
							raiseStat->expression = exExpr;
							trueBlock->statements.Add(raiseStat);
						}
						block->statements.Add(ifStat);
					}

					/////////////////////////////////////////////////////////////////////////////
					// SetStatus(Executing);
					/////////////////////////////////////////////////////////////////////////////

					block->statements.Add(GenerateSetStatus(L"Executing"));
					{
						/////////////////////////////////////////////////////////////////////////////
						// try { ... }
						/////////////////////////////////////////////////////////////////////////////

						auto tryStat = MakePtr<WfTryStatement>();
						auto tryBlock = MakePtr<WfBlockStatement>();
						tryStat->protectedStatement = tryBlock;
						{
							/////////////////////////////////////////////////////////////////////////////
							// while (true) { ... }
							/////////////////////////////////////////////////////////////////////////////

							auto whileStat = MakePtr<WfWhileStatement>();
							{
								auto trueExpr = MakePtr<WfLiteralExpression>();
								trueExpr->value = WfLiteralValue::True;
								whileStat->condition = trueExpr;
							}

							auto whileBlock = MakePtr<WfBlockStatement>();
							whileStat->statement = whileBlock;

							using GroupPair = Pair<FlowChartNode*, LazyList<FlowChartNode*>>;
							auto nodeByCatches = From(nodeOrders)
								.GroupBy([](FlowChartNode* node)
								{
									return node->exceptionDestination;
								})
								.OrderBy([&](const GroupPair& p1, const GroupPair& p2)
								{
									return nodeOrders.IndexOf(p1.key) - nodeOrders.IndexOf(p2.key);
								});

							FOREACH(GroupPair, group, nodeByCatches)
							{
								auto catchNode = group.key;
								auto groupBlock = whileBlock;
								if (catchNode)
								{
									groupBlock = ExpandExceptionDestination(catchNode, referenceRenaming, nodeOrders, whileBlock);
								}

								FOREACH(FlowChartNode*, flowChartNode, group.value)
								{
									/////////////////////////////////////////////////////////////////////////////
									// if (<co-state> == THE_CURRENT_STATE) { ... }
									/////////////////////////////////////////////////////////////////////////////

									auto ifStat = MakePtr<WfIfStatement>();
									groupBlock->statements.Add(ifStat);
									{
										auto refState = MakePtr<WfReferenceExpression>();
										refState->name.value = L"<co-state>";

										auto intState = MakePtr<WfIntegerExpression>();
										intState->value.value = itow(nodeOrders.IndexOf(flowChartNode));

										auto compExpr = MakePtr<WfBinaryExpression>();
										compExpr->op = WfBinaryOperator::EQ;
										compExpr->first = refState;
										compExpr->second = intState;

										ifStat->expression = compExpr;
									}

									auto stateBlock = MakePtr<WfBlockStatement>();
									ifStat->trueBranch = stateBlock;
									{
										ExpandFlowChartNode(flowChart, flowChartNode, referenceRenaming, nodeOrders, catchNode, stateBlock);
									}
								}
							}
							tryBlock->statements.Add(whileStat);
						}

						/////////////////////////////////////////////////////////////////////////////
						// catch(<co-ex>)
						// {
						//      SetFailure(<co-ex>);
						//      SetStatus(Stopped);
						//      if (<raise-exception>) raise <co-ex>;
						// }
						/////////////////////////////////////////////////////////////////////////////

						tryStat->name.value = L"<co-ex>";
						auto catchBlock = MakePtr<WfBlockStatement>();
						tryStat->catchStatement = catchBlock;
						{
							auto refExpr = MakePtr<WfReferenceExpression>();
							refExpr->name.value = L"<co-ex>";

							auto funcExpr = MakePtr<WfReferenceExpression>();
							funcExpr->name.value = L"SetFailure";

							auto callExpr = MakePtr<WfCallExpression>();
							callExpr->function = funcExpr;
							callExpr->arguments.Add(refExpr);

							auto stat = MakePtr<WfExpressionStatement>();
							stat->expression = callExpr;
							catchBlock->statements.Add(stat);
						}
						catchBlock->statements.Add(GenerateSetStatus(L"Stopped"));
						{
							auto refExpr = MakePtr<WfReferenceExpression>();
							refExpr->name.value = L"<raise-exception>";

							auto ifStat = MakePtr<WfIfStatement>();
							ifStat->expression = refExpr;

							auto trueBlock = MakePtr<WfBlockStatement>();
							ifStat->trueBranch = trueBlock;
							{
								auto raiseStat = MakePtr<WfRaiseExceptionStatement>();
								trueBlock->statements.Add(raiseStat);
							}
							catchBlock->statements.Add(ifStat);
						}

						block->statements.Add(tryStat);
					}
				}
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_EXPANDSTATEMENT.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
ExpandSwitchStatement
***********************************************************************/

			void ExpandSwitchStatement(WfLexicalScopeManager* manager, WfSwitchStatement* node)
			{
				auto block = MakePtr<WfBlockStatement>();
				node->expandedStatement = block;
				auto varName = L"<switch>" + itow(manager->usedTempVars++);

				{
					auto result = manager->expressionResolvings[node->expression.Obj()];
					auto decl = MakePtr<WfVariableDeclaration>();
					decl->name.value = varName;
					decl->type = GetTypeFromTypeInfo(result.type.Obj());
					decl->expression = CopyExpression(node->expression);

					auto stat = MakePtr<WfVariableStatement>();
					stat->variable = decl;
					block->statements.Add(stat);
				}

				Ptr<WfStatement> rootIfStat;
				auto tailIfStat = &rootIfStat;

				FOREACH(Ptr<WfSwitchCase>, switchCase, node->caseBranches)
				{
					auto ifStat = MakePtr<WfIfStatement>();
					*tailIfStat = ifStat;
					tailIfStat = &ifStat->falseBranch;

					{
						auto refExpr = MakePtr<WfReferenceExpression>();
						refExpr->name.value = varName;

						auto inferExpr = MakePtr<WfInferExpression>();
						inferExpr->expression= CopyExpression(switchCase->expression);
						{
							auto result = manager->expressionResolvings[switchCase->expression.Obj()];
							inferExpr->type = GetTypeFromTypeInfo(result.type.Obj());
						}

						auto compare = MakePtr<WfBinaryExpression>();
						compare->first = refExpr;
						compare->second = inferExpr;
						compare->op = WfBinaryOperator::EQ;

						ifStat->expression = compare;
					}
					ifStat->trueBranch = CopyStatement(switchCase->statement);
				}

				if (node->defaultBranch)
				{
					*tailIfStat = CopyStatement(node->defaultBranch);
				}

				if (rootIfStat)
				{
					block->statements.Add(rootIfStat);
				}
			}

/***********************************************************************
ExpandForEachStatement
***********************************************************************/

			Ptr<WfStatement> GenerateForEachStepStatement(WfForEachStatement* node)
			{
				auto refVar1 = MakePtr<WfReferenceExpression>();
				refVar1->name.value = node->name.value;

				auto refVar2 = MakePtr<WfReferenceExpression>();
				refVar2->name.value = node->name.value;

				auto one = MakePtr<WfIntegerExpression>();
				one->value.value = L"1";

				auto stepExpr = MakePtr<WfBinaryExpression>();
				stepExpr->first = refVar2;
				stepExpr->second = one;
				stepExpr->op = node->direction == WfForEachDirection::Normal ? WfBinaryOperator::Add : WfBinaryOperator::Sub;

				auto assignExpr = MakePtr<WfBinaryExpression>();
				assignExpr->first = refVar1;
				assignExpr->second = stepExpr;
				assignExpr->op = WfBinaryOperator::Assign;

				auto stat = MakePtr<WfExpressionStatement>();
				stat->expression = assignExpr;
				return stat;
			}

			class CopyForEachRangeBodyVisitor
				: public copy_visitor::ModuleVisitor
			{
			public:
				WfLexicalScopeManager*						manager;
				WfForEachStatement*							forEach;

				CopyForEachRangeBodyVisitor(WfLexicalScopeManager* _manager, WfForEachStatement* _forEach)
					:manager(_manager)
					, forEach(_forEach)
				{
				}

				void Visit(WfContinueStatement* node)
				{
					auto scope = manager->nodeScopes[node];
					while (scope)
					{
						if (scope->ownerNode.Cast<WfWhileStatement>())
						{
							break;
						}
						else if (scope->ownerNode.Cast<WfForEachStatement>())
						{
							if (scope->ownerNode != forEach)
							{
								break;
							}
							else
							{
								auto block = MakePtr<WfBlockStatement>();
								block->statements.Add(GenerateForEachStepStatement(forEach));
								block->statements.Add(MakePtr<WfContinueStatement>());
								SetCodeRange((Ptr<WfStatement>)block, node->codeRange);
								result = block;
								return;
							}
						}
						scope = scope->parentScope;
					}
					copy_visitor::StatementVisitor::Visit(node);
				}
			};

			void ExpandForEachStatement(WfLexicalScopeManager* manager, WfForEachStatement* node)
			{
				auto block = MakePtr<WfBlockStatement>();
				node->expandedStatement = block;

				if (auto range = node->collection.Cast<WfRangeExpression>())
				{
					auto varBegin = L"<for-begin>" + node->name.value;
					auto varEnd = L"<for-end>" + node->name.value;
					{
						auto result = manager->expressionResolvings[range->begin.Obj()];
						auto decl = MakePtr<WfVariableDeclaration>();
						decl->name.value = varBegin;
						decl->type = GetTypeFromTypeInfo(result.type.Obj());
						decl->expression = CopyExpression(range->begin);
						if (range->beginBoundary == WfRangeBoundary::Exclusive)
						{
							auto one = MakePtr<WfIntegerExpression>();
							one->value.value = L"1";

							auto addExpr = MakePtr<WfBinaryExpression>();
							addExpr->first = decl->expression;
							addExpr->second = one;
							addExpr->op = WfBinaryOperator::Add;
							
							decl->expression = addExpr;
						}

						auto stat = MakePtr<WfVariableStatement>();
						stat->variable = decl;
						block->statements.Add(stat);
					}
					{
						auto result = manager->expressionResolvings[range->end.Obj()];
						auto decl = MakePtr<WfVariableDeclaration>();
						decl->name.value = varEnd;
						decl->type = GetTypeFromTypeInfo(result.type.Obj());
						decl->expression = CopyExpression(range->end);
						if (range->endBoundary == WfRangeBoundary::Exclusive)
						{
							auto one = MakePtr<WfIntegerExpression>();
							one->value.value = L"1";

							auto subExpr = MakePtr<WfBinaryExpression>();
							subExpr->first = decl->expression;
							subExpr->second = one;
							subExpr->op = WfBinaryOperator::Sub;

							decl->expression = subExpr;
						}

						auto stat = MakePtr<WfVariableStatement>();
						stat->variable = decl;
						block->statements.Add(stat);
					}
					{
						auto refBegin = MakePtr<WfReferenceExpression>();
						refBegin->name.value = node->direction == WfForEachDirection::Normal ? varBegin : varEnd;

						auto decl = MakePtr<WfVariableDeclaration>();
						decl->name.value = node->name.value;
						decl->expression = refBegin;

						auto stat = MakePtr<WfVariableStatement>();
						stat->variable = decl;
						block->statements.Add(stat);
					}
					{
						auto whileStat = MakePtr<WfWhileStatement>();
						{
							auto refVar = MakePtr<WfReferenceExpression>();
							refVar->name.value = node->name.value;

							auto refBegin = MakePtr<WfReferenceExpression>();
							refBegin->name.value = node->direction == WfForEachDirection::Normal ? varEnd : varBegin;

							auto compare = MakePtr<WfBinaryExpression>();
							compare->first = refVar;
							compare->second = refBegin;
							compare->op = node->direction == WfForEachDirection::Normal ? WfBinaryOperator::LE : WfBinaryOperator::GE;

							whileStat->condition = compare;
						}
						{
							auto whileBlock = MakePtr<WfBlockStatement>();
							whileStat->statement = whileBlock;

							{
								CopyForEachRangeBodyVisitor visitor(manager, node);
								node->statement->Accept(&visitor);
								whileBlock->statements.Add(visitor.result.Cast<WfStatement>());
							}
							whileBlock->statements.Add(GenerateForEachStepStatement(node));
						}
						block->statements.Add(whileStat);
					}
				}
				else
				{
					auto varEnum = L"<for-enumerable>" + node->name.value;
					auto varIter = L"<for-enumerator>" + node->name.value;
					{
						auto decl = MakePtr<WfVariableDeclaration>();
						decl->name.value = varEnum;
						if (node->direction == WfForEachDirection::Normal)
						{
							auto inferExpr = MakePtr<WfInferExpression>();
							inferExpr->expression = CopyExpression(node->collection);
							inferExpr->type = GetTypeFromTypeInfo(TypeInfoRetriver<Ptr<IValueEnumerable>>::CreateTypeInfo().Obj());

							decl->expression = inferExpr;
						}
						else
						{
							auto refSystem = MakePtr<WfTopQualifiedExpression>();
							refSystem->name.value = L"system";

							auto refSys = MakePtr<WfChildExpression>();
							refSys->parent = refSystem;
							refSys->name.value = L"Sys";

							auto refMethod = MakePtr<WfChildExpression>();
							refMethod->parent = refSys;
							refMethod->name.value = L"ReverseEnumerable";

							auto refCall = MakePtr<WfCallExpression>();
							refCall->function = refMethod;
							refCall->arguments.Add(CopyExpression(node->collection));

							decl->expression = refCall;
						}

						auto stat = MakePtr<WfVariableStatement>();
						stat->variable = decl;
						block->statements.Add(stat);
					}
					{
						auto refEnum = MakePtr<WfReferenceExpression>();
						refEnum->name.value = varEnum;

						auto refMethod = MakePtr<WfMemberExpression>();
						refMethod->parent = refEnum;
						refMethod->name.value = L"CreateEnumerator";

						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = refMethod;

						auto decl = MakePtr<WfVariableDeclaration>();
						decl->name.value = varIter;
						decl->expression = callExpr;

						auto stat = MakePtr<WfVariableStatement>();
						stat->variable = decl;
						block->statements.Add(stat);
					}
					{
						auto whileStat = MakePtr<WfWhileStatement>();
						{
							auto refIter = MakePtr<WfReferenceExpression>();
							refIter->name.value = varIter;

							auto refMethod = MakePtr<WfMemberExpression>();
							refMethod->parent = refIter;
							refMethod->name.value = L"Next";

							auto callExpr = MakePtr<WfCallExpression>();
							callExpr->function = refMethod;

							whileStat->condition = callExpr;
						}
						{
							auto whileBlock = MakePtr<WfBlockStatement>();
							whileStat->statement = whileBlock;

							{
								auto refIter = MakePtr<WfReferenceExpression>();
								refIter->name.value = varIter;

								auto refMethod = MakePtr<WfMemberExpression>();
								refMethod->parent = refIter;
								refMethod->name.value = L"GetCurrent";

								auto callExpr = MakePtr<WfCallExpression>();
								callExpr->function = refMethod;

								auto castExpr = MakePtr<WfTypeCastingExpression>();
								castExpr->expression = callExpr;
								castExpr->strategy = WfTypeCastingStrategy::Strong;
								{
									auto parentScope = manager->nodeScopes[node];
									auto symbol = parentScope->symbols[node->name.value][0];
									castExpr->type = GetTypeFromTypeInfo(symbol->typeInfo.Obj());
								}

								auto decl = MakePtr<WfVariableDeclaration>();
								decl->name.value = node->name.value;
								decl->expression = castExpr;

								auto stat = MakePtr<WfVariableStatement>();
								stat->variable = decl;
								whileBlock->statements.Add(stat);
							}
							whileBlock->statements.Add(CopyStatement(node->statement));
						}
						block->statements.Add(whileStat);
					}
				}
			}

/***********************************************************************
ExpandCoProviderStatement
***********************************************************************/

			class ExpandCoProviderStatementVisitor
				: public copy_visitor::StatementVisitor
				, public copy_visitor::CoroutineStatementVisitor
			{
			public:
				WfLexicalScopeManager*						manager;

				ExpandCoProviderStatementVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				Ptr<WfExpression> CreateField(Ptr<WfExpression> from)override
				{
					if (!from) return nullptr;
					return CopyExpression(from);
				}

				Ptr<WfType> CreateField(Ptr<WfType> from)override
				{
					if (!from) return nullptr;
					return CopyType(from);
				}

				Ptr<WfStatement> CreateField(Ptr<WfStatement> from)override
				{
					if (!from) return nullptr;
					from->Accept(this);
					return result.Cast<WfStatement>();
				}

				void Visit(WfReturnStatement* node)override
				{
					auto opInfo = manager->coOperatorResolvings[node].methodInfo;
					auto block = MakePtr<WfBlockStatement>();

					{
						auto refImpl = MakePtr<WfReferenceExpression>();
						refImpl->name.value = L"<co-impl>";

						auto funcExpr = MakePtr<WfChildExpression>();
						funcExpr->parent = GetExpressionFromTypeDescriptor(opInfo->GetOwnerTypeDescriptor());
						funcExpr->name.value = opInfo->GetName();

						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = funcExpr;
						callExpr->arguments.Add(refImpl);
						if (node->expression)
						{
							callExpr->arguments.Add(CreateField(node->expression));
						}

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = callExpr;
						block->statements.Add(stat);
					}
					block->statements.Add(MakePtr<WfReturnStatement>());

					SetCodeRange(Ptr<WfStatement>(block), node->codeRange);
					result = block;
				}

				void Visit(WfCoOperatorStatement* node)override
				{
					auto opInfo = manager->coOperatorResolvings[node].methodInfo;
					auto block = MakePtr<WfBlockStatement>();

					{
						auto refImpl = MakePtr<WfReferenceExpression>();
						refImpl->name.value = L"<co-impl>";

						auto funcExpr = MakePtr<WfChildExpression>();
						funcExpr->parent = GetExpressionFromTypeDescriptor(opInfo->GetOwnerTypeDescriptor());
						funcExpr->name.value = opInfo->GetName();

						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = funcExpr;
						callExpr->arguments.Add(refImpl);
						FOREACH(Ptr<WfExpression>, argument, node->arguments)
						{
							callExpr->arguments.Add(CreateField(argument));
						}

						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = callExpr;

						auto pauseBlock = MakePtr<WfBlockStatement>();
						pauseBlock->statements.Add(stat);

						auto pauseStat = MakePtr<WfCoPauseStatement>();
						pauseStat->statement = pauseBlock;

						block->statements.Add(pauseStat);
					}
					{
						Ptr<WfIfStatement> ifHasResultStat;

						if (node->varName.value == L"")
						{
							ifHasResultStat = MakePtr<WfIfStatement>();
							{
								auto refCoResult = MakePtr<WfReferenceExpression>();
								refCoResult->name.value = L"<co-result>";

								auto testExpr = MakePtr<WfTypeTestingExpression>();
								testExpr->expression = refCoResult;
								testExpr->test = WfTypeTesting::IsNotNull;

								ifHasResultStat->expression = testExpr;
							}
						}

						auto ifStat = MakePtr<WfIfStatement>();
						{
							auto refCoResult = MakePtr<WfReferenceExpression>();
							refCoResult->name.value = L"<co-result>";

							auto refFailure = MakePtr<WfMemberExpression>();
							refFailure->parent = refCoResult;
							refFailure->name.value = L"Failure";

							auto testExpr = MakePtr<WfTypeTestingExpression>();
							testExpr->expression = refFailure;
							testExpr->test = WfTypeTesting::IsNotNull;

							ifStat->expression = testExpr;
						}
						{
							auto refCoResult = MakePtr<WfReferenceExpression>();
							refCoResult->name.value = L"<co-result>";

							auto refFailure = MakePtr<WfMemberExpression>();
							refFailure->parent = refCoResult;
							refFailure->name.value = L"Failure";

							auto raiseStat = MakePtr<WfRaiseExceptionStatement>();
							raiseStat->expression = refFailure;

							auto ifBlock = MakePtr<WfBlockStatement>();
							ifBlock->statements.Add(raiseStat);
							ifStat->trueBranch = ifBlock;
						}

						if (ifHasResultStat)
						{
							auto ifBlock = MakePtr<WfBlockStatement>();
							ifHasResultStat->trueBranch = ifBlock;
							ifBlock->statements.Add(ifStat);
							block->statements.Add(ifHasResultStat);
						}
						else
						{
							block->statements.Add(ifStat);
						}
					}
					if (node->varName.value != L"")
					{
						auto refCoResult = MakePtr<WfReferenceExpression>();
						refCoResult->name.value = L"<co-result>";

						auto refResult = MakePtr<WfMemberExpression>();
						refResult->parent = refCoResult;
						refResult->name.value = L"Result";

						auto castResultInfo = manager->coCastResultResolvings[node].methodInfo;
						auto refCastResult = MakePtr<WfChildExpression>();
						refCastResult->parent = GetExpressionFromTypeDescriptor(castResultInfo->GetOwnerTypeDescriptor());
						refCastResult->name.value = L"CastResult";

						auto callExpr = MakePtr<WfCallExpression>();
						callExpr->function = refCastResult;
						callExpr->arguments.Add(refResult);

						auto varDecl = MakePtr<WfVariableDeclaration>();
						varDecl->name.value = node->varName.value;
						varDecl->expression = callExpr;

						auto stat = MakePtr<WfVariableStatement>();
						stat->variable = varDecl;
						block->statements.Add(stat);
					}

					SetCodeRange(Ptr<WfStatement>(block), node->codeRange);
					result = block;
				}

				void Visit(WfBlockStatement* node)override
				{
					auto block = MakePtr<WfBlockStatement>();

					FOREACH(Ptr<WfStatement>, statement, node->statements)
					{
						while (auto virtualStat = statement.Cast<WfVirtualStatement>())
						{
							statement = virtualStat->expandedStatement;
						}
						if (auto coOperatorStat = statement.Cast<WfCoOperatorStatement>())
						{
							coOperatorStat->Accept(this);
							CopyFrom(block->statements, result.Cast<WfBlockStatement>()->statements, true);
						}
						else
						{
							block->statements.Add(CreateField(statement));
						}
					}

					SetCodeRange(Ptr<WfStatement>(block), node->codeRange);
					result = block;
				}

				Ptr<ParsingTreeCustomBase> Dispatch(WfVirtualStatement* node)override
				{
					node->expandedStatement->Accept(this);
					return result;
				}

				Ptr<ParsingTreeCustomBase> Dispatch(WfCoroutineStatement* node)override
				{
					node->Accept((WfCoroutineStatement::IVisitor*)this);
					return result;
				}
			};

			void ExpandCoProviderStatement(WfLexicalScopeManager* manager, WfCoProviderStatement* node)
			{
				auto scope = manager->nodeScopes[node].Obj();
				auto functionScope = scope->FindFunctionScope();
				auto funcDecl = functionScope->ownerNode.Cast<WfFunctionDeclaration>();
				auto providerScope = manager->nodeScopes[funcDecl->statement.Obj()];
				auto providerType = providerScope->symbols[L"$PROVIDER"][0]->typeInfo;
				auto implType = providerScope->symbols[L"$IMPL"][0]->typeInfo;

				auto coroutineExpr = MakePtr<WfNewCoroutineExpression>();
				{
					coroutineExpr->name.value = L"<co-result>";
					coroutineExpr->statement = ExpandCoProviderStatementVisitor(manager).CreateField(node->statement);
				}

				auto creatorExpr = MakePtr<WfFunctionExpression>();
				{
					auto creatorDecl = MakePtr<WfFunctionDeclaration>();
					creatorExpr->function = creatorDecl;
					creatorDecl->anonymity = WfFunctionAnonymity::Anonymous;
					creatorDecl->returnType = GetTypeFromTypeInfo(TypeInfoRetriver<Ptr<ICoroutine>>::CreateTypeInfo().Obj());
					{
						auto argument = MakePtr<WfFunctionArgument>();
						creatorDecl->arguments.Add(argument);
						argument->name.value = L"<co-impl>";
						argument->type = GetTypeFromTypeInfo(implType.Obj());
					}

					auto block = MakePtr<WfBlockStatement>();
					creatorDecl->statement = block;

					auto returnStat = MakePtr<WfReturnStatement>();
					returnStat->expression = coroutineExpr;
					block->statements.Add(returnStat);
				}

				auto providerBlock = MakePtr<WfBlockStatement>();
				{
					auto funcSymbol = manager->GetDeclarationSymbol(manager->nodeScopes[funcDecl.Obj()].Obj(), funcDecl.Obj());
					auto funcReturnType = funcSymbol->typeInfo->GetElementType()->GetGenericArgument(0);
					auto creatorInfo = manager->coProviderResolvings[node].methodInfo;

					auto funcExpr = MakePtr<WfChildExpression>();
					funcExpr->parent = GetExpressionFromTypeDescriptor(creatorInfo->GetOwnerTypeDescriptor());
					funcExpr->name.value = creatorInfo->GetName();

					auto callExpr = MakePtr<WfCallExpression>();
					callExpr->function = funcExpr;
					callExpr->arguments.Add(creatorExpr);

					if (funcReturnType->GetTypeDescriptor() == description::GetTypeDescriptor<void>())
					{
						auto stat = MakePtr<WfExpressionStatement>();
						stat->expression = callExpr;
						providerBlock->statements.Add(stat);
					}
					else
					{
						if (IsSameType(funcReturnType, creatorInfo->GetReturn()))
						{
							auto stat = MakePtr<WfReturnStatement>();
							stat->expression = callExpr;
							providerBlock->statements.Add(stat);
						}
						else if (funcReturnType->GetTypeDescriptor() == creatorInfo->GetReturn()->GetTypeDescriptor())
						{
							auto castExpr = MakePtr<WfTypeCastingExpression>();
							castExpr->strategy = WfTypeCastingStrategy::Strong;
							castExpr->type = GetTypeFromTypeInfo(funcReturnType);
							castExpr->expression = callExpr;

							auto stat = MakePtr<WfReturnStatement>();
							stat->expression = castExpr;
							providerBlock->statements.Add(stat);
						}
						else
						{
							{
								auto varDecl = MakePtr<WfVariableDeclaration>();
								varDecl->name.value = L"<co-mixin-source-variable>";
								varDecl->expression = callExpr;

								auto stat = MakePtr<WfVariableStatement>();
								stat->variable = varDecl;
								providerBlock->statements.Add(stat);
							}
							{
								auto newExpr = MakePtr<WfNewInterfaceExpression>();
								newExpr->type = GetTypeFromTypeInfo(funcReturnType);
								{
									auto refExpr = MakePtr<WfReferenceExpression>();
									refExpr->name.value = L"<co-mixin-source-variable>";

									auto varDecl = MakePtr<WfVariableDeclaration>();
									newExpr->declarations.Add(varDecl);
									{
										varDecl->classMember = MakePtr<WfClassMember>();
										varDecl->classMember->kind = WfClassMemberKind::Normal;
									}
									varDecl->name.value = L"<co-mixin-source>";
									varDecl->expression = refExpr;

									if (creatorInfo->GetReturn()->GetDecorator() == ITypeInfo::RawPtr)
									{
										auto tdType = MakePtr<TypeDescriptorTypeInfo>(creatorInfo->GetReturn()->GetTypeDescriptor(), TypeInfoHint::Normal);
										auto pointerType = MakePtr<SharedPtrTypeInfo>(tdType);

										auto castExpr = MakePtr<WfTypeCastingExpression>();
										castExpr->strategy = WfTypeCastingStrategy::Strong;
										castExpr->expression = callExpr;
										castExpr->type = GetTypeFromTypeInfo(pointerType.Obj());

										varDecl->expression = castExpr;
									}
								}
								List<ITypeDescriptor*> unprocessed;
								unprocessed.Add(creatorInfo->GetReturn()->GetTypeDescriptor());
								for (vint i = 0; i < unprocessed.Count(); i++)
								{
									auto td = unprocessed[i];
									vint groupCount = td->GetMethodGroupCount();
									for (vint j = 0; j < groupCount; j++)
									{
										auto group = td->GetMethodGroup(j);
										vint methodCount = group->GetMethodCount();
										for (vint k = 0; k < methodCount; k++)
										{
											auto method = group->GetMethod(k);
											if (!method->IsStatic())
											{
												auto funcDecl = MakePtr<WfFunctionDeclaration>();
												newExpr->declarations.Add(funcDecl);
												{
													funcDecl->classMember = MakePtr<WfClassMember>();
													funcDecl->classMember->kind = WfClassMemberKind::Override;
												}
												funcDecl->anonymity = WfFunctionAnonymity::Named;
												funcDecl->name.value = method->GetName();
												funcDecl->returnType = GetTypeFromTypeInfo(method->GetReturn());
												vint parameterCount = method->GetParameterCount();
												for (vint l = 0; l < parameterCount; l++)
												{
													auto parameter = method->GetParameter(l);
													auto argument = MakePtr<WfFunctionArgument>();
													argument->name.value = parameter->GetName();
													argument->type = GetTypeFromTypeInfo(parameter->GetType());
													funcDecl->arguments.Add(argument);
												}

												auto implBlock = MakePtr<WfBlockStatement>();
												funcDecl->statement = implBlock;
												{
													auto refSource = MakePtr<WfReferenceExpression>();
													refSource->name.value = L"<co-mixin-source>";

													auto castExpr = MakePtr<WfTypeCastingExpression>();
													castExpr->strategy = WfTypeCastingStrategy::Strong;
													castExpr->expression = refSource;
													{
														auto tdType = MakePtr<TypeDescriptorTypeInfo>(creatorInfo->GetReturn()->GetTypeDescriptor(), TypeInfoHint::Normal);
														auto pointerType = MakePtr<RawPtrTypeInfo>(tdType);
														castExpr->type = GetTypeFromTypeInfo(pointerType.Obj());
													}

													auto inferExpr = MakePtr<WfInferExpression>();
													inferExpr->expression = castExpr;
													{
														auto tdType = MakePtr<TypeDescriptorTypeInfo>(method->GetOwnerTypeDescriptor(), TypeInfoHint::Normal);
														auto pointerType = MakePtr<RawPtrTypeInfo>(tdType);
														inferExpr->type = GetTypeFromTypeInfo(pointerType.Obj());
													}

													auto memberExpr = MakePtr<WfMemberExpression>();
													memberExpr->parent = inferExpr;
													memberExpr->name.value = method->GetName();

													auto callExpr = MakePtr<WfCallExpression>();
													callExpr->function = memberExpr;

													for (vint l = 0; l < parameterCount; l++)
													{
														auto parameter = method->GetParameter(l);

														auto argumentExpr = MakePtr<WfReferenceExpression>();
														argumentExpr->name.value = parameter->GetName();
														callExpr->arguments.Add(argumentExpr);
													}

													if (method->GetReturn()->GetTypeDescriptor() == description::GetTypeDescriptor<void>())
													{
														auto stat = MakePtr<WfExpressionStatement>();
														stat->expression = callExpr;
														implBlock->statements.Add(stat);
													}
													else
													{
														auto stat = MakePtr<WfReturnStatement>();
														stat->expression = callExpr;
														implBlock->statements.Add(stat);
													}
												}
											}
										}
									}

									vint count = td->GetBaseTypeDescriptorCount();
									for (vint j = 0; j < count; j++)
									{
										auto baseTd = td->GetBaseTypeDescriptor(j);
										if (!unprocessed.Contains(baseTd))
										{
											unprocessed.Add(baseTd);
										}
									}
								}

								auto stat = MakePtr<WfReturnStatement>();
								stat->expression = newExpr;
								providerBlock->statements.Add(stat);
							}
						}
					}
				}
				
				node->expandedStatement = providerBlock;
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_MISC.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
IsExpressionDependOnExpectedType(Expression)
***********************************************************************/

			class IsExpressionDependOnExpectedTypeVisitor
				: public empty_visitor::ExpressionVisitor
				, public empty_visitor::VirtualExpressionVisitor
			{
			public:
				WfLexicalScopeManager*				manager;
				bool								result;

				IsExpressionDependOnExpectedTypeVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
					, result(false)
				{
				}

				void Dispatch(WfVirtualExpression* node)override
				{
					node->Accept(static_cast<empty_visitor::VirtualExpressionVisitor*>(this));
				}

				bool Execute(Ptr<WfExpression> expression)
				{
					result = false;
					expression->Accept(this);
					return result;
				}

				void Visit(WfReferenceExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					List<ResolveExpressionResult> testResults;
					manager->ResolveName(scope, node->name.value, testResults);
					if (testResults.Count() == 0)
					{
						result = true;
					}
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					result = scope->symbols.Count() > 0;
				}

				void Visit(WfLiteralExpression* node)override
				{
					if (node->value == WfLiteralValue::Null)
					{
						result = true;
					}
				}

				void Visit(WfIfExpression* node)override
				{
					result = Execute(node->trueBranch) && Execute(node->falseBranch);
				}

				void Visit(WfConstructorExpression* node)override
				{
					if (node->arguments.Count() == 0)
					{
						result = true;
					}
					else
					{
						vint possibleFieldCount = 0;
						bool unresolvableField = false;
						auto scope = manager->nodeScopes[node].Obj();

						FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
						{
							if (argument->value)
							{
								if (auto refExpr = argument->key.Cast<WfReferenceExpression>())
								{
									possibleFieldCount++;
									List<ResolveExpressionResult> testResults;
									manager->ResolveName(scope, refExpr->name.value, testResults);
									if (testResults.Count() == 0)
									{
										unresolvableField = true;
									}
								}
							}
						}

						result = unresolvableField&&possibleFieldCount == node->arguments.Count();
					}
				}
			};

			bool IsExpressionDependOnExpectedType(WfLexicalScopeManager* manager, Ptr<WfExpression> expression)
			{
				IsExpressionDependOnExpectedTypeVisitor visitor(manager);
				expression->Accept(&visitor);
				return visitor.result;
			}

/***********************************************************************
GetExpressionName(Expression)
***********************************************************************/

			class GetExpressionNameVisitor
				: public empty_visitor::ExpressionVisitor
				, public empty_visitor::VirtualExpressionVisitor
			{
			public:
				WString								result;

				void Dispatch(WfVirtualExpression* node)override
				{
					node->Accept(static_cast<empty_visitor::VirtualExpressionVisitor*>(this));
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
					result = node->name.value;
				}

				void Visit(WfReferenceExpression* node)override
				{
					result = node->name.value;
				}

				void Visit(WfOrderedNameExpression* node)override
				{
					result = node->name.value;
				}

				void Visit(WfMemberExpression* node)override
				{
					result = node->name.value;
				}

				void Visit(WfChildExpression* node)override
				{
					result = node->name.value;
				}
			};

			WString GetExpressionName(Ptr<WfExpression> expression)
			{
				GetExpressionNameVisitor visitor;
				expression->Accept(&visitor);
				return visitor.result;
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_SEARCHORDEREDNAME.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;

/***********************************************************************
SearchOrderedName
***********************************************************************/

			class SearchOrderedNameVisitor : public traverse_visitor::ModuleVisitor
			{
			public:
				WfLexicalScope*							scope;
				SortedList<vint>&						names;

				SearchOrderedNameVisitor(WfLexicalScope* _scope, SortedList<vint>& _names)
					:scope(_scope)
					, names(_names)
				{
				}

				void Traverse(WfOrderedNameExpression* node)override
				{
					vint name = wtoi(node->name.value.Sub(1, node->name.value.Length() - 1));
					if (!names.Contains(name))
					{
						WfLexicalScope* currentScope = scope;
						while (currentScope)
						{
							if (currentScope->symbols.Keys().Contains(node->name.value))
							{
								return;
							}
							currentScope = currentScope->parentScope.Obj();
						}
						names.Add(name);
					}
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					// names in nested ordered lambda expression is not counted
				}

				static void Execute(WfLexicalScope* scope, Ptr<WfExpression> expression, SortedList<vint>& names)
				{
					SearchOrderedNameVisitor visitor(scope, names);
					expression->Accept(&visitor);
				}
			};

			void SearchOrderedName(WfLexicalScope* scope, Ptr<WfExpression> expression, collections::SortedList<vint>& names)
			{
				SearchOrderedNameVisitor::Execute(scope, expression, names);
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_TYPEINFO.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
GetTypeFlag
***********************************************************************/

			TypeFlag GetTypeFlag(reflection::description::ITypeDescriptor* typeDescriptor)
			{
				if (typeDescriptor == GetTypeDescriptor<bool>())		return TypeFlag::Bool;
				if (typeDescriptor == GetTypeDescriptor<vint8_t>())		return TypeFlag::I1;
				if (typeDescriptor == GetTypeDescriptor<vint16_t>())	return TypeFlag::I2;
				if (typeDescriptor == GetTypeDescriptor<vint32_t>())	return TypeFlag::I4;
				if (typeDescriptor == GetTypeDescriptor<vint64_t>())	return TypeFlag::I8;
				if (typeDescriptor == GetTypeDescriptor<vuint8_t>())	return TypeFlag::U1;
				if (typeDescriptor == GetTypeDescriptor<vuint16_t>())	return TypeFlag::U2;
				if (typeDescriptor == GetTypeDescriptor<vuint32_t>())	return TypeFlag::U4;
				if (typeDescriptor == GetTypeDescriptor<vuint64_t>())	return TypeFlag::U8;
				if (typeDescriptor == GetTypeDescriptor<float>())		return TypeFlag::F4;
				if (typeDescriptor == GetTypeDescriptor<double>())		return TypeFlag::F8;
				if (typeDescriptor == GetTypeDescriptor<WString>())		return TypeFlag::String;
				switch (typeDescriptor->GetTypeDescriptorFlags())
				{
				case TypeDescriptorFlags::FlagEnum:
				case TypeDescriptorFlags::NormalEnum:
					return TypeFlag::Enum;
				case TypeDescriptorFlags::Struct:
					return TypeFlag::Struct;
				default:
					return TypeFlag::Others;
				}
			}

			TypeFlag GetTypeFlag(reflection::description::ITypeInfo* typeInfo)
			{
				ITypeDescriptor* td = typeInfo->GetTypeDescriptor();
				return GetTypeFlag(td);
			}

/***********************************************************************
CreateTypeInfoFromTypeFlag
***********************************************************************/

			Ptr<reflection::description::ITypeInfo> CreateTypeInfoFromTypeFlag(TypeFlag flag)
			{
				switch (flag)
				{
				case TypeFlag::Bool:	return TypeInfoRetriver<bool>::CreateTypeInfo();
				case TypeFlag::I1:		return TypeInfoRetriver<vint8_t>::CreateTypeInfo();
				case TypeFlag::I2:		return TypeInfoRetriver<vint16_t>::CreateTypeInfo();
				case TypeFlag::I4:		return TypeInfoRetriver<vint32_t>::CreateTypeInfo();
				case TypeFlag::I8:		return TypeInfoRetriver<vint64_t>::CreateTypeInfo();
				case TypeFlag::U1:		return TypeInfoRetriver<vuint8_t>::CreateTypeInfo();
				case TypeFlag::U2:		return TypeInfoRetriver<vuint16_t>::CreateTypeInfo();
				case TypeFlag::U4:		return TypeInfoRetriver<vuint32_t>::CreateTypeInfo();
				case TypeFlag::U8:		return TypeInfoRetriver<vuint64_t>::CreateTypeInfo();
				case TypeFlag::F4:		return TypeInfoRetriver<float>::CreateTypeInfo();
				case TypeFlag::F8:		return TypeInfoRetriver<double>::CreateTypeInfo();
				case TypeFlag::String:	return TypeInfoRetriver<WString>::CreateTypeInfo();
				default:				return nullptr;
				}
			}

/***********************************************************************
GetTypeFragments
***********************************************************************/

			void GetTypeFragments(reflection::description::ITypeDescriptor* typeDescriptor, collections::List<WString>& fragments)
			{
				WString name = typeDescriptor->GetTypeName();
				const wchar_t* reading = name.Buffer();
				while (reading)
				{
					const wchar_t* delimiter = wcsstr(reading, L"::");
					if (delimiter)
					{
						fragments.Add(WString(reading, vint(delimiter - reading)));
						reading = delimiter + 2;
					}
					else
					{
						fragments.Add(reading);
						break;
					}
				}
			}

/***********************************************************************
GetExpressionFromTypeDescriptor
***********************************************************************/

			Ptr<WfExpression> GetExpressionFromTypeDescriptor(reflection::description::ITypeDescriptor* typeDescriptor)
			{
				List<WString> fragments;
				GetTypeFragments(typeDescriptor, fragments);

				Ptr<WfExpression> parentExpr;
				FOREACH(WString, fragment, fragments)
				{
					if (!parentExpr)
					{
						auto expr = MakePtr<WfTopQualifiedExpression>();
						expr->name.value = fragment;
						parentExpr = expr;
					}
					else
					{
						auto expr = MakePtr<WfChildExpression>();
						expr->parent = parentExpr;
						expr->name.value = fragment;
						parentExpr = expr;
					}
				}
				return parentExpr;
			}

/***********************************************************************
GetTypeFromTypeInfo
***********************************************************************/

			Ptr<WfType> GetTypeFromTypeInfo(reflection::description::ITypeInfo* typeInfo)
			{
				switch (typeInfo->GetDecorator())
				{
				case ITypeInfo::RawPtr:
					{
						Ptr<WfType> element = GetTypeFromTypeInfo(typeInfo->GetElementType());
						if (element)
						{
							Ptr<WfRawPointerType> type = new WfRawPointerType;
							type->element = element;
							return type;
						}
						return 0;
					}
				case ITypeInfo::SharedPtr:
					{
						if (typeInfo->GetElementType()->GetDecorator() == ITypeInfo::Generic)
						{
							return GetTypeFromTypeInfo(typeInfo->GetElementType());
						}
						else
						{
							Ptr<WfType> element = GetTypeFromTypeInfo(typeInfo->GetElementType());
							if (element)
							{
								Ptr<WfSharedPointerType> type = new WfSharedPointerType;
								type->element = element;
								return type;
							}
							return 0;
						}
					}
				case ITypeInfo::Nullable:
					{
						Ptr<WfType> element = GetTypeFromTypeInfo(typeInfo->GetElementType());
						if (element)
						{
							Ptr<WfNullableType> type = new WfNullableType;
							type->element = element;
							return type;
						}
						return 0;
					}
				case ITypeInfo::TypeDescriptor:
					{
						List<WString> fragments;
						GetTypeFragments(typeInfo->GetTypeDescriptor(), fragments);

						Ptr<WfType> parentType;
						FOREACH(WString, fragment, fragments)
						{
							if (!parentType)
							{
								auto type = MakePtr<WfTopQualifiedType>();
								type->name.value = fragment;
								parentType = type;
							}
							else
							{
								auto type = MakePtr<WfChildType>();
								type->parent = parentType;
								type->name.value = fragment;
								parentType = type;
							}
						}
						return parentType;
					}
				case ITypeInfo::Generic:
					{
						if (typeInfo->GetElementType()->GetDecorator() == ITypeInfo::TypeDescriptor)
						{
							if (typeInfo->GetTypeDescriptor() == GetTypeDescriptor<IValueEnumerable>())
							{
								if (typeInfo->GetGenericArgumentCount() == 1)
								{
									if (Ptr<WfType> elementType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0)))
									{
										Ptr<WfEnumerableType> type = new WfEnumerableType;
										type->element = elementType;
										return type;
									}
								}
							}
							else if (typeInfo->GetTypeDescriptor() == GetTypeDescriptor<IValueReadonlyList>())
							{
								if (typeInfo->GetGenericArgumentCount() == 1)
								{
									if (Ptr<WfType> valueType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0)))
									{
										Ptr<WfMapType> type = new WfMapType;
										type->writability = WfMapWritability::Readonly;
										type->value = valueType;
										return type;
									}
								}
							}
							else if (typeInfo->GetTypeDescriptor() == GetTypeDescriptor<IValueList>())
							{
								if (typeInfo->GetGenericArgumentCount() == 1)
								{
									if (Ptr<WfType> valueType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0)))
									{
										Ptr<WfMapType> type = new WfMapType;
										type->writability = WfMapWritability::Writable;
										type->value = valueType;
										return type;
									}
								}
							}
							else if (typeInfo->GetTypeDescriptor() == GetTypeDescriptor<IValueReadonlyDictionary>())
							{
								if (typeInfo->GetGenericArgumentCount() == 2)
								{
									if (Ptr<WfType> keyType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0)))
									if (Ptr<WfType> valueType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(1)))
									{
										Ptr<WfMapType> type = new WfMapType;
										type->writability = WfMapWritability::Readonly;
										type->key = keyType;
										type->value = valueType;
										return type;
									}
								}
							}
							else if (typeInfo->GetTypeDescriptor() == GetTypeDescriptor<IValueDictionary>())
							{
								if (typeInfo->GetGenericArgumentCount() == 2)
								{
									if (Ptr<WfType> keyType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0)))
									if (Ptr<WfType> valueType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(1)))
									{
										Ptr<WfMapType> type = new WfMapType;
										type->writability = WfMapWritability::Writable;
										type->key = keyType;
										type->value = valueType;
										return type;
									}
								}
							}
							else if (typeInfo->GetTypeDescriptor() == GetTypeDescriptor<IValueFunctionProxy>())
							{
								if (typeInfo->GetGenericArgumentCount() >= 1)
								{
									if (Ptr<WfType> returnType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0)))
									{
										Ptr<WfFunctionType> type = new WfFunctionType;
										type->result = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(0));
										for (vint i = 1; i < typeInfo->GetGenericArgumentCount(); i++)
										{
											if (Ptr<WfType> argumentType = GetTypeFromTypeInfo(typeInfo->GetGenericArgument(i)))
											{
												type->arguments.Add(argumentType);
											}
											else
											{
												return 0;
											}
										}
										return type;
									}
								}
							}
						}
						return 0;
					}
				default:
					return 0;
				}
			}

/***********************************************************************
GetScopeNameFromReferenceType
***********************************************************************/

			class GetScopeNameFromReferenceTypeVisitor : public Object, public WfType::IVisitor
			{
			public:
				WfLexicalScope*				scope;
				Ptr<WfLexicalScopeName>		result;

				GetScopeNameFromReferenceTypeVisitor(WfLexicalScope* _scope)
					:scope(_scope)
				{
				}

				Ptr<WfLexicalScopeName> Call(WfType* node)
				{
					node->Accept(this);
					Ptr<WfLexicalScopeName> scopeName = result;
					result = 0;
					return scopeName;
				}

				void Visit(WfPredefinedType* node)override
				{
					WString name;
					switch (node->name)
					{
					case WfPredefinedTypeName::Void:
						name = L"Void";
						break;
					case WfPredefinedTypeName::Object:
						name = L"Object";
						break;
					case WfPredefinedTypeName::Interface:
						name = L"Interface";
						break;
					case WfPredefinedTypeName::Int:
#if defined VCZH_64
						name = L"Int64";
#else
						name = L"Int32";
#endif
						break;
					case WfPredefinedTypeName::UInt:
#if defined VCZH_64
						name = L"UInt64";
#else
						name = L"UInt32";
#endif
						break;
					case WfPredefinedTypeName::Float:
						name = L"Single";
						break;
					case WfPredefinedTypeName::Double:
						name = L"Double";
						break;
					case WfPredefinedTypeName::String:
						name = L"String";
						break;
					case WfPredefinedTypeName::Char:
						name = L"Char";
						break;
					case WfPredefinedTypeName::Bool:
						name = L"Boolean";
						break;
					default:
						CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfPredefinedType*)#Internal error, ValidateTypeStructure function should check correctly.");
					}

					Ptr<WfTopQualifiedType> ns = new WfTopQualifiedType;
					ns->name.value = L"system";

					Ptr<WfChildType> type = new WfChildType;
					type->parent = ns;
					type->name.value = name;

					type->Accept(this);
				}

				void Visit(WfTopQualifiedType* node)override
				{
					auto manager = scope->FindManager();
					if (manager->globalName)
					{
						vint index = manager->globalName->children.Keys().IndexOf(node->name.value);
						if (index != -1)
						{
							result = manager->globalName->children.Values()[index];
							return;
						}
					}
					manager->errors.Add(WfErrors::TopQualifiedSymbolNotExists(node, node->name.value));
				}

				void Visit(WfReferenceType* node)override
				{
					auto manager = scope->FindManager();
					List<ResolveExpressionResult> results;
					manager->ResolveName(scope, node->name.value, results);

					if (results.Count() > 1)
					{
						manager->errors.Add(WfErrors::TooManyTargets(node, results, node->name.value));
					}
					else if (results.Count() == 1)
					{
						if (auto scopeName = results[0].scopeName)
						{
							result = scopeName;
						}
						else
						{
							manager->errors.Add(WfErrors::TypeNotExists(node, results[0].symbol));
						}
					}
					else
					{
						manager->errors.Add(WfErrors::ReferenceNotExists(node, node->name.value));
					}
				}

				void Visit(WfRawPointerType* node)override
				{
					CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfRawPointerType*)#Internal error, ValidateTypeStructure function should check correctly.");
				}

				void Visit(WfSharedPointerType* node)override
				{
					CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfSharedPointerType*)#Internal error, ValidateTypeStructure function should check correctly.");
				}

				void Visit(WfNullableType* node)override
				{
					CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfNullableType*)#Internal error, ValidateTypeStructure function should check correctly.");
				}

				void Visit(WfEnumerableType* node)override
				{
					CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfEnumerableType*)#Internal error, ValidateTypeStructure function should check correctly.");
				}

				void Visit(WfMapType* node)override
				{
					CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfMapType*)#Internal error, ValidateTypeStructure function should check correctly.");
				}

				void Visit(WfFunctionType* node)override
				{
					CHECK_FAIL(L"GetScopeNameFromReferenceTypeVisitor::Visit(WfFunctionType*)#Internal error, ValidateTypeStructure function should check correctly.");
				}

				void Visit(WfChildType* node)override
				{
					if (Ptr<WfLexicalScopeName> scopeName = Call(node->parent.Obj()))
					{
						vint index = scopeName->children.Keys().IndexOf(node->name.value);
						if (index != -1)
						{
							result = scopeName->children.Values()[index];
							return;
						}
						scope->FindManager()->errors.Add(WfErrors::ChildSymbolNotExists(node, scopeName, node->name.value));
					}
				}

				static Ptr<WfLexicalScopeName> Execute(WfLexicalScope* scope, WfType* type)
				{
					return GetScopeNameFromReferenceTypeVisitor(scope).Call(type);
				}
			};

			Ptr<WfLexicalScopeName> GetScopeNameFromReferenceType(WfLexicalScope* scope, Ptr<WfType> type)
			{
				return GetScopeNameFromReferenceTypeVisitor::Execute(scope, type.Obj());
			}

/***********************************************************************
CreateTypeInfoFromType
***********************************************************************/

			class CreateTypeInfoFromTypeVisitor : public Object, public WfType::IVisitor
			{
			public:
				WfLexicalScope*				scope;
				Ptr<ITypeInfo>				result;

				CreateTypeInfoFromTypeVisitor(WfLexicalScope* _scope)
					:scope(_scope)
				{
				}

				Ptr<ITypeInfo> Call(WfType* node, bool checkTypeForValue)
				{
					node->Accept(this);
					Ptr<ITypeInfo> typeInfo = result;
					result = 0;
					if (typeInfo)
					{
						auto manager = scope->FindManager();
						switch (typeInfo->GetDecorator())
						{
						case ITypeInfo::RawPtr:
						case ITypeInfo::SharedPtr:
							switch (typeInfo->GetTypeDescriptor()->GetTypeDescriptorFlags())
							{
							case TypeDescriptorFlags::IDescriptable:
							case TypeDescriptorFlags::Class:
							case TypeDescriptorFlags::Interface:
								break;
							default:
								if (typeInfo->GetDecorator() == ITypeInfo::RawPtr)
								{
									manager->errors.Add(WfErrors::RawPointerToNonReferenceType(node, typeInfo.Obj()));
								}
								else
								{
									manager->errors.Add(WfErrors::SharedPointerToNonReferenceType(node, typeInfo.Obj()));
								}
							}
							break;
						case ITypeInfo::Nullable:
							switch (typeInfo->GetTypeDescriptor()->GetTypeDescriptorFlags())
							{
							case TypeDescriptorFlags::Primitive:
							case TypeDescriptorFlags::Struct:
							case TypeDescriptorFlags::FlagEnum:
							case TypeDescriptorFlags::NormalEnum:
								break;
							default:
								manager->errors.Add(WfErrors::NullableToNonReferenceType(node, typeInfo.Obj()));
							}
							break;
						case ITypeInfo::TypeDescriptor:
							if (checkTypeForValue)
							{
								switch (typeInfo->GetTypeDescriptor()->GetTypeDescriptorFlags())
								{
								case TypeDescriptorFlags::Object:
								case TypeDescriptorFlags::Primitive:
								case TypeDescriptorFlags::Struct:
								case TypeDescriptorFlags::FlagEnum:
								case TypeDescriptorFlags::NormalEnum:
									break;
								default:
									manager->errors.Add(WfErrors::TypeNotForValue(node, typeInfo.Obj()));
								}
							}
							break;
						case ITypeInfo::Generic:
							if (checkTypeForValue)
							{
								manager->errors.Add(WfErrors::TypeNotForValue(node, typeInfo.Obj()));
							}
							break;
						}
					}
					return typeInfo;
				}

				void VisitReferenceType(WfType* node)
				{
					if (auto scopeName = GetScopeNameFromReferenceTypeVisitor::Execute(scope, node))
					{
						if (scopeName->typeDescriptor)
						{
							result = MakePtr<TypeDescriptorTypeInfo>(scopeName->typeDescriptor, TypeInfoHint::Normal);
						}
						else
						{
							scope->FindManager()->errors.Add(WfErrors::TypeNotExists(node, scopeName));
						}
					}
				}

				void Visit(WfPredefinedType* node)override
				{
					ITypeDescriptor* typeDescriptor = 0;
					switch (node->name)
					{
					case WfPredefinedTypeName::Void:
						typeDescriptor = description::GetTypeDescriptor<VoidValue>();
						break;
					case WfPredefinedTypeName::Object:
						typeDescriptor = description::GetTypeDescriptor<Value>();
						break;
					case WfPredefinedTypeName::Interface:
						typeDescriptor = description::GetTypeDescriptor<IDescriptable>();
						break;
					case WfPredefinedTypeName::Int:
						typeDescriptor = description::GetTypeDescriptor<vint>();
						break;
					case WfPredefinedTypeName::UInt:
						typeDescriptor = description::GetTypeDescriptor<vuint>();
						break;
					case WfPredefinedTypeName::Float:
						typeDescriptor = description::GetTypeDescriptor<float>();
						break;
					case WfPredefinedTypeName::Double:
						typeDescriptor = description::GetTypeDescriptor<double>();
						break;
					case WfPredefinedTypeName::String:
						typeDescriptor = description::GetTypeDescriptor<WString>();
						break;
					case WfPredefinedTypeName::Char:
						typeDescriptor = description::GetTypeDescriptor<wchar_t>();
						break;
					case WfPredefinedTypeName::Bool:
						typeDescriptor = description::GetTypeDescriptor<bool>();
						break;
					default:
						CHECK_FAIL(L"CreateTypeInfoFromTypeVisitor::Visit(WfPredefinedType*)#Internal error, ValidateTypeStructure function should check correctly.");
					}
					if (typeDescriptor)
					{
						result = MakePtr<TypeDescriptorTypeInfo>(typeDescriptor, TypeInfoHint::Normal);
					}
				}

				void Visit(WfTopQualifiedType* node)override
				{
					VisitReferenceType(node);
				}

				void Visit(WfReferenceType* node)override
				{
					VisitReferenceType(node);
				}

				void Visit(WfRawPointerType* node)override
				{
					if (Ptr<ITypeInfo> element = Call(node->element.Obj(), false))
					{
						result = MakePtr<RawPtrTypeInfo>(element);
					}
				}

				void Visit(WfSharedPointerType* node)override
				{
					if (Ptr<ITypeInfo> element = Call(node->element.Obj(), false))
					{
						result = MakePtr<SharedPtrTypeInfo>(element);
					}
				}

				void Visit(WfNullableType* node)override
				{
					if (Ptr<ITypeInfo> element = Call(node->element.Obj(), false))
					{
						result = MakePtr<NullableTypeInfo>(element);
					}
				}

				void Visit(WfEnumerableType* node)override
				{
					if (Ptr<ITypeInfo> element = Call(node->element.Obj(), true))
					{
						auto enumerableTypeInfo = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueEnumerable>(), TypeInfoHint::Normal);
						auto genericTypeInfo = MakePtr<GenericTypeInfo>(enumerableTypeInfo);
						genericTypeInfo->AddGenericArgument(element);
						result = MakePtr<SharedPtrTypeInfo>(genericTypeInfo);
					}
				}

				void Visit(WfMapType* node)override
				{
					Ptr<ITypeInfo> key, value;
					if (!(value = Call(node->value.Obj(), true))) return;
					if (node->key)
					{
						if (!(key = Call(node->key.Obj(), true))) return;
					}
					
					ITypeDescriptor* typeDescriptor = nullptr;
					if (node->writability == WfMapWritability::Writable)
					{
						if (node->key)
						{
							typeDescriptor = description::GetTypeDescriptor<IValueDictionary>();
						}
						else
						{
							typeDescriptor = description::GetTypeDescriptor<IValueList>();
						}
					}
					else
					{
						if (node->key)
						{
							typeDescriptor = description::GetTypeDescriptor<IValueReadonlyDictionary>();
						}
						else
						{
							typeDescriptor = description::GetTypeDescriptor<IValueReadonlyList>();
						}
					}

					auto mapTypeInfo = MakePtr<TypeDescriptorTypeInfo>(typeDescriptor, TypeInfoHint::Normal);
					auto genericTypeInfo = MakePtr<GenericTypeInfo>(mapTypeInfo);
					if (key) genericTypeInfo->AddGenericArgument(key);
					genericTypeInfo->AddGenericArgument(value);
					result = MakePtr<SharedPtrTypeInfo>(genericTypeInfo);
				}

				void Visit(WfFunctionType* node)override
				{
					if (Ptr<ITypeInfo> returnType = Call(node->result.Obj(), true))
					{
						auto enumerableTypeInfo = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueFunctionProxy>(), TypeInfoHint::Normal);
						auto genericTypeInfo = MakePtr<GenericTypeInfo>(enumerableTypeInfo);
						genericTypeInfo->AddGenericArgument(returnType);
						FOREACH(Ptr<WfType>, argument, node->arguments)
						{
							if (Ptr<ITypeInfo> argumentType = Call(argument.Obj(), true))
							{
								genericTypeInfo->AddGenericArgument(argumentType);
							}
							else
							{
								return;
							}
						}
						result = MakePtr<SharedPtrTypeInfo>(genericTypeInfo);
					}
				}

				void Visit(WfChildType* node)override
				{
					VisitReferenceType(node);
				}

				static Ptr<ITypeInfo> Execute(WfLexicalScope* scope, WfType* type)
				{
					return CreateTypeInfoFromTypeVisitor(scope).Call(type, true);
				}
			};

			Ptr<reflection::description::ITypeInfo>	CreateTypeInfoFromType(WfLexicalScope* scope, Ptr<WfType> type)
			{
				return CreateTypeInfoFromTypeVisitor::Execute(scope, type.Obj());
			}

/***********************************************************************
CreateTypeInfoFromType
***********************************************************************/
			
			Ptr<reflection::description::ITypeInfo>	CopyTypeInfo(reflection::description::ITypeInfo* typeInfo)
			{
				switch (typeInfo->GetDecorator())
				{
				case ITypeInfo::RawPtr:
					return MakePtr<RawPtrTypeInfo>(CopyTypeInfo(typeInfo->GetElementType()));
				case ITypeInfo::SharedPtr:
					return MakePtr<SharedPtrTypeInfo>(CopyTypeInfo(typeInfo->GetElementType()));
				case ITypeInfo::Nullable:
					return MakePtr<NullableTypeInfo>(CopyTypeInfo(typeInfo->GetElementType()));
				case ITypeInfo::TypeDescriptor:
					return MakePtr<TypeDescriptorTypeInfo>(typeInfo->GetTypeDescriptor(), typeInfo->GetHint());
				case ITypeInfo::Generic:
					{
						auto impl = MakePtr<GenericTypeInfo>(typeInfo->GetElementType());
						vint count = typeInfo->GetGenericArgumentCount();
						for (vint i = 0; i < count; i++)
						{
							impl->AddGenericArgument(CopyTypeInfo(typeInfo->GetGenericArgument(i)));
						}
						return impl;
					}
				default:
					return 0;
				}
			}

/***********************************************************************
CanConvertToType
***********************************************************************/

			bool CanConvertToType(reflection::description::ITypeInfo* fromType, reflection::description::ITypeInfo* toType, bool explicitly)
			{
				ITypeDescriptor* objectType = GetTypeDescriptor<Value>();
				bool fromObject = fromType->GetDecorator() == ITypeInfo::TypeDescriptor && fromType->GetTypeDescriptor() == objectType;
				bool toObject = toType->GetDecorator() == ITypeInfo::TypeDescriptor && toType->GetTypeDescriptor() == objectType;

				if (fromObject && toObject)
				{
					return true;
				}
				else if (fromObject)
				{
					return explicitly;
				}
				else if (toObject)
				{
					return true;
				}

				switch (fromType->GetDecorator())
				{
				case ITypeInfo::RawPtr:
					switch (toType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
						return CanConvertToType(fromType->GetElementType(), toType->GetElementType(), explicitly);
					case ITypeInfo::SharedPtr:
						return explicitly && CanConvertToType(fromType->GetElementType(), toType->GetElementType(), explicitly);
					case ITypeInfo::Nullable:
					case ITypeInfo::TypeDescriptor:
					case ITypeInfo::Generic:
						return false;
					}
					break;
				case ITypeInfo::SharedPtr:
					switch (toType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
						return explicitly && CanConvertToType(fromType->GetElementType(), toType->GetElementType(), explicitly);
					case ITypeInfo::SharedPtr:
						return CanConvertToType(fromType->GetElementType(), toType->GetElementType(), explicitly);
					case ITypeInfo::Nullable:
					case ITypeInfo::TypeDescriptor:
					case ITypeInfo::Generic:
						return false;
					}
					break;
				case ITypeInfo::Nullable:
					switch (toType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
					case ITypeInfo::SharedPtr:
						return false;
					case ITypeInfo::Nullable:
						return CanConvertToType(fromType->GetElementType(), toType->GetElementType(), explicitly);
					case ITypeInfo::TypeDescriptor:
						return explicitly && CanConvertToType(fromType->GetElementType(), toType, explicitly);
					case ITypeInfo::Generic:
						return false;
					}
					break;
				case ITypeInfo::TypeDescriptor:
					switch (toType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
					case ITypeInfo::SharedPtr:
						return false;
					case ITypeInfo::Nullable:
						return CanConvertToType(fromType, toType->GetElementType(), explicitly);
					case ITypeInfo::TypeDescriptor:
						{
							ITypeDescriptor* fromTd = fromType->GetTypeDescriptor();
							ITypeDescriptor* toTd = toType->GetTypeDescriptor();
							bool fromValue = (fromTd->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) == TypeDescriptorFlags::Undefined;
							bool toValue = (toTd->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) == TypeDescriptorFlags::Undefined;
							if (fromValue != toValue)
							{
								return false;
							}

							if (fromValue)
							{
								if (fromTd == toTd)
								{
									return true;
								}
								else if (fromTd == GetTypeDescriptor<WString>())
								{
									return explicitly && toTd->GetSerializableType() != nullptr;
								}
								else if (toTd == GetTypeDescriptor<WString>())
								{
									return fromTd->GetSerializableType() != nullptr;
								}

								TypeFlag fromFlag = GetTypeFlag(fromTd);
								TypeFlag toFlag = GetTypeFlag(toTd);
								static vint conversionTable[(vint)TypeFlag::Count][(vint)TypeFlag::Count] = {
									/*Bool		*/{1, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, /**/ 1, 0, 0, 0},
									//-------------------------------------------------------------------------------
									/*I1		*/{0, /**/ 1, 1, 1, 1, /**/ 2, 2, 2, 2, /**/ 1, 1, /**/ 1, 0, 0, 0},
									/*I2		*/{0, /**/ 2, 1, 1, 1, /**/ 2, 2, 2, 2, /**/ 1, 1, /**/ 1, 0, 0, 0},
									/*I4		*/{0, /**/ 2, 2, 1, 1, /**/ 2, 2, 2, 2, /**/ 2, 1, /**/ 1, 0, 0, 0},
									/*I8		*/{0, /**/ 2, 2, 2, 1, /**/ 2, 2, 2, 2, /**/ 2, 1, /**/ 1, 0, 0, 0},
									//-------------------------------------------------------------------------------
									/*U1		*/{0, /**/ 2, 2, 2, 2, /**/ 1, 1, 1, 1, /**/ 1, 1, /**/ 1, 0, 0, 0},
									/*U2		*/{0, /**/ 2, 2, 2, 2, /**/ 2, 1, 1, 1, /**/ 1, 1, /**/ 1, 0, 0, 0},
									/*U4		*/{0, /**/ 2, 2, 2, 2, /**/ 2, 2, 1, 1, /**/ 2, 1, /**/ 1, 0, 0, 0},
									/*U8		*/{0, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 1, /**/ 2, 1, /**/ 1, 2, 0, 0},
									//-------------------------------------------------------------------------------
									/*F4		*/{0, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 1, 1, /**/ 1, 0, 0, 0},
									/*F8		*/{0, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 1, /**/ 1, 0, 0, 0},
									//-------------------------------------------------------------------------------
									/*String	*/{2, /**/ 2, 2, 2, 2, /**/ 2, 2, 2, 2, /**/ 2, 2, /**/ 1, 0, 0, 0},
									/*Enum		*/{0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 2, /**/ 0, 0, /**/ 0, 0, 0, 0},
									/*Struct	*/{0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, /**/ 0, 0, 0, 0},
									/*Others	*/{0, /**/ 0, 0, 0, 0, /**/ 0, 0, 0, 0, /**/ 0, 0, /**/ 0, 0, 0, 0},
								};
								vint conversion = conversionTable[(vint)fromFlag][(vint)toFlag];
								return conversion == 1 || (explicitly && conversion == 2);
							}
							else
							{
								if (fromTd->CanConvertTo(toTd))
								{
									return true;
								}
								if (explicitly && toTd->CanConvertTo(fromTd))
								{
									return true;
								}
							}
						}
						break;
					case ITypeInfo::Generic:
						return explicitly && CanConvertToType(fromType, toType->GetElementType(), explicitly);
					}
					break;
				case ITypeInfo::Generic:
					switch (toType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
					case ITypeInfo::SharedPtr:
					case ITypeInfo::Nullable:
						return false;
					case ITypeInfo::TypeDescriptor:
						return CanConvertToType(fromType->GetElementType(), toType, explicitly);
					case ITypeInfo::Generic:
						if (explicitly) return true;
						if (fromType->GetGenericArgumentCount() != toType->GetGenericArgumentCount())
						{
							return false;
						}
						if (!CanConvertToType(fromType->GetElementType(), toType->GetElementType(), explicitly)) return false;
						for (vint i = 0; i < fromType->GetGenericArgumentCount(); i++)
						{
							if (!IsSameType(fromType->GetGenericArgument(i), toType->GetGenericArgument(i)))
							{
								return false;
							}
						}
						return true;
					}
					break;
				}
				return false;
			}

/***********************************************************************
IsSameType
***********************************************************************/

			bool IsSameType(reflection::description::ITypeInfo* fromType, reflection::description::ITypeInfo* toType)
			{
				if (fromType->GetDecorator() != toType->GetDecorator())
				{
					return false;
				}
				switch (fromType->GetDecorator())
				{
				case ITypeInfo::RawPtr:
				case ITypeInfo::SharedPtr:
				case ITypeInfo::Nullable:
					return IsSameType(fromType->GetElementType(), toType->GetElementType());
				case ITypeInfo::TypeDescriptor:
					return fromType->GetTypeDescriptor() == toType->GetTypeDescriptor();
				case ITypeInfo::Generic:
					if (fromType->GetGenericArgumentCount() != toType->GetGenericArgumentCount())
					{
						return false;
					}
					if (!IsSameType(fromType->GetElementType(), toType->GetElementType())) return false;
					for (vint i = 0; i < fromType->GetGenericArgumentCount(); i++)
					{
						if (!IsSameType(fromType->GetGenericArgument(i), toType->GetGenericArgument(i)))
						{
							return false;
						}
					}
					return true;
				}
				return false;
			}

/***********************************************************************
GetMergedType
***********************************************************************/

			Ptr<reflection::description::ITypeInfo>	GetMergedType(Ptr<reflection::description::ITypeInfo> firstType, Ptr<reflection::description::ITypeInfo> secondType)
			{
				if (CanConvertToType(secondType.Obj(), firstType.Obj(), false))
				{
					return firstType;
				}
				else if (CanConvertToType(firstType.Obj(), secondType.Obj(), false))
				{
					return secondType;
				}
				else
				{
					return 0;
				}
			}

/***********************************************************************
IsNullAcceptableType
***********************************************************************/

			bool IsNullAcceptableType(reflection::description::ITypeInfo* type)
			{
				switch (type->GetDecorator())
				{
				case ITypeInfo::RawPtr:
				case ITypeInfo::SharedPtr:
				case ITypeInfo::Nullable:
					return true;
				case ITypeInfo::TypeDescriptor:
					return type->GetTypeDescriptor() == description::GetTypeDescriptor<Value>();
				case ITypeInfo::Generic:
					return false;
				}
				return false;
			}

/***********************************************************************
CreateTypeInfoFromMethodInfo
***********************************************************************/

			Ptr<reflection::description::ITypeInfo> CreateTypeInfoFromMethodInfo(reflection::description::IMethodInfo* info)
			{
				auto elementType = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueFunctionProxy>(), TypeInfoHint::Normal);
				auto genericType = MakePtr<GenericTypeInfo>(elementType);
				genericType->AddGenericArgument(CopyTypeInfo(info->GetReturn()));
				vint parameterCount = info->GetParameterCount();
				for (vint j = 0; j < parameterCount; j++)
				{
					genericType->AddGenericArgument(CopyTypeInfo(info->GetParameter(j)->GetType()));
				}
				return MakePtr<SharedPtrTypeInfo>(genericType);
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_VALIDATESEMANTIC.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;
			using namespace typeimpl;

/***********************************************************************
Helper Functions
***********************************************************************/

			IMethodInfo* FindInterfaceConstructor(ITypeDescriptor* type)
			{
				if (auto ctors = type->GetConstructorGroup())
				{
					auto proxyTd = description::GetTypeDescriptor<IValueInterfaceProxy>();
					for (vint i = 0; i < ctors->GetMethodCount(); i++)
					{
						IMethodInfo* info = ctors->GetMethod(i);
						if (info->GetParameterCount() == 1)
						{
							ITypeInfo* parameterType = info->GetParameter(0)->GetType();
							if (parameterType->GetDecorator() == ITypeInfo::SharedPtr)
							{
								parameterType = parameterType->GetElementType();
								if (parameterType->GetDecorator() == ITypeInfo::TypeDescriptor && parameterType->GetTypeDescriptor() == proxyTd)
								{
									return info;
								}
							}
						}
					}
				}
				return nullptr;
			}

			ITypeInfo* GetFunctionType(const ResolveExpressionResult& result)
			{
				if (result.eventInfo)
				{
					return result.eventInfo->GetHandlerType();
				}
				else if (result.type)
				{
					return result.type.Obj();
				}
				else
				{
					return nullptr;
				}
			}

			Ptr<ITypeInfo> SelectFunction(WfLexicalScopeManager* manager, parsing::ParsingTreeCustomBase* node, Ptr<WfExpression> functionExpression, List<ResolveExpressionResult>& functions, List<Ptr<WfExpression>>& arguments, vint& selectedFunctionIndex)
			{
				selectedFunctionIndex = -1;

				List<bool> resolvables;
				List<Ptr<ITypeInfo>> types;
				FOREACH(Ptr<WfExpression>, argument, arguments)
				{
					if (!argument || IsExpressionDependOnExpectedType(manager, argument))
					{
						resolvables.Add(false);
						types.Add(nullptr);
					}
					else
					{
						resolvables.Add(true);
						types.Add(GetExpressionType(manager, argument, 0));
					}
				}

				List<Ptr<parsing::ParsingError>> functionErrors, nonFunctionErrors;
				List<vint> selectedFunctionIndices;
				ITypeDescriptor* functionFd = description::GetTypeDescriptor<IValueFunctionProxy>();
				for (vint i = 0; i < functions.Count(); i++)
				{
					bool failed = false;
					auto result = functions[i];
					ITypeInfo* expressionType = GetFunctionType(result);

					if (expressionType->GetDecorator() == ITypeInfo::SharedPtr)
					{
						ITypeInfo* genericType = expressionType->GetElementType();
						if (genericType->GetDecorator() != ITypeInfo::Generic) goto FUNCTION_TYPE_FAILED;
						ITypeInfo* functionType = genericType->GetElementType();
						if (functionType->GetDecorator() != ITypeInfo::TypeDescriptor || functionType->GetTypeDescriptor() != functionFd) goto FUNCTION_TYPE_FAILED;
								
						if (genericType->GetGenericArgumentCount() != types.Count() + 1)
						{
							functionErrors.Add(WfErrors::FunctionArgumentCountMismatched(node, arguments.Count(), result));
							failed = true;
						}
						else
						{
							for (vint j = 0; j < types.Count(); j++)
							{
								if (resolvables[j] && types[j])
								{
									ITypeInfo* argumentType = genericType->GetGenericArgument(j + 1);
									if (!CanConvertToType(types[j].Obj(), argumentType, false))
									{
										functionErrors.Add(WfErrors::FunctionArgumentTypeMismatched(node, result, i + 1, types[j].Obj(), argumentType));
										failed = true;
									}
								}
							}
						}
					}
					else
					{
						goto FUNCTION_TYPE_FAILED;
					}

					goto FUNCTION_TYPE_FINISHED;
				FUNCTION_TYPE_FAILED:
					nonFunctionErrors.Add(WfErrors::ExpressionIsNotFunction(functionExpression.Obj(), result.type.Obj()));
					failed = true;
				FUNCTION_TYPE_FINISHED:
					if (!failed)
					{
						selectedFunctionIndices.Add(i);
					}
				}

				if (selectedFunctionIndices.Count() == 1)
				{
					selectedFunctionIndex = selectedFunctionIndices[0];
					ITypeInfo* genericType = GetFunctionType(functions[selectedFunctionIndex])->GetElementType();
					for (vint i = 0; i < types.Count(); i++)
					{
						if (!resolvables[i])
						{
							ITypeInfo* argumentType = genericType->GetGenericArgument(i + 1);
							if (arguments[i])
							{
								GetExpressionType(manager, arguments[i], CopyTypeInfo(argumentType));
							}
						}
					}
					return CopyTypeInfo(genericType->GetGenericArgument(0));
				}
				else
				{
					if (selectedFunctionIndices.Count() > 1)
					{
						List<ResolveExpressionResult> overloadedFunctions;
						CopyFrom(
							overloadedFunctions,
							From(selectedFunctionIndices)
							.Select([&functions](vint index)
							{
								return functions[index];
							}));
						manager->errors.Add(WfErrors::CannotPickOverloadedFunctions(node, overloadedFunctions));
					}

					if (functionErrors.Count() > 0)
					{
						CopyFrom(manager->errors, functionErrors, true);
					}
					else
					{
						CopyFrom(manager->errors, nonFunctionErrors, true);
					}
					return nullptr;
				}
			}

/***********************************************************************
ValidateSemantic(ClassMember)
***********************************************************************/

			class ValidateSemanticClassMemberVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;
				Ptr<WfCustomType>					td;
				Ptr<WfClassDeclaration>				classDecl;

				ValidateSemanticClassMemberVisitor(Ptr<WfCustomType> _td, Ptr<WfClassDeclaration> _classDecl, WfLexicalScopeManager* _manager)
					:td(_td)
					, classDecl(_classDecl)
					, manager(_manager)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
				}

				void Visit(WfVariableDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
				}

				void Visit(WfEventDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
				}

				void Visit(WfPropertyDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);

					auto scope = manager->nodeScopes[node];
					if (auto typeInfo = CreateTypeInfoFromType(scope.Obj(), node->type))
					{
						if (node->getter.value != L"")
						{
							auto getter = td->GetMethodGroupByName(node->getter.value, false)->GetMethod(0);
							if (!IsSameType(typeInfo.Obj(), getter->GetReturn()) || getter->GetParameterCount() != 0)
							{
								manager->errors.Add(WfErrors::PropertyGetterTypeMismatched(node, classDecl.Obj()));
							}
						}

						if (node->setter.value != L"")
						{
							auto setter = td->GetMethodGroupByName(node->setter.value, false)->GetMethod(0);
							if (setter->GetReturn()->GetTypeDescriptor() != description::GetTypeDescriptor<void>() || setter->GetParameterCount() != 1 || !IsSameType(typeInfo.Obj(), setter->GetParameter(0)->GetType()))
							{
								manager->errors.Add(WfErrors::PropertySetterTypeMismatched(node, classDecl.Obj()));
							}
						}
					}
				}

				static void SelectConstructor(WfLexicalScopeManager* manager, WfConstructorDeclaration* ctorDecl, parsing::ParsingTreeCustomBase* node, ITypeDescriptor* td, List<Ptr<WfExpression>>& arguments)
				{
					List<ResolveExpressionResult> functions;
					if (auto ctors = td->GetConstructorGroup())
					{
						vint count = ctors->GetMethodCount();
						for (vint i = 0; i < count; i++)
						{
							auto ctor = ctors->GetMethod(i);
							functions.Add(ResolveExpressionResult::Method(ctor));
						}
					}

					vint selectedFunctionIndex = -1;
					SelectFunction(manager, node, nullptr, functions, arguments, selectedFunctionIndex);
					if (selectedFunctionIndex != -1)
					{
						auto ctor = functions[selectedFunctionIndex].methodInfo;
						auto call = dynamic_cast<WfBaseConstructorCall*>(node);
						manager->baseConstructorCallResolvings.Add({ctorDecl, td}, {call, ctor});
					}
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);

					auto scope = manager->nodeScopes[node].Obj();
					auto classScope = scope->parentScope.Obj();
					SortedList<ITypeDescriptor*> baseTypes, initTypes;
					{
						auto td = classScope->typeOfThisExpr;
						vint count = td->GetBaseTypeDescriptorCount();
						for (vint i = 0; i < count; i++)
						{
							auto baseTd = td->GetBaseTypeDescriptor(i);
							if (!baseTypes.Contains(baseTd))
							{
								baseTypes.Add(baseTd);
							}
						}
					}

					FOREACH(Ptr<WfBaseConstructorCall>, call, node->baseConstructorCalls)
					{
						if (auto scopeName = GetScopeNameFromReferenceType(classScope, call->type))
						{
							if (auto td = scopeName->typeDescriptor)
							{
								if (initTypes.Contains(td))
								{
									manager->errors.Add(WfErrors::DuplicatedBaseConstructorCall(call.Obj(), td));
								}
								else if (baseTypes.Contains(td))
								{
									initTypes.Add(td);
									SelectConstructor(manager, node, call.Obj(), td, call->arguments);
								}
								else
								{
									manager->errors.Add(WfErrors::WrongBaseConstructorCall(call.Obj(), td));
								}
							}
						}
					}

					{
						vint index = -1;
						for (vint i = 0; i < initTypes.Count(); i++)
						{
							while (baseTypes[++index] != initTypes[i])
							{
								auto td = baseTypes[index];
								List<Ptr<WfExpression>> arguments;
								SelectConstructor(manager, node, node, td, arguments);
							}
						}
						while (++index < baseTypes.Count())
						{
							auto td = baseTypes[index];
							List<Ptr<WfExpression>> arguments;
							SelectConstructor(manager, node, node, td, arguments);
						}
					}

					ValidateStatementSemantic(manager, node->statement);
				}

				void Visit(WfDestructorDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
					ValidateStatementSemantic(manager, node->statement);
				}

				void Visit(WfClassDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
				}

				void Visit(WfEnumDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
				}

				void Visit(WfStructDeclaration* node)override
				{
					ValidateDeclarationSemantic(manager, node);
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				static void Execute(Ptr<WfCustomType> td, Ptr<WfClassDeclaration> classDecl, Ptr<WfDeclaration> memberDecl, WfLexicalScopeManager* manager)
				{
					ValidateSemanticClassMemberVisitor visitor(td, classDecl, manager);
					memberDecl->Accept(&visitor);
				}
			};

/***********************************************************************
ValidateSemantic(Declaration)
***********************************************************************/

			class ValidateSemanticDeclarationVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;

				ValidateSemanticDeclarationVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				void Visit(List<Ptr<WfAttribute>>& attributes)
				{
					FOREACH(Ptr<WfAttribute>, attribute, attributes)
					{
						auto key = Pair<WString, WString>(attribute->category.value, attribute->name.value);
						vint index = manager->attributes.Keys().IndexOf(key);
						if (index == -1)
						{
							manager->errors.Add(WfErrors::AttributeNotExists(attribute.Obj()));
						}
						else
						{
							auto expectedType = manager->attributes.Values()[index];
							if (attribute->value)
							{
								ValidateConstantExpression(manager, attribute->value, expectedType);
							}
							else if (expectedType->GetTypeDescriptor() != description::GetTypeDescriptor<void>())
							{
								manager->errors.Add(WfErrors::AttributeMissValue(attribute.Obj()));
							}
						}
					}
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, declaration, node->declarations)
					{
						ValidateDeclarationSemantic(manager, declaration);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (node->statement)
					{
						ValidateStatementSemantic(manager, node->statement);
					}
					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						Visit(argument->attributes);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto symbol = scope->symbols[node->name.value][0];
					symbol->typeInfo = GetExpressionType(manager, node->expression, symbol->typeInfo);
					if (symbol->typeInfo && !symbol->type)
					{
						symbol->type = GetTypeFromTypeInfo(symbol->typeInfo.Obj());
					}
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
				}

				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto td = manager->declarationTypes[node].Cast<WfCustomType>();

					if (node->kind == WfClassKind::Interface)
					{
						FOREACH(Ptr<WfType>, baseType, node->baseTypes)
						{
							auto scopeName = GetScopeNameFromReferenceType(scope->parentScope.Obj(), baseType);
							auto baseTd = scopeName->typeDescriptor;
							auto ctor = FindInterfaceConstructor(baseTd);
							if (ctor == nullptr)
							{
								manager->errors.Add(WfErrors::WrongInterfaceBaseType(node, baseTd));
							}
						}
					}

					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						ValidateClassMemberSemantic(manager, td, node, memberDecl);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
					FOREACH(Ptr<WfEnumItem>, item, node->items)
					{
						Visit(item->attributes);
					}
				}

				void SearchForItself(WfStructDeclaration* node, ITypeDescriptor* target, ITypeDescriptor* current, List<WString>& path)
				{
					if (target == current)
					{
						manager->errors.Add(WfErrors::StructRecursivelyIncludeItself(
							node, 
							From(path).Aggregate([](const WString& a, const WString& b) {return a + L"::" + b; })
							));
						return;
					}

					if (current == nullptr)
					{
						current = target;
					}

					vint count = current->GetPropertyCount();
					for (vint i = 0; i < count; i++)
					{
						auto prop = current->GetProperty(i);
						auto propType = prop->GetReturn();
						auto propTd = prop->GetReturn()->GetTypeDescriptor();
						if (propType->GetDecorator()==ITypeInfo::TypeDescriptor && propTd->GetTypeDescriptorFlags() == TypeDescriptorFlags::Struct)
						{
							vint index = path.Add(prop->GetName());
							SearchForItself(node, target, propTd, path);
							path.RemoveAt(index);
						}
					}
				}

				void Visit(WfStructDeclaration* node)override
				{
					auto scope = manager->nodeScopes[node];
					auto td = manager->declarationTypes[node].Cast<WfStruct>();
					FOREACH(Ptr<WfStructMember>, member, node->members)
					{
						auto memberTd = td->GetPropertyByName(member->name.value, false)->GetReturn()->GetTypeDescriptor();
						if ((memberTd->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) != TypeDescriptorFlags::Undefined)
						{
							manager->errors.Add(WfErrors::StructContainsNonValueType(member.Obj(), node));
						}
					}
					List<WString> path;
					path.Add(td->GetTypeName());
					SearchForItself(node, td.Obj(), nullptr, path);

					FOREACH(Ptr<WfStructMember>, member, node->members)
					{
						Visit(member->attributes);
					}
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				static void Execute(Ptr<WfDeclaration> declaration, WfLexicalScopeManager* manager)
				{
					ValidateSemanticDeclarationVisitor visitor(manager);
					declaration->Accept(&visitor);
					visitor.Visit(declaration->attributes);
				}
			};

/***********************************************************************
ValidateSemantic(Statement)
***********************************************************************/

			class ExpandVirtualStatementVisitor : public Object, public WfVirtualStatement::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;

				ExpandVirtualStatementVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				void Visit(WfSwitchStatement* node)override
				{
					ExpandSwitchStatement(manager, node);
				}

				void Visit(WfForEachStatement* node)override
				{
					ExpandForEachStatement(manager, node);
				}

				void Visit(WfCoProviderStatement* node)override
				{
					ExpandCoProviderStatement(manager, node);
				}
			};

			class ValidateSemanticStatementVisitor
				: public Object
				, public WfStatement::IVisitor
				, public WfVirtualStatement::IVisitor
				, public WfCoroutineStatement::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;

				ValidateSemanticStatementVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				void Visit(WfBreakStatement* node)override
				{
				}

				void Visit(WfContinueStatement* node)override
				{
				}

				void Visit(WfReturnStatement* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					auto functionScope = scope->FindFunctionScope();
					if (auto funcDecl = functionScope->ownerNode.Cast<WfFunctionDeclaration>())
					{
						auto providerStat = funcDecl->statement.Cast<WfCoProviderStatement>();
						if (providerStat && !providerStat->expandedStatement)
						{
							auto providerScope = manager->nodeScopes[funcDecl->statement.Obj()];
							auto providerSymbol = providerScope->symbols[L"$PROVIDER"][0];
							auto implSymbol = providerScope->symbols[L"$IMPL"][0];
							if (providerSymbol->typeInfo && implSymbol->typeInfo)
							{
								if (auto group = providerSymbol->typeInfo->GetTypeDescriptor()->GetMethodGroupByName(L"ReturnAndExit", true))
								{
									List<ResolveExpressionResult> functions;
									vint count = group->GetMethodCount();
									for (vint i = 0; i < count; i++)
									{
										auto method = group->GetMethod(i);
										if (method->IsStatic())
										{
											if (method->GetParameterCount() > 0 && IsSameType(implSymbol->typeInfo.Obj(), method->GetParameter(0)->GetType()))
											{
												functions.Add(ResolveExpressionResult::Method(method));
											}
										}
									}

									vint selectedFunctionIndex = -1;
									List<Ptr<WfExpression>> arguments;
									arguments.Add(nullptr);
									if (node->expression)
									{
										arguments.Add(node->expression);
									}
									SelectFunction(manager, node, nullptr, functions, arguments, selectedFunctionIndex);
									if (selectedFunctionIndex != -1)
									{
										manager->coOperatorResolvings.Add(node, functions[selectedFunctionIndex]);
									}
								}
								else
								{
									manager->errors.Add(WfErrors::CoOperatorNotExists(node, providerSymbol->typeInfo.Obj()));
								}
							}
						}
						else
						{
							auto returnType = CreateTypeInfoFromType(scope, funcDecl->returnType);
							if (node->expression)
							{
								if (returnType->GetTypeDescriptor() == description::GetTypeDescriptor<void>())
								{
									manager->errors.Add(WfErrors::CannotReturnExpression(node));
								}
								else
								{
									GetExpressionType(manager, node->expression, returnType);
								}
							}
							else if (returnType->GetDecorator() != ITypeInfo::TypeDescriptor || returnType->GetTypeDescriptor() != description::GetTypeDescriptor<void>())
							{
								manager->errors.Add(WfErrors::ReturnMissExpression(node, returnType.Obj()));
							}
						}
					}
					else
					{
						if (node->expression)
						{
							manager->errors.Add(WfErrors::CannotReturnExpression(node));
						}
					}
				}

				void Visit(WfDeleteStatement* node)override
				{
					Ptr<ITypeInfo> type = GetExpressionType(manager, node->expression, 0);
					if (type)
					{
						if (type->GetDecorator() != ITypeInfo::RawPtr)
						{
							manager->errors.Add(WfErrors::DeleteNonRawPointer(node, type.Obj()));
						}
					}
				}

				void Visit(WfRaiseExceptionStatement* node)override
				{
					if (node->expression)
					{
						if (auto type = GetExpressionType(manager, node->expression, nullptr))
						{
							auto stringType = TypeInfoRetriver<WString>::CreateTypeInfo();
							auto exceptionType = TypeInfoRetriver<Ptr<IValueException>>::CreateTypeInfo();
							if (!CanConvertToType(type.Obj(), stringType.Obj(), false) && !CanConvertToType(type.Obj(), exceptionType.Obj(), false))
							{
								manager->errors.Add(WfErrors::ExpressionCannotImplicitlyConvertToType(node->expression.Obj(), type.Obj(), stringType.Obj()));
							}
						}
					}
				}

				void Visit(WfIfStatement* node)override
				{
					if (node->type)
					{
						auto scope = manager->nodeScopes[node].Obj();
						auto symbol = scope->symbols[node->name.value][0];
						if (!IsNullAcceptableType(symbol->typeInfo.Obj()))
						{
							manager->errors.Add(WfErrors::NullCannotImplicitlyConvertToType(node->expression.Obj(), symbol->typeInfo.Obj()));
						}
						GetExpressionType(manager, node->expression, nullptr);
					}
					else
					{
						Ptr<ITypeInfo> boolType = TypeInfoRetriver<bool>::CreateTypeInfo();
						GetExpressionType(manager, node->expression, boolType);
					}
					ValidateStatementSemantic(manager, node->trueBranch);
					if (node->falseBranch)
					{
						ValidateStatementSemantic(manager, node->falseBranch);
					}
				}

				void Visit(WfWhileStatement* node)override
				{
					Ptr<ITypeInfo> boolType = TypeInfoRetriver<bool>::CreateTypeInfo();
					GetExpressionType(manager, node->condition, boolType);
					ValidateStatementSemantic(manager, node->statement);
				}

				void Visit(WfTryStatement* node)override
				{
					ValidateStatementSemantic(manager, node->protectedStatement);
					if (node->catchStatement)
					{
						ValidateStatementSemantic(manager, node->catchStatement);
					}
					if (node->finallyStatement)
					{
						ValidateStatementSemantic(manager, node->finallyStatement);
					}
				}

				void Visit(WfBlockStatement* node)override
				{
					FOREACH(Ptr<WfStatement>, statement, node->statements)
					{
						ValidateStatementSemantic(manager, statement);
					}
				}

				void Visit(WfExpressionStatement* node)override
				{
					GetExpressionType(manager, node->expression, 0);
				}

				void Visit(WfVariableStatement* node)override
				{
					ValidateDeclarationSemantic(manager, node->variable);
				}

				void Visit(WfVirtualStatement* node)override
				{
					bool expanded = node->expandedStatement;
					vint errorCount = manager->errors.Count();
					node->Accept((WfVirtualStatement::IVisitor*)this);

					if (!expanded && manager->errors.Count() == errorCount)
					{
						ExpandVirtualStatementVisitor visitor(manager);
						node->Accept(&visitor);
						SetCodeRange(node->expandedStatement, node->codeRange);

						auto parentScope = manager->nodeScopes[node];
						if (parentScope->ownerNode == node)
						{
							parentScope = parentScope->parentScope;
						}

						ContextFreeStatementDesugar(manager, node->expandedStatement);
						BuildScopeForStatement(manager, parentScope, node->expandedStatement);
						if (!CheckScopes_DuplicatedSymbol(manager) || !CheckScopes_SymbolType(manager))
						{
							return;
						}
					}

					if (node->expandedStatement)
					{
						ValidateStatementSemantic(manager, node->expandedStatement);
					}
				}

				void Visit(WfSwitchStatement* node)override
				{
					Ptr<ITypeInfo> type = GetExpressionType(manager, node->expression, 0);
					FOREACH(Ptr<WfSwitchCase>, switchCase, node->caseBranches)
					{
						Ptr<ITypeInfo> caseType;
						if (IsExpressionDependOnExpectedType(manager, switchCase->expression))
						{
							caseType = GetExpressionType(manager, switchCase->expression, type);
						}
						else
						{
							caseType = GetExpressionType(manager, switchCase->expression, 0);
						}

						if (type && caseType)
						{
							if (!GetMergedType(type, caseType))
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(switchCase->expression.Obj(), type.Obj(), caseType.Obj()));
							}
						}
						ValidateStatementSemantic(manager, switchCase->statement);
					}
					if (node->defaultBranch)
					{
						ValidateStatementSemantic(manager, node->defaultBranch);
					}
				}

				void Visit(WfForEachStatement* node)override
				{
					Ptr<ITypeInfo> elementType = GetEnumerableExpressionItemType(manager, node->collection, 0);
					if (elementType)
					{
						auto scope = manager->nodeScopes[node].Obj();
						auto symbol = scope->symbols[node->name.value][0];
						symbol->typeInfo = elementType;
						symbol->type = GetTypeFromTypeInfo(elementType.Obj());
					}
					ValidateStatementSemantic(manager, node->statement);
				}

				void Visit(WfCoProviderStatement* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					auto providerSymbol = scope->symbols[L"$PROVIDER"][0];
					auto implSymbol = scope->symbols[L"$IMPL"][0];
					ITypeInfo* funcReturnType = nullptr;
					{
						auto decl = scope->parentScope->ownerNode.Cast<WfFunctionDeclaration>();
						auto funcSymbol = manager->GetDeclarationSymbol(scope->parentScope.Obj(), decl.Obj());
						if (funcSymbol->typeInfo)
						{
							funcReturnType = funcSymbol->typeInfo->GetElementType()->GetGenericArgument(0);
						}
					}
					ITypeDescriptor* selectedProviderTd = nullptr;
					List<WString> candidates;

					if (node->name.value == L"")
					{
						if (funcReturnType)
						{
							List<ITypeDescriptor*> unprocessed;
							unprocessed.Add(funcReturnType->GetTypeDescriptor());

							for (vint i = 0; i < unprocessed.Count(); i++)
							{
								auto td = unprocessed[i];
								auto candidate = td->GetTypeName() + L"Coroutine";
								if ((selectedProviderTd = description::GetTypeDescriptor(candidate)))
								{
									break;
								}
								else
								{
									candidates.Add(candidate);
								}

								vint count = td->GetBaseTypeDescriptorCount();
								for (vint i = 0; i < count; i++)
								{
									auto baseTd = td->GetBaseTypeDescriptor(i);
									if (!unprocessed.Contains(baseTd))
									{
										unprocessed.Add(baseTd);
									}
								}
							}
						}
					}
					else
					{
						List<ResolveExpressionResult> results, resolveResults;
						auto providerName = node->name.value.Right(node->name.value.Length() - 1);

						if (manager->ResolveName(scope, providerName, resolveResults))
						{
							CopyFrom(results, resolveResults);

							for (vint i = results.Count() - 1; i >= 0; i--)
							{
								auto& result = results[i];
								ITypeDescriptor* providerTd = nullptr;

								if (result.scopeName && result.scopeName->typeDescriptor)
								{
									auto candidate = result.scopeName->typeDescriptor->GetTypeName() + L"Coroutine";
									providerTd = description::GetTypeDescriptor(candidate);
									if (providerTd)
									{
										selectedProviderTd = providerTd;
									}
									else
									{
										candidates.Add(candidate);
									}
								}

								if (!providerTd)
								{
									results.RemoveAt(i);
								}
							}

							if (results.Count() == 1)
							{
								goto FINISH_SEARCHING;
							}
							else if (results.Count() > 1)
							{
								manager->errors.Add(WfErrors::TooManyTargets(node, resolveResults, providerName));
								goto SKIP_SEARCHING;
							}
						}

						resolveResults.Clear();
						if (manager->ResolveName(scope, providerName + L"Coroutine", resolveResults))
						{
							CopyFrom(results, resolveResults);

							for (vint i = results.Count() - 1; i >= 0; i--)
							{
								auto& result = results[i];

								if (result.scopeName && result.scopeName->typeDescriptor)
								{
									selectedProviderTd = result.scopeName->typeDescriptor;
								}
								else
								{
									results.RemoveAt(i);
								}
							}

							if (results.Count() == 1)
							{
								goto FINISH_SEARCHING;
							}
							else if (results.Count() > 1)
							{
								manager->errors.Add(WfErrors::TooManyTargets(node, resolveResults, providerName));
								goto SKIP_SEARCHING;
							}
						}

						candidates.Add(providerName);
						candidates.Add(providerName + L"Coroutine");
					}

				FINISH_SEARCHING:
					if (selectedProviderTd)
					{
						providerSymbol->typeInfo = MakePtr<TypeDescriptorTypeInfo>(selectedProviderTd, TypeInfoHint::Normal);

						if (funcReturnType)
						{
							WString creatorName;
							if (funcReturnType->GetTypeDescriptor() == description::GetTypeDescriptor<void>())
							{
								creatorName = L"CreateAndRun";
							}
							else
							{
								creatorName = L"Create";
							}

							if (auto group = selectedProviderTd->GetMethodGroupByName(creatorName, true))
							{
								List<ResolveExpressionResult> results;
								ITypeInfo* selectedImplType = nullptr;
								IMethodInfo* selectedCreator = nullptr;
								vint count = group->GetMethodCount();

								for (vint i = 0; i < count; i++)
								{
									auto method = group->GetMethod(i);
									if (method->IsStatic())
									{
										if (method->GetParameterCount() == 1)
										{
											auto creatorType = method->GetParameter(0)->GetType();
											if (creatorType->GetDecorator() == ITypeInfo::SharedPtr)
											{
												auto functionType = creatorType->GetElementType();
												if (functionType->GetDecorator() == ITypeInfo::Generic &&
													functionType->GetGenericArgumentCount() == 2 &&
													functionType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueFunctionProxy>()
													)
												{
													auto returnType = functionType->GetGenericArgument(0);
													if (returnType->GetDecorator() == ITypeInfo::SharedPtr &&returnType->GetTypeDescriptor() == description::GetTypeDescriptor<ICoroutine>())
													{
														selectedImplType = functionType->GetGenericArgument(1);
														selectedCreator = method;
														results.Add(ResolveExpressionResult::Method(method));
													}
												}
											}
										}
									}
								}

								if (results.Count() == 1)
								{
									implSymbol->typeInfo = CopyTypeInfo(selectedImplType);
									manager->coProviderResolvings.Add(node, ResolveExpressionResult::Method(selectedCreator));
								}
								else if (results.Count() > 1)
								{
									manager->errors.Add(WfErrors::TooManyTargets(node, results, creatorName));
								}
							}

							if (!implSymbol->typeInfo)
							{
								if (funcReturnType->GetTypeDescriptor() == description::GetTypeDescriptor<void>())
								{
									manager->errors.Add(WfErrors::CoProviderCreateAndRunNotExists(node, providerSymbol->typeInfo.Obj()));
								}
								else
								{
									manager->errors.Add(WfErrors::CoProviderCreateNotExists(node, providerSymbol->typeInfo.Obj()));
								}
							}
						}
					}
					else
					{
						manager->errors.Add(WfErrors::CoProviderNotExists(node, candidates));
					}
				SKIP_SEARCHING:
					ValidateStatementSemantic(manager, node->statement);
				}

				void Visit(WfCoroutineStatement* node)override
				{
					node->Accept((WfCoroutineStatement::IVisitor*)this);
				}

				void Visit(WfCoPauseStatement* node)override
				{
					if (node->statement)
					{
						ValidateStatementSemantic(manager, node->statement);
					}
				}

				void Visit(WfCoOperatorStatement* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					auto functionScope = scope->FindFunctionScope();
					if (auto funcDecl = functionScope->ownerNode.Cast<WfFunctionDeclaration>())
					{
						if (funcDecl->statement.Cast<WfCoProviderStatement>())
						{
							auto providerScope = manager->nodeScopes[funcDecl->statement.Obj()];
							auto providerSymbol = providerScope->symbols[L"$PROVIDER"][0];
							auto implSymbol = providerScope->symbols[L"$IMPL"][0];
							if (providerSymbol->typeInfo && implSymbol->typeInfo)
							{
								List<IMethodGroupInfo*> groups;
								auto operatorName = node->opName.value.Right(node->opName.value.Length() - 1);
								if (auto group = providerSymbol->typeInfo->GetTypeDescriptor()->GetMethodGroupByName(operatorName + L"AndRead", true))
								{
									groups.Add(group);
								}
								if (node->varName.value == L"")
								{
									if (auto group = providerSymbol->typeInfo->GetTypeDescriptor()->GetMethodGroupByName(operatorName + L"AndPause", true))
									{
										groups.Add(group);
									}
								}

								if (groups.Count() == 0)
								{
									manager->errors.Add(WfErrors::CoOperatorNotExists(node, providerSymbol->typeInfo.Obj()));
								}
								else
								{
									List<ResolveExpressionResult> functions;
									FOREACH(IMethodGroupInfo*, group, groups)
									{
										vint count = group->GetMethodCount();
										for (vint i = 0; i < count; i++)
										{
											auto method = group->GetMethod(i);
											if (method->IsStatic())
											{
												if (method->GetParameterCount() > 0 && IsSameType(implSymbol->typeInfo.Obj(), method->GetParameter(0)->GetType()))
												{
													functions.Add(ResolveExpressionResult::Method(method));
												}
											}
										}
									}

									vint selectedFunctionIndex = -1;
									vint oldErrorCount = manager->errors.Count();
									List<Ptr<WfExpression>> arguments;
									arguments.Add(nullptr);
									CopyFrom(arguments, node->arguments, true);
									SelectFunction(manager, node, nullptr, functions, arguments, selectedFunctionIndex);
									if (selectedFunctionIndex != -1)
									{
										manager->coOperatorResolvings.Add(node, functions[selectedFunctionIndex]);
										if (node->varName.value != L"" && manager->errors.Count() == oldErrorCount)
										{
											auto symbol = scope->symbols[node->varName.value][0];
											List<ITypeInfo*> types;

											FOREACH(Ptr<WfExpression>, argument, node->arguments)
											{
												vint index = manager->expressionResolvings.Keys().IndexOf(argument.Obj());
												if (index != -1)
												{
													auto type = manager->expressionResolvings.Values()[index].type;
													if (!types.Contains(type.Obj()))
													{
														types.Add(type.Obj());
														if (auto group = type->GetTypeDescriptor()->GetMethodGroupByName(L"CastResult", true))
														{
															vint count = group->GetMethodCount();
															for (vint i = 0; i < count; i++)
															{
																auto method = group->GetMethod(i);
																if (method->IsStatic())
																{
																	if (method->GetParameterCount() == 1 &&
																		method->GetParameter(0)->GetType()->GetTypeDescriptor() == description::GetTypeDescriptor<Value>() &&
																		method->GetReturn()->GetTypeDescriptor() != description::GetTypeDescriptor<void>()
																		)
																	{
																		manager->coCastResultResolvings.Add(node, ResolveExpressionResult::Method(method));
																		symbol->typeInfo = CopyTypeInfo(method->GetReturn());
																		break;
																	}
																}
															}
														}
													}
												}
											}

											if (!symbol->typeInfo)
											{
												manager->errors.Add(WfErrors::CoOperatorCannotResolveResultType(node, types));
											}
										}
									}
								}
							}
						}
					}
				}

				static void Execute(Ptr<WfStatement> statement, WfLexicalScopeManager* manager)
				{
					ValidateSemanticStatementVisitor visitor(manager);
					statement->Accept(&visitor);
				}
			};

/***********************************************************************
ValidateSemantic(Expression)
***********************************************************************/

			class ExpandVirtualExpressionVisitor : public Object, public WfVirtualExpression::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;

				ExpandVirtualExpressionVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				void Visit(WfBindExpression* node)override
				{
					ExpandBindExpression(manager, node);
				}

				void Visit(WfFormatExpression* node)override
				{
				}

				void Visit(WfNewCoroutineExpression* node)override
				{
					ExpandNewCoroutineExpression(manager, node);
				}
			};

			class ValidateSemanticExpressionVisitor
				: public Object
				, public WfExpression::IVisitor
				, public WfVirtualExpression::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;
				Ptr<ITypeInfo>						expectedType;
				List<ResolveExpressionResult>&		results;

				ValidateSemanticExpressionVisitor(WfLexicalScopeManager* _manager, Ptr<ITypeInfo> _expectedType, List<ResolveExpressionResult>& _results)
					:manager(_manager)
					, expectedType(_expectedType)
					, results(_results)
				{
				}

				void Visit(WfThisExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					Ptr<WfLexicalFunctionConfig> lastConfig;
					while (scope)
					{
						if (auto config = scope->functionConfig)
						{
							lastConfig = config;
							if (!lastConfig->thisAccessable)
							{
								break;
							}
						}

						if (scope->typeOfThisExpr)
						{
							if (!lastConfig)
							{
								break;
							}

							if (lastConfig->thisAccessable)
							{
								auto elementType = MakePtr<TypeDescriptorTypeInfo>(scope->typeOfThisExpr, TypeInfoHint::Normal);
								auto pointerType = MakePtr<RawPtrTypeInfo>(elementType);

								results.Add(ResolveExpressionResult::ReadonlyType(pointerType));
								return;
							}
						}
						scope = scope->parentScope.Obj();
					}
					manager->errors.Add(WfErrors::WrongThisExpression(node));
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
					if (manager->globalName)
					{
						vint index = manager->globalName->children.Keys().IndexOf(node->name.value);
						if (index != -1)
						{
							results.Add(ResolveExpressionResult::ScopeName(manager->globalName->children.Values()[index]));
							return;
						}
					}
					manager->errors.Add(WfErrors::TopQualifiedSymbolNotExists(node, node->name.value));
				}

				void ResolveName(WfExpression* node, const WString& name)
				{
					auto scope = manager->nodeScopes[node].Obj();
					List<ResolveExpressionResult> nameResults;
					manager->ResolveName(scope, name, nameResults);
					
					for (vint i = 0; i < nameResults.Count(); i++)
					{
						auto& result = nameResults[i];
						if (result.symbol)
						{
							if (!result.type)
							{
								manager->errors.Add(WfErrors::ExpressionCannotResolveType(node, result.symbol));
							}
							else if (!result.symbol->creatorNode.Cast<WfDeclaration>() || result.symbol->creatorNode.Cast<WfVariableDeclaration>())
							{
								bool readonlyCaptured = false;
								if (!result.symbol->ownerScope->ownerNode.Cast<WfModule>() && !result.symbol->ownerScope->ownerNode.Cast<WfNamespaceDeclaration>())
								{
									auto currentScope = scope;
									WfLexicalScope* firstConfigScope = nullptr;
									WfLexicalScope* lastConfigScope = nullptr;
									while (currentScope)
									{
										if (currentScope->functionConfig)
										{
											if (!firstConfigScope)
											{
												firstConfigScope = currentScope;
											}
											lastConfigScope = currentScope;
										}

										if (result.symbol->ownerScope == currentScope)
										{
											if (firstConfigScope && firstConfigScope->functionConfig->lambda)
											{
												readonlyCaptured = true;
											}

											if (currentScope->ownerNode.Cast<WfNewInterfaceExpression>())
											{
												if (firstConfigScope)
												{
													readonlyCaptured = firstConfigScope != lastConfigScope;

													if (!lastConfigScope->GetOwnerClassMember())
													{
														manager->errors.Add(WfErrors::FieldCannotInitializeUsingEachOther(node, result));
													}
												}
												else
												{
													manager->errors.Add(WfErrors::FieldCannotInitializeUsingEachOther(node, result));
												}
											}
											break;
										}

										if (currentScope->ownerNode.Cast<WfNewInterfaceExpression>())
										{
											auto capture = manager->lambdaCaptures[currentScope->ownerNode.Obj()];
											if (!capture->ctorArgumentSymbols.Contains(result.symbol.Obj()))
											{
												if (lastConfigScope == nullptr)
												{
													capture->ctorArgumentSymbols.Add(result.symbol);
												}
												else
												{
													auto functionCapture = manager->lambdaCaptures[lastConfigScope->ownerNode.Obj()];
													if (capture != functionCapture)
													{
														capture->ctorArgumentSymbols.Add(result.symbol);
													}
												}
											}
										}

										if (currentScope->functionConfig)
										{
											if (currentScope->functionConfig->lambda)
											{
												auto capture = manager->lambdaCaptures[currentScope->ownerNode.Obj()];
												if (!capture->symbols.Contains(result.symbol.Obj()))
												{
													capture->symbols.Add(result.symbol);
												}
											}
										}
										currentScope = currentScope->parentScope.Obj();
									}
								}

								if (readonlyCaptured)
								{
									results.Add(ResolveExpressionResult::ReadonlySymbol(result.symbol));
								}
								else
								{
									results.Add(ResolveExpressionResult::Symbol(result.symbol));
								}
							}
							else
							{
								results.Add(result);
							}
						}
						else
						{
							if (result.propertyInfo && dynamic_cast<WfReferenceExpression*>(node))
							{
								auto currentScope = scope;
								WfLexicalScope* firstConfigScope = nullptr;
								WfLexicalScope* lastConfigScope = nullptr;
								while (currentScope)
								{
									if (currentScope->functionConfig)
									{
										if (!firstConfigScope)
										{
											firstConfigScope = currentScope;
										}
										lastConfigScope = currentScope;
									}

									if (currentScope->ownerNode.Cast<WfClassDeclaration>() && currentScope->typeOfThisExpr == result.propertyInfo->GetOwnerTypeDescriptor())
									{
										if (firstConfigScope)
										{
											bool inMethodBody = lastConfigScope->GetOwnerClassMember() && lastConfigScope->ownerNode.Cast<WfFunctionDeclaration>();
											bool inDtorBody = lastConfigScope->GetOwnerClassMember() && lastConfigScope->ownerNode.Cast<WfDestructorDeclaration>();
											bool inCtorBody = lastConfigScope->parentScope->GetOwnerClassMember() && lastConfigScope->parentScope->ownerNode.Cast<WfConstructorDeclaration>();

											if (!inMethodBody && !inDtorBody && !inCtorBody)
											{
												manager->errors.Add(WfErrors::FieldCannotInitializeUsingEachOther(node, result));
											}
										}
										else if (!scope->ownerNode.Cast<WfConstructorDeclaration>())
										{
											manager->errors.Add(WfErrors::FieldCannotInitializeUsingEachOther(node, result));
										}
									}
									currentScope = currentScope->parentScope.Obj();
								}
							}
							results.Add(result);
						}
					}

					if (results.Count() == 0)
					{
						if (nameResults.Count() > 0)
						{
							FOREACH(ResolveExpressionResult, result, nameResults)
							{
								manager->errors.Add(WfErrors::ExpressionCannotResolveType(node, result.symbol));
							}
						}
						else
						{
							manager->errors.Add(WfErrors::ReferenceNotExists(node, name));
						}
					}
				}

				void Visit(WfReferenceExpression* node)override
				{
					if (expectedType && (expectedType->GetTypeDescriptor()->GetTypeDescriptorFlags() & TypeDescriptorFlags::EnumType) != TypeDescriptorFlags::Undefined)
					{
						auto scope = manager->nodeScopes[node].Obj();
						List<ResolveExpressionResult> testResults;
						manager->ResolveName(scope, node->name.value, testResults);

						if (testResults.Count() == 0)
						{
							auto enumType = expectedType->GetTypeDescriptor()->GetEnumType();
							if (enumType->IndexOfItem(node->name.value) == -1)
							{
								manager->errors.Add(WfErrors::EnumItemNotExists(node, expectedType->GetTypeDescriptor(), node->name.value));
							}
							else
							{
								results.Add(ResolveExpressionResult::ReadonlyType(expectedType));
							}
							return;
						}
					}

					ResolveName(node, node->name.value);
					FOREACH(ResolveExpressionResult, result, results)
					{
						ITypeDescriptor* td = nullptr;
						if (result.methodInfo)
						{
							td = result.methodInfo->GetOwnerTypeDescriptor();
						}
						else if (result.propertyInfo)
						{
							td = result.propertyInfo->GetOwnerTypeDescriptor();
						}
						else if (result.eventInfo)
						{
							td = result.eventInfo->GetOwnerTypeDescriptor();
						}

						if (td)
						{
							auto scope = manager->nodeScopes[node].Obj();
							bool visibleToNonStatic = false;
							while (scope)
							{
								if (scope->functionConfig)
								{
									visibleToNonStatic = scope->functionConfig->thisAccessable || scope->functionConfig->parentThisAccessable;
								}

								if (scope->typeOfThisExpr && scope->typeOfThisExpr->CanConvertTo(td))
								{
									if (!visibleToNonStatic)
									{
										if (result.methodInfo)
										{
											if (!result.methodInfo->IsStatic())
											{
												manager->errors.Add(WfErrors::CannotCallMemberInStaticFunction(node, result));
											}
										}
										else if (result.propertyInfo)
										{
											manager->errors.Add(WfErrors::CannotCallMemberInStaticFunction(node, result));
										}
										else if (result.eventInfo)
										{
											manager->errors.Add(WfErrors::CannotCallMemberInStaticFunction(node, result));
										}
										break;
									}
								}
								scope = scope->parentScope.Obj();
							}
						}
					}
				}

				void Visit(WfOrderedNameExpression* node)override
				{
					ResolveName(node, node->name.value);
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					List<Ptr<WfLexicalSymbol>> parameterSymbols;
					CopyFrom(
						parameterSymbols,
						Range<vint>(0, scope->symbols.Count())
							.Select([scope](vint index)->Ptr<WfLexicalSymbol>{return scope->symbols.GetByIndex(index)[0];})
							.OrderBy([](Ptr<WfLexicalSymbol> a, Ptr<WfLexicalSymbol> b)
							{
								vint aId = wtoi(a->name.Sub(1, a->name.Length() - 1));
								vint bId = wtoi(b->name.Sub(1, a->name.Length() - 1));
								return aId - bId;
							})
						);
					Ptr<ITypeInfo> resultType = expectedType;

					if (!expectedType && parameterSymbols.Count() > 0)
					{
						manager->errors.Add(WfErrors::OrderedLambdaCannotResolveType(node));
						return;
					}
					else if (expectedType)
					{
						ITypeInfo* type = expectedType.Obj();
						if (type->GetDecorator() != ITypeInfo::SharedPtr)
						{
							goto ORDERED_FAILED;
						}
						type = type->GetElementType();
						if (type->GetDecorator() != ITypeInfo::Generic)
						{
							goto ORDERED_FAILED;
						}
						{
							ITypeInfo* functionType = type->GetElementType();
							if (functionType->GetDecorator() != ITypeInfo::TypeDescriptor)
							{
								goto ORDERED_FAILED;
							}
							if (functionType->GetTypeDescriptor() != description::GetTypeDescriptor<IValueFunctionProxy>())
							{
								goto ORDERED_FAILED;
							}
						}

						if (type->GetGenericArgumentCount() != parameterSymbols.Count() + 1)
						{
							goto ORDERED_FAILED;
						}

						Ptr<ITypeInfo> resultType = type->GetGenericArgument(0);
						FOREACH_INDEXER(Ptr<WfLexicalSymbol>, symbol, index, parameterSymbols)
						{
							symbol->typeInfo = type->GetGenericArgument(index + 1);
							symbol->type = GetTypeFromTypeInfo(symbol->typeInfo.Obj());
						}
						GetExpressionType(manager, node->body, resultType);
					}
					else
					{
						auto bodyType = GetExpressionType(manager, node->body, 0);
						if (bodyType)
						{
							auto funcType = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueFunctionProxy>(), TypeInfoHint::Normal);
							auto genericType = MakePtr<GenericTypeInfo>(funcType);
							genericType->AddGenericArgument(bodyType);

							resultType = MakePtr<SharedPtrTypeInfo>(genericType);
						}
					}

					goto ORDERED_FINISHED;
				ORDERED_FAILED:
					manager->errors.Add(WfErrors::OrderedLambdaCannotImplicitlyConvertToType(node, expectedType.Obj()));
				ORDERED_FINISHED:
					if (resultType)
					{
						results.Add(ResolveExpressionResult::ReadonlyType(resultType));
					}
				}

				void Visit(WfMemberExpression* node)override
				{
					Ptr<ITypeInfo> type = GetExpressionType(manager, node->parent, 0);
					if (type)
					{
						SortedList<ITypeDescriptor*> searchedTypes;
						manager->ResolveMember(type->GetTypeDescriptor(), node->name.value, false, searchedTypes, results);

						if (results.Count() == 0)
						{
							manager->errors.Add(WfErrors::MemberNotExists(node, type->GetTypeDescriptor(), node->name.value));
						}
					}
				}

				void Visit(WfChildExpression* node)override
				{
					if (Ptr<WfLexicalScopeName> scopeName = GetExpressionScopeName(manager, node->parent))
					{
						vint index = scopeName->children.Keys().IndexOf(node->name.value);
						if (index != -1)
						{
							results.Add(ResolveExpressionResult::ScopeName(scopeName->children.Values()[index]));
							return;
						}
						
						if (scopeName->typeDescriptor)
						{
							SortedList<ITypeDescriptor*> searchedTypes;
							manager->ResolveMember(scopeName->typeDescriptor, node->name.value, true, searchedTypes, results);

							if (results.Count() > 0)
							{
								FOREACH(ResolveExpressionResult, result, results)
								{
									if (result.methodInfo)
									{
										if (!result.methodInfo->IsStatic())
										{
											manager->errors.Add(WfErrors::CannotCallMemberOutsideOfClass(node, result));
										}
									}
									else if (result.propertyInfo)
									{
										manager->errors.Add(WfErrors::CannotCallMemberOutsideOfClass(node, result));
									}
									else if (result.eventInfo)
									{
										manager->errors.Add(WfErrors::CannotCallMemberOutsideOfClass(node, result));
									}
								}
								return;
							}
						}

						if (scopeName->typeDescriptor != nullptr && (scopeName->typeDescriptor->GetTypeDescriptorFlags() & TypeDescriptorFlags::EnumType) != TypeDescriptorFlags::Undefined)
						{
							manager->errors.Add(WfErrors::EnumItemNotExists(node, scopeName->typeDescriptor, node->name.value));
						}
						else
						{
							manager->errors.Add(WfErrors::ChildSymbolNotExists(node, scopeName, node->name.value));
						}
					}
				}

				void Visit(WfLiteralExpression* node)override
				{
					if (node->value == WfLiteralValue::Null)
					{
						if (!expectedType)
						{
							manager->errors.Add(WfErrors::NullCannotResolveType(node));
						}
						else if (!IsNullAcceptableType(expectedType.Obj()))
						{
							manager->errors.Add(WfErrors::NullCannotImplicitlyConvertToType(node, expectedType.Obj()));
						}

						results.Add(ResolveExpressionResult::ReadonlyType(expectedType));
					}
					else
					{
						results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<bool>::CreateTypeInfo()));
					}
				}

				void Visit(WfFloatingExpression* node)override
				{
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<double>::CreateTypeInfo()));
				}

				template<typename T>
				bool ValidateInteger(const WString& text, ITypeDescriptor*& resultTd)
				{
					T value;
					if (TypedValueSerializerProvider<T>::Deserialize(text, value))
					{
						resultTd = description::GetTypeDescriptor<T>();
						return true;
					}
					return false;
				}

				void Visit(WfIntegerExpression* node)override
				{
					ITypeDescriptor* typeDescriptor = nullptr;
#ifndef VCZH_64
					if (ValidateInteger<vint32_t>(node->value.value, typeDescriptor)) goto TYPE_FINISHED;
					if (ValidateInteger<vuint32_t>(node->value.value, typeDescriptor)) goto TYPE_FINISHED;
#endif
					if (ValidateInteger<vint64_t>(node->value.value, typeDescriptor)) goto TYPE_FINISHED;
					if (ValidateInteger<vuint64_t>(node->value.value, typeDescriptor)) goto TYPE_FINISHED;

					manager->errors.Add(WfErrors::IntegerLiteralOutOfRange(node));
					typeDescriptor = description::GetTypeDescriptor<vint>();

				TYPE_FINISHED:
					results.Add(ResolveExpressionResult::ReadonlyType(MakePtr<TypeDescriptorTypeInfo>(typeDescriptor, TypeInfoHint::Normal)));
				}

				void Visit(WfStringExpression* node)override
				{
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<WString>::CreateTypeInfo()));
				}

				void Visit(WfUnaryExpression* node)override
				{
					Ptr<ITypeInfo> typeInfo = GetExpressionType(manager, node->operand, 0);
					if (typeInfo)
					{
						TypeFlag flag = GetTypeFlag(typeInfo.Obj());
						switch (node->op)
						{
						case WfUnaryOperator::Not:
							switch (flag)
							{
							case TypeFlag::F4:
							case TypeFlag::F8:
							case TypeFlag::String:
							case TypeFlag::Enum:
							case TypeFlag::Struct:
							case TypeFlag::Others:
								manager->errors.Add(WfErrors::UnaryOperatorOnWrongType(node, typeInfo.Obj()));
								break;
							default:;
							}
							break;
						case WfUnaryOperator::Positive:
							switch (flag)
							{
							case TypeFlag::Bool:
							case TypeFlag::String:
							case TypeFlag::Enum:
							case TypeFlag::Struct:
							case TypeFlag::Others:
								manager->errors.Add(WfErrors::UnaryOperatorOnWrongType(node, typeInfo.Obj()));
								break;
							default:;
							}
							break;
						case WfUnaryOperator::Negative:
							switch (flag)
							{
							case TypeFlag::Bool:
							case TypeFlag::U1:
							case TypeFlag::U2:
							case TypeFlag::U4:
							case TypeFlag::U8:
							case TypeFlag::String:
							case TypeFlag::Enum:
							case TypeFlag::Struct:
							case TypeFlag::Others:
								manager->errors.Add(WfErrors::UnaryOperatorOnWrongType(node, typeInfo.Obj()));
								break;
							default:;
							}
							break;
						}

						results.Add(ResolveExpressionResult::ReadonlyType(typeInfo));
					}
				}

				void Visit(WfBinaryExpression* node)override
				{
					if (node->op == WfBinaryOperator::Assign)
					{
						Ptr<ITypeInfo> variableType = GetLeftValueExpressionType(manager, node->first);
						GetExpressionType(manager, node->second, variableType);
						if (variableType)
						{
							results.Add(ResolveExpressionResult::ReadonlyType(variableType));
						}
					}
					else if (node->op == WfBinaryOperator::Index)
					{
						Ptr<ITypeInfo> containerType = GetExpressionType(manager, node->first, 0);
						if (containerType)
						{
							if (containerType->GetDecorator() == ITypeInfo::SharedPtr)
							{
								ITypeInfo* genericType = containerType->GetElementType();
								Ptr<ITypeInfo> indexType;
								Ptr<ITypeInfo> resultType;
								bool leftValue = false;

								if (genericType->GetDecorator() == ITypeInfo::Generic)
								{
									ITypeInfo* classType = genericType->GetElementType();
									if (classType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueReadonlyList>())
									{
										indexType = TypeInfoRetriver<vint>::CreateTypeInfo();
										resultType = CopyTypeInfo(genericType->GetGenericArgument(0));
									}
									else if (classType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueList>())
									{
										indexType = TypeInfoRetriver<vint>::CreateTypeInfo();
										resultType = CopyTypeInfo(genericType->GetGenericArgument(0));
										leftValue = true;
									}
									else if (classType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueReadonlyDictionary>())
									{
										indexType = CopyTypeInfo(genericType->GetGenericArgument(0));
										resultType = CopyTypeInfo(genericType->GetGenericArgument(1));
									}
									else if (classType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueDictionary>())
									{
										indexType = CopyTypeInfo(genericType->GetGenericArgument(0));
										resultType = CopyTypeInfo(genericType->GetGenericArgument(1));
										leftValue = true;
									}
									else
									{
										manager->errors.Add(WfErrors::IndexOperatorOnWrongType(node, containerType.Obj()));
									}
								}
								else
								{
									if (genericType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueReadonlyList>())
									{
										indexType = TypeInfoRetriver<vint>::CreateTypeInfo();
										resultType = TypeInfoRetriver<Value>::CreateTypeInfo();
									}
									else if (genericType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueList>())
									{
										indexType = TypeInfoRetriver<vint>::CreateTypeInfo();
										resultType = TypeInfoRetriver<Value>::CreateTypeInfo();
										leftValue = true;
									}
									else if (genericType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueReadonlyDictionary>())
									{
										indexType = TypeInfoRetriver<Value>::CreateTypeInfo();
										resultType = TypeInfoRetriver<Value>::CreateTypeInfo();
									}
									else if (genericType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueDictionary>())
									{
										indexType = TypeInfoRetriver<Value>::CreateTypeInfo();
										resultType = TypeInfoRetriver<Value>::CreateTypeInfo();
										leftValue = true;
									}
									else
									{
										manager->errors.Add(WfErrors::IndexOperatorOnWrongType(node, containerType.Obj()));
									}
								}

								GetExpressionType(manager, node->second, indexType);
								if (resultType)
								{
									if (leftValue)
									{
										results.Add(ResolveExpressionResult::WritableType(resultType));
									}
									else
									{
										results.Add(ResolveExpressionResult::ReadonlyType(resultType));
									}
								}
							}
							else
							{
								manager->errors.Add(WfErrors::IndexOperatorOnWrongType(node, containerType.Obj()));
							}
						}
					}
					else if (node->op == WfBinaryOperator::Union)
					{
						auto typeA = GetExpressionType(manager, node->first, expectedType);
						auto typeB = GetExpressionType(manager, node->second, expectedType);

						if (typeA && typeB)
						{
							auto stringType = TypeInfoRetriver<WString>::CreateTypeInfo();
							if (CanConvertToType(typeA.Obj(), stringType.Obj(), false) && CanConvertToType(typeB.Obj(), stringType.Obj(), false))
							{
								results.Add(ResolveExpressionResult::ReadonlyType(stringType));
							}
							else if (auto type = GetMergedType(typeA, typeB))
							{
								if (type->GetTypeDescriptor()->GetTypeDescriptorFlags() != TypeDescriptorFlags::FlagEnum)
								{
									manager->errors.Add(WfErrors::IncorrectTypeForUnion(node->first.Obj(), type.Obj()));
								}
								results.Add(ResolveExpressionResult::ReadonlyType(type));
							}
							else
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(node, typeA.Obj(), typeB.Obj()));
							}
						}
					}
					else if (node->op == WfBinaryOperator::Intersect)
					{
						auto typeA = GetExpressionType(manager, node->first, expectedType);
						auto typeB = GetExpressionType(manager, node->second, expectedType);

						if (typeA && typeB)
						{
							if (auto type = GetMergedType(typeA, typeB))
							{
								if (type->GetTypeDescriptor()->GetTypeDescriptorFlags() != TypeDescriptorFlags::FlagEnum)
								{
									manager->errors.Add(WfErrors::IncorrectTypeForIntersect(node->first.Obj(), type.Obj()));
								}
								results.Add(ResolveExpressionResult::ReadonlyType(type));
							}
							else
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(node, typeA.Obj(), typeB.Obj()));
							}
						}
					}
					else if (node->op == WfBinaryOperator::FailedThen)
					{
						Ptr<ITypeInfo> firstType = GetExpressionType(manager, node->first, 0);
						bool depend = IsExpressionDependOnExpectedType(manager, node->second);
						Ptr<ITypeInfo> secondType = GetExpressionType(manager, node->second, (depend ? firstType : nullptr));

						if (firstType && secondType)
						{
							auto mergedType = GetMergedType(firstType, secondType);
							results.Add(ResolveExpressionResult::ReadonlyType(mergedType ? mergedType : firstType));
						}
					}
					else
					{
						Ptr<ITypeInfo> firstType = GetExpressionType(manager, node->first, 0);
						Ptr<ITypeInfo> secondType = GetExpressionType(manager, node->second, 0);
						Ptr<ITypeInfo> elementType;
						if (firstType && secondType)
						{
							if (!(elementType = GetMergedType(firstType, secondType)))
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(node, firstType.Obj(), secondType.Obj()));
							}
						}

						if (elementType)
						{
							TypeFlag flag = GetTypeFlag(elementType.Obj());
							TypeFlag* selectedTable = 0;
							switch (node->op)
							{
							case WfBinaryOperator::Exp:
								{
									static TypeFlag conversionTable[(vint)TypeFlag::Count] = {
										/*Bool		*/TypeFlag::Unknown,
										/*I1		*/TypeFlag::F4,
										/*I2		*/TypeFlag::F4,
										/*I4		*/TypeFlag::F8,
										/*I8		*/TypeFlag::F8,
										/*U1		*/TypeFlag::F4,
										/*U2		*/TypeFlag::F4,
										/*U4		*/TypeFlag::F8,
										/*U8		*/TypeFlag::F8,
										/*F4		*/TypeFlag::F4,
										/*F8		*/TypeFlag::F8,
										/*String	*/TypeFlag::Unknown,
										/*Enum		*/TypeFlag::Unknown,
										/*Struct	*/TypeFlag::Unknown,
										/*Others	*/TypeFlag::Unknown,
									};
									selectedTable = conversionTable;
								}
								break;
							case WfBinaryOperator::Add:
							case WfBinaryOperator::Sub:
							case WfBinaryOperator::Mul:
							case WfBinaryOperator::Div:
								{
									static TypeFlag conversionTable[(vint)TypeFlag::Count] = {
										/*Bool		*/TypeFlag::Unknown,
										/*I1		*/TypeFlag::I,
										/*I2		*/TypeFlag::I,
										/*I4		*/TypeFlag::I,
										/*I8		*/TypeFlag::I8,
										/*U1		*/TypeFlag::U,
										/*U2		*/TypeFlag::U,
										/*U4		*/TypeFlag::U,
										/*U8		*/TypeFlag::U8,
										/*F4		*/TypeFlag::F4,
										/*F8		*/TypeFlag::F8,
										/*String	*/TypeFlag::Unknown,
										/*Enum		*/TypeFlag::Unknown,
										/*Struct	*/TypeFlag::Unknown,
										/*Others	*/TypeFlag::Unknown,
									};
									selectedTable = conversionTable;
								}
								break;
							case WfBinaryOperator::Mod:
							case WfBinaryOperator::Shl:
							case WfBinaryOperator::Shr:
								{
									static TypeFlag conversionTable[(vint)TypeFlag::Count] = {
										/*Bool		*/TypeFlag::Unknown,
										/*I1		*/TypeFlag::I,
										/*I2		*/TypeFlag::I,
										/*I4		*/TypeFlag::I,
										/*I8		*/TypeFlag::I8,
										/*U1		*/TypeFlag::U,
										/*U2		*/TypeFlag::U,
										/*U4		*/TypeFlag::U,
										/*U8		*/TypeFlag::U8,
										/*F4		*/TypeFlag::Unknown,
										/*F8		*/TypeFlag::Unknown,
										/*String	*/TypeFlag::Unknown,
										/*Enum		*/TypeFlag::Unknown,
										/*Struct	*/TypeFlag::Unknown,
										/*Others	*/TypeFlag::Unknown,
									};
									selectedTable = conversionTable;
								}
								break;
							case WfBinaryOperator::LT:
							case WfBinaryOperator::GT:
							case WfBinaryOperator::LE:
							case WfBinaryOperator::GE:
								{
									static TypeFlag conversionTable[(vint)TypeFlag::Count] = {
										/*Bool		*/TypeFlag::Unknown,
										/*I1		*/TypeFlag::Bool,
										/*I2		*/TypeFlag::Bool,
										/*I4		*/TypeFlag::Bool,
										/*I8		*/TypeFlag::Bool,
										/*U1		*/TypeFlag::Bool,
										/*U2		*/TypeFlag::Bool,
										/*U4		*/TypeFlag::Bool,
										/*U8		*/TypeFlag::Bool,
										/*F4		*/TypeFlag::Bool,
										/*F8		*/TypeFlag::Bool,
										/*String	*/TypeFlag::Bool,
										/*Enum		*/TypeFlag::Unknown,
										/*Struct	*/TypeFlag::Unknown,
										/*Others	*/TypeFlag::Unknown,
									};
									selectedTable = conversionTable;
								}
								break;
							case WfBinaryOperator::EQ:
							case WfBinaryOperator::NE:
								{
									results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<bool>::CreateTypeInfo()));
									return;
								}
								break;
							case WfBinaryOperator::Xor:
							case WfBinaryOperator::And:
							case WfBinaryOperator::Or:
								{
									static TypeFlag conversionTable[(vint)TypeFlag::Count] = {
										/*Bool		*/TypeFlag::Bool,
										/*I1		*/TypeFlag::I1,
										/*I2		*/TypeFlag::I2,
										/*I4		*/TypeFlag::I4,
										/*I8		*/TypeFlag::I8,
										/*U1		*/TypeFlag::U1,
										/*U2		*/TypeFlag::U2,
										/*U4		*/TypeFlag::U4,
										/*U8		*/TypeFlag::U8,
										/*F4		*/TypeFlag::Unknown,
										/*F8		*/TypeFlag::Unknown,
										/*String	*/TypeFlag::Unknown,
										/*Enum		*/TypeFlag::Unknown,
										/*Struct	*/TypeFlag::Unknown,
										/*Others	*/TypeFlag::Unknown,
									};
									selectedTable = conversionTable;
								}
								break;
							default:;
							}

							TypeFlag resultFlag = selectedTable[(vint)flag];
							if (resultFlag == TypeFlag::Unknown)
							{
								manager->errors.Add(WfErrors::BinaryOperatorOnWrongType(node, elementType.Obj()));
							}
							else
							{
								results.Add(ResolveExpressionResult::ReadonlyType(CreateTypeInfoFromTypeFlag(resultFlag)));
							}
						}
					}
				}

				void Visit(WfLetExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();

					FOREACH(Ptr<WfLetVariable>, variable, node->variables)
					{
						auto symbol = scope->symbols[variable->name.value][0];
						symbol->typeInfo = GetExpressionType(manager, variable->value, 0);
						if (symbol->typeInfo)
						{
							symbol->type = GetTypeFromTypeInfo(symbol->typeInfo.Obj());
						}
					}
					Ptr<ITypeInfo> type = GetExpressionType(manager, node->expression, expectedType);
					if (type)
					{
						results.Add(ResolveExpressionResult::ReadonlyType(type));
					}
				}

				void Visit(WfIfExpression* node)override
				{
					Ptr<ITypeInfo> boolType = TypeInfoRetriver<bool>::CreateTypeInfo();
					GetExpressionType(manager, node->condition, boolType);

					Ptr<ITypeInfo> firstType, secondType;

					if (expectedType)
					{
						firstType = GetExpressionType(manager, node->trueBranch, expectedType);
						secondType = GetExpressionType(manager, node->falseBranch, expectedType);
					}
					else
					{
						bool resolveFirst = !IsExpressionDependOnExpectedType(manager, node->trueBranch);
						bool resolveSecond = !IsExpressionDependOnExpectedType(manager, node->falseBranch);

						if (resolveFirst == resolveSecond)
						{
							firstType = GetExpressionType(manager, node->trueBranch, 0);
							secondType = GetExpressionType(manager, node->falseBranch, 0);
						}
						else if (resolveFirst)
						{
							firstType = GetExpressionType(manager, node->trueBranch, 0);
							secondType = GetExpressionType(manager, node->falseBranch, firstType);
						}
						else if (resolveSecond)
						{
							secondType = GetExpressionType(manager, node->falseBranch, 0);
							firstType = GetExpressionType(manager, node->trueBranch, secondType);
						}
					}
					
					if (firstType && !secondType)
					{
						results.Add(ResolveExpressionResult::ReadonlyType(firstType));
					}
					else if (!firstType && secondType)
					{
						results.Add(ResolveExpressionResult::ReadonlyType(secondType));
					}
					else if (firstType && secondType)
					{
						if (auto mergedType = GetMergedType(firstType, secondType))
						{
							results.Add(ResolveExpressionResult::ReadonlyType(mergedType));
						}
						else
						{
							manager->errors.Add(WfErrors::CannotMergeTwoType(node, firstType.Obj(), secondType.Obj()));
						}
					}
				}

				void Visit(WfRangeExpression* node)override
				{
					Ptr<ITypeInfo> firstType = GetExpressionType(manager, node->begin, 0);
					Ptr<ITypeInfo> secondType = GetExpressionType(manager, node->end, 0);
					Ptr<ITypeInfo> elementType;

					if (firstType && !secondType)
					{
						elementType = firstType;
					}
					else if (!firstType && secondType)
					{
						elementType = secondType;
					}
					else if (firstType && secondType)
					{
						if (!(elementType = GetMergedType(firstType, secondType)))
						{
							manager->errors.Add(WfErrors::CannotMergeTwoType(node, firstType.Obj(), secondType.Obj()));
						}
					}

					if (elementType)
					{
						TypeFlag flag = GetTypeFlag(elementType.Obj());
						switch (flag)
						{
						case TypeFlag::I1:
						case TypeFlag::I2:
						case TypeFlag::I4:
						case TypeFlag::I8:
						case TypeFlag::U1:
						case TypeFlag::U2:
						case TypeFlag::U4:
						case TypeFlag::U8:
							break;
						default:
							manager->errors.Add(WfErrors::RangeShouldBeInteger(node, elementType.Obj()));
						}

						auto enumerableType = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueEnumerable>(), TypeInfoHint::Normal);
						auto genericType = MakePtr<GenericTypeInfo>(enumerableType);
						genericType->AddGenericArgument(elementType);

						auto pointerType = MakePtr<SharedPtrTypeInfo>(genericType);
						results.Add(ResolveExpressionResult::ReadonlyType(pointerType));
					}
				}

				void Visit(WfSetTestingExpression* node)override
				{
					Ptr<ITypeInfo> elementType = GetExpressionType(manager, node->element, 0);

					if (auto range = node->collection.Cast<WfRangeExpression>())
					{
						Ptr<ITypeInfo> beginType = GetExpressionType(manager, range->begin, 0);
						Ptr<ITypeInfo> endType = GetExpressionType(manager, range->end, 0);

						if (elementType && beginType)
						{
							if (!GetMergedType(elementType, beginType))
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(node, elementType.Obj(), beginType.Obj()));
							}
						}
						if (elementType && endType)
						{
							if (!GetMergedType(elementType, endType))
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(node, elementType.Obj(), endType.Obj()));
							}
						}
					}
					else
					{
						Ptr<ITypeInfo> itemType = GetEnumerableExpressionItemType(manager, node->collection, 0);
						if (elementType && itemType)
						{
							if (!GetMergedType(elementType, itemType))
							{
								manager->errors.Add(WfErrors::CannotMergeTwoType(node, elementType.Obj(), itemType.Obj()));
							}
						}
					}

					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<bool>::CreateTypeInfo()));
				}

				void Visit(WfConstructorExpression* node)override
				{
					if (expectedType && expectedType->GetTypeDescriptor()->GetTypeDescriptorFlags() == TypeDescriptorFlags::Struct)
					{
						SortedList<WString> fields;
						FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
						{
							if (!argument->value)
							{
								manager->errors.Add(WfErrors::ConstructorMixStructAndList(node));
								return;
							}
							else if (auto field = argument->key.Cast<WfReferenceExpression>())
							{
								if (auto prop = expectedType->GetTypeDescriptor()->GetPropertyByName(field->name.value, true))
								{
									if (fields.Contains(field->name.value))
									{
										manager->errors.Add(WfErrors::DuplicatedConstructorField(field.Obj()));
									}
									else
									{
										fields.Add(field->name.value);
									}
									GetExpressionType(manager, argument->value, CopyTypeInfo(prop->GetReturn()));
								}
								else
								{
									manager->errors.Add(WfErrors::MemberNotExists(field.Obj(), expectedType->GetTypeDescriptor(), field->name.value));
								}
							}
							else
							{
								manager->errors.Add(WfErrors::ConstructorMixStructAndList(argument->value.Obj()));
							}
						}
						results.Add(ResolveExpressionResult::ReadonlyType(expectedType));
					}
					else if (node->arguments.Count() == 0)
					{
						if (expectedType)
						{
							ITypeDescriptor* td = expectedType->GetTypeDescriptor();
							if (!td->CanConvertTo(description::GetTypeDescriptor<IValueEnumerable>()) && !td->CanConvertTo(description::GetTypeDescriptor<IValueReadonlyDictionary>()))
							{
								manager->errors.Add(WfErrors::ConstructorCannotImplicitlyConvertToType(node, expectedType.Obj()));
							}
							results.Add(ResolveExpressionResult::ReadonlyType(expectedType));
						}
						else
						{
							manager->errors.Add(WfErrors::ConstructorCannotResolveType(node));
						}
					}
					else
					{
						bool map = node->arguments[0]->value;
						Ptr<ITypeInfo> keyType, valueType;
						FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
						{
							{
								Ptr<ITypeInfo> newKeyType = GetExpressionType(manager, argument->key, 0);
								if (!keyType)
								{
									keyType = newKeyType;
								}
								else if (auto mergedType = GetMergedType(keyType, newKeyType))
								{
									keyType = mergedType;
								}
								else
								{
									manager->errors.Add(WfErrors::CannotMergeTwoType(node, keyType.Obj(), newKeyType.Obj()));
								}
							}
							if (map)
							{
								Ptr<ITypeInfo> newValueType = GetExpressionType(manager, argument->value, 0);
								if (!valueType)
								{
									valueType = newValueType;
								}
								else if (auto mergedType = GetMergedType(valueType, newValueType))
								{
									valueType = mergedType;
								}
								else
								{
									manager->errors.Add(WfErrors::CannotMergeTwoType(node, valueType.Obj(), newValueType.Obj()));
								}
							}
						}

						if (map)
						{
							if (keyType && valueType)
							{
								auto classType = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueDictionary>(), TypeInfoHint::Normal);
								auto genericType = MakePtr<GenericTypeInfo>(classType);
								genericType->AddGenericArgument(keyType);
								genericType->AddGenericArgument(valueType);

								auto pointerType = MakePtr<SharedPtrTypeInfo>(genericType);
								results.Add(ResolveExpressionResult::ReadonlyType(pointerType));
							}
						}
						else
						{
							if (keyType)
							{
								auto classType = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueList>(), TypeInfoHint::Normal);
								auto genericType = MakePtr<GenericTypeInfo>(classType);
								genericType->AddGenericArgument(keyType);

								auto pointerType = MakePtr<SharedPtrTypeInfo>(genericType);
								results.Add(ResolveExpressionResult::ReadonlyType(pointerType));
							}
						}
					}
				}

				void Visit(WfInferExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					Ptr<ITypeInfo> type = CreateTypeInfoFromType(scope, node->type);
					Ptr<ITypeInfo> expressionType = GetExpressionType(manager, node->expression, type);
					if (expressionType)
					{
						results.Add(ResolveExpressionResult::ReadonlyType(type));
					}
				}

				void Visit(WfTypeCastingExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					if (auto type = CreateTypeInfoFromType(scope, node->type))
					{
						if (auto expressionType = GetExpressionType(manager, node->expression, 0))
						{
							if (!CanConvertToType(expressionType.Obj(), type.Obj(), true))
							{
								manager->errors.Add(WfErrors::ExpressionCannotExplicitlyConvertToType(node->expression.Obj(), expressionType.Obj(), type.Obj()));
							}
						}
						if (node->strategy == WfTypeCastingStrategy::Weak)
						{
							switch (type->GetDecorator())
							{
							case ITypeInfo::RawPtr:
							case ITypeInfo::SharedPtr:
							case ITypeInfo::Nullable:
								break;
							default:
								manager->errors.Add(WfErrors::CannotWeakCastToType(node->expression.Obj(), type.Obj()));
							}
						}
						results.Add(ResolveExpressionResult::ReadonlyType(type));
					}
				}

				void Visit(WfTypeTestingExpression* node)override
				{
					Ptr<ITypeInfo> type = GetExpressionType(manager, node->expression, 0);
					if (type)
					{
						switch (node->test)
						{
						case WfTypeTesting::IsNull:
						case WfTypeTesting::IsNotNull:
							if (!IsNullAcceptableType(type.Obj()))
							{
								manager->errors.Add(WfErrors::NullCannotImplicitlyConvertToType(node->expression.Obj(), type.Obj()));
							}
							break;
						default:;
						}
					}
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<bool>::CreateTypeInfo()));
				}

				void Visit(WfTypeOfTypeExpression* node)override
				{
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<ITypeDescriptor*>::CreateTypeInfo()));
				}

				void Visit(WfTypeOfExpressionExpression* node)override
				{
					GetExpressionType(manager, node->expression, 0);
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<ITypeDescriptor*>::CreateTypeInfo()));
				}

				void Visit(WfAttachEventExpression* node)override
				{
					IEventInfo* eventInfo = GetExpressionEventInfo(manager, node->event);
					Ptr<ITypeInfo> functionType;
					if (eventInfo)
					{
						functionType = CopyTypeInfo(eventInfo->GetHandlerType());
					}
					GetExpressionType(manager, node->function, functionType);
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<Ptr<IEventHandler>>::CreateTypeInfo()));
				}

				void Visit(WfDetachEventExpression* node)override
				{
					GetExpressionEventInfo(manager, node->event);
					Ptr<ITypeInfo> pointerType = TypeInfoRetriver<Ptr<IEventHandler>>::CreateTypeInfo();
					GetExpressionType(manager, node->handler, pointerType);
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<bool>::CreateTypeInfo()));
				}

				void Visit(WfObserveExpression* node)override
				{
					Ptr<ITypeInfo> parentType = GetExpressionType(manager, node->parent, 0);
					Ptr<ITypeInfo> observeeType;
					if (parentType)
					{
						if (node->observeType == WfObserveType::SimpleObserve)
						{
							ITypeDescriptor* td = parentType->GetTypeDescriptor();
							IPropertyInfo* propertyInfo = 0;
							{
								auto ref = node->expression.Cast<WfReferenceExpression>();
								propertyInfo = td->GetPropertyByName(ref->name.value, true);
								if (propertyInfo)
								{
									observeeType = CopyTypeInfo(propertyInfo->GetReturn());
								}
								else
								{
									manager->errors.Add(WfErrors::MemberNotExists(ref.Obj(), td, ref->name.value));
								}
							}

							if (node->events.Count() == 0)
							{
								if (propertyInfo)
								{
									IEventInfo* eventInfo = propertyInfo->GetValueChangedEvent();
									if (!eventInfo)
									{
										eventInfo = td->GetEventByName(propertyInfo->GetName() + L"Changed", true);
									}
									if (!eventInfo)
									{
										manager->errors.Add(WfErrors::MemberNotExists(node->expression.Obj(), td, propertyInfo->GetName() + L"Changed"));
									}
								}
							}
							else
							{
								FOREACH(Ptr<WfExpression>, eventExpr, node->events)
								{
									auto ref = eventExpr.Cast<WfReferenceExpression>();
									IEventInfo* info = td->GetEventByName(ref->name.value, true);
									if (!info)
									{
										manager->errors.Add(WfErrors::MemberNotExists(ref.Obj(), td, ref->name.value));
									}
								}
							}
						}
						else
						{
							auto scope = manager->nodeScopes[node].Obj();
							auto symbol = scope->symbols[node->name.value][0];
							symbol->typeInfo = parentType;
							symbol->type = GetTypeFromTypeInfo(parentType.Obj());

							observeeType = GetExpressionType(manager, node->expression, 0);
							FOREACH(Ptr<WfExpression>, eventExpr, node->events)
							{
								GetExpressionEventInfo(manager, eventExpr);
							}
						}
					}

					if (observeeType)
					{
						results.Add(ResolveExpressionResult::ReadonlyType(observeeType));
					}
				}

				void Visit(WfCallExpression* node)override
				{
					List<ResolveExpressionResult> functions;
					GetExpressionTypes(manager, node->function, nullptr, true, functions);

					vint selectedFunctionIndex = -1;
					Ptr<ITypeInfo> resultType = SelectFunction(manager, node, node->function, functions, node->arguments, selectedFunctionIndex);
					if (resultType)
					{
						manager->expressionResolvings.Add(node->function, functions[selectedFunctionIndex]);
						results.Add(ResolveExpressionResult::ReadonlyType(resultType));
					}
				}

				void Visit(WfFunctionExpression* node)override
				{
					ValidateDeclarationSemantic(manager, node->function);
					auto scope = manager->nodeScopes[node->function.Obj()].Obj();

					auto classType = MakePtr<TypeDescriptorTypeInfo>(description::GetTypeDescriptor<IValueFunctionProxy>(), TypeInfoHint::Normal);
					auto genericType = MakePtr<GenericTypeInfo>(classType);
					genericType->AddGenericArgument(CreateTypeInfoFromType(scope, node->function->returnType));
					FOREACH(Ptr<WfFunctionArgument>, argument, node->function->arguments)
					{
						genericType->AddGenericArgument(scope->symbols[argument->name.value][0]->typeInfo);
					}

					auto pointerType = MakePtr<SharedPtrTypeInfo>(genericType);
					results.Add(ResolveExpressionResult::ReadonlyType(pointerType));
				}

				Ptr<ITypeInfo> GetFunctionDeclarationType(WfLexicalScope* scope, Ptr<WfFunctionDeclaration> decl)
				{
					Ptr<WfLexicalSymbol> symbol = From(manager->nodeScopes[decl.Obj()]->parentScope->symbols[decl->name.value])
						.Where([decl](Ptr<WfLexicalSymbol> symbol)
						{
							return symbol->creatorNode == decl;
						})
						.First();
					return symbol->typeInfo;
				}

				class NewInterfaceExpressionVisitor : public empty_visitor::DeclarationVisitor
				{
				public:
					WfLexicalScopeManager*							manager;
					List<Ptr<WfFunctionDeclaration>>				overrideFunctions;
					List<Ptr<WfLexicalSymbol>>						variableSymbols;
					WfFunctionDeclaration*							lastFunction = nullptr;

					NewInterfaceExpressionVisitor(WfLexicalScopeManager* _manager)
						:manager(_manager)
					{
					}

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							decl->Accept(this);
						}
					}

					void Visit(WfFunctionDeclaration* node)override
					{
						lastFunction = node;
						if (node->classMember->kind == WfClassMemberKind::Override)
						{
							overrideFunctions.Add(node);
						}
					}

					void Visit(WfVariableDeclaration* node)override
					{
						variableSymbols.Add(
							From(manager->nodeScopes[node]->symbols[node->name.value])
								.Where([=](Ptr<WfLexicalSymbol> symbol)
								{
									return symbol->creatorNode == node;
								})
								.First()
							);
					}

					void Execute(WfNewInterfaceExpression* node)
					{
						FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
						{
							memberDecl->Accept(this);
							ValidateDeclarationSemantic(manager, memberDecl);
						}
					}
				};

				void Visit(WfNewClassExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					Ptr<ITypeInfo> type = CreateTypeInfoFromType(scope, node->type);
					if (type)
					{
						ITypeDescriptor* td = type->GetTypeDescriptor();
						IMethodGroupInfo* ctors = td->GetConstructorGroup();
						Ptr<ITypeInfo> selectedType;
						IMethodInfo* selectedConstructor = nullptr;

						if (!ctors || ctors->GetMethodCount() == 0)
						{
							manager->errors.Add(WfErrors::ClassContainsNoConstructor(node, type.Obj()));
						}
						else
						{
							if ((td->GetTypeDescriptorFlags() & TypeDescriptorFlags::ClassType) != TypeDescriptorFlags::Undefined)
							{
								List<ResolveExpressionResult> functions;
								for (vint i = 0; i < ctors->GetMethodCount(); i++)
								{
									IMethodInfo* info = ctors->GetMethod(i);
									functions.Add(ResolveExpressionResult::Method(info));
								}

								vint selectedFunctionIndex = -1;
								selectedType = SelectFunction(manager, node, nullptr, functions, node->arguments, selectedFunctionIndex);
								if (selectedType)
								{
									selectedConstructor = functions[selectedFunctionIndex].methodInfo;
								}
							}
							else if ((td->GetTypeDescriptorFlags() & TypeDescriptorFlags::InterfaceType) != TypeDescriptorFlags::Undefined)
							{
								manager->errors.Add(WfErrors::ConstructorMixClassAndInterface(node));
							}
							else
							{
								manager->errors.Add(WfErrors::ClassContainsNoConstructor(node, type.Obj()));
							}
						}

						if (selectedType)
						{
							auto result = ResolveExpressionResult::Constructor(selectedConstructor);
							if (!IsSameType(selectedType.Obj(), type.Obj()))
							{
								manager->errors.Add(WfErrors::ConstructorReturnTypeMismatched(node, result, selectedType.Obj(), type.Obj()));
							}
							results.Add(result);
						}
					}
				}

				void Visit(WfNewInterfaceExpression* node)override
				{
					auto scope = manager->nodeScopes[node].Obj();
					Ptr<ITypeInfo> type = CreateTypeInfoFromType(scope, node->type);
					if (type)
					{
						ITypeDescriptor* td = type->GetTypeDescriptor();
						IMethodGroupInfo* ctors = td->GetConstructorGroup();
						Ptr<ITypeInfo> selectedType;
						IMethodInfo* selectedConstructor = nullptr;

						scope->typeOfThisExpr = td;

						if (!ctors || ctors->GetMethodCount() == 0)
						{
							manager->errors.Add(WfErrors::ClassContainsNoConstructor(node, type.Obj()));
						}
						else
						{
							if ((td->GetTypeDescriptorFlags() & TypeDescriptorFlags::ClassType) != TypeDescriptorFlags::Undefined)
							{
								manager->errors.Add(WfErrors::ConstructorMixClassAndInterface(node));
							}
							else if ((td->GetTypeDescriptorFlags() & TypeDescriptorFlags::InterfaceType) != TypeDescriptorFlags::Undefined)
							{
								if (auto info = FindInterfaceConstructor(td))
								{
									selectedType = CopyTypeInfo(info->GetReturn());
									selectedConstructor = info;
								}
								else
								{
									manager->errors.Add(WfErrors::InterfaceContainsNoConstructor(node, type.Obj()));
								}

								Group<WString, IMethodInfo*> interfaceMethods;
								Group<WString, Ptr<WfFunctionDeclaration>> implementMethods;
								
								{
									NewInterfaceExpressionVisitor declVisitor(manager);
									declVisitor.Execute(node);

									if (declVisitor.lastFunction)
									{
										FOREACH(Ptr<WfFunctionDeclaration>, func, declVisitor.overrideFunctions)
										{
											implementMethods.Add(func->name.value, func);
										}

										auto capture = manager->lambdaCaptures[declVisitor.lastFunction];
										List<Ptr<WfLexicalSymbol>> readonlySymbols;
										CopyFrom(readonlySymbols, From(capture->symbols).Except(declVisitor.variableSymbols));
										CopyFrom(capture->symbols, declVisitor.variableSymbols);
										CopyFrom(capture->symbols, readonlySymbols, true);
									}
								}
								{
									SortedList<ITypeDescriptor*> searchedTypes;
									List<ITypeDescriptor*> types;
									types.Add(td);
									vint begin = 0;

									while (begin < types.Count())
									{
										ITypeDescriptor* currentType = types[begin++];
										if (searchedTypes.Contains(currentType))
										{
											continue;
										}
										searchedTypes.Add(currentType);

										vint count = currentType->GetBaseTypeDescriptorCount();
										for (vint i = 0; i < count; i++)
										{
											types.Add(currentType->GetBaseTypeDescriptor(i));
										}

										count = currentType->GetMethodGroupCount();
										for (vint i = 0; i < count; i++)
										{
											IMethodGroupInfo* group = currentType->GetMethodGroup(i);
											vint methodCount = group->GetMethodCount();
											for (vint j = 0; j < methodCount; j++)
											{
												auto method = group->GetMethod(j);
												if (!method->IsStatic())
												{
													interfaceMethods.Add(group->GetName(), method);
												}
											}
										}
									}
								}

								auto discardFirst = [=](const WString& key, const List<IMethodInfo*>& methods)
									{
										FOREACH(IMethodInfo*, method, methods)
										{
											manager->errors.Add(WfErrors::InterfaceMethodNotImplemented(node, method));
										}
									};
								auto discardSecond = [=](const WString& key, const List<Ptr<WfFunctionDeclaration>>& methods)
									{
										FOREACH(Ptr<WfFunctionDeclaration>, decl, methods)
										{
											Ptr<ITypeInfo> declType = GetFunctionDeclarationType(scope, decl);
											manager->errors.Add(WfErrors::InterfaceMethodNotFound(decl.Obj(), type.Obj(), declType.Obj()));
										}
									};

								GroupInnerJoin(
									interfaceMethods,
									implementMethods,
									discardFirst,
									discardSecond,
									[=](const WString& key, const List<IMethodInfo*>& interfaces, const List<Ptr<WfFunctionDeclaration>>& implements)
									{
										Group<WString, IMethodInfo*> typedInterfaceMethods;
										Group<WString, Ptr<WfFunctionDeclaration>> typedImplementMethods;

										FOREACH(IMethodInfo*, method, interfaces)
										{
											Ptr<ITypeInfo> methodType = CreateTypeInfoFromMethodInfo(method);
											typedInterfaceMethods.Add(methodType->GetTypeFriendlyName(), method);
										}

										FOREACH(Ptr<WfFunctionDeclaration>, decl, implements)
										{
											Ptr<ITypeInfo> methodType = GetFunctionDeclarationType(scope, decl);
											typedImplementMethods.Add(methodType->GetTypeFriendlyName(), decl);
										}

										GroupInnerJoin(
											typedInterfaceMethods,
											typedImplementMethods,
											discardFirst,
											discardSecond,
											[=](const WString& key, const List<IMethodInfo*>& interfaces, const List<Ptr<WfFunctionDeclaration>>& implements)
											{
												if (interfaces.Count() > 1)
												{
													List<ResolveExpressionResult> functions;
													FOREACH(IMethodInfo*, method, interfaces)
													{
														functions.Add(ResolveExpressionResult::Constructor(method));
														manager->errors.Add(WfErrors::CannotPickOverloadedInterfaceMethods(node, functions));
													}
												}
												if (implements.Count() > 1)
												{
													auto decl = implements[0];
													Ptr<ITypeInfo> methodType = GetFunctionDeclarationType(scope, decl);
													manager->errors.Add(WfErrors::CannotPickOverloadedImplementMethods(decl.Obj(), methodType.Obj()));
												}

												if (interfaces.Count() == 1 && implements.Count() == 1)
												{
													manager->interfaceMethodImpls.Add(implements[0].Obj(), interfaces[0]);
												}
											});
									});
							}
							else
							{
								manager->errors.Add(WfErrors::ClassContainsNoConstructor(node, type.Obj()));
							}
						}

						if (selectedType)
						{
							auto result = ResolveExpressionResult::Constructor(selectedConstructor);
							if (!IsSameType(selectedType.Obj(), type.Obj()))
							{
								manager->errors.Add(WfErrors::ConstructorReturnTypeMismatched(node, result, selectedType.Obj(), type.Obj()));
							}
							results.Add(result);
						}
					}
				}

				void Visit(WfVirtualExpression* node)override
				{
					bool expanded = node->expandedExpression;
					vint errorCount = manager->errors.Count();
					node->Accept((WfVirtualExpression::IVisitor*)this);

					if (!expanded && manager->errors.Count() == errorCount)
					{
						ExpandVirtualExpressionVisitor visitor(manager);
						node->Accept(&visitor);
						SetCodeRange(node->expandedExpression, node->codeRange);

						auto parentScope = manager->nodeScopes[node];
						if (parentScope->ownerNode == node)
						{
							parentScope = parentScope->parentScope;
						}

						ContextFreeExpressionDesugar(manager, node->expandedExpression);
						BuildScopeForExpression(manager, parentScope, node->expandedExpression);
						if (!CheckScopes_DuplicatedSymbol(manager) || !CheckScopes_SymbolType(manager))
						{
							return;
						}
					}

					if (node->expandedExpression)
					{
						if (results.Count() == 1)
						{
							GetExpressionType(manager, node->expandedExpression, results[0].type);
						}
						else
						{
							GetExpressionType(manager, node->expandedExpression, nullptr);
						}
					}
				}

				void Visit(WfBindExpression* node)override
				{
					GetExpressionType(manager, node->expression, 0);
					results.Add(ResolveExpressionResult::ReadonlyType(TypeInfoRetriver<Ptr<IValueSubscription>>::CreateTypeInfo()));
				}

				void Visit(WfFormatExpression* node)override
				{
					Ptr<ITypeInfo> typeInfo = TypeInfoRetriver<WString>::CreateTypeInfo();
					results.Add(ResolveExpressionResult::ReadonlyType(typeInfo));
				}

				void Visit(WfNewCoroutineExpression* node)override
				{
					Ptr<ITypeInfo> typeInfo = TypeInfoRetriver<Ptr<ICoroutine>>::CreateTypeInfo();
					results.Add(ResolveExpressionResult::ReadonlyType(typeInfo));
					ValidateStatementSemantic(manager, node->statement);
				}

				static void Execute(Ptr<WfExpression> expression, WfLexicalScopeManager* manager, Ptr<ITypeInfo> expectedType, List<ResolveExpressionResult>& results)
				{
					ValidateSemanticExpressionVisitor visitor(manager, expectedType, results);
					expression->Accept(&visitor);
				}
			};

/***********************************************************************
IsConstantExpression
***********************************************************************/

			class ValidateConstantExpressionVisitor
				: public Object
				, public WfExpression::IVisitor
			{
			public:
				WfLexicalScopeManager*				manager;
				bool								isConstant = false;

				ValidateConstantExpressionVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
				{
				}

				bool Call(Ptr<WfExpression> node)
				{
					bool cache = isConstant;
					isConstant = false;
					node->Accept(this);
					bool result = isConstant;
					isConstant = cache;
					return result;
				}

				void VisitReferenceExpression(WfExpression* node, const WString& name)
				{
					auto result = manager->expressionResolvings[node];
					if (auto enumType = result.type->GetTypeDescriptor()->GetEnumType())
					{
						vint index = enumType->IndexOfItem(name);
						if (index != -1)
						{
							isConstant = true;
						}
					}
				}

				void Visit(WfThisExpression* node)override
				{
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
				}

				void Visit(WfReferenceExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfOrderedNameExpression* node)override
				{
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
				}

				void Visit(WfMemberExpression* node)override
				{
				}

				void Visit(WfChildExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfLiteralExpression* node)override
				{
					isConstant = true;
				}

				void Visit(WfFloatingExpression* node)override
				{
					isConstant = true;
				}

				void Visit(WfIntegerExpression* node)override
				{
					isConstant = true;
				}

				void Visit(WfStringExpression* node)override
				{
					isConstant = true;
				}

				void Visit(WfUnaryExpression* node)override
				{
					isConstant = Call(node->operand);
				}

				void Visit(WfBinaryExpression* node)override
				{
					if (node->op == WfBinaryOperator::Intersect)
					{
						isConstant = Call(node->first) && Call(node->second);
					}
				}

				void Visit(WfLetExpression* node)override
				{
				}

				void Visit(WfIfExpression* node)override
				{
				}

				void Visit(WfRangeExpression* node)override
				{
					isConstant = Call(node->begin) && Call(node->end);
				}

				void Visit(WfSetTestingExpression* node)override
				{
				}

				void Visit(WfConstructorExpression* node)override
				{
					auto result = manager->expressionResolvings[node];
					bool isStruct = (result.type->GetTypeDescriptor()->GetTypeDescriptorFlags() == TypeDescriptorFlags::Struct);

					FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
					{
						if (argument->key && !isStruct)
						{
							if (!Call(argument->key)) return;
						}
						if (argument->value)
						{
							if (!Call(argument->value)) return;
						}
					}
					isConstant = true;
				}

				void Visit(WfInferExpression* node)override
				{
				}

				void Visit(WfTypeCastingExpression* node)override
				{
				}

				void Visit(WfTypeTestingExpression* node)override
				{
				}

				void Visit(WfTypeOfTypeExpression* node)override
				{
					isConstant = true;
				}

				void Visit(WfTypeOfExpressionExpression* node)override
				{
					isConstant = true;
				}

				void Visit(WfAttachEventExpression* node)override
				{
				}

				void Visit(WfDetachEventExpression* node)override
				{
				}

				void Visit(WfObserveExpression* node)override
				{
				}

				void Visit(WfCallExpression* node)override
				{
				}

				void Visit(WfFunctionExpression* node)override
				{
				}

				void Visit(WfNewClassExpression* node)override
				{
				}

				void Visit(WfNewInterfaceExpression* node)override
				{
				}

				void Visit(WfVirtualExpression* node)override
				{
					if (node->expandedExpression)
					{
						isConstant = Call(node->expandedExpression);
					}
				}

				static void Execute(Ptr<WfExpression> expression, WfLexicalScopeManager* manager, Ptr<ITypeInfo> expectedType)
				{
					if (GetExpressionType(manager, expression, expectedType))
					{
						ValidateConstantExpressionVisitor visitor(manager);
						expression->Accept(&visitor);
						if (!visitor.isConstant)
						{
							manager->errors.Add(WfErrors::ExpressionIsNotConstant(expression.Obj()));
						}
					}
				}
			};

/***********************************************************************
ValidateSemantic
***********************************************************************/

			void ValidateModuleSemantic(WfLexicalScopeManager* manager, Ptr<WfModule> module)
			{
				FOREACH(Ptr<WfDeclaration>, declaration, module->declarations)
				{
					ValidateDeclarationSemantic(manager, declaration);
				}
			}

			void ValidateClassMemberSemantic(WfLexicalScopeManager* manager, Ptr<typeimpl::WfCustomType> td, Ptr<WfClassDeclaration> classDecl, Ptr<WfDeclaration> memberDecl)
			{
				return ValidateSemanticClassMemberVisitor::Execute(td, classDecl, memberDecl, manager);
			}

			void ValidateDeclarationSemantic(WfLexicalScopeManager* manager, Ptr<WfDeclaration> declaration)
			{
				return ValidateSemanticDeclarationVisitor::Execute(declaration, manager);
			}

			void ValidateStatementSemantic(WfLexicalScopeManager* manager, Ptr<WfStatement> statement)
			{
				return ValidateSemanticStatementVisitor::Execute(statement, manager);
			}

			void ValidateExpressionSemantic(WfLexicalScopeManager* manager, Ptr<WfExpression> expression, Ptr<reflection::description::ITypeInfo> expectedType, collections::List<ResolveExpressionResult>& results)
			{
				ValidateSemanticExpressionVisitor::Execute(expression, manager, expectedType, results);
				for (vint i = results.Count() - 1; i >= 0; i--)
				{
					auto result = results[i];
					if (result.scopeName && result.scopeName->declarations.Count() > 0)
					{
						List<ResolveExpressionResult> replaces;
						FOREACH(Ptr<WfDeclaration>, decl, result.scopeName->declarations)
						{
							vint index = manager->nodeScopes.Keys().IndexOf(decl.Obj());
							if (index == -1) continue;
							auto scope = manager->nodeScopes.Values()[index];
							if (scope->ownerNode == decl)
							{
								scope = scope->parentScope;
							}

							index = scope->symbols.Keys().IndexOf(decl->name.value);
							if (index == -1) continue;
							FOREACH(Ptr<WfLexicalSymbol>, symbol, scope->symbols.GetByIndex(index))
							{
								if (symbol->creatorNode == decl && symbol->typeInfo)
								{
									replaces.Add(ResolveExpressionResult::Symbol(symbol));
								}
							}
						}

						if (replaces.Count() > 0)
						{
							results.RemoveAt(i);
							FOREACH_INDEXER(ResolveExpressionResult, replaceResult, index, replaces)
							{
								results.Insert(i + index, replaceResult);
							}
						}
					}
				}
			}

			void ValidateConstantExpression(WfLexicalScopeManager* manager, Ptr<WfExpression> expression, Ptr<reflection::description::ITypeInfo> expectedType)
			{
				ValidateConstantExpressionVisitor::Execute(expression, manager, expectedType);
			}

/***********************************************************************
GetExpressionScopeName
***********************************************************************/

			Ptr<WfLexicalScopeName> GetExpressionScopeName(WfLexicalScopeManager* manager, Ptr<WfExpression> expression)
			{
				List<ResolveExpressionResult> results;
				ValidateExpressionSemantic(manager, expression, 0, results);
				if (results.Count() == 0) return 0;

				for (vint i = results.Count() - 1; i >= 0; i--)
				{
					auto& result = results[i];
					if (!result.scopeName)
					{
						results.RemoveAt(i);
					}
				}
				if (results.Count() == 0)
				{
					manager->errors.Add(WfErrors::ExpressionIsNotScopeName(expression.Obj()));
					return 0;
				}
				else if (results.Count() > 1)
				{
					manager->errors.Add(WfErrors::TooManyTargets(expression.Obj(), results, GetExpressionName(expression)));
					return 0;
				}

				auto result = results[0];
				manager->expressionResolvings.Add(expression, result);
				return result.scopeName;
			}

/***********************************************************************
GetExpressionEventInfo
***********************************************************************/

			reflection::description::IEventInfo* GetExpressionEventInfo(WfLexicalScopeManager* manager, Ptr<WfExpression> expression)
			{
				List<ResolveExpressionResult> results;
				ValidateExpressionSemantic(manager, expression, 0, results);
				if (results.Count() == 0) return 0;

				for (vint i = results.Count() - 1; i >= 0; i--)
				{
					auto& result = results[i];
					if (!result.eventInfo)
					{
						results.RemoveAt(i);
					}
				}
				if (results.Count() == 0)
				{
					manager->errors.Add(WfErrors::ExpressionIsNotEvent(expression.Obj()));
					return 0;
				}
				else if (results.Count() > 1)
				{
					manager->errors.Add(WfErrors::TooManyTargets(expression.Obj(), results, GetExpressionName(expression)));
					return 0;
				}

				auto result = results[0];
				manager->expressionResolvings.Add(expression, result);
				return result.eventInfo;
			}

/***********************************************************************
GetExpressionTypes/GetExpressionType/GetLeftValueExpressionType
***********************************************************************/

			void GetExpressionTypes(WfLexicalScopeManager* manager, Ptr<WfExpression> expression, Ptr<reflection::description::ITypeInfo> expectedType, bool allowEvent, collections::List<ResolveExpressionResult>& results)
			{
				ValidateExpressionSemantic(manager, expression, expectedType, results);
				if (results.Count() == 0) return;

				Ptr<WfLexicalScopeName> scopeName;
				IEventInfo* eventInfo = 0;
				for (vint i = results.Count() - 1; i >= 0; i--)
				{
					auto& result = results[i];
					if (result.scopeName && !scopeName)
					{
						scopeName = result.scopeName;
					}
					if (result.eventInfo && !eventInfo)
					{
						eventInfo = result.eventInfo;
					}
					if (!result.type && !(allowEvent && eventInfo))
					{
						results.RemoveAt(i);
					}
				}
				if (results.Count() == 0)
				{
					if (scopeName)
					{
						manager->errors.Add(WfErrors::ScopeNameIsNotExpression(expression.Obj(), scopeName));
					}
					if (eventInfo)
					{
						manager->errors.Add(WfErrors::EventIsNotExpression(expression.Obj(), eventInfo));
					}
				}

				if (expectedType)
				{
					List<Ptr<ITypeInfo>> failedTypes;
					for (vint i = results.Count() - 1; i >= 0; i--)
					{
						auto& result = results[i];
						if (!CanConvertToType(result.type.Obj(), expectedType.Obj(), false))
						{
							failedTypes.Add(result.type);
							results.RemoveAt(i);
						}
					}

					if (results.Count() == 0)
					{
						FOREACH(Ptr<ITypeInfo>, type, failedTypes)
						{
							manager->errors.Add(WfErrors::ExpressionCannotImplicitlyConvertToType(expression.Obj(), type.Obj(), expectedType.Obj()));
						}
					}
				}
			}

			Ptr<reflection::description::ITypeInfo> GetExpressionType(WfLexicalScopeManager* manager, Ptr<WfExpression> expression, Ptr<reflection::description::ITypeInfo> expectedType)
			{
				List<ResolveExpressionResult> results;
				GetExpressionTypes(manager, expression, expectedType, false, results);
				
				if (results.Count() > 1)
				{
					manager->errors.Add(WfErrors::TooManyTargets(expression.Obj(), results, GetExpressionName(expression)));
					return expectedType;
				}
				else if (results.Count() == 1)
				{
					auto result = results[0];
					result.expectedType = expectedType;
					manager->expressionResolvings.Add(expression, result);
					return expectedType ? expectedType : result.type;
				}
				else
				{
					return expectedType;
				}
			}

			Ptr<reflection::description::ITypeInfo>	GetLeftValueExpressionType(WfLexicalScopeManager* manager, Ptr<WfExpression> expression)
			{
				List<ResolveExpressionResult> results;
				GetExpressionTypes(manager, expression, nullptr, false, results);

				if (results.Count() > 1)
				{
					manager->errors.Add(WfErrors::TooManyTargets(expression.Obj(), results, GetExpressionName(expression)));
				}
				else if (results.Count() == 1)
				{
					if (results[0].writableType)
					{
						auto result = results[0];
						manager->expressionResolvings.Add(expression, result);
						return result.writableType;
					}
					else
					{
						manager->errors.Add(WfErrors::ExpressionIsNotLeftValue(expression.Obj(), results[0]));
					}
				}
				return 0;
			}

/***********************************************************************
GetEnumerableExpressionItemType
***********************************************************************/

			Ptr<reflection::description::ITypeInfo>	GetEnumerableExpressionItemType(WfLexicalScopeManager* manager, Ptr<WfExpression> expression, Ptr<reflection::description::ITypeInfo> expectedType)
			{
				Ptr<ITypeInfo> collectionType = GetExpressionType(manager, expression, expectedType);
				if (collectionType)
				{
					if (collectionType->GetTypeDescriptor()->CanConvertTo(description::GetTypeDescriptor<IValueEnumerable>()))
					{
						if (collectionType->GetDecorator() == ITypeInfo::SharedPtr)
						{
							ITypeInfo* genericType = collectionType->GetElementType();
							if (genericType->GetDecorator() == ITypeInfo::Generic && genericType->GetGenericArgumentCount() == 1)
							{
								return CopyTypeInfo(genericType->GetGenericArgument(0));
							}
						}
						return TypeInfoRetriver<Value>::CreateTypeInfo();
					}

					manager->errors.Add(WfErrors::ExpressionIsNotCollection(expression.Obj(), collectionType.Obj()));
				}
				return 0;
			}
		}
	}
}

/***********************************************************************
ANALYZER\WFANALYZER_VALIDATESTRUCTURE.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace analyzer
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection::description;

/***********************************************************************
ValidateStructureContext
***********************************************************************/

			ValidateStructureContext::ValidateStructureContext()
				:currentBindExpression(0)
				, currentObserveExpression(0)
				, currentLoopStatement(0)
				, currentCatchStatement(0)
			{
			}

/***********************************************************************
ValidateStructure(Type)
***********************************************************************/

			class ValidateReferenceTypeVisitor : public Object, public WfType::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				bool									result;

				ValidateReferenceTypeVisitor(WfLexicalScopeManager* _manager)
					:manager(_manager)
					, result(true)
				{
				}
				
				void Visit(WfPredefinedType* node)override
				{
				}

				void Visit(WfTopQualifiedType* node)override
				{
				}

				void Visit(WfReferenceType* node)override
				{
				}

				void Visit(WfRawPointerType* node)override
				{
					result = false;
				}

				void Visit(WfSharedPointerType* node)override
				{
					result = false;
				}

				void Visit(WfNullableType* node)override
				{
					result = false;
				}

				void Visit(WfEnumerableType* node)override
				{
					result = false;
				}

				void Visit(WfMapType* node)override
				{
					result = false;
				}

				void Visit(WfFunctionType* node)override
				{
					result = false;
				}

				void Visit(WfChildType* node)override
				{
					node->parent->Accept(this);
				}

				static bool Execute(Ptr<WfType> type, WfLexicalScopeManager* manager)
				{
					ValidateReferenceTypeVisitor visitor(manager);
					type->Accept(&visitor);
					return visitor.result;
				}
			};

			class ValidateStructureTypeVisitor : public Object, public WfType::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				ValidateTypeStragety					strategy;
				WfClassDeclaration*						classDecl;

				ValidateStructureTypeVisitor(WfLexicalScopeManager* _manager, ValidateTypeStragety _strategy, WfClassDeclaration* _classDecl)
					:manager(_manager)
					, strategy(_strategy)
					, classDecl(_classDecl)
				{
				}
				
				void Visit(WfPredefinedType* node)override
				{
					switch (node->name)
					{
					case WfPredefinedTypeName::Void:
						switch (strategy)
						{
						case ValidateTypeStragety::Value:
							manager->errors.Add(WfErrors::WrongVoidType(node));
							break;
						case ValidateTypeStragety::BaseType:
							manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
						default:;
						}
						break;
					case WfPredefinedTypeName::Interface:
						switch (strategy)
						{
						case ValidateTypeStragety::ReturnType:
						case ValidateTypeStragety::Value:
							manager->errors.Add(WfErrors::WrongInterfaceType(node));
							break;
						default:;
						}
					default:;
					}
				}

				void Visit(WfTopQualifiedType* node)override
				{
				}

				void Visit(WfReferenceType* node)override
				{
				}

				void Visit(WfRawPointerType* node)override
				{
					if (strategy == ValidateTypeStragety::BaseType)
					{
						manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
					}

					if (!ValidateReferenceTypeVisitor::Execute(node->element, manager))
					{
						manager->errors.Add(WfErrors::RawPointerToNonReferenceType(node));
					}
					else if (auto predefinedType = node->element.Cast<WfPredefinedType>())
					{
						if (predefinedType->name != WfPredefinedTypeName::Interface)
						{
							manager->errors.Add(WfErrors::RawPointerToNonReferenceType(node));
						}
					}
				}

				void Visit(WfSharedPointerType* node)override
				{
					if (strategy == ValidateTypeStragety::BaseType)
					{
						manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
					}

					if (!ValidateReferenceTypeVisitor::Execute(node->element, manager))
					{
						manager->errors.Add(WfErrors::SharedPointerToNonReferenceType(node));
					}
					else if (auto predefinedType = node->element.Cast<WfPredefinedType>())
					{
						if (predefinedType->name != WfPredefinedTypeName::Interface)
						{
							manager->errors.Add(WfErrors::SharedPointerToNonReferenceType(node));
						}
					}
				}

				void Visit(WfNullableType* node)override
				{
					if (strategy == ValidateTypeStragety::BaseType)
					{
						manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
					}

					if (!ValidateReferenceTypeVisitor::Execute(node->element, manager))
					{
						manager->errors.Add(WfErrors::NullableToNonReferenceType(node));
					}
					else if (auto predefinedType = node->element.Cast<WfPredefinedType>())
					{
						switch (predefinedType->name)
						{
						case WfPredefinedTypeName::Void:
						case WfPredefinedTypeName::Object:
						case WfPredefinedTypeName::Interface:
							manager->errors.Add(WfErrors::NullableToNonReferenceType(node));
							break;
						default:;
						}
					}
				}

				void Visit(WfEnumerableType* node)override
				{
					if (strategy == ValidateTypeStragety::BaseType)
					{
						manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
					}

					ValidateTypeStructure(manager, node->element);
				}

				void Visit(WfMapType* node)override
				{
					if (strategy == ValidateTypeStragety::BaseType)
					{
						manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
					}

					if (node->key)
					{
						ValidateTypeStructure(manager, node->key);
					}
					ValidateTypeStructure(manager, node->value);
				}

				void Visit(WfFunctionType* node)override
				{
					if (strategy == ValidateTypeStragety::BaseType)
					{
						manager->errors.Add(WfErrors::WrongBaseType(classDecl, node));
					}

					ValidateTypeStructure(manager, node->result, ValidateTypeStragety::ReturnType);
					FOREACH(Ptr<WfType>, argument, node->arguments)
					{
						ValidateTypeStructure(manager, argument);
					}
				}

				void Visit(WfChildType* node)override
				{
					if (!ValidateReferenceTypeVisitor::Execute(node->parent, manager))
					{
						manager->errors.Add(WfErrors::ChildOfNonReferenceType(node));
					}
				}

				static void Execute(Ptr<WfType> type, WfLexicalScopeManager* manager, ValidateTypeStragety strategy, WfClassDeclaration* classDecl)
				{
					ValidateStructureTypeVisitor visitor(manager, strategy, classDecl);
					type->Accept(&visitor);
				}
			};

/***********************************************************************
ValidateStructure(Declaration)
***********************************************************************/

			class ValidateStructureDeclarationVisitor
				: public Object
				, public WfDeclaration::IVisitor
				, public WfVirtualDeclaration::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				WfClassDeclaration*						classDecl;
				WfExpression*							surroundingLambda;

				ValidateStructureDeclarationVisitor(WfLexicalScopeManager* _manager, WfClassDeclaration* _classDecl, WfExpression* _surroundingLambda)
					:manager(_manager)
					, classDecl(_classDecl)
					, surroundingLambda(_surroundingLambda)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						manager->errors.Add(WfErrors::WrongDeclarationInInterfaceConstructor(node));
					}
					if (node->classMember)
					{
						manager->errors.Add(WfErrors::WrongClassMember(node));
					}

					for (vint i = 0; i < node->declarations.Count(); i++)
					{
						ValidateDeclarationStructure(manager, node->declarations[i]);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (classDecl->kind)
						{
						case WfClassKind::Class:
							{
								switch (node->classMember->kind)
								{
								case WfClassMemberKind::Normal:
								case WfClassMemberKind::Static:
									if (!node->statement)
									{
										manager->errors.Add(WfErrors::FunctionShouldHaveImplementation(node));
									}
									break;
								case WfClassMemberKind::Override:
									manager->errors.Add(WfErrors::OverrideShouldImplementInterfaceMethod(node));
									break;
								}
							}
							break;
						case WfClassKind::Interface:
							{
								switch (node->classMember->kind)
								{
								case WfClassMemberKind::Normal:
									if (node->statement)
									{
										manager->errors.Add(WfErrors::InterfaceMethodShouldNotHaveImplementation(node));
									}
									break;
								case WfClassMemberKind::Static:
									if (!node->statement)
									{
										manager->errors.Add(WfErrors::FunctionShouldHaveImplementation(node));
									}
									break;
								case WfClassMemberKind::Override:
									manager->errors.Add(WfErrors::OverrideShouldImplementInterfaceMethod(node));
									break;
								}
							}
							break;
						}
					}
					else
					{
						if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
						{
							switch (node->classMember->kind)
							{
							case WfClassMemberKind::Normal:
								break;
							case WfClassMemberKind::Static:
								manager->errors.Add(WfErrors::FunctionInNewTypeExpressionCannotBeStatic(node));
								break;
							case WfClassMemberKind::Override:
								break;
							}
						}
						if (!node->statement)
						{
							manager->errors.Add(WfErrors::FunctionShouldHaveImplementation(node));
						}
					}

					if (node->anonymity == WfFunctionAnonymity::Anonymous)
					{
						if (!dynamic_cast<WfFunctionExpression*>(surroundingLambda))
						{
							manager->errors.Add(WfErrors::FunctionShouldHaveName(node));
						}
					}


					ValidateTypeStructure(manager, node->returnType, ValidateTypeStragety::ReturnType);
					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						ValidateTypeStructure(manager, argument->type);
					}

					if (node->statement)
					{
						ValidateStructureContext context;
						ValidateStatementStructure(manager, &context, node->statement);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}
					}

					if (node->type)
					{
						ValidateTypeStructure(manager, node->type);
					}
					else if (classDecl)
					{
						manager->errors.Add(WfErrors::MissingFieldType(node));
					}
					ValidateStructureContext context;
					ValidateExpressionStructure(manager, &context, node->expression);
				}

				void Visit(WfEventDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}

						FOREACH(Ptr<WfType>, argument, node->arguments)
						{
							ValidateTypeStructure(manager, argument);
						}
					}
					else if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						manager->errors.Add(WfErrors::WrongDeclarationInInterfaceConstructor(node));
					}
					else
					{
						manager->errors.Add(WfErrors::WrongDeclaration(node));
					}
				}

				class FindPropertyRelatedDeclVisitor
					: public empty_visitor::DeclarationVisitor
				{
				public:
					WfLexicalScopeManager*				manager;
					WfClassDeclaration*					classDecl;
					WfPropertyDeclaration*				propDecl;
					Ptr<WfDeclaration>					getter;
					Ptr<WfDeclaration>					setter;
					Ptr<WfDeclaration>					valueChangedEvent;
					bool								duplicateGetter = false;
					bool								duplicateSetter = false;
					bool								duplicateEvent = false;

					FindPropertyRelatedDeclVisitor(WfLexicalScopeManager* _manager, WfClassDeclaration* _classDecl, WfPropertyDeclaration* _propDecl)
						:manager(_manager)
						, classDecl(_classDecl)
						, propDecl(_propDecl)
					{
					}

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							Execute(decl);
						}
					}

					void Execute(Ptr<WfDeclaration> memberDecl)
					{
						memberDecl->Accept(this);
						if (!duplicateGetter && memberDecl->name.value == propDecl->getter.value)
						{
							if (getter)
							{
								duplicateGetter = true;
								manager->errors.Add(WfErrors::TooManyPropertyGetter(propDecl, classDecl));
							}
							else
							{
								getter = memberDecl;
							}
						}

						if (!duplicateSetter && propDecl->setter.value != L"" && memberDecl->name.value == propDecl->setter.value)
						{
							if (setter)
							{
								duplicateSetter = true;
								manager->errors.Add(WfErrors::TooManyPropertySetter(propDecl, classDecl));
							}
							else
							{
								setter = memberDecl;
							}
						}

						if (!duplicateEvent && propDecl->valueChangedEvent.value != L"" && memberDecl->name.value == propDecl->valueChangedEvent.value)
						{
							if (valueChangedEvent)
							{
								duplicateEvent = true;
								manager->errors.Add(WfErrors::TooManyPropertyEvent(propDecl, classDecl));
							}
							else
							{
								valueChangedEvent = memberDecl;
							}
						}
					}
				};

				void Visit(WfPropertyDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}

						ValidateTypeStructure(manager, node->type);
						FindPropertyRelatedDeclVisitor visitor(manager, classDecl, node);

						FOREACH(Ptr<WfDeclaration>, memberDecl, classDecl->declarations)
						{
							visitor.Execute(memberDecl);
						}

						if (!visitor.getter || visitor.getter->classMember->kind == WfClassMemberKind::Static || !visitor.getter.Cast<WfFunctionDeclaration>())
						{
							manager->errors.Add(WfErrors::PropertyGetterNotFound(node, classDecl));
						}

						if (node->setter.value != L"" && (!visitor.setter || visitor.setter->classMember->kind == WfClassMemberKind::Static || !visitor.setter.Cast<WfFunctionDeclaration>()))
						{
							manager->errors.Add(WfErrors::PropertySetterNotFound(node, classDecl));
						}

						if (node->valueChangedEvent.value != L"" && (!visitor.valueChangedEvent || visitor.valueChangedEvent->classMember->kind == WfClassMemberKind::Static || !visitor.valueChangedEvent.Cast<WfEventDeclaration>()))
						{
							manager->errors.Add(WfErrors::PropertyEventNotFound(node, classDecl));
						}
					}
					else if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						manager->errors.Add(WfErrors::WrongDeclarationInInterfaceConstructor(node));
					}
					else
					{
						manager->errors.Add(WfErrors::WrongDeclaration(node));
					}
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}

						if (classDecl->kind != WfClassKind::Class)
						{
							manager->errors.Add(WfErrors::WrongDeclaration(node));
						}

						FOREACH(Ptr<WfBaseConstructorCall>, call, node->baseConstructorCalls)
						{
							ValidateTypeStructure(manager, call->type, ValidateTypeStragety::BaseType, classDecl);
							FOREACH(Ptr<WfExpression>, argument, call->arguments)
							{
								ValidateStructureContext context;
								ValidateExpressionStructure(manager, &context, argument);
							}
						}
						{
							ValidateStructureContext context;
							ValidateStatementStructure(manager, &context, node->statement);
						}
					}
					else
					{
						manager->errors.Add(WfErrors::WrongDeclaration(node));
					}
				}

				void Visit(WfDestructorDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}

						if (classDecl->kind != WfClassKind::Class)
						{
							manager->errors.Add(WfErrors::WrongDeclaration(node));
						}

						ValidateStructureContext context;
						ValidateStatementStructure(manager, &context, node->statement);
					}
					else
					{
						manager->errors.Add(WfErrors::WrongDeclaration(node));
					}
				}

				class FindCtorVisitor
					: public empty_visitor::DeclarationVisitor
				{
				public:
					WfConstructorDeclaration*			ctor = nullptr;

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							decl->Accept(this);
						}
					}

					void Visit(WfConstructorDeclaration* node)override
					{
						ctor = node;
					}
				};

				class TooManyDtorVisitor
					: public empty_visitor::DeclarationVisitor
				{
				public:
					WfLexicalScopeManager*				manager;
					WfClassDeclaration*					classDecl;
					WfDestructorDeclaration*			dtor = nullptr;

					TooManyDtorVisitor(WfLexicalScopeManager* _manager, WfClassDeclaration* _classDecl)
						:manager(_manager)
						, classDecl(_classDecl)
					{
					}

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							decl->Accept(this);
						}
					}

					void Visit(WfDestructorDeclaration* node)override
					{
						if (!dtor)
						{
							dtor = node;
						}
						else
						{
							manager->errors.Add(WfErrors::TooManyDestructor(node, classDecl));
						}
					}
				};

				void Visit(WfClassDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}
					}
					else if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						manager->errors.Add(WfErrors::WrongDeclarationInInterfaceConstructor(node));
					}

					switch (node->kind)
					{
					case WfClassKind::Class:
						{
							if (node->constructorType != WfConstructorType::Undefined)
							{
								manager->errors.Add(WfErrors::ClassWithInterfaceConstructor(node));
							}
							{
								FindCtorVisitor visitor;
								FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
								{
									memberDecl->Accept(&visitor);
								}

								if (!visitor.ctor)
								{
									auto ctor = MakePtr<WfConstructorDeclaration>();
									node->declarations.Add(ctor);
									ctor->codeRange = node->codeRange;
									ctor->classMember = MakePtr<WfClassMember>();
									ctor->classMember->codeRange = node->codeRange;
									ctor->classMember->kind = WfClassMemberKind::Normal;

									auto stat = MakePtr<WfBlockStatement>();
									ctor->statement = stat;
									stat->codeRange = node->codeRange;
								}
							}
						}
						break;
					case WfClassKind::Interface:
						break;
					}

					FOREACH(Ptr<WfType>, type, node->baseTypes)
					{
						ValidateTypeStructure(manager, type, ValidateTypeStragety::BaseType, node);
					}

					{
						TooManyDtorVisitor visitor(manager, node);
						FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
						{
							ValidateDeclarationStructure(manager, memberDecl, node);
							memberDecl->Accept(&visitor);
						}
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}
					}
					else if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						manager->errors.Add(WfErrors::WrongDeclarationInInterfaceConstructor(node));
					}

					vuint64_t current = 0;
					bool reportedNotConsecutive = false;
					SortedList<WString> discoveredItems;
					FOREACH(Ptr<WfEnumItem>, item, node->items)
					{
						switch (item->kind)
						{
						case WfEnumItemKind::Constant:
							{
								vuint64_t value = -1;
								TypedValueSerializerProvider<vuint64_t>::Deserialize(item->number.value, value);
								if (!reportedNotConsecutive && value != current)
								{
									reportedNotConsecutive = true;
									switch (node->kind)
									{
									case WfEnumKind::Normal:
										manager->errors.Add(WfErrors::EnumValuesNotConsecutiveFromZero(node));
										break;
									case WfEnumKind::Flag:
										manager->errors.Add(WfErrors::FlagValuesNotConsecutiveFromZero(node));
										break;
									}
								}
								switch (node->kind)
								{
								case WfEnumKind::Normal:
									current++;
									break;
								case WfEnumKind::Flag:
									current = current == 0 ? 1 : current * 2;
									break;
								}
							}
							break;
						case WfEnumItemKind::Intersection:
							FOREACH(Ptr<WfEnumItemIntersection>, enumInt, item->intersections)
							{
								if (!discoveredItems.Contains(enumInt->name.value))
								{
									manager->errors.Add(WfErrors::FlagValueNotExists(enumInt.Obj(), node));
								}
							}
							break;
						}

						if (discoveredItems.Contains(item->name.value))
						{
							manager->errors.Add(WfErrors::DuplicatedEnumValue(item.Obj(), node));
						}
						else
						{
							discoveredItems.Add(item->name.value);
						}
					}
				}

				void Visit(WfStructDeclaration* node)override
				{
					if (classDecl && node->classMember)
					{
						switch (node->classMember->kind)
						{
						case WfClassMemberKind::Normal:
							break;
						case WfClassMemberKind::Static:
						case WfClassMemberKind::Override:
							manager->errors.Add(WfErrors::WrongClassMemberConfig(node));
							break;
						}
					}
					else if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						manager->errors.Add(WfErrors::WrongDeclarationInInterfaceConstructor(node));
					}

					SortedList<WString> discoveredItems;
					FOREACH(Ptr<WfStructMember>, member, node->members)
					{
						if (discoveredItems.Contains(member->name.value))
						{
							manager->errors.Add(WfErrors::DuplicatedStructMember(member.Obj(), node));
						}
						else
						{
							discoveredItems.Add(member->name.value);
						}
					}
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					node->Accept(static_cast<WfVirtualDeclaration::IVisitor*>(this));
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				void Visit(WfAutoPropertyDeclaration* node)override
				{
					switch (node->classMember->kind)
					{
					case WfClassMemberKind::Normal:
						if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
						{
							manager->errors.Add(WfErrors::AutoPropertyCannotBeNormalOutsideOfClass(node));
						}
						break;
					case WfClassMemberKind::Static:
						manager->errors.Add(WfErrors::AutoPropertyCannotBeStatic(node));
						break;
					case WfClassMemberKind::Override:
						if (!dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
						{
							manager->errors.Add(WfErrors::OverrideShouldImplementInterfaceMethod(node));
						}
						break;
					}

					if (classDecl)
					{
						switch (classDecl->kind)
						{
						case WfClassKind::Class:
							if (!node->expression)
							{
								manager->errors.Add(WfErrors::AutoPropertyShouldBeInitialized(node));
							}
							break;
						case WfClassKind::Interface:
							if (node->expression)
							{
								manager->errors.Add(WfErrors::AutoPropertyCannotBeInitializedInInterface(node, classDecl));
							}
							break;
						}
					}
					else if (dynamic_cast<WfNewInterfaceExpression*>(surroundingLambda))
					{
						if (!node->expression)
						{
							manager->errors.Add(WfErrors::AutoPropertyShouldBeInitialized(node));
						}
					}
					else
					{
						manager->errors.Add(WfErrors::WrongDeclaration(node));
					}

					ValidateTypeStructure(manager, node->type);
					if (node->expression)
					{
						ValidateStructureContext context;
						ValidateExpressionStructure(manager, &context, node->expression);
					}
				}

				void Visit(WfCastResultInterfaceDeclaration* node)override
				{
				}

				static void Execute(Ptr<WfDeclaration> declaration, WfLexicalScopeManager* manager, WfClassDeclaration* classDecl, WfExpression* surroundingLambda)
				{
					ValidateStructureDeclarationVisitor visitor(manager, classDecl, surroundingLambda);
					declaration->Accept(&visitor);
				}
			};

/***********************************************************************
ValidateStructure(Statement)
***********************************************************************/

			class ValidateStructureStatementVisitor
				: public Object
				, public WfStatement::IVisitor
				, public WfVirtualStatement::IVisitor
				, public WfCoroutineStatement::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				ValidateStructureContext*				context;
				Ptr<WfStatement>						result;

				ValidateStructureStatementVisitor(WfLexicalScopeManager* _manager, ValidateStructureContext* _context)
					:manager(_manager)
					, context(_context)
				{
				}

				void Visit(WfBreakStatement* node)override
				{
					if (!context->currentLoopStatement)
					{
						manager->errors.Add(WfErrors::BreakNotInLoop(node));
					}
				}

				void Visit(WfContinueStatement* node)override
				{
					if (!context->currentLoopStatement)
					{
						manager->errors.Add(WfErrors::ContinueNotInLoop(node));
					}
				}

				void Visit(WfReturnStatement* node)override
				{
					if (node->expression)
					{
						ValidateExpressionStructure(manager, context, node->expression);
					}
				}

				void Visit(WfDeleteStatement* node)override
				{
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfRaiseExceptionStatement* node)override
				{
					if (node->expression)
					{
						ValidateExpressionStructure(manager, context, node->expression);
					}
					else if (!context->currentCatchStatement)
					{
						manager->errors.Add(WfErrors::RethrowNotInCatch(node));
					}
				}

				void Visit(WfIfStatement* node)override
				{
					if (node->type)
					{
						ValidateTypeStructure(manager, node->type);
					}
					ValidateExpressionStructure(manager, context, node->expression);
					ValidateStatementStructure(manager, context, node->trueBranch);
					if (node->falseBranch)
					{
						ValidateStatementStructure(manager, context, node->falseBranch);
					}
				}

				void Visit(WfWhileStatement* node)override
				{
					auto oldLoop = context->currentLoopStatement;
					context->currentLoopStatement = node;
					ValidateExpressionStructure(manager, context, node->condition);
					ValidateStatementStructure(manager, context, node->statement);
					context->currentLoopStatement = oldLoop;
				}

				void Visit(WfTryStatement* node)override
				{
					ValidateStatementStructure(manager, context, node->protectedStatement);
					if (node->catchStatement)
					{
						auto oldCatch = context->currentCatchStatement;
						context->currentCatchStatement = node->catchStatement.Obj();
						ValidateStatementStructure(manager, context, node->catchStatement);
						context->currentCatchStatement = oldCatch;
					}
					if (node->finallyStatement)
					{
						ValidateStatementStructure(manager, context, node->finallyStatement);
					}
					if (!node->catchStatement && !node->finallyStatement)
					{
						manager->errors.Add(WfErrors::TryMissCatchAndFinally(node));
					}
				}

				void Visit(WfBlockStatement* node)override
				{
					for (vint i = 0; i < node->statements.Count(); i++)
					{
						ValidateStatementStructure(manager, context, node->statements[i]);
					}
				}

				void Visit(WfExpressionStatement* node)override
				{
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfVariableStatement* node)override
				{
					ValidateDeclarationStructure(manager, node->variable);
				}

				void Visit(WfVirtualStatement* node)override
				{
					node->Accept((WfVirtualStatement::IVisitor*)this);
					if (node->expandedStatement)
					{
						ValidateStatementStructure(manager, context, node->expandedStatement);
					}
				}

				void Visit(WfSwitchStatement* node)override
				{
					ValidateExpressionStructure(manager, context, node->expression);
					FOREACH(Ptr<WfSwitchCase>, switchCase, node->caseBranches)
					{
						ValidateExpressionStructure(manager, context, switchCase->expression);
						ValidateStatementStructure(manager, context, switchCase->statement);
					}
					if (node->defaultBranch)
					{
						ValidateStatementStructure(manager, context, node->defaultBranch);
					}
				}

				void Visit(WfForEachStatement* node)override
				{
					auto oldLoop = context->currentLoopStatement;
					context->currentLoopStatement = node;
					ValidateExpressionStructure(manager, context, node->collection);
					ValidateStatementStructure(manager, context, node->statement);
					context->currentLoopStatement = oldLoop;
				}

				void Visit(WfCoProviderStatement* node)override
				{
					auto oldProvider = context->currentCoProviderStatement;
					context->currentCoProviderStatement = node;
					ValidateStatementStructure(manager, context, node->statement);
					context->currentCoProviderStatement = oldProvider;
				}

				void Visit(WfCoroutineStatement* node)override
				{
					node->Accept((WfCoroutineStatement::IVisitor*)this);
				}

				void Visit(WfCoPauseStatement* node)override
				{
					if (!context->currentNewCoroutineExpression || context->currentCoPauseStatement)
					{
						manager->errors.Add(WfErrors::WrongCoPause(node));
					}
					if (node->statement)
					{
						auto oldCpPause = context->currentCoPauseStatement;
						context->currentCoPauseStatement = node;
						ValidateStatementStructure(manager, context, node->statement);
						context->currentCoPauseStatement = oldCpPause;
					}
				}

				void Visit(WfCoOperatorStatement* node)override
				{
					if (!context->currentCoProviderStatement)
					{
						manager->errors.Add(WfErrors::WrongCoOperator(node));
					}
				}

				static void Execute(Ptr<WfStatement>& statement, WfLexicalScopeManager* manager, ValidateStructureContext* context)
				{
					ValidateStructureStatementVisitor visitor(manager, context);
					statement->Accept(&visitor);
					if (visitor.result)
					{
						statement = visitor.result;
					}
				}
			};

/***********************************************************************
ValidateStructure(Expression)
***********************************************************************/

			class ValidateStructureExpressionVisitor
				: public Object
				, public WfExpression::IVisitor
				, public WfVirtualExpression::IVisitor
			{
			public:
				WfLexicalScopeManager*					manager;
				ValidateStructureContext*				context;
				Ptr<WfExpression>						result;

				ValidateStructureExpressionVisitor(WfLexicalScopeManager* _manager, ValidateStructureContext* _context)
					:manager(_manager)
					, context(_context)
				{
				}

				void Visit(WfThisExpression* node)override
				{
					if (context->currentBindExpression)
					{
						manager->errors.Add(WfErrors::WrongThisExpression(node));
					}
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
				}

				void Visit(WfReferenceExpression* node)override
				{
				}

				void Visit(WfOrderedNameExpression* node)override
				{
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					auto oldBind = context->currentBindExpression;
					context->currentBindExpression = 0;
					ValidateExpressionStructure(manager, context, node->body);
					context->currentBindExpression = oldBind;
				}

				void Visit(WfMemberExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->parent);
				}

				void Visit(WfChildExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->parent);
				}

				void Visit(WfLiteralExpression* node)override
				{
				}

				void Visit(WfFloatingExpression* node)override
				{
				}

				void Visit(WfIntegerExpression* node)override
				{
				}

				void Visit(WfStringExpression* node)override
				{
				}

				void Visit(WfUnaryExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->operand);
				}

				void Visit(WfBinaryExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->first);
					ValidateExpressionStructure(manager, context, node->second);
				}

				void Visit(WfLetExpression* node)override
				{
					FOREACH(Ptr<WfLetVariable>, variable, node->variables)
					{
						ValidateExpressionStructure(manager, context, variable->value);
					}
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfIfExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->condition);
					ValidateExpressionStructure(manager, context, node->trueBranch);
					ValidateExpressionStructure(manager, context, node->falseBranch);
				}

				void Visit(WfRangeExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->begin);
					ValidateExpressionStructure(manager, context, node->end);
				}

				void Visit(WfSetTestingExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->element);
					ValidateExpressionStructure(manager, context, node->collection);
				}

				void Visit(WfConstructorExpression* node)override
				{
					vint listElementCount = 0;
					vint mapElementCount = 0;
					FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
					{
						ValidateExpressionStructure(manager, context, argument->key);
						if (argument->value)
						{
							ValidateExpressionStructure(manager, context, argument->value);
							mapElementCount++;
						}
						else
						{
							listElementCount++;
						}
					}

					if (listElementCount*mapElementCount != 0)
					{
						manager->errors.Add(WfErrors::ConstructorMixMapAndList(node));
					}
				}

				void Visit(WfInferExpression* node)override
				{
					ValidateTypeStructure(manager, node->type);
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfTypeCastingExpression* node)override
				{
					ValidateTypeStructure(manager, node->type);
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfTypeTestingExpression* node)override
				{
					if (node->type)
					{
						ValidateTypeStructure(manager, node->type);
					}
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfTypeOfTypeExpression* node)override
				{
					ValidateTypeStructure(manager, node->type);
				}

				void Visit(WfTypeOfExpressionExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->expression);
				}

				void Visit(WfAttachEventExpression* node)override
				{
					if (context->currentBindExpression)
					{
						manager->errors.Add(WfErrors::AttachInBind(node));
					}
					ValidateExpressionStructure(manager, context, node->event);
					ValidateExpressionStructure(manager, context, node->function);
				}

				void Visit(WfDetachEventExpression* node)override
				{
					if (context->currentBindExpression)
					{
						manager->errors.Add(WfErrors::DetachInBind(node));
					}
					ValidateExpressionStructure(manager, context, node->event);
					ValidateExpressionStructure(manager, context, node->handler);
				}

				void Visit(WfObserveExpression* node)override
				{
					if (!context->currentBindExpression)
					{
						manager->errors.Add(WfErrors::ObserveNotInBind(node));
					}
					if (context->currentObserveExpression)
					{
						manager->errors.Add(WfErrors::ObserveInObserveEvent(node));
					}

					if (node->observeType == WfObserveType::SimpleObserve)
					{
						if (!node->expression.Cast<WfReferenceExpression>())
						{
							manager->errors.Add(WfErrors::WrongSimpleObserveExpression(node->expression.Obj()));
						}
						FOREACH(Ptr<WfExpression>, event, node->events)
						{
							if (!event.Cast<WfReferenceExpression>())
							{
								manager->errors.Add(WfErrors::WrongSimpleObserveEvent(event.Obj()));
							}
						}
					}
					if (node->events.Count() == 0)
					{
						manager->errors.Add(WfErrors::EmptyObserveEvent(node));
					}

					ValidateExpressionStructure(manager, context, node->parent);
					ValidateExpressionStructure(manager, context, node->expression);
					context->currentObserveExpression = node;
					for (vint i = 0; i < node->events.Count(); i++)
					{
						ValidateExpressionStructure(manager, context, node->events[i]);
					}
					context->currentObserveExpression = 0;
				}

				void Visit(WfCallExpression* node)override
				{
					ValidateExpressionStructure(manager, context, node->function);
					for (vint i = 0; i < node->arguments.Count(); i++)
					{
						ValidateExpressionStructure(manager, context, node->arguments[i]);
					}
				}

				void Visit(WfFunctionExpression* node)override
				{
					ValidateDeclarationStructure(manager, node->function, nullptr, node);
				}

				void Visit(WfNewClassExpression* node)override
				{
					ValidateTypeStructure(manager, node->type);
					for (vint i = 0; i < node->arguments.Count(); i++)
					{
						ValidateExpressionStructure(manager, context, node->arguments[i]);
					}
				}

				void Visit(WfNewInterfaceExpression* node)override
				{
					ValidateTypeStructure(manager, node->type);
					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						ValidateDeclarationStructure(manager, memberDecl, nullptr, node);
					}
				}

				void Visit(WfVirtualExpression* node)override
				{
					node->Accept((WfVirtualExpression::IVisitor*)this);
					if (node->expandedExpression)
					{
						ValidateExpressionStructure(manager, context, node->expandedExpression);
					}
				}

				void Visit(WfBindExpression* node)override
				{
					if (context->currentBindExpression)
					{
						manager->errors.Add(WfErrors::BindInBind(node));
					}

					auto bind = context->currentBindExpression;
					context->currentBindExpression = node;
					ValidateExpressionStructure(manager, context, node->expression);
					context->currentBindExpression = bind;
				}

				void Visit(WfFormatExpression* node)override
				{
				}

				void Visit(WfNewCoroutineExpression* node)override
				{
					ValidateStructureContext context;
					context.currentNewCoroutineExpression = node;
					ValidateStatementStructure(manager, &context, node->statement);
				}

				static void Execute(Ptr<WfExpression>& expression, WfLexicalScopeManager* manager, ValidateStructureContext* context)
				{
					ValidateStructureExpressionVisitor visitor(manager, context);
					expression->Accept(&visitor);
					if (visitor.result)
					{
						expression = visitor.result;
					}
				}
			};

/***********************************************************************
ValidateStructure
***********************************************************************/

			void ValidateTypeStructure(WfLexicalScopeManager* manager, Ptr<WfType> type, ValidateTypeStragety strategy, WfClassDeclaration* classDecl)
			{
				ValidateStructureTypeVisitor::Execute(type, manager, strategy, classDecl);
			}

			void ValidateModuleStructure(WfLexicalScopeManager* manager, Ptr<WfModule> module)
			{
				FOREACH(Ptr<WfModuleUsingPath>, path, module->paths)
				{
					FOREACH_INDEXER(Ptr<WfModuleUsingItem>, item, index, path->items)
					{
						vint counter = 0;
						FOREACH(Ptr<WfModuleUsingFragment>, fragment, item->fragments)
						{
							if (fragment.Cast<WfModuleUsingWildCardFragment>())
							{
								if (index == path->items.Count() - 1)
								{
									counter++;
								}
								else
								{
									goto USING_PATH_INCORRECT;
								}
							}
						}

						if (index == path->items.Count() - 1 && counter != 1)
						{
							goto USING_PATH_INCORRECT;
						}
					}
					continue;
				USING_PATH_INCORRECT:
					manager->errors.Add(WfErrors::WrongUsingPathWildCard(path.Obj()));
				}
				for (vint i = 0; i < module->declarations.Count(); i++)
				{
					ValidateDeclarationStructure(manager, module->declarations[i]);
				}
			}

			void ValidateDeclarationStructure(WfLexicalScopeManager* manager, Ptr<WfDeclaration> declaration, WfClassDeclaration* classDecl, WfExpression* surroundingLambda)
			{
				ValidateStructureDeclarationVisitor::Execute(declaration, manager, classDecl, surroundingLambda);
			}

			void ValidateStatementStructure(WfLexicalScopeManager* manager, ValidateStructureContext* context, Ptr<WfStatement>& statement)
			{
				ValidateStructureStatementVisitor::Execute(statement, manager, context);
			}

			void ValidateExpressionStructure(WfLexicalScopeManager* manager, ValidateStructureContext* context, Ptr<WfExpression>& expression)
			{
				ValidateStructureExpressionVisitor::Execute(expression, manager, context);
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace regex;
			using namespace reflection;
			using namespace reflection::description;
			using namespace stream;
			using namespace emitter;

/***********************************************************************
WfCppConfig
***********************************************************************/

			void WfCppConfig::Collect()
			{
				FOREACH(Ptr<WfModule>, module, manager->GetModules())
				{
					CollectModule(this, module);
				}

				FOREACH(Ptr<WfExpression>, lambda, lambdaExprs.Keys())
				{
					auto closureInfo = CollectClosureInfo(lambda);
					closureInfo->lambdaClassName = lambdaExprs[lambda.Obj()];
					closureInfos.Add(lambda, closureInfo);
				}

				FOREACH(Ptr<WfNewInterfaceExpression>, classExpr, classExprs.Keys())
				{
					auto closureInfo = CollectClosureInfo(classExpr);
					closureInfo->lambdaClassName = classExprs[classExpr.Obj()];
					closureInfos.Add(classExpr, closureInfo);
				}
			}

			void WfCppConfig::Sort(collections::List<Ptr<WfStructDeclaration>>& structDecls)
			{
				List<ITypeDescriptor*> tds;
				FOREACH_INDEXER(Ptr<WfStructDeclaration>, decl, index, structDecls)
				{
					tds.Add(manager->declarationTypes[decl.Obj()].Obj());
				}

				for (vint i = 0; i < tds.Count(); i++)
				{
					for (vint j = i; i < tds.Count(); j++)
					{
						auto td = tds[j];
						vint count = td->GetPropertyCount();
						bool found = false;
						for (vint k = 0; k < count && !found; k++)
						{
							auto prop = td->GetProperty(k);
							auto propTd = prop->GetReturn()->GetTypeDescriptor();
							for (vint l = k + 1; l < tds.Count() && !found; l++)
							{
								found = tds[l] == propTd;
							}
						}

						if (!found)
						{
							if (j != i)
							{
								auto t = tds[j];
								tds.RemoveAt(j);
								tds.Insert(i, t);

								auto decl = structDecls[j];
								structDecls.RemoveAt(j);
								structDecls.Insert(i, decl);
							}

							break;
						}
					}
				}
			}

			WfCppConfig::WfCppConfig(analyzer::WfLexicalScopeManager* _manager, const WString& _assemblyName, const WString& _assemblyNamespace)
				:manager(_manager)
				, regexSplitName(L"::")
				, regexSpecialName(L"/<(<category>/w+)(-(<category>/w+))*/>(<name>/w*)")
				, regexTemplate(L", /$Arguments|/$Arguments, |/$/l+")
				, assemblyName(_assemblyName)
				, assemblyNamespace(_assemblyNamespace)
			{
				attributeEvaluator = MakePtr<WfAttributeEvaluator>(manager);
				Collect();
				for (vint i = 0; i < structDecls.Count(); i++)
				{
					const auto& values = structDecls.GetByIndex(i);
					Sort(const_cast<List<Ptr<WfStructDeclaration>>&>(values));
				}
			}

			WfCppConfig::~WfCppConfig()
			{
			}

			void WfCppConfig::WriteFunctionBody(stream::StreamWriter& writer, Ptr<WfExpression> expr, const WString& prefix, ITypeInfo* expectedType)
			{
				writer.WriteString(prefix);
				writer.WriteString(L"return ");
				GenerateExpression(this, writer, expr, expectedType);
				writer.WriteLine(L";");
			}

			void WfCppConfig::WriteFunctionBody(stream::StreamWriter& writer, Ptr<WfStatement> stat, const WString& prefix, ITypeInfo* expectedType)
			{
				GenerateStatement(this, MakePtr<FunctionRecord>(), writer, stat, prefix, WString(L"\t", false), expectedType);
			}

			WString WfCppConfig::ConvertName(const WString& name)
			{
				if (name.Length() > 0 && name[0] == L'$')
				{
					return L"__vwsno_" + name.Sub(1, name.Length() - 1);
				}

				auto match = regexSpecialName.Match(name);
				if (match)
				{
					return L"__vwsn_" 
						+ From(match->Groups()[L"category"])
							.Select([](const RegexString& rs)
							{
								return rs.Value();
							})
							.Aggregate([](const WString& a, const WString& b)
							{
								return a + L"_" + b;
							})
						+ L"_" + match->Groups()[L"name"][0].Value();
				}
				else
				{
					return name;
				}
			}

			WString WfCppConfig::ConvertFullName(const WString& fullName, WString delimiter)
			{
				List<Ptr<RegexMatch>> matches;
				regexSplitName.Split(fullName, false, matches);
				return (fullName[0] == L':' ? delimiter : WString::Empty) + From(matches)
					.Select([this](Ptr<RegexMatch> match)
					{
						return ConvertName(match->Result().Value());
					})
					.Aggregate([&](const WString& a, const WString& b)
					{
						return a + delimiter + b;
					});
			}

			WString WfCppConfig::ConvertFunctionType(IMethodInfo* methodInfo, WString name)
			{
				WString type = ConvertType(methodInfo->GetReturn()) + name + L"(";
				vint count = methodInfo->GetParameterCount();
				for (vint i = 0; i < count; i++)
				{
					if (i > 0)
					{
						type += L", ";
					}
					type += ConvertArgumentType(methodInfo->GetParameter(i)->GetType());
				}
				type += L")";
				return type;
			}

			WString WfCppConfig::ConvertFunctionType(ITypeInfo* typeInfo)
			{
				if (typeInfo->GetDecorator() == ITypeInfo::SharedPtr)
				{
					return ConvertFunctionType(typeInfo->GetElementType());
				}
				CHECK_ERROR(typeInfo->GetDecorator() == ITypeInfo::Generic, L"WfCppConfig::ConvertFunctionType(ITypeInfo*)#Wrong function type.");
				CHECK_ERROR(typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueFunctionProxy>(), L"WfCppConfig::ConvertFunctionType(ITypeInfo*)#Wrong function type.");

				WString type = ConvertType(typeInfo->GetGenericArgument(0)) + L"(";
				vint count = typeInfo->GetGenericArgumentCount();
				for (vint i = 1; i < count; i++)
				{
					if (i > 1) type += L", ";
					type += ConvertArgumentType(typeInfo->GetGenericArgument(i));
				}
				type += L")";
				return type;
			}

			bool WfCppConfig::IsSpecialGenericType(ITypeInfo* typeInfo)
			{
				switch (typeInfo->GetDecorator())
				{
				case ITypeInfo::SharedPtr:
					if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueFunctionProxy>())
					{
						return true;
					}
					else if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueEnumerable>())
					{
						return true;
					}
					else
					{
						return false;
					}
				default:
					return false;
				}
			}

			WString WfCppConfig::ConvertType(ITypeDescriptor* typeInfo, WString delimiter)
			{
				return ConvertFullName(CppGetFullName(typeInfo), delimiter);
			}

			WString WfCppConfig::ConvertType(ITypeInfo* typeInfo)
			{
				switch (typeInfo->GetDecorator())
				{
				case ITypeInfo::RawPtr:
					return ConvertType(typeInfo->GetElementType()) + L"*";
				case ITypeInfo::SharedPtr:
					if (typeInfo->GetElementType()->GetDecorator() == ITypeInfo::Generic)
					{
						if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueFunctionProxy>())
						{
							return ConvertType(typeInfo->GetElementType());
						}
						else if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueEnumerable>())
						{
							return ConvertType(typeInfo->GetElementType());
						}
					}
					return L"::vl::Ptr<" + ConvertType(typeInfo->GetElementType()) + L">";
				case ITypeInfo::Nullable:
					return L"::vl::Nullable<" + ConvertType(typeInfo->GetElementType()) + L">";
				case ITypeInfo::Generic:
					if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueFunctionProxy>())
					{
						return L"::vl::Func<" + ConvertFunctionType(typeInfo) + L">";
					}
					else if(typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<IValueEnumerable>())
					{
						return L"::vl::collections::LazyList<" + ConvertType(typeInfo->GetGenericArgument(0)) + L">";
					}
					else
					{
						return ConvertType(typeInfo->GetElementType());
					}
				default:;
				}
				return ConvertType(typeInfo->GetTypeDescriptor());
			}

			WString WfCppConfig::ConvertArgumentType(ITypeInfo* typeInfo)
			{
				auto td = typeInfo->GetTypeDescriptor();
				bool constRef =
					td == description::GetTypeDescriptor<WString>() ||
					td == description::GetTypeDescriptor<Value>() ||
					(
						typeInfo->GetDecorator() == ITypeInfo::SharedPtr && typeInfo->GetElementType()->GetDecorator() == ITypeInfo::Generic &&
						(
							td == description::GetTypeDescriptor<IValueFunctionProxy>() ||
							td == description::GetTypeDescriptor<IValueEnumerable>()
							)
					);

				if (constRef)
				{
					return L"const " + ConvertType(typeInfo) + L"&";
				}
				else
				{
					return ConvertType(typeInfo);
				}
			}

			WString WfCppConfig::DefaultValue(ITypeInfo* typeInfo)
			{
				switch (typeInfo->GetDecorator())
				{
				case ITypeInfo::RawPtr:
					return L"nullptr";
				case ITypeInfo::SharedPtr:
					return L"";
				case ITypeInfo::Nullable:
					return L"";
				case ITypeInfo::Generic:
					return L"";
				default:;
				}
				auto td = typeInfo->GetTypeDescriptor();
				if ((td->GetTypeDescriptorFlags()&TypeDescriptorFlags::EnumType) != TypeDescriptorFlags::Undefined)
				{
					return L"static_cast<" + ConvertType(typeInfo) + L">(0)";
				}
				if (td == description::GetTypeDescriptor<vint8_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vint16_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vint32_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vint64_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vuint8_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vuint16_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vuint32_t>()) return L"0";
				if (td == description::GetTypeDescriptor<vuint64_t>()) return L"0";
				if (td == description::GetTypeDescriptor<bool>()) return L"false";
				if (td == description::GetTypeDescriptor<float>()) return L"0.0f";
				if (td == description::GetTypeDescriptor<double>()) return L"0.0";
				return L"";
			}

			vint WfCppConfig::CountClassNamespace(Ptr<WfClassDeclaration> decl)
			{
				vint result = 0;
				auto scope = manager->nodeScopes[decl.Obj()].Obj();
				while (scope)
				{
					if (scope->ownerNode.Cast<WfNamespaceDeclaration>())
					{
						result++;
					}
					scope = scope->parentScope.Obj();
				}
				return result;
			}

			void WfCppConfig::GetClassNamespace(Ptr<WfClassDeclaration> decl, collections::List<WString>& nss)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				auto name = ConvertType(td);
				vint count = CountClassNamespace(decl);

				List<Ptr<RegexMatch>> matches;
				regexSplitName.Split(name, false, matches);

				CopyFrom(
					nss,
					From(matches)
						.Take(count)
						.Select([this](Ptr<RegexMatch> match)
						{
							return ConvertName(match->Result().Value());
						})
					);
			}

			WString WfCppConfig::GetClassBaseName(Ptr<WfClassDeclaration> decl)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				auto name = ConvertType(td);
				vint count = CountClassNamespace(decl);

				List<Ptr<RegexMatch>> matches;
				regexSplitName.Split(name, false, matches);

				return From(matches)
					.Skip(count)
					.Select([this](Ptr<RegexMatch> match)
					{
						return ConvertName(match->Result().Value());
					})
					.Aggregate([](const WString& a, const WString& b)
					{
						return a + L"::" + b;
					});
			}

			WString WfCppConfig::WriteNamespace(stream::StreamWriter& writer, collections::List<WString>& nss, collections::List<WString>& nss2)
			{
				vint commonPrefix = 0;
				for (vint i = 0; i < nss.Count() && i < nss2.Count(); i++)
				{
					if (nss[i] == nss2[i])
					{
						commonPrefix++;
					}
					else
					{
						break;
					}
				}

				while (nss.Count() > commonPrefix)
				{
					for (vint i = 1; i < nss.Count(); i++)
					{
						writer.WriteChar(L'\t');
					}
					writer.WriteLine(L"}");
					nss.RemoveAt(nss.Count() - 1);
				}

				WString prefix;
				for (vint i = 0; i < nss.Count(); i++)
				{
					prefix += L'\t';
				}

				for (vint i = commonPrefix; i < nss2.Count(); i++)
				{
					writer.WriteString(prefix);
					writer.WriteString(L"namespace ");
					writer.WriteLine(nss2[i]);

					writer.WriteString(prefix);
					writer.WriteLine(L"{");

					nss.Add(nss2[i]);
					prefix += L'\t';
				}

				return prefix;
			}

			WString WfCppConfig::WriteNamespace(stream::StreamWriter& writer, const WString& fullName, collections::List<WString>& nss, WString& name)
			{
				List<Ptr<RegexMatch>> matches;
				regexSplitName.Split(fullName, false, matches);

				List<WString> nss2;
				CopyFrom(
					nss2,
					From(matches)
						.Select([this](Ptr<RegexMatch> match)
						{
							return ConvertName(match->Result().Value());
						})
					);

				name = nss2[nss2.Count() - 1];
				nss2.RemoveAt(nss2.Count() - 1);
				return WriteNamespace(writer, nss, nss2);
			}

			void WfCppConfig::WriteNamespaceEnd(stream::StreamWriter& writer, collections::List<WString>& nss)
			{
				while (nss.Count() > 0)
				{
					for (vint i = 1; i < nss.Count(); i++)
					{
						writer.WriteChar(L'\t');
					}
					writer.WriteLine(L"}");
					nss.RemoveAt(0);
				}
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_CLASS.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;
			using namespace analyzer;

			bool IsVirtual(WfCppConfig* config, WfFunctionDeclaration* node)
			{
				vint index = config->manager->declarationMemberInfos.Keys().IndexOf(node);
				if (index != -1)
				{
					auto methodInfo = dynamic_cast<IMethodInfo*>(config->manager->declarationMemberInfos.Values()[index].Obj());
					if (methodInfo->IsStatic())
					{
						return false;
					}
					auto td = methodInfo->GetOwnerTypeDescriptor();
					return td->GetTypeDescriptorFlags() == TypeDescriptorFlags::Interface;
				}
				return false;
			}

/***********************************************************************
WfGenerateClassMemberDeclVisitor
***********************************************************************/

			class WfGenerateClassMemberDeclVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCppConfig*				config;
				stream::StreamWriter&		writer;
				WString						className;
				WString						prefix;
				bool						forClassExpr;

				WfGenerateClassMemberDeclVisitor(WfCppConfig* _config, stream::StreamWriter& _writer, const WString& _className, const WString& _prefix, bool _forClassExpr)
					:config(_config)
					, writer(_writer)
					, className(_className)
					, prefix(_prefix)
					, forClassExpr(_forClassExpr)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					bool isVirtual = IsVirtual(config, node);

					writer.WriteString(prefix);
					if (isVirtual)
					{
						writer.WriteString(L"virtual ");
					}
					else if (node->classMember->kind == WfClassMemberKind::Static)
					{
						writer.WriteString(L"static ");
					}
					config->WriteFunctionHeader(writer, node, config->ConvertName(node->name.value), true);
					if (isVirtual)
					{
						writer.WriteString(L" = 0");
					}
					else if (node->classMember->kind == WfClassMemberKind::Override)
					{
						writer.WriteString(L" override");
					}
					writer.WriteLine(L";");
				}

				void Visit(WfVariableDeclaration* node)override
				{
					auto scope = config->manager->nodeScopes[node].Obj();
					auto symbol = scope->symbols[node->name.value][0];
					auto typeInfo = symbol->typeInfo;
					writer.WriteString(prefix + config->ConvertType(typeInfo.Obj()) + L" " + config->ConvertName(node->name.value));
					if (!forClassExpr && node->expression)
					{
						writer.WriteString(L" = ");
						GenerateExpression(config, writer, node->expression, typeInfo.Obj());
					}
					else
					{
						auto defaultValue = config->DefaultValue(typeInfo.Obj());
						if (defaultValue != L"")
						{
							writer.WriteString(L" = ");
							writer.WriteString(defaultValue);
						}
					}
					writer.WriteLine(L";");
				}

				void Visit(WfEventDeclaration* node)override
				{
					auto eventInfo = dynamic_cast<IEventInfo*>(config->manager->declarationMemberInfos[node].Obj());
					auto typeInfo = eventInfo->GetHandlerType();
					writer.WriteString(prefix);

					writer.WriteString(L"::vl::Event<void(");
					vint count = typeInfo->GetGenericArgumentCount();
					for (vint i = 1; i < count; i++)
					{
						if (i > 1) writer.WriteString(L", ");
						writer.WriteString(config->ConvertType(typeInfo->GetGenericArgument(i)));
					}
					writer.WriteLine(L")> " + config->ConvertName(node->name.value) + L";");
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					auto methodInfo = dynamic_cast<IMethodInfo*>(config->manager->declarationMemberInfos[node].Obj());
					writer.WriteString(prefix);
					config->WriteFunctionHeader(writer, methodInfo, className, false);
					writer.WriteLine(L";");
				}

				void Visit(WfDestructorDeclaration* node)override
				{
					writer.WriteLine(prefix + L"~" + className + L"();");
				}

				void Visit(WfClassDeclaration* node)override
				{
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			void GenerateClassMemberDecl(WfCppConfig* config, stream::StreamWriter& writer, const WString& className, Ptr<WfDeclaration> memberDecl, const WString& prefix, bool forClassExpr)
			{
				WfGenerateClassMemberDeclVisitor visitor(config, writer, className, prefix, forClassExpr);
				memberDecl->Accept(&visitor);
			}

/***********************************************************************
WfGenerateClassMemberImplVisitor
***********************************************************************/

			class WfGenerateClassMemberImplVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCppConfig*				config;
				stream::StreamWriter&		writer;
				WString						classBaseName;
				WString						className;
				WString						classFullName;
				WString						prefix;
				bool						printableMember = false;

				WfGenerateClassMemberImplVisitor(WfCppConfig* _config, stream::StreamWriter& _writer, const WString& _classBaseName, const WString& _className, const WString& _classFullName, const WString& _prefix)
					:config(_config)
					, writer(_writer)
					, classBaseName(_classBaseName)
					, className(_className)
					, classFullName(_classFullName)
					, prefix(_prefix)
				{
				}

				void WriteNotImplemented()
				{
					writer.WriteString(prefix);
					writer.WriteLine(L"{");
					writer.WriteString(prefix);
					writer.WriteLine(L"\tthrow ::vl::Exception(L\"You should implement this function.\");");
					writer.WriteString(prefix);
					writer.WriteLine(L"}");
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (!IsVirtual(config, node))
					{
						printableMember = true;

						bool userImpl = config->attributeEvaluator->GetAttribute(node->attributes, L"cpp", L"UserImpl");
						if (userImpl)
						{
							writer.WriteString(prefix);
							writer.WriteString(L"USERIMPL(/* ");
							writer.WriteString(classFullName);
							writer.WriteLine(L" */)");
						}

						writer.WriteString(prefix);
						auto returnType = config->WriteFunctionHeader(writer, node, classBaseName + L"::" + config->ConvertName(node->name.value), true);
						writer.WriteLine(L"");

						if (userImpl)
						{
							WriteNotImplemented();
						}
						else
						{
							config->WriteFunctionBody(writer, node->statement, prefix, returnType);
						}
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					auto scope = config->manager->nodeScopes[node].Obj();
					printableMember = true;
					auto methodInfo = dynamic_cast<IMethodInfo*>(config->manager->declarationMemberInfos[node].Obj());

					List<WString> arguments;
					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						arguments.Add(config->ConvertName(argument->name.value));
					}

					bool userImpl = config->attributeEvaluator->GetAttribute(node->attributes, L"cpp", L"UserImpl");
					if (userImpl)
					{
						writer.WriteString(prefix);
						writer.WriteString(L"USERIMPL(/* ");
						writer.WriteString(classFullName);
						writer.WriteLine(L" */)");
					}

					writer.WriteString(prefix);
					config->WriteFunctionHeader(writer, methodInfo, arguments, classBaseName + L"::" + className, false);
					writer.WriteLine(L"");
					FOREACH_INDEXER(Ptr<WfBaseConstructorCall>, call, callIndex, node->baseConstructorCalls)
					{
						auto callType = CreateTypeInfoFromType(scope, call->type);
						auto callCtor = config->manager->baseConstructorCallResolvings[{node, callType->GetTypeDescriptor()}].value;

						writer.WriteString(prefix);
						if (callIndex == 0)
						{
							writer.WriteString(L"\t: ");
						}
						else
						{
							writer.WriteString(L"\t, ");
						}

						writer.WriteString(config->ConvertType(callType->GetTypeDescriptor()));
						writer.WriteString(L"(");
						FOREACH_INDEXER(Ptr<WfExpression>, argument, argumentIndex, call->arguments)
						{
							if (argumentIndex) writer.WriteString(L", ");
							GenerateExpression(config, writer, argument, callCtor->GetParameter(argumentIndex)->GetType());
						}
						writer.WriteLine(L")");
					}

					if (userImpl)
					{
						WriteNotImplemented();
					}
					else
					{
						config->WriteFunctionBody(writer, node->statement, prefix, nullptr);
					}
				}

				void Visit(WfDestructorDeclaration* node)override
				{
					printableMember = true;

					bool userImpl = config->attributeEvaluator->GetAttribute(node->attributes, L"cpp", L"UserImpl");
					if (userImpl)
					{
						writer.WriteString(prefix);
						writer.WriteString(L"USERIMPL(/* ");
						writer.WriteString(classFullName);
						writer.WriteLine(L" */)");
					}

					writer.WriteLine(prefix + classBaseName + L"::~" + className + L"()");

					if (userImpl)
					{
						WriteNotImplemented();
					}
					else
					{
						config->WriteFunctionBody(writer, node->statement, prefix, nullptr);
					}
				}

				void Visit(WfClassDeclaration* node)override
				{
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			bool GenerateClassMemberImpl(WfCppConfig* config, stream::StreamWriter& writer, const WString& classBaseName, const WString& className, const WString& classFullName, Ptr<WfDeclaration> memberDecl, const WString& prefix)
			{
				WfGenerateClassMemberImplVisitor visitor(config, writer, classBaseName, className, classFullName, prefix);
				memberDecl->Accept(&visitor);
				return visitor.printableMember;
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_COLLECT.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace regex;
			using namespace reflection::description;
			using namespace analyzer;

/***********************************************************************
CollectModule
***********************************************************************/

			class WfCollectModuleVisitor : public traverse_visitor::ModuleVisitor
			{
			public:
				WfCppConfig*							config;
				WfClassDeclaration*						surroundingClassDecl = nullptr;
				WfFunctionDeclaration*					funcDeclToSkip = nullptr;
				WfVariableDeclaration*					varDeclToSkip = nullptr;

				WfCollectModuleVisitor(WfCppConfig* _config)
					:config(_config)
				{
				}

				WString GetScopePostfix(WfLexicalScope* scope)
				{
					WString name;
					while (scope)
					{
						if (auto decl = scope->ownerNode.Cast<WfDeclaration>())
						{
							name = config->ConvertName(decl->name.value) + L"_" + name;
						}
						scope = scope->parentScope.Obj();
					}
					return name;
				}

				void Traverse(WfOrderedLambdaExpression* node)override
				{
					WString prefix = L"__vwsno" + itow(config->lambdaExprs.Count() + 1) + L"_" + config->assemblyName + L"_";
					WString postfix = GetScopePostfix(config->manager->nodeScopes[node].Obj());
					WString name = prefix + postfix;

					config->lambdaExprs.Add(node, name);
					config->classClosures.Add(surroundingClassDecl, node);
				}

				void Traverse(WfFunctionExpression* node)override
				{
					WString prefix = L"__vwsnf" + itow(config->lambdaExprs.Count() + 1) + L"_" + config->assemblyName + L"_";
					WString postfix = GetScopePostfix(config->manager->nodeScopes[node].Obj());
					WString name = prefix + postfix;

					config->lambdaExprs.Add(node, name);
					config->classClosures.Add(surroundingClassDecl, node);
				}

				void Traverse(WfNewInterfaceExpression* node)override
				{
					WString prefix = L"__vwsnc" + itow(config->classExprs.Count() + 1) + L"_" + config->assemblyName + L"_";
					WString postfix = GetScopePostfix(config->manager->nodeScopes[node].Obj());

					auto result = config->manager->expressionResolvings[node];
					auto td = result.constructorInfo->GetOwnerTypeDescriptor();
					WString name = prefix + postfix + config->ConvertType(td, L"_");

					config->classExprs.Add(node, name);
					config->classClosures.Add(surroundingClassDecl, node);
				}

				void Traverse(WfFunctionDeclaration* node)override
				{
					if (node != funcDeclToSkip && !node->classMember)
					{
						config->funcDecls.Add(node);
					}
				}

				void Traverse(WfVariableDeclaration* node)override
				{
					if (node != varDeclToSkip && !node->classMember)
					{
						config->varDecls.Add(node);
					}
				}

				void AddDeclFile(WfDeclaration* node)
				{
					if (surroundingClassDecl)
					{
						auto fileName = config->declFiles[surroundingClassDecl];
						config->declFiles.Add(node, fileName);
					}
					else
					{
						config->declFiles.Add(node, L"");
					}
				}

				void Visit(WfClassDeclaration* node)override
				{
					config->classDecls.Add(surroundingClassDecl, node);

					if (surroundingClassDecl)
					{
						AddDeclFile(node);
					}
					else
					{
						WString file;
						if (auto att = config->attributeEvaluator->GetAttribute(node->attributes, L"cpp", L"File"))
						{
							file = UnboxValue<WString>(config->attributeEvaluator->GetAttributeValue(att));
						}
						config->topLevelClassDeclsForFiles.Add(file, node);
						config->declFiles.Add(node, file);
					}

					auto td = config->manager->declarationTypes[node].Obj();
					vint count = td->GetBaseTypeDescriptorCount();
					for (vint i = 0; i < count; i++)
					{
						auto baseTd = td->GetBaseTypeDescriptor(i);
						auto scopeName = config->manager->typeNames[baseTd];
						if (scopeName->declarations.Count() > 0)
						{
							config->declDependencies.Add(node, scopeName->declarations[0]);
						}
					}

					auto oldSurroundingClassDecl = surroundingClassDecl;
					surroundingClassDecl = node;
					traverse_visitor::DeclarationVisitor::Visit(node);
					surroundingClassDecl = oldSurroundingClassDecl;
				}

				void Traverse(WfEnumDeclaration* node)override
				{
					config->enumDecls.Add(surroundingClassDecl, node);
					AddDeclFile(node);
				}

				void Traverse(WfStructDeclaration* node)override
				{
					config->structDecls.Add(surroundingClassDecl, node);
					AddDeclFile(node);

					auto td = config->manager->declarationTypes[node].Obj();
					vint count = td->GetPropertyCount();
					for (vint i = 0; i < count; i++)
					{
						auto propTd = td->GetProperty(i)->GetReturn()->GetTypeDescriptor();
						auto scopeName = config->manager->typeNames[propTd];
						if (scopeName->declarations.Count() > 0)
						{
							config->declDependencies.Add(node, scopeName->declarations[0]);
						}
					}
				}

				void Visit(WfFunctionExpression* node)override
				{
					auto old = funcDeclToSkip;
					funcDeclToSkip = node->function.Obj();
					traverse_visitor::ExpressionVisitor::Visit(node);
					funcDeclToSkip = old;
				}

				void Visit(WfVariableStatement* node)override
				{
					auto old = varDeclToSkip;
					varDeclToSkip = node->variable.Obj();
					traverse_visitor::StatementVisitor::Visit(node);
					varDeclToSkip = old;
				}
			};

			void CollectModule(WfCppConfig* config, Ptr<WfModule> module)
			{
				WfCollectModuleVisitor(config).VisitField(module.Obj());
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_EXPRESSION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace regex;
			using namespace reflection;
			using namespace reflection::description;
			using namespace analyzer;

/***********************************************************************
Expression Helpers
***********************************************************************/

			template<typename T>
			void WriteBoxValue(WfCppConfig* config, stream::StreamWriter& writer, ITypeInfo* type, const T& writeExpression)
			{
				writer.WriteString(L"::vl::__vwsn::Box(");
				writeExpression();
				writer.WriteString(L")");
			}

			template<typename T>
			void WriteUnboxValue(WfCppConfig* config, stream::StreamWriter& writer, ITypeInfo* type, const T& writeExpression)
			{
				writer.WriteString(L"::vl::__vwsn::Unbox<");
				writer.WriteString(config->ConvertType(type));
				writer.WriteString(L">(");
				writeExpression();
				writer.WriteString(L")");
			}

			template<typename T>
			void WriteUnboxWeakValue(WfCppConfig* config, stream::StreamWriter& writer, ITypeInfo* type, const T& writeExpression)
			{
				writer.WriteString(L"::vl::__vwsn::UnboxWeak<");
				writer.WriteString(config->ConvertType(type));
				writer.WriteString(L">(");
				writeExpression();
				writer.WriteString(L")");
			}

			template<typename T>
			void ConvertValueType(WfCppConfig* config, stream::StreamWriter& writer, ITypeDescriptor* fromTd, ITypeDescriptor* toTd, const T& writeExpression)
			{
				if (fromTd == toTd)
				{
					writeExpression();
				}
				else if (fromTd == description::GetTypeDescriptor<WString>())
				{
					writer.WriteString(L"::vl::__vwsn::Parse<");
					writer.WriteString(config->ConvertType(toTd));
					writer.WriteString(L">(");
					writeExpression();
					writer.WriteString(L")");
				}
				else if (toTd == description::GetTypeDescriptor<WString>())
				{
					writer.WriteString(L"::vl::__vwsn::ToString(");
					writeExpression();
					writer.WriteString(L")");
				}
				else
				{
					writer.WriteString(L"static_cast<");
					writer.WriteString(config->ConvertType(toTd));
					writer.WriteString(L">(");
					writeExpression();
					writer.WriteString(L")");
				}
			}

			void ConvertType(WfCppConfig* config, stream::StreamWriter& writer, ITypeInfo* fromType, ITypeInfo* toType, const Func<void()>& writeExpression, bool strongCast)
			{
				if (fromType->GetTypeDescriptor()->GetTypeDescriptorFlags() == TypeDescriptorFlags::Object)
				{
					if (strongCast)
					{
						WriteUnboxValue(config, writer, toType, writeExpression);
					}
					else
					{
						WriteUnboxWeakValue(config, writer, toType, writeExpression);
					}
					return;
				}
				else if (toType->GetTypeDescriptor()->GetTypeDescriptorFlags() == TypeDescriptorFlags::Object)
				{
					WriteBoxValue(config, writer, fromType, writeExpression);
					return;
				}
				else
				{
					auto tdVe = description::GetTypeDescriptor<IValueEnumerable>();
					if (toType->GetTypeDescriptor() == tdVe)
					{
						if (toType->GetElementType()->GetDecorator() == ITypeInfo::Generic)
						{
							if ((fromType->GetTypeDescriptor() == tdVe && fromType->GetElementType()->GetDecorator() != ITypeInfo::Generic)
								|| fromType->GetTypeDescriptor()->CanConvertTo(description::GetTypeDescriptor<IValueReadonlyList>())
								|| fromType->GetTypeDescriptor()->CanConvertTo(description::GetTypeDescriptor<IValueReadonlyDictionary>())
								)
							{
								writer.WriteString(L"::vl::reflection::description::GetLazyList<");
								writer.WriteString(config->ConvertType(toType->GetElementType()->GetGenericArgument(0)));
								writer.WriteString(L">(");
								writeExpression();
								writer.WriteString(L")");
								return;
							}
						}
						else
						{
							if ((fromType->GetTypeDescriptor() == tdVe && fromType->GetElementType()->GetDecorator() == ITypeInfo::Generic)
								|| fromType->GetHint() == TypeInfoHint::NativeCollectionReference
								)
							{
								writer.WriteString(L"::vl::__vwsn::UnboxCollection<");
								writer.WriteString(config->ConvertType(tdVe));
								writer.WriteString(L">(");
								writeExpression();
								writer.WriteString(L")");
								return;
							}
						}
					}

					switch (fromType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
						{
							switch (toType->GetDecorator())
							{
							case ITypeInfo::RawPtr:
								if (strongCast) writer.WriteString(L"::vl::__vwsn::Ensure(");
								if (fromType->GetTypeDescriptor()->CanConvertTo(toType->GetTypeDescriptor()))
								{
									writer.WriteString(L"static_cast<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L"*>(");
									writeExpression();
									writer.WriteString(L")");
								}
								else
								{
									writer.WriteString(L"::vl::__vwsn::RawPtrCast<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L">(");
									writeExpression();
									writer.WriteString(L")");
								}
								if (strongCast) writer.WriteString(L")");
								return;
							case ITypeInfo::SharedPtr:
								if (strongCast) writer.WriteString(L"::vl::__vwsn::Ensure(");
								if (fromType->GetTypeDescriptor()->CanConvertTo(toType->GetTypeDescriptor()))
								{
									writer.WriteString(L"::vl::Ptr<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L">(");
									writeExpression();
									writer.WriteString(L")");
								}
								else
								{
									writer.WriteString(L"::vl::__vwsn::SharedPtrCast<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L">(");
									writeExpression();
									writer.WriteString(L")");
								}
								if (strongCast) writer.WriteString(L")");
								return;
							default:;
							}
						}
						break;
					case ITypeInfo::SharedPtr:
						{
							switch (toType->GetDecorator())
							{
							case ITypeInfo::RawPtr:
								if (strongCast) writer.WriteString(L"::vl::__vwsn::Ensure(");
								if (fromType->GetTypeDescriptor()->CanConvertTo(toType->GetTypeDescriptor()))
								{
									writer.WriteString(L"static_cast<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L"*>(");
									writeExpression();
									writer.WriteString(L".Obj())");
								}
								else
								{
									writer.WriteString(L"::vl::__vwsn::RawPtrCast<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L">(");
									writeExpression();
									writer.WriteString(L".Obj())");
								}
								if (strongCast) writer.WriteString(L")");
								return;
							case ITypeInfo::SharedPtr:
								if (strongCast) writer.WriteString(L"::vl::__vwsn::Ensure(");
								if (fromType->GetTypeDescriptor()->CanConvertTo(toType->GetTypeDescriptor()))
								{
									writer.WriteString(L"::vl::Ptr<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L">(");
									writeExpression();
									writer.WriteString(L")");
								}
								else
								{
									writer.WriteString(L"::vl::__vwsn::SharedPtrCast<");
									writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
									writer.WriteString(L">(");
									writeExpression();
									writer.WriteString(L".Obj())");
								}
								if (strongCast) writer.WriteString(L")");
								return;
							default:;
							}
						}
						break;
					case ITypeInfo::Nullable:
						{
							switch (toType->GetDecorator())
							{
							case ITypeInfo::Nullable:
								if (strongCast) writer.WriteString(L"::vl::__vwsn::Ensure(");
								writer.WriteString(L"::vl::__vwsn::NullableCast<");
								writer.WriteString(config->ConvertType(toType->GetTypeDescriptor()));
								writer.WriteString(L">(");
								writeExpression();
								writer.WriteString(L")");
								if (strongCast) writer.WriteString(L")");
								return;
							case ITypeInfo::TypeDescriptor:
								ConvertValueType(config, writer, fromType->GetTypeDescriptor(), toType->GetTypeDescriptor(), [&]()
								{
									writeExpression();
									writer.WriteString(L".Value()");
								});
								return;
							default:;
							}
						}
						break;
					case ITypeInfo::TypeDescriptor:
						{
							switch (toType->GetDecorator())
							{
							case ITypeInfo::Nullable:
								writer.WriteString(config->ConvertType(toType));
								writer.WriteString(L"(");
								ConvertValueType(config, writer, fromType->GetTypeDescriptor(), toType->GetTypeDescriptor(), writeExpression);
								writer.WriteString(L")");
								return;
							case ITypeInfo::TypeDescriptor:
								ConvertValueType(config, writer, fromType->GetTypeDescriptor(), toType->GetTypeDescriptor(), writeExpression);
								return;
							default:;
							}
						}
						break;
					default:;
					}
				}
				writer.WriteString(L"/* NOT EXISTS: convert (");
				writer.WriteString(config->ConvertType(fromType));
				writer.WriteString(L") to (");
				writer.WriteString(config->ConvertType(toType));
				writer.WriteString(L") */ __vwsn_not_exists__(");
				writeExpression();
				writer.WriteString(L")");
			}

/***********************************************************************
WfGenerateExpressionVisitor
***********************************************************************/

			class WfGenerateExpressionVisitor
				: public Object
				, public WfExpression::IVisitor
			{
			public:
				WfCppConfig*				config;
				stream::StreamWriter&		writer;
				bool						useReturnValue;

				WfGenerateExpressionVisitor(WfCppConfig* _config, stream::StreamWriter& _writer, bool _useReturnValue)
					:config(_config)
					, writer(_writer)
					, useReturnValue(_useReturnValue)
				{
				}

				bool NeedConvertType(ITypeInfo* fromType, ITypeInfo*& toType)
				{
					if (toType == nullptr)
					{
						toType = fromType;
						return false;
					}
					if (IsSameType(fromType, toType))
					{
						return false;
					}
					else
					{
						return true;
					}
				}

				template<typename T>
				void WriteBoxValue(ITypeInfo* type, const T& writeExpression)
				{
					cppcodegen::WriteBoxValue(config, writer, type, writeExpression);
				}

				template<typename T>
				void WriteUnboxValue(ITypeInfo* type, const T& writeExpression)
				{
					cppcodegen::WriteUnboxValue(config, writer, type, writeExpression);
				}

				template<typename T>
				void WriteUnboxWeakValue(ITypeInfo* type, const T& writeExpression)
				{
					cppcodegen::WriteUnboxWeakValue(config, writer, type, writeExpression);
				}

				void ConvertMultipleTypes(ITypeInfo** types, vint typesLength, Func<void()> writeExpression)
				{
					if (typesLength == 1)
					{
						writeExpression();
					}
					else if (NeedConvertType(types[0], types[1]))
					{
						ConvertMultipleTypes(types + 1, typesLength - 1, [&]()
						{
							auto fromType = types[0];
							auto toType = types[1];
							ConvertType(config, writer, fromType, toType, writeExpression, false);
						});
					}
					else
					{
						return ConvertMultipleTypes(types + 1, typesLength - 1, writeExpression);
					}
				}

				void Call(Ptr<WfExpression> node, ITypeInfo* expectedType = nullptr, bool useReturnValue = true)
				{
					GenerateExpression(config, writer, node, expectedType, useReturnValue);
				}

				Ptr<WfCppConfig::ClosureInfo> GetClosureInfo(WfExpression* node, Ptr<WfLexicalSymbol> testCtorArgumentSymbol = nullptr)
				{
					Ptr<WfCppConfig::ClosureInfo> closureInfo;
					auto scope = config->manager->nodeScopes[node].Obj();

					if (dynamic_cast<WfOrderedLambdaExpression*>(node))
					{
						scope = scope->parentScope.Obj();
					}

					while (scope)
					{
						if (scope->functionConfig && scope->functionConfig->lambda)
						{
							auto source = scope->ownerNodeSource ? scope->ownerNodeSource : scope->ownerNode.Obj();
							if (auto ordered = dynamic_cast<WfOrderedLambdaExpression*>(source))
							{
								closureInfo = config->closureInfos[ordered];
								break;
							}
							else if (auto funcExpr = dynamic_cast<WfFunctionExpression*>(source))
							{
								closureInfo = config->closureInfos[funcExpr];
								break;
							}
							else if (auto classExpr = dynamic_cast<WfNewInterfaceExpression*>(source))
							{
								closureInfo = config->closureInfos[classExpr];
								break;
							}
						}
						else if (auto classExpr = scope->ownerNode.Cast<WfNewInterfaceExpression>())
						{
							auto info = config->closureInfos[classExpr.Obj()];
							if (info->ctorArgumentSymbols.Values().Contains(testCtorArgumentSymbol.Obj()))
							{
								closureInfo = info;
								break;
							}
						}
						scope = scope->parentScope.Obj();
					}

					return closureInfo;
				}

				void WriteNotExists(ITypeDescriptor* typeDescriptor)
				{
					writer.WriteString(L"/* NOT EXISTS: type(");
					writer.WriteString(typeDescriptor->GetTypeName());
					writer.WriteString(L") */ __vwsn_not_exists__");
				}

				void WriteNotExists(IMethodInfo* methodInfo)
				{
					writer.WriteString(L"/* NOT EXISTS: method(");
					writer.WriteString(methodInfo->GetName());
					writer.WriteString(L") of type (");
					writer.WriteString(methodInfo->GetOwnerTypeDescriptor()->GetTypeName());
					writer.WriteString(L") */ __vwsn_not_exists__");
				}

				void WriteNotExists(IPropertyInfo* propertyInfo)
				{
					writer.WriteString(L"/* NOT EXISTS: property(");
					writer.WriteString(propertyInfo->GetName());
					writer.WriteString(L") of type (");
					writer.WriteString(propertyInfo->GetOwnerTypeDescriptor()->GetTypeName());
					writer.WriteString(L") */ __vwsn_not_exists__");
				}

				void WriteNotExists(IEventInfo* eventInfo)
				{
					writer.WriteString(L"/* NOT EXISTS: event(");
					writer.WriteString(eventInfo->GetName());
					writer.WriteString(L") of type (");
					writer.WriteString(eventInfo->GetOwnerTypeDescriptor()->GetTypeName());
					writer.WriteString(L") */ __vwsn_not_exists__");
				}

				template<typename T>
				void WriteTemplate(const WString& templateValue, const T& callback)
				{
					List<Ptr<RegexMatch>> matches;
					config->regexTemplate.Cut(templateValue, false, matches);
					FOREACH(Ptr<RegexMatch>, match, matches)
					{
						WString item = match->Result().Value();
						if (match->Success())
						{
							if (!callback(item))
							{
								writer.WriteString(L"/* NOT EXISTS: ");
								writer.WriteString(item);
								writer.WriteString(L" */ __vwsn_not_exists__");
							}
						}
						else
						{
							writer.WriteString(item);
						}
					}
				}

				void VisitThisExpression(WfExpression* node, ITypeDescriptor* td)
				{
					if (auto closureInfo = GetClosureInfo(node))
					{
						FOREACH_INDEXER(ITypeDescriptor*, thisType, index, closureInfo->thisTypes)
						{
							if (thisType->CanConvertTo(td))
							{
								writer.WriteString(L"__vwsnthis_");
								writer.WriteString(itow(index));
								return;
							}
						}
					}
					writer.WriteString(L"this");
				}

				void VisitSymbol(WfExpression* node, Ptr<WfLexicalSymbol> symbol, bool forLambdaArgument)
				{
					if (auto varDecl = symbol->creatorNode.Cast<WfVariableDeclaration>())
					{
						auto ownerNode = symbol->ownerScope->ownerNode;
						if (ownerNode.Cast<WfNamespaceDeclaration>() || ownerNode.Cast<WfModule>())
						{
							writer.WriteString(L"GLOBAL_NAME ");
							writer.WriteString(config->ConvertName(symbol->name));
							return;
						}
						else if(auto closureInfo = GetClosureInfo(node, (forLambdaArgument ? nullptr : symbol)))
						{
							if (closureInfo->symbols.Values().Contains(symbol.Obj()))
							{
								writer.WriteString(L"::vl::__vwsn::This(this)->");
								writer.WriteString(config->ConvertName(symbol->name));
								return;
							}
							else if (closureInfo->ctorArgumentSymbols.Values().Contains(symbol.Obj()))
							{
								writer.WriteString(L"__vwsnctor_");
								writer.WriteString(config->ConvertName(symbol->name));
								return;
							}
						}
						writer.WriteString(config->ConvertName(symbol->name));
						return;
					}
					else if (auto funcDecl = symbol->creatorNode.Cast<WfFunctionDeclaration>())
					{
						auto ownerNode = symbol->ownerScope->ownerNode;
						if (ownerNode.Cast<WfNamespaceDeclaration>() || ownerNode.Cast<WfModule>())
						{
							writer.WriteString(config->ConvertType(symbol->typeInfo.Obj()));
							writer.WriteString(L"(GLOBAL_OBJ, &GLOBAL_SYMBOL ");
							writer.WriteString(config->ConvertName(symbol->name));
							writer.WriteString(L")");
							return;
						}
						else if (auto classExpr = ownerNode.Cast<WfNewInterfaceExpression>())
						{
							writer.WriteString(config->ConvertType(symbol->typeInfo.Obj()));
							writer.WriteString(L"(::vl::__vwsn::This(this), &");
							writer.WriteString(config->classExprs[classExpr.Obj()]);
							writer.WriteString(L"::");
							writer.WriteString(config->ConvertName(symbol->name));
							writer.WriteString(L")");
							return;
						}
						else if (symbol->ownerScope->functionConfig && symbol->ownerScope->functionConfig->lambda && symbol->name == funcDecl->name.value)
						{
							auto scope = config->manager->nodeScopes[funcDecl.Obj()];
							auto closureInfo = config->closureInfos[dynamic_cast<WfFunctionExpression*>(scope->ownerNodeSource)];

							writer.WriteString(L"LAMBDA(::");
							writer.WriteString(config->assemblyNamespace);
							writer.WriteString(L"::");
							writer.WriteString(closureInfo->lambdaClassName);
							writer.WriteString(L"(");

							FOREACH_INDEXER(WString, symbolName, index, closureInfo->symbols.Keys())
							{
								if (index > 0)
								{
									writer.WriteString(L", ");
								}
								writer.WriteString(config->ConvertName(symbol->name));
							}

							FOREACH_INDEXER(ITypeDescriptor*, thisType, index, closureInfo->thisTypes)
							{
								if (index > 0 || closureInfo->symbols.Count() > 0)
								{
									writer.WriteString(L", ");
								}
								writer.WriteString(L" __vwsnctorthis_" + itow(index));
							}

							writer.WriteString(L"))");
							return;
						}
					}
					writer.WriteString(config->ConvertName(symbol->name));
				}

				enum class CommaPosition
				{
					Left,
					Right,
					No,
				};

				bool IsCppRefGenericType(ITypeInfo* type)
				{
					switch (type->GetHint())
					{
					case TypeInfoHint::Array:
					case TypeInfoHint::List:
					case TypeInfoHint::SortedList:
					case TypeInfoHint::Dictionary:
						return true;
					default:
						return false;
					}
				}

				template<typename TReturnValue>
				void WriteReturnValue(ITypeInfo* type, const TReturnValue& returnValueCallback, bool castReturnValue)
				{
					if (castReturnValue)
					{
						if (IsCppRefGenericType(type) || type->GetHint() == TypeInfoHint::NativeCollectionReference)
						{
							writer.WriteString(L"::vl::__vwsn::UnboxCollection<");
							writer.WriteString(config->ConvertType(type->GetTypeDescriptor()));
							writer.WriteString(L">(");
							returnValueCallback();
							writer.WriteString(L")");
							return;
						}
					}
					returnValueCallback();
				}

				template<typename TType, typename TInvoke, typename TArgument, typename TInfo>
				void WriteInvokeTemplate(vint count, ITypeInfo* returnType, const TType& typeCallback, const TInvoke& invokeCallback, const TArgument& argumentCallback, TInfo* info, bool castReturnValue)
				{
					if (Range<vint>(0, count).Any([&](vint index) {return IsCppRefGenericType(typeCallback(index)); }))
					{
						writer.WriteString(L"[&]()->decltype(auto){");
						for (vint i = 0; i < count; i++)
						{
							auto type = typeCallback(i);
							if (IsCppRefGenericType(type))
							{
								writer.WriteString(L" auto __vwsn_temp_x");
								writer.WriteString(itow(i));
								writer.WriteString(L" = ::vl::__vwsn::Box(");
								argumentCallback(info, i);
								writer.WriteString(L"); ");

								switch (type->GetHint())
								{
								case TypeInfoHint::Array:
									writer.WriteString(L"::vl::collections::Array<");
									break;
								case TypeInfoHint::List:
									writer.WriteString(L"::vl::collections::List<");
									break;
								case TypeInfoHint::SortedList:
									writer.WriteString(L"::vl::collections::SortedList<");
									break;
								case TypeInfoHint::Dictionary:
									writer.WriteString(L"::vl::collections::Dictionary<");
									break;
								default:;
								}

								vint count = type->GetElementType()->GetGenericArgumentCount();
								for (vint i = 0; i < count; i++)
								{
									if (i > 0) writer.WriteString(L", ");
									writer.WriteString(config->ConvertType(type->GetElementType()->GetGenericArgument(i)));
								}
								writer.WriteString(L"> __vwsn_temp_");
								writer.WriteString(itow(i));
								writer.WriteString(L"; ::vl::reflection::description::UnboxParameter(__vwsn_temp_x");
								writer.WriteString(itow(i));
								writer.WriteString(L", __vwsn_temp_");
								writer.WriteString(itow(i));
								writer.WriteString(L");");
							}
							else
							{
								writer.WriteString(L" auto __vwsn_temp_");
								writer.WriteString(itow(i));
								writer.WriteString(L" = ");
								argumentCallback(info, i);
								writer.WriteString(L";");
							}
						}
						writer.WriteString(L" return ");
						WriteReturnValue(returnType, [&]() { invokeCallback(true); }, castReturnValue);
						writer.WriteString(L"; }()");
					}
					else
					{
						WriteReturnValue(returnType, [&]() { invokeCallback(false); }, castReturnValue);
					}
				}

				template<typename TThis, typename TArgument>
				void WriteMethodTemplate(const WString& templateValue, IMethodInfo* methodInfo, const TThis& thisCallback, const TArgument& argumentCallback, bool castReturnValue)
				{
					WriteInvokeTemplate(methodInfo->GetParameterCount(), methodInfo->GetReturn(), [&](vint index) { return methodInfo->GetParameter(index)->GetType(); },
						[&](bool useTemporaryArgument)
						{
							WriteTemplate(templateValue, [&](const WString& item)
							{
								auto cp = CommaPosition::No;
								vint count = methodInfo->GetParameterCount();

								if (item == L"$Type")
								{
									writer.WriteString(config->ConvertType(methodInfo->GetOwnerTypeDescriptor()));
									return true;
								}
								else if (item == L"$Func")
								{
									writer.WriteString(config->ConvertFunctionType(methodInfo));
									return true;
								}
								else if (item == L"$Name")
								{
									writer.WriteString(config->ConvertName(methodInfo->GetName()));
									return true;
								}
								else if (item == L"$This")
								{
									if (!methodInfo->IsStatic())
									{
										return thisCallback(methodInfo);
									}
								}
								else if (item == L"$Arguments")
								{
									if (count == 0)
									{
										return true;
									}
								}
								else if (item == L", $Arguments")
								{
									if (count == 0)
									{
										return true;
									}
									cp = CommaPosition::Left;
								}
								else if (item == L"$Arguments, ")
								{
									if (count == 0)
									{
										return true;
									}
									cp = CommaPosition::Right;
								}
								else
								{
									return false;
								}

								if (count > 0)
								{
									if (cp == CommaPosition::Left) writer.WriteString(L", ");
									for (vint i = 0; i < count; i++)
									{
										if (i > 0) writer.WriteString(L", ");
										if (useTemporaryArgument)
										{
											writer.WriteString(L"__vwsn_temp_");
											writer.WriteString(itow(i));
										}
										else
										{
											argumentCallback(methodInfo, i);
										}
									}
									if (cp == CommaPosition::Right) writer.WriteString(L", ");
								}
								return true;
							});
						}, argumentCallback, methodInfo, castReturnValue);
				}

				template<typename TThis>
				void WritePropertyTemplate(const WString& templateValue, IPropertyInfo* propertyInfo, const TThis& thisCallback, bool castReturnValue)
				{
					WriteReturnValue(propertyInfo->GetReturn(),
						[&]()
						{
							WriteTemplate(templateValue, [&](const WString& item)
							{
								if (item == L"$Type")
								{
									writer.WriteString(config->ConvertType(propertyInfo->GetOwnerTypeDescriptor()));
									return true;
								}
								else if (item == L"$Name")
								{
									writer.WriteString(config->ConvertName(propertyInfo->GetName()));
									return true;
								}
								else if (item == L"$This")
								{
									return thisCallback(propertyInfo);
								}
								return false;
							});
						}, castReturnValue);
				}

				template<typename TThis, typename THandler, typename TArgument>
				void WriteEventTemplate(const WString& templateValue, IEventInfo* eventInfo, const TThis& thisCallback, const THandler& handlerCallback, const TArgument& argumentCallback)
				{
					auto handlerType = eventInfo->GetHandlerType()->GetElementType();
					WriteInvokeTemplate(handlerType->GetGenericArgumentCount() - 1, handlerType->GetGenericArgument(0), [&](vint index) { return handlerType->GetGenericArgument(index + 1); },
						[&](bool useTemporaryArgument)
						{
							WriteTemplate(templateValue, [&](const WString& item)
							{
								auto cp = CommaPosition::No;
								vint count = eventInfo->GetHandlerType()->GetElementType()->GetGenericArgumentCount() - 1;

								if (item == L"$Name")
								{
									writer.WriteString(config->ConvertName(eventInfo->GetName()));
									return true;
								}
								else if (item == L"$This")
								{
									return thisCallback(eventInfo);
								}
								else if (item == L"$Handler")
								{
									return handlerCallback(eventInfo);
								}
								else if (item == L"$Arguments")
								{
									if (count == 0)
									{
										return true;
									}
								}
								else if (item == L", $Arguments")
								{
									if (count == 0)
									{
										return true;
									}
									cp = CommaPosition::Left;
								}
								else if (item == L"$Arguments, ")
								{
									if (count == 0)
									{
										return true;
									}
									cp = CommaPosition::Right;
								}
								else
								{
									return false;
								}

								if (count > 0)
								{
									if (cp == CommaPosition::Left) writer.WriteString(L", ");
									for (vint i = 0; i < count; i++)
									{
										if (i > 0) writer.WriteString(L", ");
										if (useTemporaryArgument)
										{
											writer.WriteString(L"__vwsn_temp_");
											writer.WriteString(itow(i));
										}
										else
										{
											argumentCallback(eventInfo, i);
										}
									}
									if (cp == CommaPosition::Right) writer.WriteString(L", ");
								}
								return true;
							});
						}, argumentCallback, eventInfo, false);
				}

				template<typename TMethodThis, typename TPropertyThis>
				bool WriteReferenceTemplate(ResolveExpressionResult& result, const TMethodThis& methodThis, const TPropertyThis& propertyThis, bool castReturnValue)
				{
					if (result.methodInfo)
					{
						if (CppExists(result.methodInfo))
						{
							auto methodInfo = result.methodInfo;
							WriteMethodTemplate(CppGetClosureTemplate(methodInfo), methodInfo, methodThis, [&](IMethodInfo*, vint){}, castReturnValue);
						}
						else
						{
							WriteNotExists(result.methodInfo);
						}
						return true;
					}
					else if (result.propertyInfo)
					{
						if (CppExists(result.propertyInfo))
						{
							if (result.propertyInfo->GetCpp() == nullptr && result.propertyInfo->GetGetter() != nullptr)
							{
								auto methodInfo = result.propertyInfo->GetGetter();
								WriteMethodTemplate(CppGetInvokeTemplate(methodInfo), methodInfo, methodThis, [&](IMethodInfo*, vint){}, castReturnValue);
							}
							else
							{
								auto templateValue = CppGetReferenceTemplate(result.propertyInfo);
								auto propertyInfo = result.propertyInfo;
								WritePropertyTemplate(CppGetReferenceTemplate(propertyInfo), propertyInfo, propertyThis, castReturnValue);
							}
						}
						else
						{
							WriteNotExists(result.propertyInfo);
						}
						return true;
					}
					else
					{
						return false;
					}
				}

				void VisitReferenceExpression(WfExpression* node, const WString& name)
				{
					auto result = config->manager->expressionResolvings[node];
					bool success = WriteReferenceTemplate(result,
						[&](IMethodInfo* methodInfo)
						{
							writer.WriteString(L"::vl::__vwsn::This(");
							VisitThisExpression(node, methodInfo->GetOwnerTypeDescriptor());
							if (result.type->GetDecorator() == ITypeInfo::SharedPtr)
							{
								writer.WriteString(L".Obj()");
							}
							writer.WriteString(L")");
							return true;
						},
						[&](IPropertyInfo* propertyInfo)
						{
							auto isRef = (propertyInfo->GetOwnerTypeDescriptor()->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) != TypeDescriptorFlags::Undefined;
							if (isRef) writer.WriteString(L"::vl::__vwsn::This(");
							VisitThisExpression(node, propertyInfo->GetOwnerTypeDescriptor());
							if (isRef) writer.WriteString(L")");
							return true;
						}, useReturnValue);

					if (!success)
					{
						if (result.symbol)
						{
							VisitSymbol(node, result.symbol, false);
						}
						else
						{
							if ((result.type->GetTypeDescriptor()->GetTypeDescriptorFlags() & TypeDescriptorFlags::EnumType) != TypeDescriptorFlags::Undefined)
							{
								auto enumType = result.type->GetTypeDescriptor()->GetEnumType();
								vint index = enumType->IndexOfItem(name);
								if (index != -1)
								{
									writer.WriteString(config->ConvertType(result.type.Obj()));
									writer.WriteString(L"::");
									writer.WriteString(name);
									return;
								}
							}
							CHECK_FAIL(L"WfGenerateExpressionVisitor::VisitReferenceExpression(WfExpression*, const WString&)#Internal error, cannot find any record of this expression.");
						}
					}
				}
				
				void WriteClosureArguments(Ptr<WfCppConfig::ClosureInfo> closureInfo, WfExpression* node)
				{
					vint index = 0;

					FOREACH(Ptr<WfLexicalSymbol>, symbol, From(closureInfo->symbols.Values()).Union(closureInfo->ctorArgumentSymbols.Values()))
					{
						if (index++ > 0)
						{
							writer.WriteString(L", ");
						}
						VisitSymbol(node, symbol, true);
					}

					FOREACH(ITypeDescriptor*, thisType, closureInfo->thisTypes)
					{
						if (index++ > 0)
						{
							writer.WriteString(L", ");
						}
						VisitThisExpression(node, thisType);
					}
				}

				void Visit(WfThisExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					VisitThisExpression(node, result.type->GetTypeDescriptor());
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfReferenceExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfOrderedNameExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					writer.WriteString(L"LAMBDA(::");
					writer.WriteString(config->assemblyNamespace);
					writer.WriteString(L"::");
					writer.WriteString(config->lambdaExprs[node]);
					writer.WriteString(L"(");

					auto closureInfo = config->closureInfos[node];
					WriteClosureArguments(closureInfo, node);

					writer.WriteString(L"))");
				}

				void Visit(WfMemberExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto parentResult = config->manager->expressionResolvings[node->parent.Obj()];
					WriteReferenceTemplate(result,
						[&](IMethodInfo* methodInfo)
						{
							writer.WriteString(L"::vl::__vwsn::This(");
							Call(node->parent);
							if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
							{
								writer.WriteString(L".Obj()");
							}
							writer.WriteString(L")");
							return true;
						},
						[&](IPropertyInfo* propertyInfo)
						{
							auto isRef = (propertyInfo->GetOwnerTypeDescriptor()->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) != TypeDescriptorFlags::Undefined;
							if (isRef) writer.WriteString(L"::vl::__vwsn::This(");
							Call(node->parent);
							if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
							{
								writer.WriteString(L".Obj()");
							}
							if (isRef) writer.WriteString(L")");
							return true;
						}, useReturnValue);
				}

				void Visit(WfChildExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfLiteralExpression* node)override
				{
					switch (node->value)
					{
					case WfLiteralValue::Null:
						{
							auto result = config->manager->expressionResolvings[node];
							switch (result.type->GetDecorator())
							{
							case ITypeInfo::Nullable:
							case ITypeInfo::SharedPtr:
								writer.WriteString(config->ConvertType(result.type.Obj()));
								writer.WriteString(L"()");
								break;
							case ITypeInfo::TypeDescriptor:
								writer.WriteString(L"::vl::reflection::description::Value()");
								break;
							default:
								writer.WriteString(L"static_cast<");
								writer.WriteString(config->ConvertType(result.type.Obj()));
								writer.WriteString(L">(nullptr)");
							}
						}
						break;
					case WfLiteralValue::True:
						writer.WriteString(L"true");
						break;
					case WfLiteralValue::False:
						writer.WriteString(L"false");
						break;
					}
				}

				void Visit(WfFloatingExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto td = result.type->GetTypeDescriptor();
					if (td == description::GetTypeDescriptor<float>())
					{
						writer.WriteString(node->value.value + L"f");
					}
					else if (td == description::GetTypeDescriptor<double>())
					{
						writer.WriteString(node->value.value);
					}
				}

				void Visit(WfIntegerExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto td = result.type->GetTypeDescriptor();
					if (td == description::GetTypeDescriptor<vint32_t>())
					{
						writer.WriteString(node->value.value);
					}
					else if (td == description::GetTypeDescriptor<vuint32_t>())
					{
						writer.WriteString(node->value.value + L"U");
					}
					else if (td == description::GetTypeDescriptor<vint64_t>())
					{
						writer.WriteString(node->value.value + L"L");
					}
					else if (td == description::GetTypeDescriptor<vuint64_t>())
					{
						writer.WriteString(node->value.value + L"UL");
					}
				}

				void Visit(WfStringExpression* node)override
				{
					writer.WriteString(L"::vl::WString(L\"");
					for (vint i = 0; i < node->value.value.Length(); i++)
					{
						auto c = node->value.value[i];
						switch (c)
						{
						case L'\'': writer.WriteString(L"\\\'"); break;
						case L'\"': writer.WriteString(L"\\\""); break;
						case L'\r': writer.WriteString(L"\\r"); break;
						case L'\n': writer.WriteString(L"\\n"); break;
						case L'\t': writer.WriteString(L"\\t"); break;
						default: writer.WriteChar(c);
						}
					}
					writer.WriteString(L"\", false)");
				}

				void Visit(WfUnaryExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					switch (node->op)
					{
					case WfUnaryOperator::Positive:
						writer.WriteString(L"(+ ");
						Call(node->operand, result.type.Obj());
						writer.WriteString(L")");
						break;
					case WfUnaryOperator::Negative:
						writer.WriteString(L"(- ");
						Call(node->operand, result.type.Obj());
						writer.WriteString(L")");
						break;
					case WfUnaryOperator::Not:
						{
							if (result.type->GetTypeDescriptor() == description::GetTypeDescriptor<bool>())
							{
								writer.WriteString(L"(! ");
							}
							else
							{
								if (BinaryNeedConvert(result.type->GetTypeDescriptor()))
								{
									writer.WriteString(L"static_cast<");
									writer.WriteString(config->ConvertType(result.type->GetTypeDescriptor()));
									writer.WriteString(L">");
								}
								writer.WriteString(L"(~ ");
							}
							Call(node->operand, result.type.Obj());
							writer.WriteString(L")");
						}
						break;
					}
				}

				void VisitBinaryExpression(WfBinaryExpression* node, const wchar_t* op, ITypeDescriptor* resultType, ITypeInfo* operandType)
				{
					if (resultType)
					{
						writer.WriteString(L"static_cast<");
						writer.WriteString(config->ConvertType(resultType));
						writer.WriteString(L">");
					}
					writer.WriteString(L"(");
					Call(node->first, operandType);
					writer.WriteString(L" ");
					writer.WriteString(op);
					writer.WriteString(L" ");
					Call(node->second, operandType);
					writer.WriteString(L")");
				}

				bool BinaryNeedConvert(ITypeDescriptor* type)
				{
					return type == description::GetTypeDescriptor<vint8_t>()
						|| type == description::GetTypeDescriptor<vint16_t>()
						|| type == description::GetTypeDescriptor<vuint8_t>()
						|| type == description::GetTypeDescriptor<vuint16_t>()
						;
				}

				void Visit(WfBinaryExpression* node)override
				{
					if (node->op == WfBinaryOperator::Assign)
					{
						auto result = config->manager->expressionResolvings[node->first.Obj()];
						if (result.propertyInfo)
						{
							auto propInfo = result.propertyInfo;
							auto member = node->first.Cast<WfMemberExpression>();

							if (CppExists(propInfo))
							{
								if (propInfo->GetCpp() == nullptr && propInfo->GetSetter() != nullptr)
								{
									WriteMethodTemplate(CppGetInvokeTemplate(propInfo->GetSetter()), propInfo->GetSetter(),
										[&](IMethodInfo*)
										{
											writer.WriteString(L"::vl::__vwsn::This(");
											if (member)
											{
												Call(member->parent);
												auto parentResult = config->manager->expressionResolvings[member->parent.Obj()];
												if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
												{
													writer.WriteString(L".Obj()");
												}
											}
											else
											{
												VisitThisExpression(node->first.Obj(), propInfo->GetOwnerTypeDescriptor());
											}
											writer.WriteString(L")");
											return true;
										},
										[&](IMethodInfo*, vint index)
										{
											Call(node->second);
										}, useReturnValue);
								}
								else
								{
									writer.WriteString(L"(");
									WritePropertyTemplate(CppGetReferenceTemplate(propInfo), propInfo,
										[&](IPropertyInfo*)
										{
											writer.WriteString(L"::vl::__vwsn::This(");
											if (member)
											{
												Call(member->parent);
												auto parentResult = config->manager->expressionResolvings[member->parent.Obj()];
												if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
												{
													writer.WriteString(L".Obj()");
												}
											}
											else
											{
												VisitThisExpression(node->first.Obj(), propInfo->GetOwnerTypeDescriptor());
											}
											writer.WriteString(L")");
											return true;
										}, true);
									writer.WriteString(L" = ");
									Call(node->second, propInfo->GetReturn());
									writer.WriteString(L")");
								}
							}
							else
							{
								WriteNotExists(propInfo);
							}
						}
						else if (auto binary = node->first.Cast<WfBinaryExpression>())
						{
							auto containerType = config->manager->expressionResolvings[binary->first.Obj()].type.Obj();
							if (IsCppRefGenericType(containerType))
							{
								Call(binary->first, nullptr, false);
								writer.WriteString(L".Set(");
								Call(binary->second);
								writer.WriteString(L", ");
								Call(node->second);
								writer.WriteString(L")");
							}
							else
							{
								auto keyType = config->manager->expressionResolvings[binary->second.Obj()].type.Obj();
								auto valueType = config->manager->expressionResolvings[node->second.Obj()].type.Obj();
								writer.WriteString(L"::vl::__vwsn::This(");
								Call(binary->first);
								writer.WriteString(L".Obj())->Set(");
								if (containerType->GetTypeDescriptor() == description::GetTypeDescriptor<IValueDictionary>())
								{
									WriteBoxValue(keyType, [&]() {Call(binary->second); });
								}
								else
								{
									Call(binary->second);
								}
								writer.WriteString(L", ");
								WriteBoxValue(valueType, [&]() {Call(node->second); });
								writer.WriteString(L")");
							}
						}
						else
						{
							VisitBinaryExpression(node, L"=", nullptr, nullptr);
						}
					}
					else if (node->op == WfBinaryOperator::Index)
					{
						auto containerType = config->manager->expressionResolvings[node->first.Obj()].type.Obj();
						if (IsCppRefGenericType(containerType))
						{
							Call(node->first, nullptr, false);
							writer.WriteString(L"[");
							Call(node->second);
							writer.WriteString(L"]");
						}
						else
						{
							auto keyType = config->manager->expressionResolvings[node->second.Obj()].type.Obj();
							auto valueType = config->manager->expressionResolvings[node].type.Obj();
							WriteUnboxValue(valueType, [&]()
							{
								writer.WriteString(L"::vl::__vwsn::This(");
								Call(node->first);
								writer.WriteString(L".Obj())->Get(");
								if (containerType->GetTypeDescriptor()->CanConvertTo(description::GetTypeDescriptor<IValueReadonlyDictionary>()))
								{
									WriteBoxValue(keyType, [&]() {Call(node->second); });
								}
								else
								{
									Call(node->second);
								}
								writer.WriteString(L")");
							});
						}
					}
					else if (node->op == WfBinaryOperator::Union)
					{
						auto type = config->manager->expressionResolvings[node].type;
						if (type->GetTypeDescriptor() == description::GetTypeDescriptor<WString>())
						{
							VisitBinaryExpression(node, L"+", nullptr, type.Obj());
						}
						else
						{
							VisitBinaryExpression(node, L"&", nullptr, nullptr);
						}
					}
					else if (node->op == WfBinaryOperator::Intersect)
					{
						VisitBinaryExpression(node, L"|", nullptr, nullptr);
					}
					else if (node->op == WfBinaryOperator::FailedThen)
					{
						auto firstResult = config->manager->expressionResolvings[node->first.Obj()];
						auto secondResult = config->manager->expressionResolvings[node->second.Obj()];
						auto mergedType = GetMergedType(firstResult.type, secondResult.type);

						writer.WriteString(L"[&](){ try{ return ");
						Call(node->first, mergedType.Obj());
						writer.WriteString(L"; } catch(...){ return ");
						Call(node->second, mergedType.Obj());
						writer.WriteString(L"; } }()");
					}
					else
					{
						auto result = config->manager->expressionResolvings[node];
						auto firstResult = config->manager->expressionResolvings[node->first.Obj()];
						auto secondResult = config->manager->expressionResolvings[node->second.Obj()];
						auto mergedType = GetMergedType(firstResult.type, secondResult.type);

						switch (node->op)
						{
						case WfBinaryOperator::Exp:
							writer.WriteString(L"static_cast<");
							writer.WriteString(config->ConvertType(result.type->GetTypeDescriptor()));
							writer.WriteString(L">(pow(static_cast<double>(");
							Call(node->first);
							writer.WriteString(L"), static_cast<double>(");
							Call(node->second);
							writer.WriteString(L")))");
							return;
						case WfBinaryOperator::Add:
						case WfBinaryOperator::Sub:
						case WfBinaryOperator::Mul:
						case WfBinaryOperator::Div:
						case WfBinaryOperator::Mod:
						case WfBinaryOperator::Shl:
						case WfBinaryOperator::Shr:
							{
								const wchar_t* op = nullptr;
								switch (node->op)
								{
								case WfBinaryOperator::Add: op = L"+"; break;
								case WfBinaryOperator::Sub: op = L"-"; break;
								case WfBinaryOperator::Mul: op = L"*"; break;
								case WfBinaryOperator::Div: op = L"/"; break;
								case WfBinaryOperator::Mod: op = L"%"; break;
								case WfBinaryOperator::Shl: op = L"<<"; break;
								case WfBinaryOperator::Shr: op = L">>"; break;
								default:;
								}
								VisitBinaryExpression(node, op, (BinaryNeedConvert(result.type->GetTypeDescriptor()) ? result.type->GetTypeDescriptor() : nullptr), result.type.Obj());
							}
							return;
						case WfBinaryOperator::EQ:
						case WfBinaryOperator::NE:
							{
								if (firstResult.type->GetDecorator() == ITypeInfo::RawPtr || firstResult.type->GetDecorator() == ITypeInfo::SharedPtr)
								{
									auto td = mergedType->GetTypeDescriptor();
									auto tdFirst = firstResult.type->GetTypeDescriptor();
									auto tdSecond = secondResult.type->GetTypeDescriptor();
									auto dFirst = firstResult.type->GetDecorator();
									auto dSecond = secondResult.type->GetDecorator();

									writer.WriteString(L"(");

									if (td != tdFirst)
									{
										writer.WriteString(L"static_cast<");
										writer.WriteString(config->ConvertType(tdFirst));
										writer.WriteString(L"*>(");
									}
									Call(node->first);
									if (dFirst == ITypeInfo::SharedPtr)
									{
										writer.WriteString(L".Obj()");
									}
									if (td != tdFirst)
									{
										writer.WriteString(L")");
									}

									if (node->op == WfBinaryOperator::EQ)
									{
										writer.WriteString(L" == ");
									}
									else
									{
										writer.WriteString(L" != ");
									}

									if (td != tdSecond)
									{
										writer.WriteString(L"static_cast<");
										writer.WriteString(config->ConvertType(tdSecond));
										writer.WriteString(L"*>(");
									}
									Call(node->second);
									if (dSecond == ITypeInfo::SharedPtr)
									{
										writer.WriteString(L".Obj()");
									}
									if (td != tdSecond)
									{
										writer.WriteString(L")");
									}

									writer.WriteString(L")");
									return;
								}
							}
						case WfBinaryOperator::LT:
						case WfBinaryOperator::GT:
						case WfBinaryOperator::LE:
						case WfBinaryOperator::GE:
							{
								const wchar_t* op = nullptr;
								switch (node->op)
								{
								case WfBinaryOperator::LT: op = L"<"; break;
								case WfBinaryOperator::GT: op = L">"; break;
								case WfBinaryOperator::LE: op = L"<="; break;
								case WfBinaryOperator::GE: op = L">="; break;
								case WfBinaryOperator::EQ: op = L"=="; break;
								case WfBinaryOperator::NE: op = L"!="; break;
								default:;
								}
								VisitBinaryExpression(node, op, nullptr, mergedType.Obj());
							}
							return;
						case WfBinaryOperator::Xor:
						case WfBinaryOperator::And:
						case WfBinaryOperator::Or:
							{
								auto td = result.type->GetTypeDescriptor();
								const wchar_t* op = nullptr;
								if (td == description::GetTypeDescriptor<bool>())
								{
									switch (node->op)
									{
									case WfBinaryOperator::Xor: op = L"^"; break;
									case WfBinaryOperator::And: op = L"&&"; break;
									case WfBinaryOperator::Or: op = L"||"; break;
									default:;
									}
									if (node->op != WfBinaryOperator::Xor)
									{
										td = nullptr;
									}
								}
								else
								{
									switch (node->op)
									{
									case WfBinaryOperator::Xor: op = L"^"; break;
									case WfBinaryOperator::And: op = L"&"; break;
									case WfBinaryOperator::Or: op = L"|"; break;
									default:;
									}
									if (!BinaryNeedConvert(td))
									{
										td = nullptr;
									}
								}
								VisitBinaryExpression(node, op, td, result.type.Obj());
							}
							return;
						default:;
						}
					}
				}

				void Visit(WfLetExpression* node)override
				{
					auto scope = config->manager->nodeScopes[node];
					writer.WriteString(L"[&](");
					FOREACH_INDEXER(Ptr<WfLetVariable>, letVar, index, node->variables)
					{
						if (index > 0)
						{
							writer.WriteString(L", ");
						}
						writer.WriteString(L"auto ");
						writer.WriteString(config->ConvertName(letVar->name.value));
					}
					writer.WriteString(L"){ return ");
					Call(node->expression);
					writer.WriteString(L"; }(");
					FOREACH_INDEXER(Ptr<WfLetVariable>, letVar, index, node->variables)
					{
						if (index > 0)
						{
							writer.WriteString(L", ");
						}
						auto symbol = scope->symbols[letVar->name.value][0];
						Call(letVar->value, symbol->typeInfo.Obj());
					}
					writer.WriteString(L")");
				}

				void Visit(WfIfExpression* node)override
				{
					auto firstResult = config->manager->expressionResolvings[node->trueBranch.Obj()];
					auto secondResult = config->manager->expressionResolvings[node->falseBranch.Obj()];
					auto mergedType = GetMergedType(firstResult.type, secondResult.type);

					writer.WriteString(L"(");
					Call(node->condition);
					writer.WriteString(L" ? ");
					Call(node->trueBranch, mergedType.Obj());
					writer.WriteString(L" : ");
					Call(node->falseBranch, mergedType.Obj());
					writer.WriteString(L")");
				}

				void Visit(WfRangeExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto elementType = result.type->GetElementType()->GetGenericArgument(0);

					writer.WriteString(L"::vl::__vwsn::Range(");
					Call(node->begin, elementType);
					if (node->beginBoundary == WfRangeBoundary::Exclusive)
					{
						writer.WriteString(L" + 1");
					}
					writer.WriteString(L", ");
					Call(node->end, elementType);
					if (node->endBoundary == WfRangeBoundary::Inclusive)
					{
						writer.WriteString(L" + 1");
					}
					writer.WriteString(L")");
				}

				void Visit(WfSetTestingExpression* node)override
				{
					if (auto range = node->collection.Cast<WfRangeExpression>())
					{
						auto resultElement = config->manager->expressionResolvings[node->element.Obj()];
						auto resultBegin = config->manager->expressionResolvings[range->begin.Obj()];
						auto resultEnd = config->manager->expressionResolvings[range->end.Obj()];

						writer.WriteString(L"[&](auto __vwsn_1){ return ");
						if (node->test == WfSetTesting::NotIn)
						{
							writer.WriteString(L"!");
						}
						writer.WriteString(L"(");

						Call(range->begin);
						writer.WriteString(range->beginBoundary == WfRangeBoundary::Inclusive ? L" <= " : L" < ");
						writer.WriteString(L" __vwsn_1 && __vwsn_1");
						writer.WriteString(range->endBoundary == WfRangeBoundary::Inclusive ? L" <= " : L" < ");
						Call(range->end);

						writer.WriteString(L"); }(");
						Call(node->element, resultElement.type.Obj());
						writer.WriteString(L")");
					}
					else
					{
						auto result = config->manager->expressionResolvings[node->collection.Obj()];
						auto elementType = result.type->GetElementType()->GetGenericArgument(0);

						if (node->test == WfSetTesting::NotIn)
						{
							writer.WriteString(L"(! ");
						}

						writer.WriteString(L"::vl::__vwsn::InSet(");
						Call(node->element, elementType);
						writer.WriteString(L", ");
						Call(node->collection);
						writer.WriteString(L")");

						if (node->test == WfSetTesting::NotIn)
						{
							writer.WriteString(L")");
						}
					}
				}

				void Visit(WfConstructorExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto td = result.type->GetTypeDescriptor();
					if (node->arguments.Count() == 0)
					{
						if ((td->GetTypeDescriptorFlags() & TypeDescriptorFlags::StructType) != TypeDescriptorFlags::Undefined)
						{
							writer.WriteString(config->ConvertType(result.type.Obj()) + L"{}");
						}
						else
						{
							writer.WriteString(config->ConvertType(td) + L"::Create()");
						}
					}
					else
					{
						if (result.type->GetTypeDescriptor() == description::GetTypeDescriptor<IValueList>())
						{
							auto elementType = result.type->GetElementType()->GetGenericArgument(0);
							writer.WriteString(L"(::vl::__vwsn::CreateList()");

							FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
							{
								writer.WriteString(L".Add(");
								Call(argument->key);
								writer.WriteString(L")");
							}

							writer.WriteString(L").list");
						}
						else if (result.type->GetTypeDescriptor() == description::GetTypeDescriptor<IValueDictionary>())
						{
							auto keyType = result.type->GetElementType()->GetGenericArgument(0);
							auto valueType = result.type->GetElementType()->GetGenericArgument(1);
							writer.WriteString(L"(::vl::__vwsn::CreateDictionary()");

							FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
							{
								writer.WriteString(L".Add(");
								Call(argument->key);
								writer.WriteString(L", ");
								Call(argument->value);
								writer.WriteString(L")");
							}

							writer.WriteString(L").dictionary");
						}
						else
						{
							writer.WriteString(L"[&](){ ");
							writer.WriteString(config->ConvertType(td));
							writer.WriteString(L" __vwsn_temp__;");

							FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
							{
								writer.WriteString(L" __vwsn_temp__.");
								writer.WriteString(argument->key.Cast<WfReferenceExpression>()->name.value);
								writer.WriteString(L" = ");
								Call(argument->value);
								writer.WriteString(L";");
							}

							writer.WriteString(L" return __vwsn_temp__; }()");
						}
					}
				}

				void Visit(WfInferExpression* node)override
				{
					Call(node->expression);
				}

				void Visit(WfTypeCastingExpression* node)override
				{
					auto scope = config->manager->nodeScopes[node].Obj();
					auto typeInfo = CreateTypeInfoFromType(scope, node->type);
					bool strongCast = node->strategy == WfTypeCastingStrategy::Strong;
					auto result = config->manager->expressionResolvings[node->expression.Obj()];
					ConvertType(config, writer, result.type.Obj(), typeInfo.Obj(), [&]() {Call(node->expression); }, strongCast);
				}

				void Visit(WfTypeTestingExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node->expression.Obj()];
					Ptr<ITypeInfo> type;
					if (node->type)
					{
						auto scope = config->manager->nodeScopes[node].Obj();
						type = CreateTypeInfoFromType(scope, node->type);
					}

					switch (result.type->GetDecorator())
					{
					case ITypeInfo::RawPtr:
						{
							switch (node->test)
							{
							case WfTypeTesting::IsNull:
								writer.WriteString(L"(");
								Call(node->expression);
								writer.WriteString(L" == nullptr)");
								break;
							case WfTypeTesting::IsNotNull:
								writer.WriteString(L"(");
								Call(node->expression);
								writer.WriteString(L" != nullptr)");
								break;
							case WfTypeTesting::IsType:
							case WfTypeTesting::IsNotType:
								if (type->GetDecorator() != ITypeInfo::RawPtr)
								{
									writer.WriteString(node->test == WfTypeTesting::IsType ? L"false" : L"true");
								}
								else
								{
									writer.WriteString(L"(::vl::__vwsn::RawPtrCast<");
									writer.WriteString(config->ConvertType(type->GetTypeDescriptor()));
									writer.WriteString(L">(");
									Call(node->expression);
									writer.WriteString(L") ");
									writer.WriteString(node->test == WfTypeTesting::IsType ? L"!=" : L"==");
									writer.WriteString(L" nullptr)");
								}
								break;
							}
						}
						break;
					case ITypeInfo::SharedPtr:
						{
							if (result.type->GetElementType()->GetDecorator() == ITypeInfo::Generic)
							{
								auto toCode = [&]()
								{
									stream::MemoryStream stream;
									{
										stream::StreamWriter writer(stream);
										WfPrint(node, WString::Empty, writer);
									}
									stream.SeekFromBegin(0);
									{
										stream::StreamReader reader(stream);
										return reader.ReadToEnd();
									}
								};

								if (config->IsSpecialGenericType(result.type.Obj()))
								{
									writer.WriteString(L"/* NOT SUPPORTS: testing against non-reference generic type: ");
									writer.WriteString(toCode());
									writer.WriteString(L" */ __vwsn_not_exists__");
									return;
								}
							}
							switch (node->test)
							{
							case WfTypeTesting::IsNull:
								writer.WriteString(L"(! static_cast<bool>(");
								Call(node->expression);
								writer.WriteString(L"))");
								break;
							case WfTypeTesting::IsNotNull:
								writer.WriteString(L"static_cast<bool>(");
								Call(node->expression);
								writer.WriteString(L")");
								break;
							case WfTypeTesting::IsType:
							case WfTypeTesting::IsNotType:
								if (type->GetDecorator() != ITypeInfo::SharedPtr)
								{
									writer.WriteString(node->test == WfTypeTesting::IsType ? L"false" : L"true");
								}
								else
								{
									writer.WriteString(L"(::vl::__vwsn::RawPtrCast<");
									writer.WriteString(config->ConvertType(type->GetTypeDescriptor()));
									writer.WriteString(L">(");
									Call(node->expression);
									writer.WriteString(L".Obj()) ");
									writer.WriteString(node->test == WfTypeTesting::IsType ? L"!=" : L"==");
									writer.WriteString(L" nullptr)");
								}
								break;
							}
						}
						break;
					case ITypeInfo::Nullable:
						{
							switch (node->test)
							{
							case WfTypeTesting::IsNull:
								writer.WriteString(L"(! static_cast<bool>(");
								Call(node->expression);
								writer.WriteString(L"))");
								break;
							case WfTypeTesting::IsNotNull:
								writer.WriteString(L"static_cast<bool>(");
								Call(node->expression);
								writer.WriteString(L")");
								break;
							case WfTypeTesting::IsType:
								if (type->GetTypeDescriptor() == result.type->GetTypeDescriptor())
								{
									writer.WriteString(L"static_cast<bool>(");
									Call(node->expression);
									writer.WriteString(L")");
								}
								else
								{
									writer.WriteString(L"false");
								}
								break;
							case WfTypeTesting::IsNotType:
								if (type->GetTypeDescriptor() == result.type->GetTypeDescriptor())
								{
									writer.WriteString(L"false");
								}
								else
								{
									writer.WriteString(L"true");
								}
								break;
							}
						}
						break;
					case ITypeInfo::TypeDescriptor:
						{
							if (result.type->GetTypeDescriptor()->GetTypeDescriptorFlags() == TypeDescriptorFlags::Object)
							{
								switch (node->test)
								{
								case WfTypeTesting::IsNull:
									Call(node->expression);
									writer.WriteString(L".IsNull()");
									break;
								case WfTypeTesting::IsNotNull:
									writer.WriteString(L"(! ");
									Call(node->expression);
									writer.WriteString(L".IsNull())");
									break;
								case WfTypeTesting::IsType:
								case WfTypeTesting::IsNotType:
									if ((type->GetTypeDescriptor()->GetTypeDescriptorFlags() & TypeDescriptorFlags::ReferenceType) != TypeDescriptorFlags::Undefined)
									{
										writer.WriteString(L"[&](){ auto __vwsn_temp__ = ");
										Call(node->expression);
										writer.WriteString(L"; return ");
										if ((type->GetDecorator() == ITypeInfo::RawPtr) == (node->test == WfTypeTesting::IsType))
										{
											writer.WriteString(L"!");
										}
										writer.WriteString(L"__vwsn_temp__.GetSharedPtr() ");
										writer.WriteString(node->test == WfTypeTesting::IsType ? L"&&" : L"||");
										writer.WriteString(L" ::vl::__vwsn::RawPtrCast<");
										writer.WriteString(config->ConvertType(type->GetTypeDescriptor()));
										writer.WriteString(L">(__vwsn_temp__.GetRawPtr()) ");
										writer.WriteString(node->test == WfTypeTesting::IsType ? L"!=" : L"==");
										writer.WriteString(L" nullptr; }()");
									}
									else
									{
										writer.WriteString(L"(dynamic_cast<::vl::reflection::description::IValueType::TypedBox<");
										writer.WriteString(config->ConvertType(type->GetTypeDescriptor()));
										writer.WriteString(L">*>(");
										Call(node->expression);
										writer.WriteString(L".GetBoxedValue().Obj()) ");
										writer.WriteString(node->test == WfTypeTesting::IsType ? L"!=" : L"==");
										writer.WriteString(L" nullptr)");
									}
									break;
								}
							}
							else if ((type->GetTypeDescriptor() == result.type->GetTypeDescriptor()) == (node->test == WfTypeTesting::IsType))
							{
								writer.WriteString(L"true");
							}
							else
							{
								writer.WriteString(L"false");
							}
						}
						break;
					default:;
					}
				}

				void Visit(WfTypeOfTypeExpression* node)override
				{
					writer.WriteString(L"/* NOT SUPPORTS: typeof() */ __vwsn_not_exists__");
				}

				void Visit(WfTypeOfExpressionExpression* node)override
				{
					writer.WriteString(L"/* NOT SUPPORTS: type() */ __vwsn_not_exists__");
				}

				void Visit(WfAttachEventExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node->event.Obj()];
					if (CppExists(result.eventInfo))
					{
						WriteEventTemplate(CppGetAttachTemplate(result.eventInfo), result.eventInfo,
							[&](IEventInfo*)
							{
								writer.WriteString(L"::vl::__vwsn::This(");
								if (auto member = node->event.Cast<WfMemberExpression>())
								{
									Call(member->parent);
									auto parentResult = config->manager->expressionResolvings[member->parent.Obj()];
									if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
									{
										writer.WriteString(L".Obj()");
									}
								}
								else
								{
									VisitThisExpression(node, result.eventInfo->GetOwnerTypeDescriptor());
								}
								writer.WriteString(L")");
								return true;
							},
							[&](IEventInfo*)
							{
								Call(node->function);
								return true;
							},
							[&](IEventInfo*, vint) {});
					}
					else
					{
						WriteNotExists(result.eventInfo);
					}
				}

				void Visit(WfDetachEventExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node->event.Obj()];
					if (CppExists(result.eventInfo))
					{
						WriteEventTemplate(CppGetDetachTemplate(result.eventInfo), result.eventInfo,
							[&](IEventInfo* eventInfo)
							{
								writer.WriteString(L"::vl::__vwsn::This(");
								if (auto member = node->event.Cast<WfMemberExpression>())
								{
									Call(member->parent);
									auto parentResult = config->manager->expressionResolvings[member->parent.Obj()];
									if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
									{
										writer.WriteString(L".Obj()");
									}
								}
								else
								{
									VisitThisExpression(node, eventInfo->GetOwnerTypeDescriptor());
								}
								writer.WriteString(L")");
								return true;
							},
							[&](IEventInfo*)
							{
								Call(node->handler);
								return true;
							},
							[&](IEventInfo*, vint) {});
					}
					else
					{
						WriteNotExists(result.eventInfo);
					}
				}

				void Visit(WfObserveExpression* node)override
				{
				}

				void Visit(WfCallExpression* node)override
				{
					auto thisCallback = [&](ITypeDescriptor* td)
					{
						writer.WriteString(L"::vl::__vwsn::This(");
						if (auto member = node->function.Cast<WfMemberExpression>())
						{
							Call(member->parent);
							auto parentResult = config->manager->expressionResolvings[member->parent.Obj()];
							if (parentResult.type->GetDecorator() == ITypeInfo::SharedPtr)
							{
								writer.WriteString(L".Obj()");
							}
						}
						else
						{
							VisitThisExpression(node, td);
						}
						writer.WriteString(L")");
						return true;
					};

					auto argumentCallback = [&](IMethodInfo* methodInfo, ITypeInfo* typeInfo, vint index)
					{
						auto type = methodInfo
							? methodInfo->GetParameter(index)->GetType()
							: typeInfo->GetElementType()->GetGenericArgument(index + 1)
							;
						Call(node->arguments[index], type);
					};

					auto result = config->manager->expressionResolvings[node->function.Obj()];
					if (result.methodInfo)
					{
						WriteMethodTemplate(CppGetInvokeTemplate(result.methodInfo), result.methodInfo,
							[&](IMethodInfo* methodInfo) { return thisCallback(methodInfo->GetOwnerTypeDescriptor()); },
							[&](IMethodInfo* methodInfo, vint index) { return argumentCallback(methodInfo, nullptr, index); },
							useReturnValue);
						return;
					}
					else if (result.eventInfo)
					{
						WriteEventTemplate(CppGetInvokeTemplate(result.eventInfo), result.eventInfo,
							[&](IEventInfo* eventInfo) { return thisCallback(eventInfo->GetOwnerTypeDescriptor()); },
							[&](IEventInfo*) { return false; },
							[&](IEventInfo* eventInfo, vint index) { return argumentCallback(nullptr, eventInfo->GetHandlerType(), index); }
							);
						return;
					}
					else if (result.symbol)
					{
						if (auto funcDecl = result.symbol->creatorNode.Cast<WfFunctionDeclaration>())
						{
							if (result.symbol->ownerScope->ownerNode.Cast<WfNewInterfaceExpression>())
							{
								writer.WriteString(L"::vl::__vwsn::This(this)->");
								writer.WriteString(config->ConvertName(result.symbol->name));
							}
							else if (result.symbol->ownerScope->functionConfig && result.symbol->ownerScope->functionConfig->lambda && result.symbol->name == funcDecl->name.value)
							{
								writer.WriteString(L"(*this)");
							}
							else
							{
								writer.WriteString(L"GLOBAL_NAME ");
								writer.WriteString(config->ConvertName(result.symbol->name));
							}
							writer.WriteString(L"(");
							for (vint i = 0; i < node->arguments.Count(); i++)
							{
								if (i > 0) writer.WriteString(L", ");
								argumentCallback(nullptr, result.symbol->typeInfo.Obj(), i);
							}
							writer.WriteString(L")");
							return;
						}
					}
					Call(node->function);
					writer.WriteString(L"(");
					for (vint i = 0; i < node->arguments.Count(); i++)
					{
						if (i > 0) writer.WriteString(L", ");
						argumentCallback(nullptr, result.type.Obj(), i);
					}
					writer.WriteString(L")");
				}

				void Visit(WfFunctionExpression* node)override
				{
					writer.WriteString(L"LAMBDA(::");
					writer.WriteString(config->assemblyNamespace);
					writer.WriteString(L"::");
					writer.WriteString(config->lambdaExprs[node]);
					writer.WriteString(L"(");

					auto closureInfo = config->closureInfos[node];
					WriteClosureArguments(closureInfo, node);

					writer.WriteString(L"))");
				}

				void Visit(WfNewClassExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto ctor = result.constructorInfo;

					if (ctor->GetReturn()->GetDecorator() == ITypeInfo::SharedPtr)
					{
						writer.WriteString(L"::vl::Ptr<");
						writer.WriteString(config->ConvertType(ctor->GetReturn()->GetTypeDescriptor()));
						writer.WriteString(L">(");
					}

					WriteMethodTemplate(CppGetInvokeTemplate(ctor), ctor, [&](IMethodInfo*) { return false; },
						[&](IMethodInfo*, vint index)
						{
							Call(node->arguments[index]);
						}, useReturnValue);

					if (ctor->GetReturn()->GetDecorator() == ITypeInfo::SharedPtr)
					{
						writer.WriteString(L")");
					}
				}

				void Visit(WfNewInterfaceExpression* node)override
				{
					auto result = config->manager->expressionResolvings[node];
					auto ctor = result.constructorInfo;

					if (ctor->GetReturn()->GetDecorator() == ITypeInfo::SharedPtr)
					{
						writer.WriteString(L"::vl::Ptr<");
						writer.WriteString(config->ConvertType(ctor->GetReturn()->GetTypeDescriptor()));
						writer.WriteString(L">(");
					}
					else
					{
						writer.WriteString(L"static_cast<");
						writer.WriteString(config->ConvertType(ctor->GetReturn()->GetTypeDescriptor()));
						writer.WriteString(L"*>(");
					}

					writer.WriteString(L"new ::");
					writer.WriteString(config->assemblyNamespace);
					writer.WriteString(L"::");
					writer.WriteString(config->classExprs[node]);
					writer.WriteString(L"(");

					auto closureInfo = config->closureInfos[node];
					WriteClosureArguments(closureInfo, node);

					writer.WriteString(L"))");
				}

				void Visit(WfVirtualExpression* node)override
				{
					Call(node->expandedExpression);
				}
			};

			void GenerateExpression(WfCppConfig* config, stream::StreamWriter& writer, Ptr<WfExpression> node, reflection::description::ITypeInfo* expectedType, bool useReturnValue)
			{
				WfGenerateExpressionVisitor visitor(config, writer, useReturnValue);
				if (useReturnValue)
				{
					auto result = config->manager->expressionResolvings[node.Obj()];
					ITypeInfo* types[] = { result.type.Obj(), result.expectedType.Obj(), expectedType };
					visitor.ConvertMultipleTypes(types, sizeof(types) / sizeof(*types), [&]()
					{
						node->Accept(&visitor);
					});
				}
				else
				{
					node->Accept(&visitor);
				}
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_FILE.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;

			void WfCppConfig::WritePushCompileOptions(stream::StreamWriter& writer)
			{
				writer.WriteLine(L"#if defined( _MSC_VER)");
				writer.WriteLine(L"#pragma warning(push)");
				writer.WriteLine(L"#pragma warning(disable:4250)");
				writer.WriteLine(L"#elif defined(__GNUC__)");
				writer.WriteLine(L"#pragma GCC diagnostic push");
				writer.WriteLine(L"#pragma GCC diagnostic ignored \"-Wparentheses-equality\"");
				writer.WriteLine(L"#elif defined(__clang__)");
				writer.WriteLine(L"#pragma clang diagnostic push");
				writer.WriteLine(L"#pragma clang diagnostic ignored \"-Wparentheses-equality\"");
				writer.WriteLine(L"#endif");
			}

			void WfCppConfig::WritePopCompileOptions(stream::StreamWriter& writer)
			{
				writer.WriteLine(L"#if defined( _MSC_VER)");
				writer.WriteLine(L"#pragma warning(pop)");
				writer.WriteLine(L"#elif defined(__GNUC__)");
				writer.WriteLine(L"#pragma GCC diagnostic pop");
				writer.WriteLine(L"#elif defined(__clang__)");
				writer.WriteLine(L"#pragma clang diagnostic pop");
				writer.WriteLine(L"#endif");
			}
			
			void WfCppConfig::WriteCpp_PushMacros(stream::StreamWriter& writer)
			{
				writer.WriteString(L"#define GLOBAL_SYMBOL ");
				writer.WriteString(L"::");
				writer.WriteString(assemblyNamespace);
				writer.WriteString(L"::");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"::");

				writer.WriteString(L"#define GLOBAL_NAME ");
				writer.WriteString(L"::");
				writer.WriteString(assemblyNamespace);
				writer.WriteString(L"::");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"::Instance().");

				writer.WriteString(L"#define GLOBAL_OBJ ");
				writer.WriteString(L"&::");
				writer.WriteString(assemblyNamespace);
				writer.WriteString(L"::");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"::Instance()");

				writer.WriteLine(L"#define USERIMPL(...)");
			}

			void WfCppConfig::WriteCpp_PopMacros(stream::StreamWriter& writer)
			{
				writer.WriteLine(L"#undef GLOBAL_SYMBOL");
				writer.WriteLine(L"#undef GLOBAL_NAME");
				writer.WriteLine(L"#undef GLOBAL_OBJ");
				writer.WriteLine(L"#undef USERIMPL");
			}

			void WfCppConfig::WriteHeader(stream::StreamWriter& writer, bool multiFile)
			{
				WritePushCompileOptions(writer);
				writer.WriteLine(L"");

				{
					Dictionary<WString, Ptr<WfExpression>> reversedLambdaExprs;
					Dictionary<WString, Ptr<WfNewInterfaceExpression>> reversedClassExprs;
					SortClosure(reversedLambdaExprs, reversedClassExprs);
					
					if (reversedLambdaExprs.Count() + reversedClassExprs.Count() > 0)
					{
						writer.WriteString(L"namespace ");
						writer.WriteLine(assemblyNamespace);
						writer.WriteLine(L"{");

						FOREACH(Ptr<WfExpression>, expr, reversedLambdaExprs.Values())
						{
							WriteHeader_ClosurePreDecl(writer, expr);
						}

						FOREACH(Ptr<WfNewInterfaceExpression>, expr, reversedClassExprs.Values())
						{
							WriteHeader_ClosurePreDecl(writer, expr);
						}

						writer.WriteLine(L"}");
						writer.WriteLine(L"");
					}
				}

				List<WString> nss;

				if (enumDecls.Keys().Contains(nullptr))
				{
					FOREACH(Ptr<WfEnumDeclaration>, decl, enumDecls[nullptr])
					{
						WriteHeader_Enum(writer, decl, nss);
						writer.WriteLine(L"");
					}
				}

				if (structDecls.Keys().Contains(nullptr))
				{
					FOREACH(Ptr<WfStructDeclaration>, decl, structDecls[nullptr])
					{
						WriteHeader_Struct(writer, decl, nss);
						writer.WriteLine(L"");
					}
				}

				if (classDecls.Keys().Contains(nullptr))
				{
					FOREACH(Ptr<WfClassDeclaration>, decl, classDecls[nullptr])
					{
						WriteHeader_ClassPreDecl(writer, decl, nss);
					}
					writer.WriteLine(L"");
					if (multiFile)
					{
						vint index = topLevelClassDeclsForFiles.Keys().IndexOf(L"");
						if (index != -1)
						{
							FOREACH(Ptr<WfClassDeclaration>, decl, topLevelClassDeclsForFiles.GetByIndex(index))
							{
								WriteHeader_TopLevelClass(writer, decl, nss);
								writer.WriteLine(L"");
							}
						}
					}
					else
					{
						FOREACH(Ptr<WfClassDeclaration>, decl, classDecls[nullptr])
						{
							WriteHeader_TopLevelClass(writer, decl, nss);
							writer.WriteLine(L"");
						}
					}
				}
				WriteNamespaceEnd(writer, nss);

				WriteHeader_Global(writer);

				if (!multiFile)
				{
					if (manager->declarationTypes.Count() > 0)
					{
						writer.WriteLine(L"");
						WriteHeader_Reflection(writer);
					}
				}

				writer.WriteLine(L"");
				WritePopCompileOptions(writer);
			}

			void WfCppConfig::WriteCpp(stream::StreamWriter& writer, bool multiFile)
			{
				WritePushCompileOptions(writer);
				writer.WriteLine(L"");
				WriteCpp_PushMacros(writer);

				writer.WriteLine(L"");
				WriteCpp_Global(writer);
				writer.WriteLine(L"");

				if (classDecls.Keys().Contains(nullptr))
				{
					List<WString> nss;

					if (multiFile)
					{
						vint index = topLevelClassDeclsForFiles.Keys().IndexOf(L"");
						if (index != -1)
						{
							FOREACH(Ptr<WfClassDeclaration>, decl, topLevelClassDeclsForFiles.GetByIndex(index))
							{
								WriteCpp_Class(writer, decl, nss);
							}
						}
					}
					else
					{
						FOREACH(Ptr<WfClassDeclaration>, decl, classDecls[nullptr])
						{
							WriteCpp_Class(writer, decl, nss);
						}
					}

					WriteNamespaceEnd(writer, nss);
				}

				WriteCpp_PopMacros(writer);

				if (manager->declarationTypes.Count() > 0)
				{
					writer.WriteLine(L"");
					WriteCpp_Reflection(writer);
				}

				writer.WriteLine(L"");
				WritePopCompileOptions(writer);
			}

			void WfCppConfig::WriteSubHeader(stream::StreamWriter& writer, const WString& fileName)
			{
				WritePushCompileOptions(writer);
				writer.WriteLine(L"");
				List<WString> nss;

				FOREACH(Ptr<WfClassDeclaration>, decl, topLevelClassDeclsForFiles.Get(fileName))
				{
					WriteHeader_TopLevelClass(writer, decl, nss);
					writer.WriteLine(L"");
				}

				WriteNamespaceEnd(writer, nss);
				WritePopCompileOptions(writer);
			}

			void WfCppConfig::WriteSubCpp(stream::StreamWriter& writer, const WString& fileName)
			{
				WritePushCompileOptions(writer);
				writer.WriteLine(L"");
				WriteCpp_PushMacros(writer);
				writer.WriteLine(L"");
				List<WString> nss;

				FOREACH(Ptr<WfClassDeclaration>, decl, topLevelClassDeclsForFiles.Get(fileName))
				{
					WriteCpp_Class(writer, decl, nss);
				}

				WriteNamespaceEnd(writer, nss);
				WriteCpp_PopMacros(writer);
				writer.WriteLine(L"");
				WritePopCompileOptions(writer);
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_GENERATECPPFILES.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace stream;
			using namespace filesystem;

/***********************************************************************
WfCppInput
***********************************************************************/

			WfCppInput::WfCppInput(const WString& _assemblyName)
			{
				headerGuardPrefix = L"VCZH_WORKFLOW_COMPILER_GENERATED_";
				assemblyName = _assemblyName;
				assemblyNamespace = L"vl_workflow_global";
				includeFileName = _assemblyName + L"Includes";
				defaultFileName = _assemblyName;
			}

/***********************************************************************
GenerateCppFiles
***********************************************************************/

			template<typename TCallback>
			WString GenerateToStream(const TCallback& callback)
			{
				MemoryStream stream;
				{
					StreamWriter writer(stream);
					callback(writer);
				}
				stream.SeekFromBegin(0);
				{
					StreamReader reader(stream);
					return reader.ReadToEnd();
				}
			}

			void GenerateCppComment(StreamWriter& writer, const WString& comment)
			{
				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"!!!!!! DO NOT MODIFY !!!!!!");
				writer.WriteLine(L"");
				writer.WriteLine(comment);
				writer.WriteLine(L"");
				writer.WriteLine(L"This file is generated by Workflow compiler");
				writer.WriteLine(L"https://github.com/vczh-libraries");
				writer.WriteLine(L"***********************************************************************/");
			}

			Ptr<WfCppOutput> GenerateCppFiles(Ptr<WfCppInput> input, analyzer::WfLexicalScopeManager* manager)
			{
				WfCppConfig config(manager, input->assemblyName, input->assemblyNamespace);
				auto output = MakePtr<WfCppOutput>();

				bool multiFile = false;
				switch (input->multiFile)
				{
				case WfCppMultiFile::Enabled:
					multiFile = true;
					break;
				case WfCppMultiFile::Disabled:
					multiFile = false;
					break;
				default:
					multiFile = config.topLevelClassDeclsForFiles.Count() > 1;
				}

				output->cppFiles.Add(input->defaultFileName + L".h", GenerateToStream([&](StreamWriter& writer)
				{
					GenerateCppComment(writer, input->comment);
					writer.WriteLine(L"");
					writer.WriteLine(L"#ifndef " + input->headerGuardPrefix + wupper(input->defaultFileName));
					writer.WriteLine(L"#define " + input->headerGuardPrefix + wupper(input->defaultFileName));
					writer.WriteLine(L"");
					FOREACH(WString, include, input->normalIncludes)
					{
						writer.WriteLine(L"#include \"" + include + L"\"");
					}
					if (input->reflectionIncludes.Count() > 0)
					{
						writer.WriteLine(L"#ifndef VCZH_DEBUG_NO_REFLECTION");
						FOREACH(WString, include, input->reflectionIncludes)
						{
							writer.WriteLine(L"#include \"" + include + L"\"");
						}
						writer.WriteLine(L"#endif");
					}
					writer.WriteLine(L"");
					config.WriteHeader(writer, multiFile);
					writer.WriteLine(L"");
					writer.WriteLine(L"#endif");
				}));

				output->cppFiles.Add(input->defaultFileName + L".cpp", GenerateToStream([&](StreamWriter& writer)
				{
					GenerateCppComment(writer, input->comment);
					writer.WriteLine(L"");
					if (multiFile)
					{
						writer.WriteLine(L"#include \"" + input->includeFileName + L".h\"");
					}
					else
					{
						writer.WriteLine(L"#include \"" + input->defaultFileName + L".h\"");
					}
					writer.WriteLine(L"");
					config.WriteCpp(writer, multiFile);
				}));

				if (multiFile)
				{
					output->cppFiles.Add(input->includeFileName + L".h", GenerateToStream([&](StreamWriter& writer)
					{
						GenerateCppComment(writer, input->comment);
						writer.WriteLine(L"");
						writer.WriteLine(L"#ifndef " + input->headerGuardPrefix + wupper(input->includeFileName));
						writer.WriteLine(L"#define " + input->headerGuardPrefix + wupper(input->includeFileName));
						writer.WriteLine(L"");

						writer.WriteLine(L"#include \"" + input->defaultFileName + L".h\"");
						FOREACH(WString, fileName, config.topLevelClassDeclsForFiles.Keys())
						{
							if (fileName != L"")
							{
								writer.WriteLine(L"#include \"" + fileName + L".h\"");
							}
						}

						if (config.manager->declarationTypes.Count() > 0)
						{
							writer.WriteLine(L"");
							config.WriteHeader_Reflection(writer);
						}

						writer.WriteLine(L"");
						writer.WriteLine(L"#endif");
					}));

					FOREACH(WString, fileName, config.topLevelClassDeclsForFiles.Keys())
					{
						if (fileName != L"")
						{
							output->cppFiles.Add(fileName + L".h", GenerateToStream([&](StreamWriter& writer)
							{
								GenerateCppComment(writer, input->comment);
								writer.WriteLine(L"");
								writer.WriteLine(L"#ifndef " + input->headerGuardPrefix + wupper(fileName));
								writer.WriteLine(L"#define " + input->headerGuardPrefix + wupper(fileName));
								writer.WriteLine(L"");
								writer.WriteLine(L"#include \"" + input->defaultFileName + L".h\"");
								{
									List<Ptr<WfDeclaration>> decls;
									CopyFrom(decls, config.topLevelClassDeclsForFiles[fileName]);
									for (vint i = 0; i < decls.Count(); i++)
									{
										if (auto classDecl = decls[i].Cast<WfClassDeclaration>())
										{
											{
												vint index = config.enumDecls.Keys().IndexOf(classDecl.Obj());
												if (index != -1)
												{
													CopyFrom(decls, config.enumDecls.GetByIndex(index), true);
												}
											}
											{
												vint index = config.structDecls.Keys().IndexOf(classDecl.Obj());
												if (index != -1)
												{
													CopyFrom(decls, config.structDecls.GetByIndex(index), true);
												}
											}
											{
												vint index = config.classDecls.Keys().IndexOf(classDecl.Obj());
												if (index != -1)
												{
													CopyFrom(decls, config.classDecls.GetByIndex(index), true);
												}
											}
										}
									}

									SortedList<WString> fileNames;
									FOREACH(Ptr<WfDeclaration>, decl, decls)
									{
										vint index = config.declDependencies.Keys().IndexOf(decl.Obj());
										if (index != -1)
										{
											FOREACH(Ptr<WfDeclaration>, declDep, config.declDependencies.GetByIndex(index))
											{
												WString fileName = config.declFiles[declDep.Obj()];
												if (fileName != L"" && !fileNames.Contains(fileName))
												{
													fileNames.Add(fileName);
												}
											}
										}
									}

									FOREACH(WString, fileName, fileNames)
									{
										writer.WriteLine(L"#include \"" + fileName + L".h\"");
									}
								}
								writer.WriteLine(L"");
								config.WriteSubHeader(writer, fileName);
								writer.WriteLine(L"");
								writer.WriteLine(L"#endif");
							}));

							output->cppFiles.Add(fileName + L".cpp", GenerateToStream([&](StreamWriter& writer)
							{
								GenerateCppComment(writer, input->comment);
								writer.WriteLine(L"");
								writer.WriteLine(L"#include \"" + input->includeFileName + L".h\"");
								writer.WriteLine(L"");
								config.WriteSubCpp(writer, fileName);
							}));
						}
					}
				}

				return output;
			}

/***********************************************************************
MergeCppFile
***********************************************************************/

			WString RemoveSpacePrefix(const WString& s)
			{
				for (vint i = 0; i < s.Length(); i++)
				{
					if (s[i] != L' '&&s[i] != L'\t')
					{
						return s.Sub(i, s.Length() - i);
					}
				}
				return WString::Empty;
			}

			const vint NORMAL = 0;
			const vint WAIT_HEADER = 1;
			const vint WAIT_OPEN = 2;
			const vint WAIT_CLOSE = 3;
			const vint UNUSED_USER_CONTENT = 4;

			template<typename TCallback>
			void ProcessCppContent(const WString& code, const TCallback& callback)
			{
				vint state = NORMAL;
				vint counter = 0;

				StringReader reader(code);
				while (!reader.IsEnd())
				{
					auto line = reader.ReadLine();
					if (reader.IsEnd() && line == L"")
					{
						break;
					}

					if (line == L"// UNUSED_USER_CONTENT:")
					{
						state = UNUSED_USER_CONTENT;
					}

					if (state == UNUSED_USER_CONTENT)
					{
						callback(state, state, line, line);
					}
					else
					{
						auto content = RemoveSpacePrefix(line);
						auto previousState = state;
						switch (state)
						{
						case NORMAL:
							if (content.Length() > 9 && content.Sub(0, 9) == L"USERIMPL(")
							{
								state = WAIT_HEADER;
							}
							break;
						case WAIT_HEADER:
							state = WAIT_OPEN;
							break;
						case WAIT_OPEN:
							if (content == L"{")
							{
								state = WAIT_CLOSE;
							}
							break;
						case WAIT_CLOSE:
							if (content == L"{")
							{
								counter++;
							}
							else if (content == L"}")
							{
								if (counter == 0)
								{
									state = NORMAL;
								}
								else
								{
									counter--;
								}
							}
							break;
						}
						callback(previousState, state, line, content);
					}
				}
			}

			template<typename TCallback>
			void SplitCppContent(const WString& code, Dictionary<WString, WString>& userContents, Dictionary<WString, WString>& userContentsFull, const TCallback& callback)
			{
				WString name;
				WString userImpl;
				WString userImplFull;
				ProcessCppContent(code, [&](vint previousState, vint state, const WString& line, const WString& content)
				{
					if (state == UNUSED_USER_CONTENT)
					{
						callback(line);
					}
					else
					{
						if (previousState == NORMAL && state == WAIT_HEADER)
						{
							name = content;
							userImpl = L"";
							userImplFull = L"";
						}
						else if (previousState == WAIT_HEADER)
						{
							name += content;
						}
						else if (previousState == WAIT_CLOSE && state == WAIT_CLOSE)
						{
							userImpl += line + L"\r\n";
						}
						else if (previousState == WAIT_CLOSE && state == NORMAL)
						{
							userImplFull += L"//" + line + L"\r\n";
							userContents.Add(name, userImpl);
							userContentsFull.Add(name, userImplFull);
							name = L"";
						}

						if (name != L"")
						{
							userImplFull += L"//" + line + L"\r\n";
						}
					}
				});
			}

			WString MergeCppFileContent(const WString& dst, const WString& src)
			{
				Dictionary<WString, WString> userContents, userContentsFull;
				WString unusedUserContent = GenerateToStream([&](StreamWriter& writer)
				{
					SplitCppContent(dst, userContents, userContentsFull, [&](const WString& line)
					{
						writer.WriteLine(line);
					});
				});

				WString processedUnusedUserContent = GenerateToStream([&](StreamWriter& writer)
				{
					StringReader reader(unusedUserContent);
					while (!reader.IsEnd())
					{
						auto line = reader.ReadLine();
						if (line != L"// UNUSED_USER_CONTENT:")
						{
							if (INVLOC.StartsWith(line, L"//", Locale::None))
							{
								line = line.Right(line.Length() - 2);
							}
							writer.WriteLine(line);
						}
					}
				});

				SplitCppContent(processedUnusedUserContent, userContents, userContentsFull, [&](const WString& line) {});
				
				return GenerateToStream([&](StreamWriter& writer)
				{
					WString name;
					WString userImpl;
					ProcessCppContent(src, [&](vint previousState, vint state, const WString& line, const WString& content)
					{
						if (previousState == NORMAL && state == WAIT_HEADER)
						{
							name = content;
							userImpl = L"";
						}
						else if (previousState == WAIT_HEADER)
						{
							name += content;
						}
						else if (previousState == WAIT_CLOSE && state == WAIT_CLOSE)
						{
							userImpl += line + L"\r\n";
							return;
						}
						else if (previousState == WAIT_CLOSE && state == NORMAL)
						{
							vint index = userContents.Keys().IndexOf(name);
							if (index == -1)
							{
								writer.WriteString(userImpl);
							}
							else
							{
								writer.WriteString(userContents.Values()[index]);
								userContentsFull.Remove(name);
							}
						}
						writer.WriteLine(line);
					});

					if (userContentsFull.Count() > 0)
					{
						writer.WriteLine(L"// UNUSED_USER_CONTENT:");
						FOREACH(WString, content, userContentsFull.Values())
						{
							writer.WriteString(content);
						}
					}
				});
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_STATEMENT.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;
			using namespace analyzer;

			class WfGenerateStatementVisitor : public Object, public WfStatement::IVisitor
			{
			public:
				WfCppConfig*				config;
				Ptr<FunctionRecord>			functionRecord;
				stream::StreamWriter&		writer;
				WString						prefixBlock;
				WString						prefix;
				ITypeInfo*					returnType;

				WfGenerateStatementVisitor(WfCppConfig* _config, Ptr<FunctionRecord> _functionRecord, stream::StreamWriter& _writer, const WString& _prefixBlock, const WString& _prefix, ITypeInfo* _returnType)
					:config(_config)
					, functionRecord(_functionRecord)
					, writer(_writer)
					, prefixBlock(_prefixBlock)
					, prefix(_prefix)
					, returnType(_returnType)
				{
				}

				void Call(Ptr<WfStatement> node, WString prefixDelta = WString(L"\t", false))
				{
					GenerateStatement(config, functionRecord, writer, node, prefix, prefixDelta, returnType);
				}

				void Visit(WfBreakStatement* node)override
				{
					writer.WriteString(prefix);
					writer.WriteLine(L"break;");
				}

				void Visit(WfContinueStatement* node)override
				{
					writer.WriteString(prefix);
					writer.WriteLine(L"continue;");
				}

				void Visit(WfReturnStatement* node)override
				{
					writer.WriteString(prefix);
					if (node->expression)
					{
						writer.WriteString(L"return ");
						GenerateExpression(config, writer, node->expression, returnType);
						writer.WriteLine(L";");
					}
					else
					{
						writer.WriteLine(L"return;");
					}
				}

				void Visit(WfDeleteStatement* node)override
				{
					writer.WriteString(prefix);
					writer.WriteString(L"::vl::__vwsn::This(");
					GenerateExpression(config, writer, node->expression, nullptr);
					writer.WriteLine(L")->Dispose(true);");
				}

				void Visit(WfRaiseExceptionStatement* node)override
				{
					if (node->expression)
					{
						writer.WriteString(prefix);
						writer.WriteString(L"throw ::vl::Exception(");

						auto result = config->manager->expressionResolvings[node->expression.Obj()];
						bool throwString = result.type->GetTypeDescriptor() == description::GetTypeDescriptor<WString>();
						if (!throwString)
						{
							writer.WriteString(L"::vl::__vwsn::This(");
						}
						GenerateExpression(config, writer, node->expression, result.type.Obj());
						if (!throwString)
						{
							writer.WriteString(L".Obj())->GetMessage()");
						}

						writer.WriteLine(L");");
					}
					else
					{
						writer.WriteString(prefix);
						writer.WriteLine(L"throw;");
					}
				}

				void Visit(WfIfStatement* node)override
				{
					writer.WriteString(prefix);
					while (node)
					{
						writer.WriteString(L"if (");
						if (node->type)
						{
							auto result = config->manager->expressionResolvings[node->expression.Obj()];
							auto scope = config->manager->nodeScopes[node].Obj();
							auto typeInfo = CreateTypeInfoFromType(scope, node->type);
							writer.WriteString(L"auto ");
							writer.WriteString(config->ConvertName(node->name.value));
							writer.WriteString(L" = ");
							ConvertType(config, writer, result.type.Obj(), typeInfo.Obj(), [&]() {GenerateExpression(config, writer, node->expression, nullptr); }, false);
						}
						else
						{
							GenerateExpression(config, writer, node->expression, TypeInfoRetriver<bool>::CreateTypeInfo().Obj());
						}
						writer.WriteLine(L")");
						Call(node->trueBranch);
						if (node->falseBranch)
						{
							writer.WriteString(prefix);
							if (auto ifStat = node->falseBranch.Cast<WfIfStatement>())
							{
								writer.WriteString(L"else ");
								node = ifStat.Obj();
								continue;
							}
							else
							{
								writer.WriteLine(L"else");
								Call(node->falseBranch);
							}
						}
						break;
					}
				}

				void Visit(WfWhileStatement* node)override
				{
					writer.WriteString(prefix);
					writer.WriteString(L"while (");
					GenerateExpression(config, writer, node->condition, TypeInfoRetriver<bool>::CreateTypeInfo().Obj());
					writer.WriteLine(L")");
					Call(node->statement);
				}

				void Visit(WfTryStatement* node)override
				{
					auto exName = L"__vwsne_" + itow(functionRecord->exprCounter++);

					WString tryPrefix = prefix;
					if (node->finallyStatement)
					{
						auto blockName = L"__vwsnb_" + itow(functionRecord->blockCounter++);
						tryPrefix += L"\t";

						writer.WriteString(prefix);
						writer.WriteLine(L"{");

						writer.WriteString(tryPrefix);
						writer.WriteString(L"auto ");
						writer.WriteString(blockName);
						writer.WriteLine(L" = [&]()");
						GenerateStatement(config, functionRecord, writer, node->finallyStatement, tryPrefix, WString(L"\t", false), returnType);
						writer.WriteString(tryPrefix);
						writer.WriteLine(L";");

						writer.WriteString(tryPrefix);
						writer.WriteString(L"::vl::__vwsn::RunOnExit<::vl::RemoveCVR<decltype(");
						writer.WriteString(blockName);
						writer.WriteString(L")>::Type> ");
						writer.WriteString(blockName);
						writer.WriteString(L"_dtor(&");
						writer.WriteString(blockName);
						writer.WriteLine(L");");
					}
					WString bodyPrefix = tryPrefix + L"\t";

					writer.WriteString(tryPrefix);
					writer.WriteLine(L"try");
					writer.WriteString(tryPrefix);
					writer.WriteLine(L"{");
					GenerateStatement(config, functionRecord, writer, node->protectedStatement, bodyPrefix, WString(L"\t", false), returnType);
					writer.WriteString(tryPrefix);
					writer.WriteLine(L"}");

					writer.WriteString(tryPrefix);
					writer.WriteString(L"catch(const ::vl::Exception&");
					if (node->catchStatement)
					{
						writer.WriteString(L" ");
						writer.WriteString(exName);
					}
					writer.WriteLine(L")");
					writer.WriteString(tryPrefix);
					writer.WriteLine(L"{");
					if (node->catchStatement)
					{
						writer.WriteString(bodyPrefix);
						writer.WriteString(L"auto ");
						writer.WriteString(config->ConvertName(node->name.value));
						writer.WriteString(L" = ::vl::reflection::description::IValueException::Create(");
						writer.WriteString(exName);
						writer.WriteLine(L".Message());");
						GenerateStatement(config, functionRecord, writer, node->catchStatement, bodyPrefix, WString(L"\t", false), returnType);
					}
					writer.WriteString(tryPrefix);
					writer.WriteLine(L"}");

					if (node->finallyStatement)
					{
						writer.WriteString(prefix);
						writer.WriteLine(L"}");
					}
				}

				void Visit(WfBlockStatement* node)override
				{
					writer.WriteString(prefixBlock);
					writer.WriteLine(L"{");
					FOREACH(Ptr<WfStatement>, statement, node->statements)
					{
						while (auto virtualStat = statement.Cast<WfVirtualStatement>())
						{
							statement = virtualStat->expandedStatement;
						}

						if (statement.Cast<WfBlockStatement>())
						{
							Call(statement);
						}
						else
						{
							Call(statement, WString::Empty);
						}
					}
					writer.WriteString(prefixBlock);
					writer.WriteLine(L"}");
				}

				void Visit(WfExpressionStatement* node)override
				{
					writer.WriteString(prefix);
					GenerateExpression(config, writer, node->expression, nullptr, false);
					writer.WriteLine(L";");
				}

				void Visit(WfVariableStatement* node)override
				{
					auto scope = config->manager->nodeScopes[node->variable.Obj()];
					auto symbol = scope->symbols[node->variable->name.value][0].Obj();

					writer.WriteString(prefix);
					if (node->variable->expression)
					{
						writer.WriteString(L"auto");
					}
					else
					{
						writer.WriteString(config->ConvertType(symbol->typeInfo.Obj()));
					}
					writer.WriteString(L" ");
					writer.WriteString(config->ConvertName(node->variable->name.value));

					if (node->variable->expression)
					{
						writer.WriteString(L" = ");
						GenerateExpression(config, writer, node->variable->expression, symbol->typeInfo.Obj());
					}
					writer.WriteLine(L";");
				}

				void Visit(WfVirtualStatement* node)override
				{
					node->expandedStatement->Accept(this);
				}

				void Visit(WfCoroutineStatement* node)override
				{
					CHECK_FAIL(L"WfGenerateStatementVisitor::Visit(WfCoroutineStatement*)#Internal error, All coroutine statements do not generate C++ code.");
				}
			};

			void GenerateStatement(WfCppConfig* config, Ptr<FunctionRecord> functionRecord, stream::StreamWriter& writer, Ptr<WfStatement> node, const WString& prefix, const WString& prefixDelta, reflection::description::ITypeInfo* returnType)
			{
				WfGenerateStatementVisitor visitor(config, functionRecord, writer, prefix, prefix + prefixDelta, returnType);
				node->Accept(&visitor);
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITECLASS.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

			void WfCppConfig::WriteHeader_ClassPreDecl(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, const WString& name, const WString& prefix)
			{
				writer.WriteLine(prefix + L"class " + name + L";");
			}

			void WfCppConfig::WriteHeader_ClassPreDecl(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, collections::List<WString>& nss)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				WString name;
				auto prefix = WriteNamespace(writer, CppGetFullName(td), nss, name);
				WriteHeader_ClassPreDecl(writer, decl, name, prefix);
			}

			class WriteHeader_Class_FindClassDeclVisitor
				: public empty_visitor::DeclarationVisitor
			{
			public:
				List<Ptr<WfClassDeclaration>>&		unprocessed;

				WriteHeader_Class_FindClassDeclVisitor(List<Ptr<WfClassDeclaration>>& _unprocessed)
					:unprocessed(_unprocessed)
				{
				}

				void Dispatch(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				void Visit(WfClassDeclaration* node)override
				{
					unprocessed.Add(node);
				}
			};

			void WfCppConfig::WriteHeader_Class(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, const WString& name, const WString& prefix)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();

				writer.WriteString(prefix + L"class " + name + L" : ");
				switch (decl->kind)
				{
				case WfClassKind::Class:
				{
					vint count = td->GetBaseTypeDescriptorCount();
					bool hasClassBase = Range<vint>(0, count)
						.Any([=](vint index)
					{
						auto baseTd = td->GetBaseTypeDescriptor(index);
						return baseTd->GetTypeDescriptorFlags() == TypeDescriptorFlags::Class
							&& baseTd != description::GetTypeDescriptor<DescriptableObject>();
					});

					if (!hasClassBase)
					{
						writer.WriteString(L"public ::vl::Object, ");
					}
					for (vint i = 0; i < count; i++)
					{
						auto baseTd = td->GetBaseTypeDescriptor(i);
						switch (baseTd->GetTypeDescriptorFlags())
						{
						case TypeDescriptorFlags::Class:
							if (baseTd != description::GetTypeDescriptor<DescriptableObject>())
							{
								writer.WriteString(L"public " + ConvertType(baseTd) + L", ");
							}
							break;
						case TypeDescriptorFlags::Interface:
							writer.WriteString(L"public virtual " + ConvertType(baseTd) + L", ");
							break;
						default:;
						}
					}
				}
				break;
				case WfClassKind::Interface:
				{
					vint count = td->GetBaseTypeDescriptorCount();
					for (vint i = 0; i < count; i++)
					{
						writer.WriteString(L"public virtual " + ConvertType(td->GetBaseTypeDescriptor(i)) + L", ");
					}
				}
				break;
				}
				writer.WriteLine(L"public ::vl::reflection::Description<" + name + L">");
				writer.WriteLine(prefix + L"{");

				List<Ptr<WfClassDeclaration>> unprocessed;
				unprocessed.Add(decl);

				FOREACH(Ptr<WfAttribute>, attribute, attributeEvaluator->GetAttributes(decl->attributes, L"cpp", L"Friend"))
				{
					auto td = UnboxValue<ITypeDescriptor*>(attributeEvaluator->GetAttributeValue(attribute));

					auto scopeName = manager->typeNames[td];
					if (scopeName->declarations.Count() == 0)
					{
						writer.WriteLine(prefix + L"\tfriend class " + ConvertType(td) + L";");
					}
					else
					{
						auto friendDecl = scopeName->declarations[0].Cast<WfClassDeclaration>();
						unprocessed.Add(friendDecl);
					}
				}

				auto declTypeName = ConvertType(manager->declarationTypes[decl.Obj()].Obj());
				for (vint i = 0; i < unprocessed.Count(); i++)
				{
					auto current = unprocessed[i];
					if (current != decl)
					{
						auto currentTypeName = ConvertType(manager->declarationTypes[current.Obj()].Obj());

						bool isInternalClass = false;
						if (currentTypeName.Length() > declTypeName.Length() + 2)
						{
							if (currentTypeName.Left(declTypeName.Length() + 2) == declTypeName + L"::")
							{
								isInternalClass = true;
							}
						}
						if (!isInternalClass)
						{
							writer.WriteLine(prefix + L"\tfriend class " + currentTypeName + L";");
						}
					}

					vint index = classClosures.Keys().IndexOf(current.Obj());
					if (index != -1)
					{
						SortedList<WString> closureNames;
						CopyFrom(
							closureNames,
							From(classClosures.GetByIndex(index))
							.Select([&](Ptr<WfExpression> closure)
						{
							return (closure.Cast<WfNewInterfaceExpression>() ? L"class ::" : L"struct ::") +
								assemblyNamespace +
								L"::" +
								closureInfos[closure.Obj()]->lambdaClassName;
						})
						);
						FOREACH(WString, closureName, closureNames)
						{
							writer.WriteLine(prefix + L"\tfriend " + closureName + L";");
						}
					}

					WriteHeader_Class_FindClassDeclVisitor visitor(unprocessed);
					FOREACH(Ptr<WfDeclaration>, memberDecl, current->declarations)
					{
						memberDecl->Accept(&visitor);
					}
				}
				writer.WriteLine(L"#ifndef VCZH_DEBUG_NO_REFLECTION");
				writer.WriteLine(prefix + L"\tfriend struct ::vl::reflection::description::CustomTypeDescriptorSelector<" + name + L">;");
				writer.WriteLine(L"#endif");

				const vint PRIVATE = 0;
				const vint PROTECTED = 1;
				const vint PUBLIC = 2;
				vint accessor = -1;

				{
					vint index = enumDecls.Keys().IndexOf(decl.Obj());
					if (index != -1)
					{
						if (accessor != PUBLIC)
						{
							accessor = PUBLIC;
							writer.WriteLine(prefix + L"public:");
						}
						FOREACH(Ptr<WfEnumDeclaration>, decl, enumDecls.GetByIndex(index))
						{
							WriteHeader_Enum(writer, decl, ConvertName(decl->name.value), prefix + L"\t");
							writer.WriteLine(L"");
						}
					}
				}

				{
					vint index = structDecls.Keys().IndexOf(decl.Obj());
					if (index != -1)
					{
						if (accessor != PUBLIC)
						{
							accessor = PUBLIC;
							writer.WriteLine(prefix + L"public:");
						}
						FOREACH(Ptr<WfStructDeclaration>, decl, structDecls.GetByIndex(index))
						{
							WriteHeader_Struct(writer, decl, ConvertName(decl->name.value), prefix + L"\t");
							writer.WriteLine(L"");
						}
					}
				}

				{
					vint index = classDecls.Keys().IndexOf(decl.Obj());
					if (index != -1)
					{
						if (accessor != PUBLIC)
						{
							accessor = PUBLIC;
							writer.WriteLine(prefix + L"public:");
						}
						FOREACH(Ptr<WfClassDeclaration>, decl, classDecls.GetByIndex(index))
						{
							WriteHeader_ClassPreDecl(writer, decl, ConvertName(decl->name.value), prefix + L"\t");
						}
						writer.WriteLine(L"");
						FOREACH(Ptr<WfClassDeclaration>, decl, classDecls.GetByIndex(index))
						{
							WriteHeader_Class(writer, decl, ConvertName(decl->name.value), prefix + L"\t");
						}
					}
				}

				FOREACH(Ptr<WfDeclaration>, memberDecl, decl->declarations)
				{
					vint memberAccessor = PUBLIC;
					if (attributeEvaluator->GetAttribute(memberDecl->attributes, L"cpp", L"Private"))
					{
						memberAccessor = PRIVATE;
					}
					else if (attributeEvaluator->GetAttribute(memberDecl->attributes, L"cpp", L"Protected"))
					{
						memberAccessor = PROTECTED;
					}

					if (accessor != memberAccessor)
					{
						accessor = memberAccessor;
						switch (accessor)
						{
						case PRIVATE:
							writer.WriteLine(prefix + L"private:");
							break;
						case PROTECTED:
							writer.WriteLine(prefix + L"protected:");
							break;
						case PUBLIC:
							writer.WriteLine(prefix + L"public:");
							break;
						}
					}
					GenerateClassMemberDecl(this, writer, ConvertName(decl->name.value), memberDecl, prefix + L"\t", false);
				}

				writer.WriteLine(prefix + L"};");
			}

			WString WfCppConfig::WriteHeader_Class(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, collections::List<WString>& nss)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				WString name;
				auto prefix = WriteNamespace(writer, CppGetFullName(td), nss, name);
				WriteHeader_Class(writer, decl, name, prefix);
				return prefix;
			}

			void WfCppConfig::WriteHeader_TopLevelClass(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, collections::List<WString>& nss)
			{
				auto prefix = WriteHeader_Class(writer, decl, nss);
				List<Ptr<WfClassDeclaration>> classes;
				classes.Add(decl);
				vint processed = 0;
				while (processed < classes.Count())
				{
					auto current = classes[processed++];
					{
						vint index = enumDecls.Keys().IndexOf(current.Obj());
						if (index != -1)
						{
							FOREACH(Ptr<WfEnumDeclaration>, enumDecl, enumDecls.GetByIndex(index))
							{
								auto td = manager->declarationTypes[enumDecl.Obj()].Obj();
								WriteHeader_EnumOp(writer, enumDecl, ConvertType(td), prefix);
							}
						}
					}
					{
						vint index = structDecls.Keys().IndexOf(current.Obj());
						if (index != -1)
						{
							FOREACH(Ptr<WfStructDeclaration>, structDecl, structDecls.GetByIndex(index))
							{
								auto td = manager->declarationTypes[structDecl.Obj()].Obj();
								WriteHeader_StructOp(writer, structDecl, ConvertType(td), prefix);
							}
						}
					}
					{
						vint index = classDecls.Keys().IndexOf(current.Obj());
						if (index != -1)
						{
							CopyFrom(classes, classDecls.GetByIndex(index), true);
						}
					}
				}
			}

			bool WfCppConfig::WriteCpp_ClassMember(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, Ptr<WfDeclaration> memberDecl, collections::List<WString>& nss)
			{
				List<WString> nss2;
				GetClassNamespace(decl, nss2);
				auto prefix = WriteNamespace(writer, nss, nss2);

				auto td = manager->declarationTypes[decl.Obj()].Obj();
				auto classFullName = CppGetFullName(td);
				return GenerateClassMemberImpl(this, writer, GetClassBaseName(decl), ConvertName(decl->name.value), classFullName , memberDecl, prefix);
			}

			void WfCppConfig::WriteCpp_Class(stream::StreamWriter& writer, Ptr<WfClassDeclaration> decl, collections::List<WString>& nss)
			{
				List<Ptr<WfClassDeclaration>> classes;
				classes.Add(decl);
				vint processed = 0;
				while (processed < classes.Count())
				{
					auto current = classes[processed++];

					writer.WriteLine(L"/***********************************************************************");
					writer.WriteLine(L"Class (" + CppGetFullName(manager->declarationTypes[current.Obj()].Obj()) + L")");
					writer.WriteLine(L"***********************************************************************/");
					writer.WriteLine(L"");

					FOREACH(Ptr<WfDeclaration>, memberDecl, current->declarations)
					{
						if (WriteCpp_ClassMember(writer, current, memberDecl, nss))
						{
							writer.WriteLine(L"");
						}
					}

					vint index = classDecls.Keys().IndexOf(current.Obj());
					if (index != -1)
					{
						CopyFrom(classes, classDecls.GetByIndex(index), true);
					}
				}
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITEENUM.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;

			void WfCppConfig::WriteHeader_Enum(stream::StreamWriter& writer, Ptr<WfEnumDeclaration> decl, const WString& name, const WString& prefix)
			{
				writer.WriteLine(prefix + L"enum class " + name + L" : vl::vuint64_t");
				writer.WriteLine(prefix + L"{");
				FOREACH(Ptr<WfEnumItem>, item, decl->items)
				{
					switch (item->kind)
					{
					case WfEnumItemKind::Constant:
						writer.WriteLine(prefix + L"\t" + ConvertName(item->name.value) + L" = " + item->number.value + L"UL,");
						break;
					case WfEnumItemKind::Intersection:
						writer.WriteString(prefix + L"\t" + ConvertName(item->name.value) + L" = ");
						FOREACH_INDEXER(Ptr<WfEnumItemIntersection>, enumInt, index, item->intersections)
						{
							if (index > 0)
							{
								writer.WriteString(L" | ");
							}
							writer.WriteString(ConvertName(enumInt->name.value));
						}
						writer.WriteLine(L",");
						break;
					}
				}
				writer.WriteLine(prefix + L"};");
			}

			void WfCppConfig::WriteHeader_EnumOp(stream::StreamWriter& writer, Ptr<WfEnumDeclaration> decl, const WString& name, const WString& prefix)
			{
				const wchar_t* ops[] = { L"&", L"|" };
				for (auto op : ops)
				{
					writer.WriteString(prefix);
					writer.WriteString(L"inline ");
					writer.WriteString(name);
					writer.WriteString(L" operator");
					writer.WriteString(op);
					writer.WriteString(L" (");
					writer.WriteString(name);
					writer.WriteString(L" a, ");
					writer.WriteString(name);
					writer.WriteString(L" b) { return static_cast<");
					writer.WriteString(name);
					writer.WriteString(L">(static_cast<::vl::vuint64_t>(a) ");
					writer.WriteString(op);
					writer.WriteLine(L" static_cast<::vl::vuint64_t>(b)); }");
				}
			}

			void WfCppConfig::WriteHeader_Enum(stream::StreamWriter& writer, Ptr<WfEnumDeclaration> decl, collections::List<WString>& nss)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				WString name;
				auto prefix = WriteNamespace(writer, CppGetFullName(td), nss, name);
				WriteHeader_Enum(writer, decl, name, prefix);
				WriteHeader_EnumOp(writer, decl, name, prefix);
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITEFUNCTIONHEADER.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace reflection::description;

			ITypeInfo* WfCppConfig::WriteFunctionHeader(stream::StreamWriter& writer, ITypeInfo* typeInfo, collections::List<WString>& arguments, const WString& name, bool writeReturnType)
			{
				ITypeInfo* returnType = nullptr;
				if (writeReturnType)
				{
					returnType = typeInfo->GetElementType()->GetGenericArgument(0);
					writer.WriteString(ConvertType(returnType));
					writer.WriteChar(L' ');
				}

				writer.WriteString(name);
				writer.WriteString(L"(");
				for (vint i = 0; i < arguments.Count(); i++)
				{
					if (i > 0)
					{
						writer.WriteString(L", ");
					}
					writer.WriteString(ConvertArgumentType(typeInfo->GetElementType()->GetGenericArgument(i + 1)));
					writer.WriteChar(L' ');
					writer.WriteString(ConvertName(arguments[i]));
				}
				writer.WriteString(L")");

				return returnType;
			}

			ITypeInfo* WfCppConfig::WriteFunctionHeader(stream::StreamWriter& writer, Ptr<WfOrderedLambdaExpression> ordered, const WString& name, bool writeReturnType)
			{
				auto result = manager->expressionResolvings[ordered.Obj()];
				auto typeInfo = result.type.Obj();

				auto scope = manager->nodeScopes[ordered.Obj()].Obj();
				List<WString> arguments;
				CopyFrom(
					arguments,
					Range<vint>(0, scope->symbols.Count())
						.Select([scope](vint index)
						{
							return scope->symbols.GetByIndex(index)[0]->name;
						})
						.OrderBy((vint(*)(const WString&, const WString&))&WString::Compare)
					);

				return WriteFunctionHeader(writer, typeInfo, arguments, name, writeReturnType);
			}

			ITypeInfo* WfCppConfig::WriteFunctionHeader(stream::StreamWriter& writer, Ptr<WfFunctionExpression> funcExpr, const WString& name, bool writeReturnType)
			{
				auto result = manager->expressionResolvings[funcExpr.Obj()];
				auto typeInfo = result.type.Obj();

				List<WString> arguments;
				CopyFrom(
					arguments,
					From(funcExpr->function->arguments)
						.Select([](Ptr<WfFunctionArgument> argument)
						{
							return argument->name.value;
						})
					);
				return WriteFunctionHeader(writer, typeInfo, arguments, name, writeReturnType);
			}

			ITypeInfo* WfCppConfig::WriteFunctionHeader(stream::StreamWriter& writer, Ptr<WfFunctionDeclaration> decl, const WString& name, bool writeReturnType)
			{
				vint index1 = manager->declarationMemberInfos.Keys().IndexOf(decl.Obj());
				vint index2 = manager->interfaceMethodImpls.Keys().IndexOf(decl.Obj());
				auto methodInfo =
					index1 != -1 ? dynamic_cast<IMethodInfo*>(manager->declarationMemberInfos.Values()[index1].Obj()) :
					index2 != -1 ? manager->interfaceMethodImpls.Values()[index2] :
					nullptr;

				List<WString> arguments;
				CopyFrom(
					arguments,
					From(decl->arguments)
						.Select([](Ptr<WfFunctionArgument> argument)
						{
							return argument->name.value;
						})
					);

				if (methodInfo)
				{
					return WriteFunctionHeader(writer, methodInfo, arguments, name, writeReturnType);
				}
				else
				{
					auto scope = manager->nodeScopes[decl.Obj()].Obj();
					auto symbol = manager->GetDeclarationSymbol(scope, decl.Obj());
					auto typeInfo = symbol->typeInfo.Obj();

					return WriteFunctionHeader(writer, typeInfo, arguments, name, writeReturnType);
				}
			}

			ITypeInfo* WfCppConfig::WriteFunctionHeader(stream::StreamWriter& writer, IMethodInfo* methodInfo, collections::List<WString>& arguments, const WString& name, bool writeReturnType)
			{
				ITypeInfo* returnType = nullptr;
				if (writeReturnType)
				{
					returnType = methodInfo->GetReturn();
					writer.WriteString(ConvertType(returnType));
					writer.WriteChar(L' ');
				}
				writer.WriteString(name);
				writer.WriteString(L"(");
				vint count = methodInfo->GetParameterCount();
				for (vint i = 0; i < count; i++)
				{
					if (i > 0)
					{
						writer.WriteString(L", ");
					}
					writer.WriteString(ConvertArgumentType(methodInfo->GetParameter(i)->GetType()));
					writer.WriteChar(L' ');
					if (arguments.Count() == 0)
					{
						writer.WriteString(ConvertName(methodInfo->GetParameter(i)->GetName()));
					}
					else
					{
						writer.WriteString(ConvertName(arguments[i]));
					}
				}
				writer.WriteString(L")");
				return returnType;
			}

			ITypeInfo* WfCppConfig::WriteFunctionHeader(stream::StreamWriter& writer, IMethodInfo* methodInfo, const WString& name, bool writeReturnType)
			{
				List<WString> arguments;
				return WriteFunctionHeader(writer, methodInfo, arguments, name, writeReturnType);
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITEGLOBAL.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

			void WfCppConfig::SortClosure(Dictionary<WString, Ptr<WfExpression>>& reversedLambdaExprs, Dictionary<WString, Ptr<WfNewInterfaceExpression>>& reversedClassExprs)
			{
				CopyFrom(
					reversedLambdaExprs,
					From(lambdaExprs)
						.Select([](Pair<Ptr<WfExpression>, WString> pair)
						{
							return Pair<WString, Ptr<WfExpression>>(pair.value, pair.key);
						})
					);

				CopyFrom(
					reversedClassExprs,
					From(classExprs)
						.Select([](Pair<Ptr<WfNewInterfaceExpression>, WString> pair)
						{
							return Pair<WString, Ptr<WfNewInterfaceExpression>>(pair.value, pair.key);
						})
					);
			}

			void WfCppConfig::WriteHeader_Global(stream::StreamWriter& writer)
			{
				Dictionary<WString, Ptr<WfExpression>> reversedLambdaExprs;
				Dictionary<WString, Ptr<WfNewInterfaceExpression>> reversedClassExprs;
				SortClosure(reversedLambdaExprs, reversedClassExprs);

				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"Global Variables and Functions");
				writer.WriteLine(L"***********************************************************************/");
				writer.WriteLine(L"");
				writer.WriteLine(L"namespace " + assemblyNamespace);
				writer.WriteLine(L"{");
				writer.WriteLine(L"\tclass " + assemblyName);
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\tpublic:");
				if (varDecls.Count() > 0)
				{
					writer.WriteLine(L"");
					FOREACH(Ptr<WfVariableDeclaration>, decl, varDecls)
					{
						auto scope = manager->nodeScopes[decl.Obj()].Obj();
						auto symbol = scope->symbols[decl->name.value][0];
						auto typeInfo = symbol->typeInfo;
						writer.WriteString(L"\t\t" + ConvertType(typeInfo.Obj()) + L" " + ConvertName(decl->name.value));
						auto defaultValue = DefaultValue(typeInfo.Obj());
						if (defaultValue != L"")
						{
							writer.WriteString(L" = ");
							writer.WriteString(defaultValue);
						}
						writer.WriteLine(L";");
					}
				}
				if (funcDecls.Count() > 0)
				{
					writer.WriteLine(L"");
					FOREACH(Ptr<WfFunctionDeclaration>, decl, funcDecls)
					{
						writer.WriteString(L"\t\t");
						WriteFunctionHeader(writer, decl, ConvertName(decl->name.value), true);
						writer.WriteLine(L";");
					}
				}
				writer.WriteLine(L"");
				writer.WriteLine(L"\t\tstatic " + assemblyName + L"& Instance();");
				writer.WriteLine(L"\t};");

				if (reversedLambdaExprs.Count() + reversedClassExprs.Count() > 0)
				{
					writer.WriteLine(L"");
					writer.WriteLine(L"/***********************************************************************");
					writer.WriteLine(L"Closures");
					writer.WriteLine(L"***********************************************************************/");

					FOREACH(Ptr<WfExpression>, expr, reversedLambdaExprs.Values())
					{
						writer.WriteLine(L"");
						WriteHeader_LambdaExprDecl(writer, expr);
					}

					FOREACH(Ptr<WfNewInterfaceExpression>, expr, reversedClassExprs.Values())
					{
						writer.WriteLine(L"");
						WriteHeader_ClassExprDecl(writer, expr);
					}
				}

				writer.WriteLine(L"}");
			}

			void WfCppConfig::WriteCpp_Global(stream::StreamWriter& writer)
			{
				Dictionary<WString, Ptr<WfExpression>> reversedLambdaExprs;
				Dictionary<WString, Ptr<WfNewInterfaceExpression>> reversedClassExprs;
				SortClosure(reversedLambdaExprs, reversedClassExprs);

				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"Global Variables");
				writer.WriteLine(L"***********************************************************************/");
				writer.WriteLine(L"");

				WString storageName = assemblyNamespace + L"_" + assemblyName;
				writer.WriteLine(L"BEGIN_GLOBAL_STORAGE_CLASS(" + storageName + L")");
				writer.WriteLine(L"\t" + assemblyNamespace + L"::" + assemblyName + L" instance;");
				writer.WriteLine(L"\tINITIALIZE_GLOBAL_STORAGE_CLASS");
				if (varDecls.Count() > 0)
				{
					writer.WriteLine(L"");
					FOREACH(Ptr<WfVariableDeclaration>, decl, varDecls)
					{
						auto scope = manager->nodeScopes[decl.Obj()].Obj();
						auto symbol = scope->symbols[decl->name.value][0];
						auto typeInfo = symbol->typeInfo;
						if (decl->expression)
						{
							writer.WriteString(L"\t\tinstance." + ConvertName(decl->name.value) + L" = ");
							GenerateExpression(this, writer, decl->expression, typeInfo.Obj());
							writer.WriteLine(L";");
						}
					}
				}
				writer.WriteLine(L"\tFINALIZE_GLOBAL_STORAGE_CLASS");
				if (varDecls.Count() > 0)
				{
					writer.WriteLine(L"");
					FOREACH(Ptr<WfVariableDeclaration>, decl, varDecls)
					{
						auto scope = manager->nodeScopes[decl.Obj()].Obj();
						auto symbol = scope->symbols[decl->name.value][0];
						auto typeInfo = symbol->typeInfo;
						switch (typeInfo->GetDecorator())
						{
						case ITypeInfo::RawPtr:
						case ITypeInfo::SharedPtr:
							writer.WriteLine(L"\t\tinstance." + ConvertName(decl->name.value) + L" = nullptr;");
							break;
						case ITypeInfo::Nullable:
							writer.WriteString(L"\t\tinstance." + ConvertName(decl->name.value) + L" = ");
							ConvertType(typeInfo.Obj());
							writer.WriteLine(L"();");
							break;
						default:
							if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<WString>())
							{
								writer.WriteLine(L"\t\tinstance." + ConvertName(decl->name.value) + L" = ::vl::WString::Empty;");
							}
							else if (typeInfo->GetTypeDescriptor() == description::GetTypeDescriptor<Value>())
							{
								writer.WriteLine(L"\t\tinstance." + ConvertName(decl->name.value) + L" = ::vl::reflection::description::Value();");
							}
						}
					}
				}
				writer.WriteLine(L"END_GLOBAL_STORAGE_CLASS(" + storageName + L")");
				writer.WriteLine(L"");

				writer.WriteString(L"namespace ");
				writer.WriteLine(assemblyNamespace);
				writer.WriteLine(L"{");

				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"Global Functions");
				writer.WriteLine(L"***********************************************************************/");

				FOREACH(Ptr<WfFunctionDeclaration>, decl, funcDecls)
				{
					writer.WriteLine(L"");
					writer.WriteString(L"\t");
					auto returnType = WriteFunctionHeader(writer, decl, assemblyName + L"::" + ConvertName(decl->name.value), true);
					writer.WriteLine(L"");
					WriteFunctionBody(writer, decl->statement, L"\t", returnType);
				}

				writer.WriteLine(L"");
				writer.WriteLine(L"\t" + assemblyName + L"& " + assemblyName + L"::Instance()");
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\t\treturn Get" + storageName + L"().instance;");
				writer.WriteLine(L"\t}");

				if (reversedLambdaExprs.Count() + reversedClassExprs.Count() > 0)
				{
					writer.WriteLine(L"");
					writer.WriteLine(L"/***********************************************************************");
					writer.WriteLine(L"Closures");
					writer.WriteLine(L"***********************************************************************/");

					FOREACH(Ptr<WfExpression>, expr, reversedLambdaExprs.Values())
					{
						writer.WriteLine(L"");
						writer.WriteLine(L"\t//-------------------------------------------------------------------");
						writer.WriteLine(L"");
						WriteCpp_LambdaExprImpl(writer, expr);
					}

					if (reversedClassExprs.Count() > 0)
					{
						writer.WriteLine(L"");
						FOREACH(Ptr<WfNewInterfaceExpression>, expr, reversedClassExprs.Values())
						{
							writer.WriteLine(L"\t//-------------------------------------------------------------------");
							writer.WriteLine(L"");
							WriteCpp_ClassExprImpl(writer, expr);
						}
					}
				}

				writer.WriteLine(L"}");
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITELAMBDA.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace parsing;
			using namespace analyzer;
			using namespace reflection;
			using namespace reflection::description;

/***********************************************************************
WfCppConfig::CollectClosureInfo
***********************************************************************/

			class WfCppCollectClassExprInfoVisitor : public empty_visitor::DeclarationVisitor
			{
			public:
				WfCppConfig*							config;
				vint									variableCount = 0;
				Ptr<analyzer::WfLexicalCapture>			capture;

				WfCppCollectClassExprInfoVisitor(WfCppConfig* _config)
					:config(_config)
				{
				}

				void Visit(WfVariableDeclaration* node)override
				{
					variableCount++;
				}

				void Dispatch(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				void Execute(WfNewInterfaceExpression* node)
				{
					capture = config->manager->lambdaCaptures[node];
					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						memberDecl->Accept(this);
					}
				}
			};

			Ptr<WfCppConfig::ClosureInfo> WfCppConfig::CollectClosureInfo(Ptr<WfExpression> closure)
			{
				using SymbolPair = Pair<WString, Ptr<analyzer::WfLexicalSymbol>>;

				auto info = MakePtr<ClosureInfo>();
				WfLexicalScope* scope = nullptr;

				if (auto ordered = closure.Cast<WfOrderedLambdaExpression>())
				{
					// stable symbol order by sorting them by name
					CopyFrom(
						info->symbols,
						From(manager->lambdaCaptures[ordered.Obj()]->symbols)
							.Select([](Ptr<WfLexicalSymbol> symbol)
							{
								return SymbolPair(symbol->name, symbol);
							})
						);
					scope = manager->nodeScopes[ordered.Obj()].Obj();
				}
				else if (auto funcExpr = closure.Cast<WfFunctionExpression>())
				{
					// stable symbol order by sorting them by name
					CopyFrom(
						info->symbols,
						From(manager->lambdaCaptures[funcExpr->function.Obj()]->symbols)
							.Select([](Ptr<WfLexicalSymbol> symbol)
							{
								return SymbolPair(symbol->name, symbol);
							})
						);
					scope = manager->nodeScopes[funcExpr->function.Obj()].Obj();
				}
				else if (auto classExpr = closure.Cast<WfNewInterfaceExpression>())
				{
					WfCppCollectClassExprInfoVisitor visitor(this);
					visitor.Execute(classExpr.Obj());

					if (visitor.capture)
					{
						// stable symbol order by sorting them by name
						CopyFrom(
							info->symbols,
							From(visitor.capture->symbols)
								.Skip(visitor.variableCount)
								.Select([](Ptr<WfLexicalSymbol> symbol)
								{
									return SymbolPair(symbol->name, symbol);
								})
							);

						CopyFrom(
							info->ctorArgumentSymbols,
							From(visitor.capture->ctorArgumentSymbols)
								.Select([](Ptr<WfLexicalSymbol> symbol)
								{
									return SymbolPair(symbol->name, symbol);
								})
							);
					}

					scope = manager->nodeScopes[classExpr.Obj()].Obj();
				}

				Ptr<WfLexicalFunctionConfig> methodConfig;
				while (scope)
				{
					if (scope->typeOfThisExpr)
					{
						if (methodConfig)
						{
							info->thisTypes.Add(scope->typeOfThisExpr);
							if (!methodConfig->parentThisAccessable)
							{
								break;
							}
							methodConfig = nullptr;
						}
					}

					if (scope->functionConfig)
					{
						if (scope->functionConfig->thisAccessable)
						{
							methodConfig = scope->functionConfig;
						}
					}
					scope = scope->parentScope.Obj();
				}

				return info;
			}

/***********************************************************************
WfCppConfig::WriteCpp
***********************************************************************/

			void WfCppConfig::WriteHeader_ClosurePreDecl(stream::StreamWriter& writer, Ptr<WfExpression> closure)
			{
				auto info = closureInfos[closure.Obj()];
				writer.WriteString(L"\t");
				if (closure.Cast<WfNewInterfaceExpression>())
				{
					writer.WriteString(L"class ");
				}
				else
				{
					writer.WriteString(L"struct ");
				}
				writer.WriteString(info->lambdaClassName);
				writer.WriteLine(L";");
			}

			void WfCppConfig::WriteHeader_LambdaExprDecl(stream::StreamWriter& writer, Ptr<WfExpression> lambda)
			{
				if (auto ordered = lambda.Cast<WfOrderedLambdaExpression>())
				{
					auto name = lambdaExprs[lambda.Obj()];
					writer.WriteLine(L"\tstruct " + name);
					writer.WriteLine(L"\t{");

					if (WriteCpp_ClosureMembers(writer, lambda))
					{
						writer.WriteLine(L"");
					}
					writer.WriteString(L"\t\t");
					WriteCpp_ClosureCtor(writer, lambda, name);
					writer.WriteLine(L";");
					writer.WriteLine(L"");

					writer.WriteString(L"\t\t");
					WriteFunctionHeader(writer, ordered, L"operator()", true);
					writer.WriteLine(L" const;");
					writer.WriteLine(L"\t};");
				}
				else if (auto funcExpr = lambda.Cast<WfFunctionExpression>())
				{
					auto name = lambdaExprs[lambda.Obj()];
					writer.WriteLine(L"\tstruct " + name);
					writer.WriteLine(L"\t{");

					if (WriteCpp_ClosureMembers(writer, lambda))
					{
						writer.WriteLine(L"");
					}
					writer.WriteString(L"\t\t");
					WriteCpp_ClosureCtor(writer, lambda, name);
					writer.WriteLine(L";");
					writer.WriteLine(L"");

					writer.WriteString(L"\t\t");
					WriteFunctionHeader(writer, funcExpr, L"operator()", true);
					writer.WriteLine(L" const;");
					writer.WriteLine(L"\t};");
				}
			}

			void WfCppConfig::WriteHeader_ClassExprDecl(stream::StreamWriter& writer, Ptr<WfNewInterfaceExpression> lambda)
			{
				auto result = manager->expressionResolvings[lambda.Obj()];
				auto td = result.constructorInfo->GetOwnerTypeDescriptor();
				auto name = classExprs[lambda.Obj()];
				writer.WriteLine(L"\tclass " + name + L" : public ::vl::Object, public virtual " + ConvertType(td));
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\tpublic:");

				if (WriteCpp_ClosureMembers(writer, lambda))
				{
					writer.WriteLine(L"");
				}
				writer.WriteString(L"\t\t");
				WriteCpp_ClosureCtor(writer, lambda, name);
				writer.WriteLine(L";");
				writer.WriteLine(L"");

				FOREACH(Ptr<WfDeclaration>, memberDecl, lambda->declarations)
				{
					GenerateClassMemberDecl(this, writer, name, memberDecl, L"\t\t", true);
				}
				writer.WriteLine(L"\t};");
			}

			bool WfCppConfig::WriteCpp_ClosureMembers(stream::StreamWriter& writer, Ptr<WfExpression> closure)
			{
				auto info = closureInfos[closure.Obj()];

				FOREACH(Ptr<WfLexicalSymbol>, symbol, info->symbols.Values())
				{
					writer.WriteString(L"\t\t");
					writer.WriteString(ConvertType(symbol->typeInfo.Obj()));
					writer.WriteString(L" ");
					writer.WriteString(ConvertName(symbol->name));
					writer.WriteLine(L";");
				}

				FOREACH_INDEXER(ITypeDescriptor*, thisType, index, info->thisTypes)
				{
					auto typeInfo = MakePtr<RawPtrTypeInfo>(MakePtr<TypeDescriptorTypeInfo>(thisType, TypeInfoHint::Normal));

					writer.WriteString(L"\t\t");
					writer.WriteString(ConvertType(typeInfo.Obj()));
					writer.WriteString(L" ");
					writer.WriteString(L"__vwsnthis_" + itow(index));
					writer.WriteLine(L";");
				}

				return info->symbols.Count() + info->thisTypes.Count() > 0;
			}

			void WfCppConfig::WriteCpp_ClosureCtor(stream::StreamWriter& writer, Ptr<WfExpression> closure, const WString& name)
			{
				auto info = closureInfos[closure.Obj()];

				writer.WriteString(name);
				writer.WriteString(L"(");

				vint argumentIndex = 0;

				FOREACH_INDEXER(Ptr<WfLexicalSymbol>, symbol, index, From(info->symbols.Values()).Concat(info->ctorArgumentSymbols.Values()))
				{
					if (argumentIndex++ > 0)
					{
						writer.WriteString(L", ");
					}
					writer.WriteString(ConvertType(symbol->typeInfo.Obj()));
					writer.WriteString(L" __vwsnctor_");
					writer.WriteString(ConvertName(symbol->name));
				}

				FOREACH_INDEXER(ITypeDescriptor*, thisType, index, info->thisTypes)
				{
					auto typeInfo = MakePtr<RawPtrTypeInfo>(MakePtr<TypeDescriptorTypeInfo>(thisType, TypeInfoHint::Normal));

					if (argumentIndex++ > 0)
					{
						writer.WriteString(L", ");
					}
					writer.WriteString(ConvertType(typeInfo.Obj()));
					writer.WriteString(L" __vwsnctorthis_" + itow(index));
				}

				writer.WriteString(L")");
			}

			void WfCppConfig::WriteCpp_ClosureCtorInitList(stream::StreamWriter& writer, Ptr<WfExpression> closure)
			{
				auto info = closureInfos[closure.Obj()];

				FOREACH_INDEXER(Ptr<WfLexicalSymbol>, symbol, index, info->symbols.Values())
				{
					if (index > 0)
					{
						writer.WriteString(L"\t\t, ");
					}
					else
					{
						writer.WriteString(L"\t\t:");
					}
					writer.WriteString(ConvertName(symbol->name));
					writer.WriteString(L"(__vwsnctor_");
					writer.WriteString(ConvertName(symbol->name));
					writer.WriteLine(L")");
				}

				FOREACH_INDEXER(ITypeDescriptor*, thisType, index, info->thisTypes)
				{
					if (index > 0 || info->symbols.Count() > 0)
					{
						writer.WriteString(L"\t\t, ");
					}
					else
					{
						writer.WriteString(L"\t\t:");
					}
					writer.WriteString(L"__vwsnthis_" + itow(index));
					writer.WriteString(L"(__vwsnctorthis_" + itow(index));
					writer.WriteLine(L")");
				}
			}

			void WfCppConfig::WriteCpp_LambdaExprImpl(stream::StreamWriter& writer, Ptr<WfExpression> lambda)
			{
				if (auto ordered = lambda.Cast<WfOrderedLambdaExpression>())
				{
					auto name = lambdaExprs[lambda.Obj()];

					writer.WriteString(L"\t");
					WriteCpp_ClosureCtor(writer, lambda, name + L"::" + name);
					writer.WriteLine(L"");
					WriteCpp_ClosureCtorInitList(writer, lambda);
					writer.WriteLine(L"\t{");
					writer.WriteLine(L"\t}");
					writer.WriteLine(L"");

					writer.WriteString(L"\t");
					auto returnType = WriteFunctionHeader(writer, ordered, name + L"::operator()", true);
					writer.WriteLine(L" const");
					writer.WriteLine(L"\t{");
					WriteFunctionBody(writer, ordered->body, L"\t\t", returnType);
					writer.WriteLine(L"\t}");
				}
				else if (auto funcExpr = lambda.Cast<WfFunctionExpression>())
				{
					auto name = lambdaExprs[lambda.Obj()];

					writer.WriteString(L"\t");
					WriteCpp_ClosureCtor(writer, lambda, name + L"::" + name);
					writer.WriteLine(L"");
					WriteCpp_ClosureCtorInitList(writer, lambda);
					writer.WriteLine(L"\t{");
					writer.WriteLine(L"\t}");
					writer.WriteLine(L"");

					writer.WriteString(L"\t");
					auto returnType = WriteFunctionHeader(writer, funcExpr, name + L"::operator()", true);
					writer.WriteLine(L" const");
					WriteFunctionBody(writer, funcExpr->function->statement, L"\t", returnType);
				}
			}

			class WriteCpp_ClassExprImpl_InitFieldVisitor
				: public empty_visitor::DeclarationVisitor
			{
			public:
				WfCppConfig*						config;
				stream::StreamWriter&				writer;

				WriteCpp_ClassExprImpl_InitFieldVisitor(WfCppConfig* _config, stream::StreamWriter& _writer)
					:config(_config)
					, writer(_writer)
				{
				}

				void Dispatch(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
					if (node->expression)
					{
						auto scope = config->manager->nodeScopes[node].Obj();
						auto symbol = scope->symbols[node->name.value][0];
						auto typeInfo = symbol->typeInfo;
						writer.WriteString(L"\t\tthis->");
						writer.WriteString(config->ConvertName(node->name.value));
						writer.WriteString(L" = ");
						GenerateExpression(config, writer, node->expression, typeInfo.Obj());
						writer.WriteLine(L";");
					}
				}
			};

			void WfCppConfig::WriteCpp_ClassExprImpl(stream::StreamWriter& writer, Ptr<WfNewInterfaceExpression> lambda)
			{
				auto name = classExprs[lambda.Obj()];

				writer.WriteString(L"\t");
				WriteCpp_ClosureCtor(writer, lambda, name + L"::" + name);
				writer.WriteLine(L"");
				WriteCpp_ClosureCtorInitList(writer, lambda);
				writer.WriteLine(L"\t{");

				{
					WriteCpp_ClassExprImpl_InitFieldVisitor visitor(this, writer);
					FOREACH(Ptr<WfDeclaration>, memberDecl, lambda->declarations)
					{
						memberDecl->Accept(&visitor);
					}
				}

				writer.WriteLine(L"\t}");
				writer.WriteLine(L"");

				WString classFullName = L"::" + assemblyNamespace + L"::" + name;
				FOREACH(Ptr<WfDeclaration>, memberDecl, lambda->declarations)
				{
					if (GenerateClassMemberImpl(this, writer, name, name, classFullName, memberDecl, L"\t"))
					{
						writer.WriteLine(L"");
					}
				}
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITEREFLECTION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;

			void LoadTypes(WfCppConfig* config, List<ITypeDescriptor*>& tds)
			{
				CopyFrom(
					tds,
					From(config->manager->declarationTypes.Values())
						.OrderBy([](Ptr<ITypeDescriptor> a, Ptr<ITypeDescriptor> b)
						{
							return WString::Compare(a->GetTypeName(), b->GetTypeName());
						})
						.Select([](Ptr<ITypeDescriptor> td)
						{
							return td.Obj();
						})
					);
			}

			void WfCppConfig::WriteHeader_Reflection(stream::StreamWriter& writer)
			{
				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"Reflection");
				writer.WriteLine(L"***********************************************************************/");
				writer.WriteLine(L"");
				List<ITypeDescriptor*> tds;
				LoadTypes(this, tds);

				writer.WriteLine(L"namespace vl");
				writer.WriteLine(L"{");
				writer.WriteLine(L"\tnamespace reflection");
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\t\tnamespace description");
				writer.WriteLine(L"\t\t{");
				writer.WriteLine(L"#ifndef VCZH_DEBUG_NO_REFLECTION");

				FOREACH(ITypeDescriptor*, td, tds)
				{
					writer.WriteString(L"\t\t\tDECL_TYPE_INFO(");
					writer.WriteString(ConvertType(td));
					writer.WriteLine(L")");
				}

				List<ITypeDescriptor*> tdInterfaces;
				CopyFrom(
					tdInterfaces,
					From(tds)
						.Where([](ITypeDescriptor* td)
						{
							return td->GetTypeDescriptorFlags() == TypeDescriptorFlags::Interface;
						})
					);
				{
					vint processed = 0;
					while (processed < tdInterfaces.Count())
					{
						vint count = tdInterfaces.Count();
						for (vint i = processed; i < count; i++)
						{
							auto td = tdInterfaces[i];
							if (Range<vint>(0, td->GetBaseTypeDescriptorCount())
								.All([&](vint baseIndex)
								{
									return tdInterfaces.IndexOf(td->GetBaseTypeDescriptor(baseIndex)) < processed;
								}))
							{
								tdInterfaces.RemoveAt(i);
								tdInterfaces.Insert(processed++, td);
							}
						}
					}
				}

				if (tdInterfaces.Count() > 0)
				{
					FOREACH(ITypeDescriptor*, td, tdInterfaces)
					{
						List<ITypeDescriptor*> baseTds;
						CopyFrom(
							baseTds,
							Range<vint>(0, td->GetBaseTypeDescriptorCount())
								.Select([&](vint index)
								{
									return td->GetBaseTypeDescriptor(index);
								})
								.Where([&](ITypeDescriptor* baseTd)
								{
									return baseTd->GetTypeDescriptorFlags() != TypeDescriptorFlags::IDescriptable;
								})
							);

						writer.WriteLine(L"");
						if (baseTds.Count() > 0)
						{
							writer.WriteString(L"\t\t\tBEGIN_INTERFACE_PROXY_SHAREDPTR(");
							writer.WriteString(ConvertType(td));
							FOREACH(ITypeDescriptor*, baseTd, baseTds)
							{
								writer.WriteString(L", ");
								writer.WriteString(ConvertType(baseTd));
							}
							writer.WriteLine(L")");
						}
						else
						{
							writer.WriteString(L"\t\t\tBEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(");
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");
						}

						vint methodGroupCount = td->GetMethodGroupCount();
						for (vint i = 0; i < methodGroupCount; i++)
						{
							auto methodGroup = td->GetMethodGroup(i);
							vint methodCount = methodGroup->GetMethodCount();
							for (vint j = 0; j < methodCount; j++)
							{
								auto methodInfo = methodGroup->GetMethod(j);
								if (!methodInfo->IsStatic())
								{
									writer.WriteString(L"\t\t\t\t");
									WriteFunctionHeader(writer, methodInfo, ConvertName(methodInfo->GetName()), true);
									writer.WriteLine(L" override");
									writer.WriteLine(L"\t\t\t\t{");

									if (methodInfo->GetReturn()->GetTypeDescriptor() == description::GetTypeDescriptor<void>())
									{
										writer.WriteString(L"\t\t\t\t\tINVOKE_INTERFACE_PROXY");
									}
									else
									{
										writer.WriteString(L"\t\t\t\t\tINVOKEGET_INTERFACE_PROXY");
									}

									if (methodInfo->GetParameterCount() > 0)
									{
										writer.WriteString(L"(");
										writer.WriteString(ConvertName(methodInfo->GetName()));
										vint parameterCount = methodInfo->GetParameterCount();
										for (vint k = 0; k < parameterCount; k++)
										{
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(methodInfo->GetParameter(k)->GetName()));
										}
										writer.WriteLine(L");");
									}
									else
									{
										writer.WriteString(L"_NOPARAMS(");
										writer.WriteString(ConvertName(methodInfo->GetName()));
										writer.WriteLine(L");");
									}

									writer.WriteLine(L"\t\t\t\t}");
								}
							}
						}

						writer.WriteString(L"\t\t\tEND_INTERFACE_PROXY(");
						writer.WriteString(ConvertType(td));
						writer.WriteLine(L")");
					}
				}

				writer.WriteLine(L"#endif");
				writer.WriteLine(L"");

				writer.WriteString(L"\t\t\textern bool Load");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"Types();");
				writer.WriteLine(L"\t\t}");
				writer.WriteLine(L"\t}");
				writer.WriteLine(L"}");
			}

			void WfCppConfig::WriteCpp_Reflection(stream::StreamWriter& writer)
			{
				writer.WriteLine(L"/***********************************************************************");
				writer.WriteLine(L"Reflection");
				writer.WriteLine(L"***********************************************************************/");
				writer.WriteLine(L"");
				List<ITypeDescriptor*> tds;
				LoadTypes(this, tds);

				writer.WriteLine(L"namespace vl");
				writer.WriteLine(L"{");
				writer.WriteLine(L"\tnamespace reflection");
				writer.WriteLine(L"\t{");
				writer.WriteLine(L"\t\tnamespace description");
				writer.WriteLine(L"\t\t{");
				writer.WriteLine(L"#ifndef VCZH_DEBUG_NO_REFLECTION");

				FOREACH(ITypeDescriptor*, td, tds)
				{
					writer.WriteString(L"\t\t\tIMPL_CPP_TYPE_INFO(");
					WString type = ConvertType(td);
					if (type.Length() > 2 && type.Sub(0, 2) == L"::")
					{
						type = type.Sub(2, type.Length() - 2);
					}
					writer.WriteString(type);
					writer.WriteLine(L")");
				}
				writer.WriteLine(L"");

				writer.WriteLine(L"#define _ ,");
				FOREACH(ITypeDescriptor*, td, tds)
				{
					switch (td->GetTypeDescriptorFlags())
					{
					case TypeDescriptorFlags::NormalEnum:
					case TypeDescriptorFlags::FlagEnum:
						{
							writer.WriteString(L"\t\t\tBEGIN_ENUM_ITEM");
							if (td->GetTypeDescriptorFlags() == TypeDescriptorFlags::FlagEnum)
							{
								writer.WriteString(L"_MERGABLE");
							}
							writer.WriteString(L"(");
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");

							auto enumType = td->GetEnumType();
							vint count = enumType->GetItemCount();
							for (vint i = 0; i < count; i++)
							{
								writer.WriteString(L"\t\t\t\tENUM_CLASS_ITEM(");
								writer.WriteString(ConvertName(enumType->GetItemName(i)));
								writer.WriteLine(L")");
							}

							writer.WriteString(L"\t\t\tEND_ENUM_ITEM(");
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");
						}
						break;
					case TypeDescriptorFlags::Struct:
						{
							writer.WriteString(L"\t\t\tBEGIN_STRUCT_MEMBER(");
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");

							vint count = td->GetPropertyCount();
							for (vint i = 0; i < count; i++)
							{
								writer.WriteString(L"\t\t\t\tSTRUCT_MEMBER(");
								writer.WriteString(ConvertName(td->GetProperty(i)->GetName()));
								writer.WriteLine(L")");
							}

							writer.WriteString(L"\t\t\tEND_STRUCT_MEMBER(");
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");
						}
						break;
					case TypeDescriptorFlags::Interface:
					case TypeDescriptorFlags::Class:
						{
							if (td->GetTypeDescriptorFlags() == TypeDescriptorFlags::Interface)
							{
								writer.WriteString(L"\t\t\tBEGIN_INTERFACE_MEMBER(");
							}
							else
							{
								writer.WriteString(L"\t\t\tBEGIN_CLASS_MEMBER(");
							}
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");

							if (td->GetTypeDescriptorFlags() == TypeDescriptorFlags::Class)
							{
								auto methodGroup = td->GetConstructorGroup();
								vint methodCount = methodGroup->GetMethodCount();
								for (vint j = 0; j < methodCount; j++)
								{
									auto methodInfo = methodGroup->GetMethod(j);
									vint parameterCount = methodInfo->GetParameterCount();

									writer.WriteString(L"\t\t\t\tCLASS_MEMBER_CONSTRUCTOR(");
									writer.WriteString(ConvertType(methodInfo->GetReturn()));
									writer.WriteString(L"(");
									for (vint k = 0; k < parameterCount; k++)
									{
										if (k > 0)
										{
											writer.WriteString(L", ");
										}
										writer.WriteString(ConvertArgumentType(methodInfo->GetParameter(k)->GetType()));
									}
									writer.WriteString(L")");

									if (parameterCount > 0)
									{
										writer.WriteString(L", {");
										for (vint k = 0; k < parameterCount; k++)
										{
											if (k > 0)
											{
												writer.WriteString(L" _");
											}
											writer.WriteString(L" L\"");
											writer.WriteString(ConvertName(methodInfo->GetParameter(k)->GetName()));
											writer.WriteString(L"\"");
										}
										writer.WriteLine(L" })");
									}
									else
									{
										writer.WriteLine(L", NO_PARAMETER)");
									}
								}
							}

							vint methodGroupCount = td->GetMethodGroupCount();
							for (vint i = 0; i < methodGroupCount; i++)
							{
								auto methodGroup = td->GetMethodGroup(i);
								vint methodCount = methodGroup->GetMethodCount();
								for (vint j = 0; j < methodCount; j++)
								{
									auto methodInfo = methodGroup->GetMethod(j);
									if (methodInfo->IsStatic())
									{
										writer.WriteString(L"\t\t\t\tCLASS_MEMBER_STATIC_METHOD");
									}
									else
									{
										writer.WriteString(L"\t\t\t\tCLASS_MEMBER_METHOD");
									}
									if (methodCount > 1)
									{
										writer.WriteString(L"_OVERLOAD");
									}
									writer.WriteString(L"(");
									writer.WriteString(ConvertName(methodInfo->GetName()));

									vint parameterCount = methodInfo->GetParameterCount();
									if (parameterCount > 0)
									{
										writer.WriteString(L", {");
										for (vint k = 0; k < parameterCount; k++)
										{
											if (k > 0)
											{
												writer.WriteString(L" _");
											}
											writer.WriteString(L" L\"");
											writer.WriteString(ConvertName(methodInfo->GetParameter(k)->GetName()));
											writer.WriteString(L"\"");
										}
										writer.WriteString(L" }");
									}
									else
									{
										writer.WriteString(L", NO_PARAMETER");
									}
									if (methodCount > 1)
									{
										writer.WriteString(L", ");
										auto typeDecorator = methodInfo->IsStatic() ? WString(L"(*)", false) : L"(" + ConvertType(td) + L"::*)";
										writer.WriteString(ConvertFunctionType(methodInfo, typeDecorator));
									}
									writer.WriteLine(L")");
								}
							}

							vint eventCount = td->GetEventCount();
							for (vint i = 0; i < eventCount; i++)
							{
								auto eventInfo = td->GetEvent(i);
								writer.WriteString(L"\t\t\t\tCLASS_MEMBER_EVENT(");
								writer.WriteString(ConvertName(eventInfo->GetName()));
								writer.WriteLine(L")");
							}

							vint propertyCount = td->GetPropertyCount();
							for (vint i = 0; i < propertyCount; i++)
							{
								auto propertyInfo = td->GetProperty(i);
								if (auto getter = propertyInfo->GetGetter())
								{
									if (auto eventInfo = propertyInfo->GetValueChangedEvent())
									{
										if (auto setter = propertyInfo->GetSetter())
										{
											writer.WriteString(L"\t\t\t\tCLASS_MEMBER_PROPERTY_EVENT(");
											writer.WriteString(ConvertName(propertyInfo->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(getter->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(setter->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(eventInfo->GetName()));
											writer.WriteLine(L")");
										}
										else
										{
											writer.WriteString(L"\t\t\t\tCLASS_MEMBER_PROPERTY_EVENT_READONLY(");
											writer.WriteString(ConvertName(propertyInfo->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(getter->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(eventInfo->GetName()));
											writer.WriteLine(L")");
										}
									}
									else
									{
										if (auto setter = propertyInfo->GetSetter())
										{
											writer.WriteString(L"\t\t\t\tCLASS_MEMBER_PROPERTY(");
											writer.WriteString(ConvertName(propertyInfo->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(getter->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(setter->GetName()));
											writer.WriteLine(L")");
										}
										else
										{
											writer.WriteString(L"\t\t\t\tCLASS_MEMBER_PROPERTY_READONLY(");
											writer.WriteString(ConvertName(propertyInfo->GetName()));
											writer.WriteString(L", ");
											writer.WriteString(ConvertName(getter->GetName()));
											writer.WriteLine(L")");
										}
									}
								}
								else
								{
									writer.WriteString(L"\t\t\t\tCLASS_MEMBER_FIELD(");
									writer.WriteString(ConvertName(propertyInfo->GetName()));
									writer.WriteLine(L")");
								}
							}

							if (td->GetTypeDescriptorFlags() == TypeDescriptorFlags::Interface)
							{
								writer.WriteString(L"\t\t\tEND_INTERFACE_MEMBER(");
							}
							else
							{
								writer.WriteString(L"\t\t\tEND_CLASS_MEMBER(");
							}
							writer.WriteString(ConvertType(td));
							writer.WriteLine(L")");
						}
						break;
					default:;
					}
					writer.WriteLine(L"");
				}
				writer.WriteLine(L"#undef _");

				writer.WriteString(L"\t\t\tclass ");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"TypeLoader : public Object, public ITypeLoader");
				writer.WriteLine(L"\t\t\t{");
				writer.WriteLine(L"\t\t\tpublic:");
				writer.WriteLine(L"\t\t\t\tvoid Load(ITypeManager* manager)");
				writer.WriteLine(L"\t\t\t\t{");

				FOREACH(ITypeDescriptor*, td, tds)
				{
					writer.WriteString(L"\t\t\t\t\tADD_TYPE_INFO(");
					writer.WriteString(ConvertType(td));
					writer.WriteLine(L")");
				}
				writer.WriteLine(L"\t\t\t\t}");
				writer.WriteLine(L"");
				writer.WriteLine(L"\t\t\t\tvoid Unload(ITypeManager* manager)");
				writer.WriteLine(L"\t\t\t\t{");
				writer.WriteLine(L"\t\t\t\t}");
				writer.WriteLine(L"\t\t\t};");

				writer.WriteLine(L"#endif");
				writer.WriteLine(L"");

				writer.WriteString(L"\t\t\tbool Load");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"Types()");
				writer.WriteLine(L"\t\t\t{");
				writer.WriteLine(L"#ifndef VCZH_DEBUG_NO_REFLECTION");
				writer.WriteLine(L"\t\t\t\tif (auto manager = GetGlobalTypeManager())");
				writer.WriteLine(L"\t\t\t\t{");
				writer.WriteString(L"\t\t\t\t\treturn manager->AddTypeLoader(MakePtr<");
				writer.WriteString(assemblyName);
				writer.WriteLine(L"TypeLoader>());");
				writer.WriteLine(L"\t\t\t\t}");
				writer.WriteLine(L"#endif");
				writer.WriteLine(L"\t\t\t\treturn false;");
				writer.WriteLine(L"\t\t\t}");

				writer.WriteLine(L"\t\t}");
				writer.WriteLine(L"\t}");
				writer.WriteLine(L"}");
			}
		}
	}
}

/***********************************************************************
CPP\WFCPP_WRITESTRUCT.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace cppcodegen
		{
			using namespace collections;

			void WfCppConfig::WriteHeader_Struct(stream::StreamWriter& writer, Ptr<WfStructDeclaration> decl, const WString& name, const WString& prefix)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				writer.WriteLine(prefix + L"struct " + name);
				writer.WriteLine(prefix + L"{");
				FOREACH(Ptr<WfStructMember>, member, decl->members)
				{
					auto prop = td->GetPropertyByName(member->name.value, false);
					auto defaultValue = DefaultValue(prop->GetReturn());
					if (defaultValue != L"")
					{
						defaultValue = L" = " + defaultValue;
					}
					writer.WriteLine(prefix + L"\t" + ConvertType(prop->GetReturn()) + L" " + ConvertName(member->name.value) + defaultValue + L";");
				}
				writer.WriteLine(prefix + L"};");
			}

			void WfCppConfig::WriteHeader_StructOp(stream::StreamWriter& writer, Ptr<WfStructDeclaration> decl, const WString& name, const WString& prefix)
			{
				using opt = Tuple<const wchar_t*, const wchar_t*, const wchar_t*>;
				opt ops[] = {
					opt(L"==", L"false", L"true"),
					opt(L"!=", L"true", L"false")
				};
				for (auto op : ops)
				{
					writer.WriteString(prefix);
					writer.WriteString(L"inline bool operator");
					writer.WriteString(op.f0);
					writer.WriteString(L" (const ");
					writer.WriteString(name);
					writer.WriteString(L"& a, const ");
					writer.WriteString(name);
					writer.WriteLine(L"& b)");

					writer.WriteString(prefix);
					writer.WriteLine(L"{");

					FOREACH(Ptr<WfStructMember>, member, decl->members)
					{
						writer.WriteString(prefix);
						writer.WriteString(L"\tif (a.");
						writer.WriteString(ConvertName(member->name.value));
						writer.WriteString(L" != b.");
						writer.WriteString(ConvertName(member->name.value));
						writer.WriteString(L") return ");
						writer.WriteString(op.f1);
						writer.WriteLine(L";");
					}
					writer.WriteString(prefix);
					writer.WriteString(L"\treturn ");
					writer.WriteString(op.f2);
					writer.WriteLine(L";");

					writer.WriteString(prefix);
					writer.WriteLine(L"}");
				}
			}

			void WfCppConfig::WriteHeader_Struct(stream::StreamWriter& writer, Ptr<WfStructDeclaration> decl, collections::List<WString>& nss)
			{
				auto td = manager->declarationTypes[decl.Obj()].Obj();
				WString name;
				auto prefix = WriteNamespace(writer, CppGetFullName(td), nss, name);
				WriteHeader_Struct(writer, decl, name, prefix);
				WriteHeader_StructOp(writer, decl, name, prefix);
			}
		}
	}
}

/***********************************************************************
EMITTER\WFEMITTER.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace emitter
		{
			using namespace parsing;
			using namespace reflection::description;
			using namespace analyzer;
			using namespace runtime;

/***********************************************************************
WfAttributeEvaluator
***********************************************************************/

			WfAttributeEvaluator::WfAttributeEvaluator(analyzer::WfLexicalScopeManager* _manager)
				:manager(_manager)
			{
			}

			Ptr<WfAttribute> WfAttributeEvaluator::GetAttribute(collections::List<Ptr<WfAttribute>>& atts, const WString& category, const WString& name)
			{
				return From(GetAttributes(atts, category, name)).First(nullptr);
			}

			collections::LazyList<Ptr<WfAttribute>> WfAttributeEvaluator::GetAttributes(collections::List<Ptr<WfAttribute>>& atts, const WString& category, const WString& name)
			{
				return From(atts)
					.Where([=](Ptr<WfAttribute> att)
				{
					return att->category.value == category && att->name.value == name;
				});
			}

			Value WfAttributeEvaluator::GetAttributeValue(Ptr<WfAttribute> att)
			{
				if (!att->value)
				{
					return Value();
				}

				{
					vint index = attributeValues.Keys().IndexOf(att.Obj());
					if (index != -1)
					{
						return attributeValues.Values()[index];
					}
				}

				if (!attributeAssembly)
				{
					attributeAssembly = MakePtr<WfAssembly>();

					auto func = MakePtr<WfAssemblyFunction>();
					func->name = L"<get-attribute-value>";
					func->firstInstruction = 0;

					vint index = attributeAssembly->functions.Add(func);
					attributeAssembly->functionByName.Add(func->name, index);
				}

				attributeAssembly->insBeforeCodegen = MakePtr<WfInstructionDebugInfo>();
				attributeAssembly->insAfterCodegen = MakePtr<WfInstructionDebugInfo>();
				attributeAssembly->instructions.Clear();

				WfCodegenContext context(attributeAssembly, manager);
				{
					auto recorderBefore = new ParsingGeneratedLocationRecorder(context.nodePositionsBeforeCodegen);
					auto recorderAfter = new ParsingGeneratedLocationRecorder(context.nodePositionsAfterCodegen);
					auto recorderOriginal = new ParsingOriginalLocationRecorder(recorderBefore);
					auto recorderMultiple = new ParsingMultiplePrintNodeRecorder;
					recorderMultiple->AddRecorder(recorderOriginal);
					recorderMultiple->AddRecorder(recorderAfter);

					stream::MemoryStream memoryStream;
					{
						stream::StreamWriter streamWriter(memoryStream);
						ParsingWriter parsingWriter(streamWriter, recorderMultiple);
						WfPrint(att->value, L"", parsingWriter);
					}
				}
				auto typeInfo = manager->attributes[{att->category.value, att->name.value}];
				GenerateExpressionInstructions(context, att->value, typeInfo);
				attributeAssembly->instructions.Add(WfInstruction::Return());

				if (!attributeGlobalContext)
				{
					attributeGlobalContext = MakePtr<WfRuntimeGlobalContext>(attributeAssembly);
				}
				auto func = LoadFunction<Value()>(attributeGlobalContext, L"<get-attribute-value>");
				auto value = func();
				attributeValues.Add(att, value);
				return func();
			}

/***********************************************************************
WfCodegenFunctionContext
***********************************************************************/

			WfCodegenFunctionContext::WfCodegenFunctionContext()
			{
				scopeContextStack.Add(new WfCodegenScopeContext);
			}

			Ptr<WfCodegenScopeContext> WfCodegenFunctionContext::GetCurrentScopeContext()
			{
				return scopeContextStack[scopeContextStack.Count() - 1];
			}

			Ptr<WfCodegenScopeContext> WfCodegenFunctionContext::GetCurrentScopeContext(WfCodegenScopeType type)
			{
				for (vint i = scopeContextStack.Count() - 1; i >= 0; i--)
				{
					auto context = scopeContextStack[i];
					if (context->type == type)
					{
						return context;
					}
				}
				return 0;
			}

			Ptr<WfCodegenScopeContext> WfCodegenFunctionContext::PushScopeContext(WfCodegenScopeType type)
			{
				auto context = MakePtr<WfCodegenScopeContext>();
				context->type = type;
				scopeContextStack.Add(context);
				return context;
			}

			void WfCodegenFunctionContext::PopScopeContext()
			{
				scopeContextStack.RemoveAt(scopeContextStack.Count() - 1);
			}

/***********************************************************************
WfCodegenContext
***********************************************************************/

			WfCodegenContext::WfCodegenContext(Ptr<runtime::WfAssembly> _assembly, analyzer::WfLexicalScopeManager* _manager)
				:assembly(_assembly)
				, manager(_manager)
			{
			}

			vint WfCodegenContext::AddInstruction(parsing::ParsingTreeCustomBase* node, const runtime::WfInstruction& ins)
			{
				auto index = assembly->instructions.Add(ins);
				if (node)
				{
					assembly->insBeforeCodegen->instructionCodeMapping.Add(nodePositionsBeforeCodegen[node]);
					assembly->insAfterCodegen->instructionCodeMapping.Add(nodePositionsAfterCodegen[node]);
				}
				else
				{
					parsing::ParsingTextRange range;
					assembly->insBeforeCodegen->instructionCodeMapping.Add(range);
					assembly->insAfterCodegen->instructionCodeMapping.Add(range);
				}
				return index;
			}

			void WfCodegenContext::AddExitInstruction(parsing::ParsingTreeCustomBase* node, const runtime::WfInstruction& ins)
			{
				auto context = functionContext->GetCurrentScopeContext();
				context->exitInstructions.Add(ins);
				context->instructionCodeMappingBeforeCodegen.Add(nodePositionsBeforeCodegen[node]);
				context->instructionCodeMappingAfterCodegen.Add(nodePositionsAfterCodegen[node]);
			}

			void WfCodegenContext::ApplyExitInstructions(Ptr<WfCodegenScopeContext> scopeContext)
			{
				if (scopeContext->exitInstructions.Count() > 0)
				{
					CopyFrom(assembly->instructions, scopeContext->exitInstructions, true);
					CopyFrom(assembly->insBeforeCodegen->instructionCodeMapping, scopeContext->instructionCodeMappingBeforeCodegen, true);
					CopyFrom(assembly->insAfterCodegen->instructionCodeMapping, scopeContext->instructionCodeMappingAfterCodegen, true);
				}
			}

			vint WfCodegenContext::GetThisStackCount(analyzer::WfLexicalScope* scope)
			{
				vint count = 0;
				Ptr<WfLexicalFunctionConfig> firstConfig, methodConfig;
				while (scope)
				{
					if (scope->typeOfThisExpr)
					{
						if (methodConfig)
						{
							count++;
							if (!methodConfig->parentThisAccessable)
							{
								break;
							}
							methodConfig = nullptr;
						}
					}

					if (scope->functionConfig)
					{
						if (!firstConfig)
						{
							vint index = thisStackCounts.Keys().IndexOf(scope->functionConfig.Obj());
							if (index == -1)
							{
								firstConfig = scope->functionConfig;
							}
							else
							{
								return thisStackCounts.Values()[index];
							}
						}
						if (scope->functionConfig->thisAccessable)
						{
							methodConfig = scope->functionConfig;
						}
					}
					scope = scope->parentScope.Obj();
				}

				if (firstConfig)
				{
					thisStackCounts.Add(firstConfig, count);
				}
				return count;
			}
		}
	}
}

/***********************************************************************
EMITTER\WFEMITTER_ASSEMBLY.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace emitter
		{
			using namespace parsing;
			using namespace reflection::description;
			using namespace analyzer;
			using namespace runtime;
			using namespace typeimpl;

			typedef WfInstruction Ins;

#define INSTRUCTION(X) context.AddInstruction(node, X)

/***********************************************************************
GenerateTypeCastInstructions
***********************************************************************/

			void GenerateTypeCastInstructions(WfCodegenContext& context, Ptr<reflection::description::ITypeInfo> expectedType, bool strongCast, WfExpression* node)
			{
				if (expectedType->GetTypeDescriptor() != GetTypeDescriptor<Value>())
				{
					if (strongCast)
					{
						switch (expectedType->GetDecorator())
						{
						case ITypeInfo::RawPtr:
							INSTRUCTION(Ins::ConvertToType(Value::RawPtr, expectedType->GetTypeDescriptor()));
							break;
						case ITypeInfo::SharedPtr:
							INSTRUCTION(Ins::ConvertToType(Value::SharedPtr, expectedType->GetTypeDescriptor()));
							break;
						case ITypeInfo::Nullable:
						case ITypeInfo::TypeDescriptor:
						case ITypeInfo::Generic:
							INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, expectedType->GetTypeDescriptor()));
							break;
						}
					}
					else
					{
						switch (expectedType->GetDecorator())
						{
						case ITypeInfo::RawPtr:
							INSTRUCTION(Ins::TryConvertToType(Value::RawPtr, expectedType->GetTypeDescriptor()));
							break;
						case ITypeInfo::SharedPtr:
							INSTRUCTION(Ins::TryConvertToType(Value::SharedPtr, expectedType->GetTypeDescriptor()));
							break;
						case ITypeInfo::Nullable:
						case ITypeInfo::TypeDescriptor:
						case ITypeInfo::Generic:
							INSTRUCTION(Ins::TryConvertToType(Value::BoxedValue, expectedType->GetTypeDescriptor()));
							break;
						}
					}
				}
			}

/***********************************************************************
GetInstructionTypeArgument
***********************************************************************/

			void GenerateTypeTestingInstructions(WfCodegenContext& context, Ptr<reflection::description::ITypeInfo> expectedType, WfExpression* node)
			{
				if (expectedType->GetTypeDescriptor() != GetTypeDescriptor<Value>())
				{
					switch (expectedType->GetDecorator())
					{
					case ITypeInfo::RawPtr:
						INSTRUCTION(Ins::TestType(Value::RawPtr, expectedType->GetTypeDescriptor()));
						break;
					case ITypeInfo::SharedPtr:
						INSTRUCTION(Ins::TestType(Value::SharedPtr, expectedType->GetTypeDescriptor()));
						break;
					case ITypeInfo::Nullable:
					case ITypeInfo::TypeDescriptor:
					case ITypeInfo::Generic:
						INSTRUCTION(Ins::TestType(Value::BoxedValue, expectedType->GetTypeDescriptor()));
						break;
					}
				}
				else
				{
					INSTRUCTION(Ins::Pop());
					INSTRUCTION(Ins::LoadValue(BoxValue(true)));
				}
			}

/***********************************************************************
GenerateTypeCastInstructions
***********************************************************************/

			runtime::WfInsType GetInstructionTypeArgument(Ptr<reflection::description::ITypeInfo> expectedType)
			{
				auto td = expectedType->GetTypeDescriptor();
				if (td == GetTypeDescriptor<bool>()) return WfInsType::Bool;
				if (td == GetTypeDescriptor<vint8_t>()) return WfInsType::I1;
				if (td == GetTypeDescriptor<vint16_t>()) return WfInsType::I2;
				if (td == GetTypeDescriptor<vint32_t>()) return WfInsType::I4;
				if (td == GetTypeDescriptor<vint64_t>()) return WfInsType::I8;
				if (td == GetTypeDescriptor<vuint8_t>()) return WfInsType::U1;
				if (td == GetTypeDescriptor<vuint16_t>()) return WfInsType::U2;
				if (td == GetTypeDescriptor<vuint32_t>()) return WfInsType::U4;
				if (td == GetTypeDescriptor<vuint64_t>()) return WfInsType::U8;
				if (td == GetTypeDescriptor<float>()) return WfInsType::F4;
				if (td == GetTypeDescriptor<double>()) return WfInsType::F8;
				if (td == GetTypeDescriptor<WString>()) return WfInsType::String;
				return WfInsType::Unknown;
			}

/***********************************************************************
GenerateAssembly
***********************************************************************/

			Ptr<runtime::WfAssembly> GenerateAssembly(analyzer::WfLexicalScopeManager* manager)
			{
				auto assembly = MakePtr<WfAssembly>();
				assembly->insBeforeCodegen = new WfInstructionDebugInfo;
				assembly->insAfterCodegen = new WfInstructionDebugInfo;
				
				WfCodegenContext context(assembly, manager);
				FOREACH_INDEXER(Ptr<WfModule>, module, index, manager->GetModules())
				{
					auto codeBeforeCodegen = manager->GetModuleCodes()[index];

					auto recorderBefore = new ParsingGeneratedLocationRecorder(context.nodePositionsBeforeCodegen);
					auto recorderAfter = new ParsingGeneratedLocationRecorder(context.nodePositionsAfterCodegen);
					auto recorderOriginal = new ParsingOriginalLocationRecorder(recorderBefore);
					auto recorderMultiple = new ParsingMultiplePrintNodeRecorder;
					recorderMultiple->AddRecorder(recorderOriginal);
					recorderMultiple->AddRecorder(recorderAfter);

					stream::MemoryStream memoryStream;
					{
						stream::StreamWriter streamWriter(memoryStream);
						ParsingWriter parsingWriter(streamWriter, recorderMultiple, index);
						WfPrint(module, L"", parsingWriter);
					}

					memoryStream.SeekFromBegin(0);
					auto codeAfterCodegen = stream::StreamReader(memoryStream).ReadToEnd();

					assembly->insBeforeCodegen->moduleCodes.Add(codeBeforeCodegen);
					assembly->insAfterCodegen->moduleCodes.Add(codeAfterCodegen);
				}

				if (manager->declarationTypes.Count() > 0)
				{
					assembly->typeImpl = new WfTypeImpl;
					FOREACH(Ptr<ITypeDescriptor>, td, manager->declarationTypes.Values())
					{
						if (auto tdClass = td.Cast<WfClass>())
						{
							assembly->typeImpl->classes.Add(tdClass);
						}
						else if (auto tdInterface = td.Cast<WfInterface>())
						{
							assembly->typeImpl->interfaces.Add(tdInterface);
						}
						else if (auto tdStruct = td.Cast<WfStruct>())
						{
							assembly->typeImpl->structs.Add(tdStruct);
						}
						else if (auto tdEnum = td.Cast<WfEnum>())
						{
							assembly->typeImpl->enums.Add(tdEnum);
						}
					}
				}

				FOREACH(Ptr<WfModule>, module, manager->GetModules())
				{
					FOREACH(Ptr<WfDeclaration>, decl, module->declarations)
					{
						GenerateGlobalDeclarationMetadata(context, decl);
					}
				}

				{
					auto meta = MakePtr<WfAssemblyFunction>();
					meta->name = L"<initialize>";
					vint functionIndex = assembly->functions.Add(meta);
					assembly->functionByName.Add(meta->name, functionIndex);

					auto functionContext = MakePtr<WfCodegenFunctionContext>();
					functionContext->function = meta;
					context.functionContext = functionContext;
					
					meta->firstInstruction = assembly->instructions.Count();
					FOREACH(Ptr<WfModule>, module, manager->GetModules())
					{
						FOREACH(Ptr<WfDeclaration>, decl, module->declarations)
						{
							GenerateInitializeInstructions(context, decl);
						}
					}

					// define node for INSTRUCTION
					parsing::ParsingTreeCustomBase* node = nullptr;
					INSTRUCTION(Ins::LoadValue(Value()));
					INSTRUCTION(Ins::Return());

					meta->lastInstruction = assembly->instructions.Count() - 1;

					context.functionContext = 0;
					GenerateClosureInstructions(context, functionContext);
				}

				FOREACH(Ptr<WfModule>, module, manager->GetModules())
				{
					FOREACH(Ptr<WfDeclaration>, decl, module->declarations)
					{
						GenerateDeclarationInstructions(context, decl);
					}
				}

				assembly->Initialize();
				return assembly;
			}

#undef INSTRUCTION

/***********************************************************************
Compile
***********************************************************************/

			Ptr<runtime::WfAssembly> Compile(Ptr<parsing::tabling::ParsingTable> table, analyzer::WfLexicalScopeManager* manager, collections::List<WString>& moduleCodes, collections::List<Ptr<parsing::ParsingError>>& errors)
			{
				manager->Clear(true, true);
				FOREACH(WString, code, moduleCodes)
				{
					manager->AddModule(code);
				}

				if (manager->errors.Count() > 0)
				{
					CopyFrom(errors, manager->errors);
					return 0;
				}

				manager->Rebuild(true);
				if (manager->errors.Count() > 0)
				{
					CopyFrom(errors, manager->errors);
					return 0;
				}

				return GenerateAssembly(manager);
			}

			Ptr<runtime::WfAssembly> Compile(Ptr<parsing::tabling::ParsingTable> table, collections::List<WString>& moduleCodes, collections::List<Ptr<parsing::ParsingError>>& errors)
			{
				WfLexicalScopeManager manager(table);
				return Compile(table, &manager, moduleCodes, errors);
			}
		}
	}
}

/***********************************************************************
EMITTER\WFEMITTER_DECLARATION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace emitter
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection::description;
			using namespace analyzer;
			using namespace runtime;
			using namespace typeimpl;

			typedef WfInstruction Ins;

#define INSTRUCTION(X) context.AddInstruction(node, X)

/***********************************************************************
GenerateInstructions(Initialize)
***********************************************************************/

			class GenerateInitializeInstructionsVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCodegenContext&						context;

				GenerateInitializeInstructionsVisitor(WfCodegenContext& _context)
					:context(_context)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->declarations)
					{
						GenerateInitializeInstructions(context, decl);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
				}

				void Visit(WfVariableDeclaration* node)override
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					auto symbol = scope->symbols[node->name.value][0];
					vint variableIndex = context.globalVariables[symbol.Obj()];
					GenerateExpressionInstructions(context, node->expression);
					INSTRUCTION(Ins::StoreGlobalVar(variableIndex));
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
				}

				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			void GenerateInitializeInstructions(WfCodegenContext& context, Ptr<WfDeclaration> declaration)
			{
				GenerateInitializeInstructionsVisitor visitor(context);
				declaration->Accept(&visitor);
			}

/***********************************************************************
GenerateInstructions(Declaration)
***********************************************************************/

			Ptr<WfCodegenFunctionContext> GenerateFunctionInstructions_Prolog(WfCodegenContext& context, WfLexicalScope* scope, Ptr<WfAssemblyFunction> meta, Ptr<ITypeInfo> returnType, Ptr<WfLexicalSymbol> recursiveLambdaSymbol, const List<Ptr<WfLexicalSymbol>>& argumentSymbols, const List<Ptr<WfLexicalSymbol>>& capturedSymbols, ParsingTreeCustomBase* node)
			{
				auto functionContext = MakePtr<WfCodegenFunctionContext>();
				functionContext->function = meta;
				context.functionContext = functionContext;
				{
					FOREACH_INDEXER(Ptr<WfLexicalSymbol>, argumentSymbol, index, argumentSymbols)
					{
						functionContext->arguments.Add(argumentSymbol.Obj(), index);
					}
					FOREACH_INDEXER(Ptr<WfLexicalSymbol>, capturedSymbol, index, capturedSymbols)
					{
						functionContext->capturedVariables.Add(capturedSymbol.Obj(), index);
					}
				}
				if (recursiveLambdaSymbol)
				{
					vint variableIndex = meta->argumentNames.Count() + meta->localVariableNames.Add(L"<recursive-lambda>" + recursiveLambdaSymbol->name);
					functionContext->localVariables.Add(recursiveLambdaSymbol.Obj(), variableIndex);
				}
					
				meta->firstInstruction = context.assembly->instructions.Count();
				if (recursiveLambdaSymbol)
				{
					INSTRUCTION(Ins::LoadClosureContext());
					INSTRUCTION(Ins::LoadFunction(context.assembly->functions.IndexOf(meta.Obj())));
					INSTRUCTION(Ins::CreateClosure());
					INSTRUCTION(Ins::StoreLocalVar(functionContext->localVariables[recursiveLambdaSymbol.Obj()]));
				}
				return functionContext;
			}

			void GenerateFunctionInstructions_Epilog(WfCodegenContext& context, WfLexicalScope* scope, Ptr<WfAssemblyFunction> meta, Ptr<ITypeInfo> returnType, Ptr<WfLexicalSymbol> recursiveLambdaSymbol, const List<Ptr<WfLexicalSymbol>>& argumentSymbols, const List<Ptr<WfLexicalSymbol>>& capturedSymbols, Ptr<WfCodegenFunctionContext> functionContext, ParsingTreeCustomBase* node)
			{
				Value result;
				if (returnType->GetDecorator() == ITypeInfo::TypeDescriptor)
				{
					if (auto vt = returnType->GetTypeDescriptor()->GetValueType())
					{
						result = vt->CreateDefault();
					}
				}
				INSTRUCTION(Ins::LoadValue(Value()));
				INSTRUCTION(Ins::Return());
				meta->lastInstruction = context.assembly->instructions.Count() - 1;
				context.functionContext = 0;

				GenerateClosureInstructions(context, functionContext);
			}

			void GenerateFunctionInstructions(WfCodegenContext& context, WfLexicalScope* scope, Ptr<WfAssemblyFunction> meta, Ptr<ITypeInfo> returnType, Ptr<WfLexicalSymbol> recursiveLambdaSymbol, const List<Ptr<WfLexicalSymbol>>& argumentSymbols, const List<Ptr<WfLexicalSymbol>>& capturedSymbols, Ptr<WfStatement> statementBody, ParsingTreeCustomBase* node)
			{
				auto functionContext = GenerateFunctionInstructions_Prolog(context, scope, meta, returnType, recursiveLambdaSymbol, argumentSymbols, capturedSymbols, node);
				GenerateStatementInstructions(context, statementBody);
				GenerateFunctionInstructions_Epilog(context, scope, meta, returnType, recursiveLambdaSymbol, argumentSymbols, capturedSymbols, functionContext, node);
			}

			void GenerateFunctionInstructions(WfCodegenContext& context, WfLexicalScope* scope, Ptr<WfAssemblyFunction> meta, Ptr<ITypeInfo> returnType, Ptr<WfLexicalSymbol> recursiveLambdaSymbol, const List<Ptr<WfLexicalSymbol>>& argumentSymbols, const List<Ptr<WfLexicalSymbol>>& capturedSymbols, Ptr<WfExpression> expressionBody, ParsingTreeCustomBase* node)
			{
				auto functionContext = GenerateFunctionInstructions_Prolog(context, scope, meta, returnType, recursiveLambdaSymbol, argumentSymbols, capturedSymbols, node);
				GenerateExpressionInstructions(context, expressionBody);
				INSTRUCTION(Ins::Return());
				GenerateFunctionInstructions_Epilog(context, scope, meta, returnType, recursiveLambdaSymbol, argumentSymbols, capturedSymbols, functionContext, node);
			}

			void GenerateFunctionDeclarationInstructions(WfCodegenContext& context, WfFunctionDeclaration* node, WfLexicalScope* scope, Ptr<WfAssemblyFunction> meta, Ptr<WfLexicalSymbol> recursiveLambdaSymbol)
			{
				List<Ptr<WfLexicalSymbol>> argumentSymbols, capturedSymbols;
				{
					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						auto symbol = scope->symbols[argument->name.value][0];
						argumentSymbols.Add(symbol);
					}

					vint index = context.manager->lambdaCaptures.Keys().IndexOf(node);
					if (index != -1)
					{
						auto capture = context.manager->lambdaCaptures.Values()[index];
						FOREACH(Ptr<WfLexicalSymbol>, symbol, capture->symbols)
						{
							capturedSymbols.Add(symbol);
						}
					}
				}

				auto returnType = CreateTypeInfoFromType(scope, node->returnType);
				GenerateFunctionInstructions(context, scope, meta, returnType, recursiveLambdaSymbol, argumentSymbols, capturedSymbols, node->statement, node);
			}

			class GenerateClassMemberInstructionsVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCodegenContext&						context;
				Ptr<WfClassDeclaration>					classDecl;

				GenerateClassMemberInstructionsVisitor(WfCodegenContext& _context, Ptr<WfClassDeclaration> _classDecl)
					:context(_context)
					, classDecl(_classDecl)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (node->classMember->kind == WfClassMemberKind::Static)
					{
						GenerateDeclarationInstructions(context, node);
					}
					else if (classDecl->kind == WfClassKind::Class)
					{
						GenerateDeclarationInstructions(context, node);
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				class InitializeFieldVisitor
					: public empty_visitor::DeclarationVisitor
				{
				public:
					WfCodegenContext&					context;

					InitializeFieldVisitor(WfCodegenContext& _context)
						:context(_context)
					{
					}

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							decl->Accept(this);
						}
					}

					void Visit(WfVariableDeclaration* node)override
					{
						auto info = context.manager->declarationMemberInfos[node].Cast<WfField>().Obj();
						GenerateExpressionInstructions(context, node->expression);
						INSTRUCTION(Ins::LoadCapturedVar(0));
						INSTRUCTION(Ins::SetProperty(info));
					}
				};

				void Visit(WfConstructorDeclaration* node)override
				{
					auto meta = context.assembly->functions[context.constructors[node]];
					auto functionContext = MakePtr<WfCodegenFunctionContext>();
					functionContext->function = meta;
					context.functionContext = functionContext;
					meta->firstInstruction = context.assembly->instructions.Count();
					
					auto scope = context.manager->nodeScopes[node].Obj();
					{
						FOREACH_INDEXER(Ptr<WfFunctionArgument>, argument, index, node->arguments)
						{
							auto symbol = scope->symbols[argument->name.value][0];
							functionContext->arguments.Add(symbol.Obj(), index);
						}
					}

					if (classDecl->baseTypes.Count() > 0)
					{
						auto td = scope->parentScope->typeOfThisExpr;
						vint count = td->GetBaseTypeDescriptorCount();
						for (vint i = 0; i < count; i++)
						{
							auto baseTd = td->GetBaseTypeDescriptor(i);
							auto ctor = context.manager->baseConstructorCallResolvings[{node, baseTd}];
							if (ctor.key)
							{
								FOREACH(Ptr<WfExpression>, argument, ctor.key->arguments)
								{
									GenerateExpressionInstructions(context, argument);
								}
								INSTRUCTION(Ins::LoadCapturedVar(0));
								INSTRUCTION(Ins::InvokeBaseCtor(ctor.value, ctor.key->arguments.Count()));
							}
							else
							{
								INSTRUCTION(Ins::LoadCapturedVar(0));
								INSTRUCTION(Ins::InvokeBaseCtor(ctor.value, 0));
							}
							INSTRUCTION(Ins::Pop());
						}
					}

					{
						InitializeFieldVisitor visitor(context);
						FOREACH(Ptr<WfDeclaration>, memberDecl, classDecl->declarations)
						{
							memberDecl->Accept(&visitor);
						}
					}
					GenerateStatementInstructions(context, node->statement);

					INSTRUCTION(Ins::LoadValue(Value()));
					INSTRUCTION(Ins::Return());
					meta->lastInstruction = context.assembly->instructions.Count() - 1;
					context.functionContext = 0;
					GenerateClosureInstructions(context, functionContext);
				}
				
				void Visit(WfDestructorDeclaration* node)override
				{
					auto meta = context.assembly->functions[context.destructors[node]];
					auto functionContext = MakePtr<WfCodegenFunctionContext>();
					functionContext->function = meta;
					context.functionContext = functionContext;
					meta->firstInstruction = context.assembly->instructions.Count();
					
					auto scope = context.manager->nodeScopes[node].Obj();
					GenerateStatementInstructions(context, node->statement);

					INSTRUCTION(Ins::LoadValue(Value()));
					INSTRUCTION(Ins::Return());
					meta->lastInstruction = context.assembly->instructions.Count() - 1;
					context.functionContext = 0;
					GenerateClosureInstructions(context, functionContext);
				}

				void Visit(WfClassDeclaration* node)override
				{
					GenerateDeclarationInstructions(context, node);
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			class GenerateDeclarationInstructionsVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCodegenContext&						context;

				GenerateDeclarationInstructionsVisitor(WfCodegenContext& _context)
					:context(_context)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->declarations)
					{
						GenerateDeclarationInstructions(context, decl);
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					auto symbol = context.manager->GetDeclarationSymbol(scope, node);
					auto meta = context.assembly->functions[context.globalFunctions[symbol.Obj()]];
					GenerateFunctionDeclarationInstructions(context, node, scope, meta, 0);
				}

				void Visit(WfVariableDeclaration* node)override
				{
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
				}

				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						GenerateClassMemberInstructionsVisitor visitor(context, node);
						memberDecl->Accept(&visitor);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			void GenerateDeclarationInstructions(WfCodegenContext& context, Ptr<WfDeclaration> declaration)
			{
				GenerateDeclarationInstructionsVisitor visitor(context);
				declaration->Accept(&visitor);
			}

/***********************************************************************
GenerateInstructions(Closure)
***********************************************************************/

			void GenerateClosureInstructions_Function(WfCodegenContext& context, vint functionIndex, WfFunctionDeclaration* node, bool createInterface)
			{
				auto scope = context.manager->nodeScopes[node].Obj();
				auto meta = context.assembly->functions[functionIndex];
				GenerateFunctionDeclarationMetadata(context, node, meta);
				Ptr<WfLexicalSymbol> recursiveLambdaSymbol;
				if (!createInterface && node->name.value != L"")
				{
					recursiveLambdaSymbol = scope->symbols[node->name.value][0];
				}
				GenerateFunctionDeclarationInstructions(context, node, scope, meta, recursiveLambdaSymbol);
			}

			void GenerateClosureInstructions_Ordered(WfCodegenContext& context, vint functionIndex, WfOrderedLambdaExpression* node)
			{
				auto scope = context.manager->nodeScopes[node].Obj();
				List<Ptr<WfLexicalSymbol>> argumentSymbols, capturedSymbols;
				CopyFrom(
					argumentSymbols,
					Range<vint>(0, scope->symbols.Count())
						.Select([scope](vint index)->Ptr<WfLexicalSymbol>{return scope->symbols.GetByIndex(index)[0];})
						.OrderBy([](Ptr<WfLexicalSymbol> a, Ptr<WfLexicalSymbol> b)
						{
							vint aId = wtoi(a->name.Sub(1, a->name.Length() - 1));
							vint bId = wtoi(b->name.Sub(1, a->name.Length() - 1));
							return aId - bId;
						})
					);

				auto meta = context.assembly->functions[functionIndex];
				FOREACH(Ptr<WfLexicalSymbol>, symbol, argumentSymbols)
				{
					meta->argumentNames.Add(symbol->name);
				}
				{
					auto capture = context.manager->lambdaCaptures.Get(node);
					FOREACH(Ptr<WfLexicalSymbol>, symbol, capture->symbols)
					{
						meta->capturedVariableNames.Add(L"<captured>" + symbol->name);
						capturedSymbols.Add(symbol);
					}

					vint count = context.GetThisStackCount(scope);
					for (vint i = 0; i < count; i++)
					{
						meta->capturedVariableNames.Add(L"<captured-this>" + itow(i));
					}
				}

				auto result = context.manager->expressionResolvings[node];
				auto returnType = CopyTypeInfo(result.type->GetElementType()->GetGenericArgument(0));
				GenerateFunctionInstructions(context, scope, meta, returnType, 0, argumentSymbols, capturedSymbols, node->body, node);
			}

			void GenerateClosureInstructions(WfCodegenContext& context, Ptr<WfCodegenFunctionContext> functionContext)
			{
				for (vint i = 0; i < functionContext->closuresToCodegen.Count(); i++)
				{
					vint functionIndex = functionContext->closuresToCodegen.Keys()[i];
					auto closure = functionContext->closuresToCodegen.Values()[i];
					
					if (closure.functionExpression)
					{
						GenerateClosureInstructions_Function(context, functionIndex, closure.functionExpression->function.Obj(), false);
					}
					else if (closure.orderedLambdaExpression)
					{
						GenerateClosureInstructions_Ordered(context, functionIndex, closure.orderedLambdaExpression);
					}
					else if (closure.functionDeclaration)
					{
						GenerateClosureInstructions_Function(context, functionIndex, closure.functionDeclaration, true);
					}
				}
			}

#undef INSTRUCTION
		}
	}
}

/***********************************************************************
EMITTER\WFEMITTER_EXPRESSION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace emitter
		{
			using namespace collections;
			using namespace parsing;
			using namespace reflection;
			using namespace reflection::description;
			using namespace analyzer;
			using namespace runtime;

			typedef WfInstruction Ins;

#define INSTRUCTION(X) context.AddInstruction(node, X)

/***********************************************************************
GenerateInstructions(Expression)
***********************************************************************/

			class GenerateExpressionInstructionsVisitor
				: public Object
				, public WfExpression::IVisitor
			{
			public:
				WfCodegenContext&						context;

				GenerateExpressionInstructionsVisitor(WfCodegenContext& _context)
					:context(_context)
				{
				}

				static void GenerateLoadSymbolInstructions(WfCodegenContext& context, WfLexicalSymbol* symbol, parsing::ParsingTreeCustomBase* node)
				{
					vint index = -1;
					if ((index = context.globalFunctions.Keys().IndexOf(symbol)) != -1)
					{
						vint functionIndex = context.globalFunctions.Values()[index];
						INSTRUCTION(Ins::CreateClosureContext(0));
						INSTRUCTION(Ins::LoadFunction(functionIndex));
						INSTRUCTION(Ins::CreateClosure());
					}
					else if ((index = context.globalVariables.Keys().IndexOf(symbol)) != -1)
					{
						vint variableIndex = context.globalVariables.Values()[index];
						INSTRUCTION(Ins::LoadGlobalVar(variableIndex));
					}
					else if ((index = context.functionContext->capturedVariables.Keys().IndexOf(symbol)) != -1)
					{
						vint variableIndex = context.functionContext->capturedVariables.Values()[index];
						INSTRUCTION(Ins::LoadCapturedVar(variableIndex));
					}
					else if ((index = context.functionContext->localVariables.Keys().IndexOf(symbol)) != -1)
					{
						vint variableIndex = context.functionContext->localVariables.Values()[index];
						INSTRUCTION(Ins::LoadLocalVar(variableIndex));
					}
					else if ((index = context.functionContext->arguments.Keys().IndexOf(symbol)) != -1)
					{
						vint variableIndex = context.functionContext->arguments.Values()[index];
						INSTRUCTION(Ins::LoadLocalVar(variableIndex));
					}
					else if ((index = context.closureFunctions.Keys().IndexOf(symbol)) != -1)
					{
						vint functionIndex = context.closureFunctions.Values()[index];
						INSTRUCTION(Ins::LoadClosureContext());
						INSTRUCTION(Ins::LoadFunction(functionIndex));
						INSTRUCTION(Ins::CreateClosure());
					}
					else
					{
						CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::GenerateLoadSymbolInstructions(WfCodegenContext&, WfLexicalSymbol*, ParsingTreeCustomBase*)#Internal error, cannot find any record of this symbol.");
					}
				}

				static vint PushCapturedThisValues(WfCodegenContext& context, WfLexicalScope* lambdaScopeParent, ParsingTreeCustomBase* node)
				{
					auto scope = lambdaScopeParent;
					while (scope)
					{
						if (scope->functionConfig)
						{
							vint parentThisCount = context.GetThisStackCount(scope);
							if (scope->functionConfig->lambda)
							{
								auto capture = context.manager->lambdaCaptures[scope->ownerNode.Obj()];
								vint captureCount = capture->symbols.Count();
								for (vint i = 0; i < parentThisCount; i++)
								{
									INSTRUCTION(Ins::LoadCapturedVar(captureCount + i));
								}
							}
							else if (parentThisCount > 0)
							{
								CHECK_ERROR(parentThisCount == 1, L"GenerateExpressionInstructionsVisitor::PushCapturedThisValues(WfCodegenContext&, WfLexicalScope*, ParsingTreeCustomBase*)#Internal error, wrong parentThisCount value.");
								INSTRUCTION(Ins::LoadCapturedVar(0));
							}
							return parentThisCount;
						}
						scope = scope->parentScope.Obj();
					}
					return 0;
				}

				static vint AddClosure(WfCodegenContext& context, WfCodegenLambdaContext lc, const Func<WString(vint)>& getName)
				{
					auto meta = MakePtr<WfAssemblyFunction>();
					vint functionIndex = context.assembly->functions.Add(meta);
					meta->name = getName(functionIndex);
					context.assembly->functionByName.Add(meta->name, functionIndex);
					context.functionContext->closuresToCodegen.Add(functionIndex, lc);
					return functionIndex;
				}

				void VisitReferenceExpression(WfExpression* node, const WString& name)
				{
					auto result = context.manager->expressionResolvings[node];
					if (result.symbol)
					{
						GenerateLoadSymbolInstructions(context, result.symbol.Obj(), node);
					}
					else if (result.methodInfo)
					{
						if (result.methodInfo->IsStatic())
						{
							INSTRUCTION(Ins::LoadValue(Value()));
						}
						else
						{
							VisitThisExpression(node, result.methodInfo->GetOwnerTypeDescriptor());
						}
						INSTRUCTION(Ins::LoadMethodClosure(result.methodInfo));
					}
					else if (result.propertyInfo)
					{
						if (auto getter = result.propertyInfo->GetGetter())
						{
							VisitThisExpression(node, getter->GetOwnerTypeDescriptor());
							INSTRUCTION(Ins::InvokeMethod(getter, 0));
						}
						else
						{
							VisitThisExpression(node, result.propertyInfo->GetOwnerTypeDescriptor());
							INSTRUCTION(Ins::GetProperty(result.propertyInfo));
						}
					}
					else
					{
						if ((result.type->GetTypeDescriptor()->GetTypeDescriptorFlags() & TypeDescriptorFlags::EnumType) != TypeDescriptorFlags::Undefined)
						{
							auto enumType = result.type->GetTypeDescriptor()->GetEnumType();
							vint index = enumType->IndexOfItem(name);
							if (index != -1)
							{
								auto intValue = enumType->GetItemValue(index);
								INSTRUCTION(Ins::LoadValue(enumType->ToEnum(intValue)));
								return;
							}
						}
						CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::VisitReferenceExpression(WfExpression*, const WString&)#Internal error, cannot find any record of this expression.");
					}
				}

				void VisitThisExpression(WfExpression* node, ITypeDescriptor* td)
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					vint count = context.GetThisStackCount(scope);
					vint offset = 0;

					Ptr<WfLexicalCapture> capture;
					Ptr<WfLexicalFunctionConfig> lastConfig;
					while (scope)
					{
						if (scope->typeOfThisExpr)
						{
							if (scope->typeOfThisExpr->CanConvertTo(td))
							{
								if (capture)
								{
									INSTRUCTION(Ins::LoadCapturedVar(capture->symbols.Count() + count - offset - 1));
								}
								else
								{
									INSTRUCTION(Ins::LoadCapturedVar(0));
								}
								return;
							}
							else
							{
								offset++;
							}

							if (lastConfig)
							{
								if (!lastConfig->parentThisAccessable)
								{
									break;
								}
							}
						}

						if (scope->functionConfig)
						{
							lastConfig = scope->functionConfig;
							if (!capture)
							{
								vint index = context.manager->lambdaCaptures.Keys().IndexOf(scope->ownerNode.Obj());
								if (index != -1)
								{
									capture = context.manager->lambdaCaptures.Values()[index];
								}
							}
						}

						scope = scope->parentScope.Obj();
					}
					CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::VisitThisExpression(WfExpression*, ITypeDescriptor*)#Internal error, cannot find any record of the this value.");
				}

				void Visit(WfThisExpression* node)override
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					while (scope)
					{
						if (scope->functionConfig)
						{
							if (scope->functionConfig->thisAccessable)
							{
								if (scope->functionConfig->lambda)
								{
									auto capture = context.manager->lambdaCaptures[scope->ownerNode.Obj()];
									auto count = context.GetThisStackCount(scope);
									INSTRUCTION(Ins::LoadCapturedVar(capture->symbols.Count() + count - 1));
								}
								else
								{
									INSTRUCTION(Ins::LoadCapturedVar(0));
								}
								return;
							}
							CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::Visit(WfThisExpression*)#Internal error, this expression is illegal here.");
						}
						scope = scope->parentScope.Obj();
					}
					CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::Visit(WfThisExpression*)#Internal error, this expression is illegal here.");
				}

				void Visit(WfTopQualifiedExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfReferenceExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfOrderedNameExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfOrderedLambdaExpression* node)override
				{
					auto scope = context.manager->nodeScopes[node].Obj();

					WfCodegenLambdaContext lc;
					lc.orderedLambdaExpression = node;
					auto functionIndex = AddClosure(context, lc, [=](vint index)
					{
						return L"<lambda:(" + itow(index) + L")> in " + context.functionContext->function->name;
					});

					auto capture = context.manager->lambdaCaptures.Get(node);
					FOREACH(Ptr<WfLexicalSymbol>, symbol, capture->symbols)
					{
						GenerateLoadSymbolInstructions(context, symbol.Obj(), node);
					}
					vint thisCount = PushCapturedThisValues(context, scope->parentScope.Obj(), node);
					INSTRUCTION(Ins::CreateClosureContext(capture->symbols.Count() + thisCount));
					INSTRUCTION(Ins::LoadFunction(functionIndex));
					INSTRUCTION(Ins::CreateClosure());
				}

				void Visit(WfMemberExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];
					if (result.propertyInfo)
					{
						GenerateExpressionInstructions(context, node->parent);
						if (result.propertyInfo->GetGetter())
						{
							INSTRUCTION(Ins::InvokeMethod(result.propertyInfo->GetGetter(), 0));
						}
						else
						{
							INSTRUCTION(Ins::GetProperty(result.propertyInfo));
						}
					}
					else
					{
						GenerateExpressionInstructions(context, node->parent);
						INSTRUCTION(Ins::LoadMethodClosure(result.methodInfo));
					}
				}

				void Visit(WfChildExpression* node)override
				{
					VisitReferenceExpression(node, node->name.value);
				}

				void Visit(WfLiteralExpression* node)override
				{
					switch (node->value)
					{
					case WfLiteralValue::Null:
						INSTRUCTION(Ins::LoadValue(Value()));
						break;
					case WfLiteralValue::True:
						INSTRUCTION(Ins::LoadValue(BoxValue(true)));
						break;
					case WfLiteralValue::False:
						INSTRUCTION(Ins::LoadValue(BoxValue(false)));
						break;
					}
				}

				void Visit(WfFloatingExpression* node)override
				{
					INSTRUCTION(Ins::LoadValue(BoxValue(wtof(node->value.value))));
				}

				void Visit(WfIntegerExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];
					auto td = result.type->GetTypeDescriptor();
					if (td == description::GetTypeDescriptor<vint32_t>())
					{
						INSTRUCTION(Ins::LoadValue(BoxValue((vint32_t)wtoi(node->value.value))));
					}
					else if (td == description::GetTypeDescriptor<vuint32_t>())
					{
						INSTRUCTION(Ins::LoadValue(BoxValue((vuint32_t)wtou(node->value.value))));
					}
					else if (td == description::GetTypeDescriptor<vint64_t>())
					{
						INSTRUCTION(Ins::LoadValue(BoxValue((vint64_t)wtoi64(node->value.value))));
					}
					else if (td == description::GetTypeDescriptor<vuint64_t>())
					{
						INSTRUCTION(Ins::LoadValue(BoxValue((vuint64_t)wtou64(node->value.value))));
					}
					else
					{
						CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::Visit(WfIntegerExpression*)#Internal error, unknown integer type.");
					}
				}

				void Visit(WfStringExpression* node)override
				{
					INSTRUCTION(Ins::LoadValue(BoxValue(node->value.value)));
				}

				void Visit(WfUnaryExpression* node)override
				{
					auto type = GenerateExpressionInstructions(context, node->operand);
					switch (node->op)
					{
					case WfUnaryOperator::Not:
						INSTRUCTION(Ins::OpNot(GetInstructionTypeArgument(type)));
						break;
					case WfUnaryOperator::Positive:
						INSTRUCTION(Ins::OpPositive(GetInstructionTypeArgument(type)));
						break;
					case WfUnaryOperator::Negative:
						INSTRUCTION(Ins::OpNegative(GetInstructionTypeArgument(type)));
						break;
					}
				}

				void Visit(WfBinaryExpression* node)override
				{
					if (node->op == WfBinaryOperator::Assign)
					{
						if (auto binary = node->first.Cast<WfBinaryExpression>())
						{
							auto result = context.manager->expressionResolvings[binary->first.Obj()];
							auto containerType = result.expectedType ? result.expectedType : result.type;
							auto methodInfo = containerType->GetTypeDescriptor()->GetMethodGroupByName(L"Set", true)->GetMethod(0);
							GenerateExpressionInstructions(context, binary->second);
							INSTRUCTION(Ins::Duplicate(0));
							GenerateExpressionInstructions(context, node->second);
							GenerateExpressionInstructions(context, binary->first);
							INSTRUCTION(Ins::InvokeMethod(methodInfo, 2));
							INSTRUCTION(Ins::Pop());
						}
						else if (auto member = node->first.Cast<WfMemberExpression>())
						{
							auto result = context.manager->expressionResolvings[member.Obj()];
							if (auto methodInfo = result.propertyInfo->GetSetter())
							{
								GenerateExpressionInstructions(context, node->second);
								INSTRUCTION(Ins::Duplicate(0));
								GenerateExpressionInstructions(context, member->parent);
								INSTRUCTION(Ins::InvokeMethod(methodInfo, 1));
								INSTRUCTION(Ins::Pop());
							}
							else
							{
								GenerateExpressionInstructions(context, node->second);
								INSTRUCTION(Ins::Duplicate(0));
								GenerateExpressionInstructions(context, member->parent);
								INSTRUCTION(Ins::SetProperty(result.propertyInfo));
							}
						}
						else
						{
							GenerateExpressionInstructions(context, node->second);
							INSTRUCTION(Ins::Duplicate(0));
							auto result = context.manager->expressionResolvings[node->first.Obj()];
							vint index = -1;
							if ((index = context.globalVariables.Keys().IndexOf(result.symbol.Obj())) != -1)
							{
								vint variableIndex = context.globalVariables.Values()[index];
								INSTRUCTION(Ins::StoreGlobalVar(variableIndex));
							}
							else if ((index = context.functionContext->localVariables.Keys().IndexOf(result.symbol.Obj())) != -1)
							{
								vint variableIndex = context.functionContext->localVariables.Values()[index];
								INSTRUCTION(Ins::StoreLocalVar(variableIndex));
							}
							else if ((index = context.functionContext->capturedVariables.Keys().IndexOf(result.symbol.Obj())) != -1)
							{
								vint variableIndex = context.functionContext->capturedVariables.Values()[index];
								INSTRUCTION(Ins::StoreCapturedVar(variableIndex));
							}
							else if (result.propertyInfo)
							{
								if (auto setter = result.propertyInfo->GetSetter())
								{
									VisitThisExpression(node, setter->GetOwnerTypeDescriptor());
									INSTRUCTION(Ins::InvokeMethod(setter, 1));
									INSTRUCTION(Ins::Pop());
								}
								else
								{
									VisitThisExpression(node, result.propertyInfo->GetOwnerTypeDescriptor());
									INSTRUCTION(Ins::SetProperty(result.propertyInfo));
								}
							}
							else
							{
								CHECK_FAIL(L"GenerateExpressionInstructionsVisitor::Visit(WfBinaryExpression*)#Internal error, cannot find any record of this assignable symbol.");
							}
						}
					}
					else if (node->op == WfBinaryOperator::Index)
					{
						auto result = context.manager->expressionResolvings[node->first.Obj()];
						auto containerType = result.expectedType ? result.expectedType : result.type;
						auto methodInfo = containerType->GetTypeDescriptor()->GetMethodGroupByName(L"Get", true)->GetMethod(0);
						GenerateExpressionInstructions(context, node->second);
						GenerateExpressionInstructions(context, node->first);
						INSTRUCTION(Ins::InvokeMethod(methodInfo, 1));
					}
					else if (node->op == WfBinaryOperator::Union)
					{
						auto type = context.manager->expressionResolvings[node].type;
						if (type->GetTypeDescriptor() == description::GetTypeDescriptor<WString>())
						{
							GenerateExpressionInstructions(context, node->first, type);
							GenerateExpressionInstructions(context, node->second, type);
							INSTRUCTION(Ins::OpConcat());
						}
						else
						{
							GenerateExpressionInstructions(context, node->first, type);
							INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, description::GetTypeDescriptor<vuint64_t>()));
							GenerateExpressionInstructions(context, node->second, type);
							INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, description::GetTypeDescriptor<vuint64_t>()));
							INSTRUCTION(Ins::OpAnd(WfInsType::U8));
							INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, type->GetTypeDescriptor()));
						}
					}
					else if (node->op == WfBinaryOperator::Intersect)
					{
						auto type = context.manager->expressionResolvings[node].type;
						GenerateExpressionInstructions(context, node->first, type);
						INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, description::GetTypeDescriptor<vuint64_t>()));
						GenerateExpressionInstructions(context, node->second, type);
						INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, description::GetTypeDescriptor<vuint64_t>()));
						INSTRUCTION(Ins::OpOr(WfInsType::U8));
						INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, type->GetTypeDescriptor()));
					}
					else if (node->op == WfBinaryOperator::FailedThen)
					{
						auto result = context.manager->expressionResolvings[node];
						vint trapInstruction = INSTRUCTION(Ins::InstallTry(-1));
						GenerateExpressionInstructions(context, node->first, result.type);
						INSTRUCTION(Ins::UninstallTry(1));
						vint finishInstruction = INSTRUCTION(Ins::Jump(-1));

						context.assembly->instructions[trapInstruction].indexParameter = context.assembly->instructions.Count();
						GenerateExpressionInstructions(context, node->second, result.type);

						context.assembly->instructions[finishInstruction].indexParameter = context.assembly->instructions.Count();
					}
					else
					{
						Ptr<ITypeInfo> mergedType;
						switch (node->op)
						{
						case WfBinaryOperator::Exp:
						case WfBinaryOperator::Add:
						case WfBinaryOperator::Sub:
						case WfBinaryOperator::Mul:
						case WfBinaryOperator::Div:
						case WfBinaryOperator::Mod:
						case WfBinaryOperator::Shl:
						case WfBinaryOperator::Shr:
							{
								auto result = context.manager->expressionResolvings[node];
								mergedType = result.type;
							}
							break;
						default:
							{
								auto firstResult = context.manager->expressionResolvings[node->first.Obj()];
								auto secondResult = context.manager->expressionResolvings[node->second.Obj()];
								auto firstType = firstResult.expectedType ? firstResult.expectedType : firstResult.type;
								auto secondType = secondResult.expectedType ? secondResult.expectedType : secondResult.type;
								if (node->op == WfBinaryOperator::EQ || node->op == WfBinaryOperator::NE)
								{
									if (firstType->GetDecorator() == ITypeInfo::RawPtr || firstType->GetDecorator() == ITypeInfo::SharedPtr)
									{
										GenerateExpressionInstructions(context, node->first);
										GenerateExpressionInstructions(context, node->second);
										INSTRUCTION(Ins::CompareReference());
										if (node->op == WfBinaryOperator::NE)
										{
											INSTRUCTION(Ins::OpNot(WfInsType::Bool));
										}
										return;
									}
								}

								mergedType = GetMergedType(firstType, secondType);
								if (node->op == WfBinaryOperator::EQ || node->op == WfBinaryOperator::NE)
								{
									switch (mergedType->GetTypeDescriptor()->GetTypeDescriptorFlags())
									{
									case TypeDescriptorFlags::Object:
									case TypeDescriptorFlags::Struct:
										GenerateExpressionInstructions(context, node->first);
										GenerateExpressionInstructions(context, node->second);
										INSTRUCTION(Ins::CompareValue());
										if (node->op == WfBinaryOperator::NE)
										{
											INSTRUCTION(Ins::OpNot(WfInsType::Bool));
										}
										return;
									case TypeDescriptorFlags::FlagEnum:
									case TypeDescriptorFlags::NormalEnum:
										GenerateExpressionInstructions(context, node->first);
										INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, description::GetTypeDescriptor<vuint64_t>()));
										GenerateExpressionInstructions(context, node->second);
										INSTRUCTION(Ins::ConvertToType(Value::BoxedValue, description::GetTypeDescriptor<vuint64_t>()));
										INSTRUCTION(Ins::CompareLiteral(WfInsType::U8));
										if (node->op == WfBinaryOperator::NE)
										{
											INSTRUCTION(Ins::OpNE());
										}
										else
										{
											INSTRUCTION(Ins::OpEQ());
										}
										return;
									default:;
									}
								}
							}
						}

						GenerateExpressionInstructions(context, node->first, mergedType);
						GenerateExpressionInstructions(context, node->second, mergedType);

						switch (node->op)
						{
						case WfBinaryOperator::Exp:
							INSTRUCTION(Ins::OpExp(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Add:
							INSTRUCTION(Ins::OpAdd(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Sub:
							INSTRUCTION(Ins::OpSub(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Mul:
							INSTRUCTION(Ins::OpMul(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Div:
							INSTRUCTION(Ins::OpDiv(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Mod:
							INSTRUCTION(Ins::OpMod(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Shl:
							INSTRUCTION(Ins::OpShl(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Shr:
							INSTRUCTION(Ins::OpShr(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::LT:
							INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(mergedType)));
							INSTRUCTION(Ins::OpLT());
							break;
						case WfBinaryOperator::GT:
							INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(mergedType)));
							INSTRUCTION(Ins::OpGT());
							break;
						case WfBinaryOperator::LE:
							INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(mergedType)));
							INSTRUCTION(Ins::OpLE());
							break;
						case WfBinaryOperator::GE:
							INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(mergedType)));
							INSTRUCTION(Ins::OpGE());
							break;
						case WfBinaryOperator::EQ:
							INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(mergedType)));
							INSTRUCTION(Ins::OpEQ());
							break;
						case WfBinaryOperator::NE:
							INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(mergedType)));
							INSTRUCTION(Ins::OpNE());
							break;
						case WfBinaryOperator::Xor:
							INSTRUCTION(Ins::OpXor(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::And:
							INSTRUCTION(Ins::OpAnd(GetInstructionTypeArgument(mergedType)));
							break;
						case WfBinaryOperator::Or:
							INSTRUCTION(Ins::OpOr(GetInstructionTypeArgument(mergedType)));
							break;
						default:;
						}
					}
				}

				void Visit(WfLetExpression* node)override
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					Array<vint> variableIndices(node->variables.Count());
					auto function = context.functionContext->function;
					FOREACH_INDEXER(Ptr<WfLetVariable>, var, index, node->variables)
					{
						auto symbol = scope->symbols[var->name.value][0];
						vint variableIndex = function->argumentNames.Count() + function->localVariableNames.Add(L"<let>" + var->name.value);
						context.functionContext->localVariables.Add(symbol.Obj(), variableIndex);
						variableIndices[index] = variableIndex;

						GenerateExpressionInstructions(context, var->value);
						INSTRUCTION(Ins::StoreLocalVar(variableIndex));
					}
					GenerateExpressionInstructions(context, node->expression);
					FOREACH_INDEXER(Ptr<WfLetVariable>, var, index, node->variables)
					{
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::StoreLocalVar(variableIndices[index]));
					}
				}

				void Visit(WfIfExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];
					GenerateExpressionInstructions(context, node->condition);
					vint fillTrueIndex = INSTRUCTION(Ins::JumpIf(-1));
					GenerateExpressionInstructions(context, node->falseBranch, result.type);
					vint fillEndIndex = INSTRUCTION(Ins::Jump(-1));
					context.assembly->instructions[fillTrueIndex].indexParameter = context.assembly->instructions.Count();
					GenerateExpressionInstructions(context, node->trueBranch, result.type);
					context.assembly->instructions[fillEndIndex].indexParameter = context.assembly->instructions.Count();
				}

				void Visit(WfRangeExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];
					auto elementType = result.type->GetElementType()->GetGenericArgument(0);
					auto type = GetInstructionTypeArgument(elementType);
					
					GenerateExpressionInstructions(context, node->begin, elementType);
					if (node->beginBoundary == WfRangeBoundary::Exclusive)
					{
						INSTRUCTION(Ins::LoadValue(BoxValue<vint>(1)));
						INSTRUCTION(Ins::OpAdd(type));
					}
					
					GenerateExpressionInstructions(context, node->end, elementType);
					if (node->endBoundary == WfRangeBoundary::Exclusive)
					{
						INSTRUCTION(Ins::LoadValue(BoxValue<vint>(1)));
						INSTRUCTION(Ins::OpSub(type));
					}

					INSTRUCTION(Ins::CreateRange(type));
				}

				void Visit(WfSetTestingExpression* node)override
				{
					if (auto range = node->collection.Cast<WfRangeExpression>())
					{
						auto resultElement = context.manager->expressionResolvings[node->element.Obj()];
						auto resultBegin = context.manager->expressionResolvings[range->begin.Obj()];
						auto resultEnd = context.manager->expressionResolvings[range->end.Obj()];
						auto typeElement = resultElement.expectedType ? resultElement.expectedType : resultElement.type;
						auto typeBegin = resultBegin.expectedType ? resultBegin.expectedType : resultBegin.type;
						auto typeEnd = resultEnd.expectedType ? resultEnd.expectedType : resultEnd.type;
						auto typeLeft = GetMergedType(typeElement, typeBegin);
						auto typeRight = GetMergedType(typeElement, typeEnd);

						auto function = context.functionContext->function;
						vint index = function->argumentNames.Count() + function->localVariableNames.Add(L"<anonymous-range-test>");
						GenerateExpressionInstructions(context, node->element);
						INSTRUCTION(Ins::StoreLocalVar(index));
						
						INSTRUCTION(Ins::LoadLocalVar(index));
						if (!IsSameType(typeElement.Obj(), typeLeft.Obj()))
						{
							GenerateTypeCastInstructions(context, typeLeft, true, node);
						}
						GenerateExpressionInstructions(context, range->begin, typeLeft);
						INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(typeLeft)));
						if (range->beginBoundary == WfRangeBoundary::Exclusive)
						{
							INSTRUCTION(Ins::OpGT());
						}
						else
						{
							INSTRUCTION(Ins::OpGE());
						}

						INSTRUCTION(Ins::LoadLocalVar(index));
						if (!IsSameType(typeElement.Obj(), typeRight.Obj()))
						{
							GenerateTypeCastInstructions(context, typeRight, true, node);
						}
						GenerateExpressionInstructions(context, range->end, typeRight);
						INSTRUCTION(Ins::CompareLiteral(GetInstructionTypeArgument(typeRight)));
						if (range->endBoundary == WfRangeBoundary::Exclusive)
						{
							INSTRUCTION(Ins::OpLT());
						}
						else
						{
							INSTRUCTION(Ins::OpLE());
						}

						INSTRUCTION(Ins::OpAnd(WfInsType::Bool));
						if (node->test == WfSetTesting::NotIn)
						{
							INSTRUCTION(Ins::OpNot(WfInsType::Bool));
						}
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::StoreLocalVar(index));
					}
					else
					{
						auto result = context.manager->expressionResolvings[node->collection.Obj()];
						auto type = result.expectedType ? result.expectedType : result.type;

						GenerateExpressionInstructions(context, node->element);
						GenerateExpressionInstructions(context, node->collection);

						auto tdList = description::GetTypeDescriptor<IValueReadonlyList>();
						if (result.type->GetTypeDescriptor()->CanConvertTo(tdList))
						{
							auto method = tdList->GetMethodGroupByName(L"Contains", true)->GetMethod(0);
							INSTRUCTION(Ins::InvokeMethod(method, 1));
						}
						else
						{
							INSTRUCTION(Ins::TestElementInSet());
						}

						if (node->test == WfSetTesting::NotIn)
						{
							INSTRUCTION(Ins::OpNot(WfInsType::Bool));
						}
					}
				}

				void Visit(WfConstructorExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];

					if (result.type->GetTypeDescriptor()->GetTypeDescriptorFlags() == TypeDescriptorFlags::Struct)
					{
						auto td = result.type->GetTypeDescriptor();
						INSTRUCTION(Ins::CreateStruct(Value::BoxedValue, td));

						FOREACH(Ptr<WfConstructorArgument>, argument, node->arguments)
						{
							auto prop = td->GetPropertyByName(argument->key.Cast<WfReferenceExpression>()->name.value, true);
							GenerateExpressionInstructions(context, argument->value, CopyTypeInfo(prop->GetReturn()));
							INSTRUCTION(Ins::UpdateProperty(prop));
						}
					}
					else if (result.type->GetTypeDescriptor() == description::GetTypeDescriptor<IValueEnumerable>()
						|| result.type->GetTypeDescriptor() == description::GetTypeDescriptor<IValueReadonlyList>()
						|| result.type->GetTypeDescriptor() == description::GetTypeDescriptor<IValueList>())
					{
						Ptr<ITypeInfo> keyType = CopyTypeInfo(result.type->GetElementType()->GetGenericArgument(0));
						FOREACH(Ptr<WfConstructorArgument>, argument, From(node->arguments).Reverse())
						{
							GenerateExpressionInstructions(context, argument->key, keyType);
						}
						INSTRUCTION(Ins::CreateArray(node->arguments.Count()));
					}
					else
					{
						Ptr<ITypeInfo> keyType = CopyTypeInfo(result.type->GetElementType()->GetGenericArgument(0));
						Ptr<ITypeInfo> valueType = CopyTypeInfo(result.type->GetElementType()->GetGenericArgument(1));
						FOREACH(Ptr<WfConstructorArgument>, argument, From(node->arguments).Reverse())
						{
							GenerateExpressionInstructions(context, argument->key, keyType);
							GenerateExpressionInstructions(context, argument->value, valueType);
						}
						INSTRUCTION(Ins::CreateMap(node->arguments.Count() * 2));
					}
				}

				void Visit(WfInferExpression* node)override
				{
					GenerateExpressionInstructions(context, node->expression);
				}

				void Visit(WfTypeCastingExpression* node)override
				{
					if (node->strategy == WfTypeCastingStrategy::Strong)
					{
						auto result = context.manager->expressionResolvings[node];
						GenerateExpressionInstructions(context, node->expression, result.type);
					}
					else
					{
						auto scope = context.manager->nodeScopes[node].Obj();
						auto type = CreateTypeInfoFromType(scope, node->type);
						GenerateExpressionInstructions(context, node->expression);
						GenerateTypeCastInstructions(context, type, false, node);
					}
				}

				void Visit(WfTypeTestingExpression* node)override
				{
					switch (node->test)
					{
					case WfTypeTesting::IsNull:
						GenerateExpressionInstructions(context, node->expression);
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::CompareReference());
						break;
					case WfTypeTesting::IsNotNull:
						GenerateExpressionInstructions(context, node->expression);
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::CompareReference());
						INSTRUCTION(Ins::OpNot(WfInsType::Bool));
						break;
					case WfTypeTesting::IsType:
						{
							auto scope = context.manager->nodeScopes[node].Obj();
							auto type = CreateTypeInfoFromType(scope, node->type);
							GenerateExpressionInstructions(context, node->expression);
							GenerateTypeTestingInstructions(context, type, node);
						}
						break;
					case WfTypeTesting::IsNotType:
						{
							auto scope = context.manager->nodeScopes[node].Obj();
							auto type = CreateTypeInfoFromType(scope, node->type);
							GenerateExpressionInstructions(context, node->expression);
							GenerateTypeTestingInstructions(context, type, node);
							INSTRUCTION(Ins::OpNot(WfInsType::Bool));
						}
						break;
					}
				}

				void Visit(WfTypeOfTypeExpression* node)override
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					auto type = CreateTypeInfoFromType(scope, node->type);
					auto value = Value::From(type->GetTypeDescriptor());
					INSTRUCTION(Ins::LoadValue(value));
				}

				void Visit(WfTypeOfExpressionExpression* node)override
				{
					GenerateExpressionInstructions(context, node->expression);
					INSTRUCTION(Ins::GetType());
				}

				void Visit(WfAttachEventExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node->event.Obj()];
					if (auto member = node->event.Cast<WfMemberExpression>())
					{
						GenerateExpressionInstructions(context, member->parent);
					}
					else
					{
						VisitThisExpression(node, result.eventInfo->GetOwnerTypeDescriptor());
					}
					GenerateExpressionInstructions(context, node->function);
					INSTRUCTION(Ins::AttachEvent(result.eventInfo));
				}

				void Visit(WfDetachEventExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node->event.Obj()];
					if (auto member = node->event.Cast<WfMemberExpression>())
					{
						GenerateExpressionInstructions(context, member->parent);
					}
					else
					{
						VisitThisExpression(node, result.eventInfo->GetOwnerTypeDescriptor());
					}
					GenerateExpressionInstructions(context, node->handler);
					INSTRUCTION(Ins::DetachEvent(result.eventInfo));
				}

				void Visit(WfObserveExpression* node)override
				{
				}

				void Visit(WfCallExpression* node)override
				{
					FOREACH(Ptr<WfExpression>, argument, node->arguments)
					{
						GenerateExpressionInstructions(context, argument);
					}

					auto result = context.manager->expressionResolvings[node->function.Obj()];
					if (result.methodInfo)
					{
						if (result.methodInfo->IsStatic())
						{
							INSTRUCTION(Ins::LoadValue(Value()));
						}
						else if (auto member = node->function.Cast<WfMemberExpression>())
						{
							GenerateExpressionInstructions(context, member->parent);
						}
						else
						{
							VisitThisExpression(node, result.methodInfo->GetOwnerTypeDescriptor());
						}

						INSTRUCTION(Ins::InvokeMethod(result.methodInfo, node->arguments.Count()));
						return;
					}
					else if (result.eventInfo)
					{
						if(auto member = node->function.Cast<WfMemberExpression>())
						{
							GenerateExpressionInstructions(context, member->parent);
						}
						else
						{
							VisitThisExpression(node, result.eventInfo->GetOwnerTypeDescriptor());
						}
						INSTRUCTION(Ins::InvokeEvent(result.eventInfo, node->arguments.Count()));
						return;
					}
					else if (result.symbol)
					{
						if (result.symbol->creatorNode.Cast<WfFunctionDeclaration>())
						{
							if (result.symbol->ownerScope->ownerNode.Cast<WfNewInterfaceExpression>())
							{
								vint functionIndex = context.closureFunctions[result.symbol.Obj()];
								INSTRUCTION(Ins::InvokeWithContext(functionIndex, node->arguments.Count()));
								return;
							}
							else
							{
								vint index = context.globalFunctions.Keys().IndexOf(result.symbol.Obj());
								if (index != -1)
								{
									vint functionIndex = context.globalFunctions.Values()[index];
									INSTRUCTION(Ins::Invoke(functionIndex, node->arguments.Count()));
									return;
								}
							}
						}
					}

					GenerateExpressionInstructions(context, node->function);
					INSTRUCTION(Ins::InvokeProxy(node->arguments.Count()));
				}

				static void VisitFunction(WfCodegenContext& context, WfFunctionDeclaration* node, WfCodegenLambdaContext lc, const Func<WString(vint)>& getName)
				{
					auto scope = context.manager->nodeScopes[node].Obj();
					bool inNewInterfaceExpr = scope->parentScope && scope->parentScope->ownerNode.Cast<WfNewInterfaceExpression>();
					auto functionIndex = AddClosure(context, lc, getName);

					if (inNewInterfaceExpr)
					{
						INSTRUCTION(Ins::LoadFunction(functionIndex));
					}
					else
					{
						auto capture = context.manager->lambdaCaptures.Get(node);
						FOREACH(Ptr<WfLexicalSymbol>, symbol, capture->symbols)
						{
							GenerateLoadSymbolInstructions(context, symbol.Obj(), node);
						}
						vint thisCount = PushCapturedThisValues(context, scope->parentScope.Obj(), node);
						INSTRUCTION(Ins::CreateClosureContext(capture->symbols.Count() + thisCount));
						INSTRUCTION(Ins::LoadFunction(functionIndex));
						INSTRUCTION(Ins::CreateClosure());
					}
				}

				void Visit(WfFunctionExpression* node)override
				{
					WfCodegenLambdaContext lc;
					lc.functionExpression = node;
					VisitFunction(context, node->function.Obj(), lc, [=](vint index)
					{
						return L"<lambda:" + node->function->name.value + L"(" + itow(index) + L")> in " + context.functionContext->function->name;
					});
				}

				class NewInterfaceExpressionVisitor : public empty_visitor::DeclarationVisitor
				{
				public:
					WfCodegenContext&						context;
					vint									variableCount = 0;
					List<Ptr<WfLexicalSymbol>>				variableSymbols;
					List<Ptr<WfFunctionDeclaration>>		closureFunctions;
					List<Ptr<WfFunctionDeclaration>>		overrideFunctions;
					WfFunctionDeclaration*					firstFunction = nullptr;

					NewInterfaceExpressionVisitor(WfCodegenContext& _context)
						:context(_context)
					{
					}

					void Dispatch(WfVirtualDeclaration* node)override
					{
						FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
						{
							decl->Accept(this);
						}
					}

					void Visit(WfFunctionDeclaration* node)override
					{
						if (!firstFunction)
						{
							firstFunction = node;
						}

						if (node->classMember->kind == WfClassMemberKind::Normal)
						{
							closureFunctions.Add(node);
						}
						else
						{
							overrideFunctions.Add(node);
						}
					}

					void Visit(WfVariableDeclaration* node)override
					{
						variableCount++;
					}

					void Execute(WfNewInterfaceExpression* node)
					{
						FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
						{
							memberDecl->Accept(this);
						}

						if (firstFunction != nullptr && variableCount > 0)
						{
							auto capture = context.manager->lambdaCaptures.Get(firstFunction);
							CopyFrom(variableSymbols, From(capture->symbols).Take(variableCount));
						}
					}
				};

				void Visit(WfNewClassExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];
					FOREACH(Ptr<WfExpression>, argument, node->arguments)
					{
						GenerateExpressionInstructions(context, argument);
					}
					INSTRUCTION(Ins::LoadValue(Value()));
					INSTRUCTION(Ins::InvokeMethod(result.constructorInfo, node->arguments.Count()));
				}

				void Visit(WfNewInterfaceExpression* node)override
				{
					auto result = context.manager->expressionResolvings[node];
					NewInterfaceExpressionVisitor declVisitor(context);
					declVisitor.Execute(node);

					if (declVisitor.firstFunction != nullptr)
					{
						for (vint i = 0; i < declVisitor.variableCount; i++)
						{
							auto var = declVisitor.variableSymbols[i]->creatorNode.Cast<WfVariableDeclaration>();
							GenerateExpressionInstructions(context, var->expression);
						}

						auto capture = context.manager->lambdaCaptures.Get(declVisitor.firstFunction);
						for (vint i = declVisitor.variableCount; i < capture->symbols.Count(); i++)
						{
							GenerateLoadSymbolInstructions(context, capture->symbols[i].Obj(), node);
						}
						auto scope = context.manager->nodeScopes[node].Obj();
						vint thisCount = PushCapturedThisValues(context, scope, node);
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::CreateClosureContext(capture->symbols.Count() + thisCount + 1));

						FOREACH(Ptr<WfFunctionDeclaration>, func, declVisitor.closureFunctions)
						{
							WfCodegenLambdaContext lc;
							lc.functionDeclaration = func.Obj();
							auto functionIndex = AddClosure(context, lc, [=](vint index)
							{
								return L"<method:" + func->name.value + L"<" + result.type->GetTypeDescriptor()->GetTypeName() + L">(" + itow(index) + L")> in " + context.functionContext->function->name;
							});

							auto scope = context.manager->nodeScopes[func.Obj()].Obj();
							auto symbol = context.manager->GetDeclarationSymbol(scope, func.Obj());
							context.closureFunctions.Add(symbol.Obj(), functionIndex);
						}

						FOREACH(Ptr<WfFunctionDeclaration>, func, declVisitor.overrideFunctions)
						{
							auto methodInfo = context.manager->interfaceMethodImpls[func.Obj()];
							INSTRUCTION(Ins::LoadMethodInfo(methodInfo));
							WfCodegenLambdaContext lc;
							lc.functionDeclaration = func.Obj();
							VisitFunction(context, func.Obj(), lc, [=, &declVisitor](vint index)
							{
								return L"<method:" + func->name.value + L"<" + result.type->GetTypeDescriptor()->GetTypeName() + L">(" + itow(index + declVisitor.closureFunctions.Count()) + L")> in " + context.functionContext->function->name;
							});
						}
					}

					INSTRUCTION(Ins::CreateInterface(result.constructorInfo, declVisitor.overrideFunctions.Count() * 2));
				}

				void Visit(WfVirtualExpression* node)override
				{
					GenerateExpressionInstructions(context, node->expandedExpression);
				}
			};

#undef INSTRUCTION

			Ptr<reflection::description::ITypeInfo> GenerateExpressionInstructions(WfCodegenContext& context, Ptr<WfExpression> expression, Ptr<reflection::description::ITypeInfo> expectedType)
			{
				GenerateExpressionInstructionsVisitor visitor(context);
				expression->Accept(&visitor);

				auto result = context.manager->expressionResolvings[expression.Obj()];
				auto type = result.type;

				if (result.expectedType && !IsSameType(type.Obj(), result.expectedType.Obj()))
				{
					type = result.expectedType;
					GenerateTypeCastInstructions(context, type, true, expression.Obj());
				}

				if (expectedType && !IsSameType(type.Obj(), expectedType.Obj()))
				{
					type = expectedType;
					GenerateTypeCastInstructions(context, type, true, expression.Obj());
				}

				return type;
			}
		}
	}
}

/***********************************************************************
EMITTER\WFEMITTER_METADATA.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace emitter
		{
			using namespace collections;
			using namespace reflection::description;
			using namespace analyzer;
			using namespace runtime;
			using namespace typeimpl;

/***********************************************************************
GenerateGlobalDeclarationMetadata
***********************************************************************/

			void GenerateFunctionDeclarationMetadata(WfCodegenContext& context, WfFunctionDeclaration* node, Ptr<WfAssemblyFunction> meta)
			{
				FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
				{
					meta->argumentNames.Add(argument->name.value);
				}
				{
					vint index = context.manager->lambdaCaptures.Keys().IndexOf(node);
					if (index != -1)
					{
						auto capture = context.manager->lambdaCaptures.Values()[index];
						FOREACH(Ptr<WfLexicalSymbol>, symbol, capture->symbols)
						{
							meta->capturedVariableNames.Add(L"<captured>" + symbol->name);
						}
					}

					auto scope = context.manager->nodeScopes[node];
					vint count = context.GetThisStackCount(scope.Obj());
					for (vint i = 0; i < count; i++)
					{
						meta->capturedVariableNames.Add(L"<captured-this>" + itow(i));
					}
				}
			}

			class GenerateGlobalClassMemberMetadataVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCodegenContext&						context;
				WString									namePrefix;
				Ptr<WfClassDeclaration>					classDecl;

				GenerateGlobalClassMemberMetadataVisitor(WfCodegenContext& _context, const WString& _namePrefix, Ptr<WfClassDeclaration> _classDecl)
					:context(_context)
					, namePrefix(_namePrefix)
					, classDecl(_classDecl)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					if (node->classMember->kind == WfClassMemberKind::Static)
					{
						GenerateGlobalDeclarationMetadata(context, node, namePrefix);
						auto scope = context.manager->nodeScopes[node].Obj();
						auto symbol = context.manager->GetDeclarationSymbol(scope, node);
						auto index = context.globalFunctions[symbol.Obj()];
						auto info = context.manager->declarationMemberInfos[node].Cast<WfStaticMethod>();
						info->functionIndex = index;
					}
					else if (classDecl->kind == WfClassKind::Class)
					{
						GenerateGlobalDeclarationMetadata(context, node, namePrefix);
						auto scope = context.manager->nodeScopes[node].Obj();
						auto symbol = context.manager->GetDeclarationSymbol(scope, node);
						auto index = context.globalFunctions[symbol.Obj()];
						auto info = context.manager->declarationMemberInfos[node].Cast<WfClassMethod>();
						info->functionIndex = index;
					}
				}

				void Visit(WfVariableDeclaration* node)override
				{
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
					auto meta = MakePtr<WfAssemblyFunction>();
					meta->name = namePrefix + L"#ctor";
					FOREACH(Ptr<WfFunctionArgument>, argument, node->arguments)
					{
						meta->argumentNames.Add(argument->name.value);
					}
					meta->capturedVariableNames.Add(L"<captured-this>0");

					vint index = context.assembly->functions.Add(meta);
					context.assembly->functionByName.Add(meta->name, index);
					context.constructors.Add(node, index);

					auto info = context.manager->declarationMemberInfos[node].Cast<WfClassConstructor>();
					info->functionIndex = index;
				}

				void Visit(WfDestructorDeclaration* node)override
				{
					auto meta = MakePtr<WfAssemblyFunction>();
					meta->name = namePrefix + L"#dtor";
					meta->capturedVariableNames.Add(L"<captured-this>0");

					vint index = context.assembly->functions.Add(meta);
					context.assembly->functionByName.Add(meta->name, index);
					context.destructors.Add(node, index);

					auto info = context.manager->declarationTypes[classDecl.Obj()].Cast<WfClass>();
					info->destructorFunctionIndex = index;
				}

				void Visit(WfClassDeclaration* node)override
				{
					GenerateGlobalDeclarationMetadata(context, node, namePrefix);
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			class GenerateGlobalDeclarationMetadataVisitor : public Object, public WfDeclaration::IVisitor
			{
			public:
				WfCodegenContext&						context;
				WString									namePrefix;

				GenerateGlobalDeclarationMetadataVisitor(WfCodegenContext& _context, const WString& _namePrefix)
					:context(_context)
					, namePrefix(_namePrefix)
				{
				}

				void Visit(WfNamespaceDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->declarations)
					{
						GenerateGlobalDeclarationMetadata(context, decl, namePrefix + node->name.value + L"::");
					}
				}

				void Visit(WfFunctionDeclaration* node)override
				{
					auto meta = MakePtr<WfAssemblyFunction>();
					meta->name = namePrefix + node->name.value;
					GenerateFunctionDeclarationMetadata(context, node, meta);

					vint index = context.assembly->functions.Add(meta);
					context.assembly->functionByName.Add(meta->name, index);

					auto scope = context.manager->nodeScopes[node].Obj();
					auto symbol = context.manager->GetDeclarationSymbol(scope, node);
					context.globalFunctions.Add(symbol.Obj(), index);
				}

				void Visit(WfVariableDeclaration* node)override
				{
					vint index = context.assembly->variableNames.Add(namePrefix + node->name.value);

					auto scope = context.manager->nodeScopes[node].Obj();
					auto symbol = scope->symbols[node->name.value][0];
					context.globalVariables.Add(symbol.Obj(), index);
				}

				void Visit(WfEventDeclaration* node)override
				{
				}

				void Visit(WfPropertyDeclaration* node)override
				{
				}

				void Visit(WfConstructorDeclaration* node)override
				{
				}

				void Visit(WfDestructorDeclaration* node)override
				{
				}

				void Visit(WfClassDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, memberDecl, node->declarations)
					{
						GenerateGlobalClassMemberMetadataVisitor visitor(context, namePrefix + node->name.value + L"::", node);
						memberDecl->Accept(&visitor);
					}
				}

				void Visit(WfEnumDeclaration* node)override
				{
				}

				void Visit(WfStructDeclaration* node)override
				{
				}

				void Visit(WfVirtualDeclaration* node)override
				{
					FOREACH(Ptr<WfDeclaration>, decl, node->expandedDeclarations)
					{
						decl->Accept(this);
					}
				}
			};

			void GenerateGlobalDeclarationMetadata(WfCodegenContext& context, Ptr<WfDeclaration> declaration, const WString& namePrefix)
			{
				GenerateGlobalDeclarationMetadataVisitor visitor(context, namePrefix);
				declaration->Accept(&visitor);
			}
		}
	}
}

/***********************************************************************
EMITTER\WFEMITTER_STATEMENT.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		namespace emitter
		{
			using namespace collections;
			using namespace reflection;
			using namespace reflection::description;
			using namespace analyzer;
			using namespace runtime;

			typedef WfInstruction Ins;

#define INSTRUCTION(X) context.AddInstruction(node, X)
#define EXIT_CODE(X) context.AddExitInstruction(node, X)

/***********************************************************************
GenerateInstructions(Statement)
***********************************************************************/

			class GenerateStatementInstructionsVisitor : public Object, public WfStatement::IVisitor
			{
			public:
				WfCodegenContext&						context;

				GenerateStatementInstructionsVisitor(WfCodegenContext& _context)
					:context(_context)
				{
				}

				void ApplyExitCode(Ptr<WfCodegenScopeContext> scopeContext)
				{
					context.ApplyExitInstructions(scopeContext);
					if (scopeContext->exitStatement)
					{
						GenerateStatementInstructions(context, scopeContext->exitStatement);
					}
				}

				void ApplyCurrentScopeExitCode()
				{
					auto scopeContext = context.functionContext->GetCurrentScopeContext();
					ApplyExitCode(scopeContext);
				}

				void InlineScopeExitCode(WfCodegenScopeType untilScopeType, bool exclusive)
				{
					vint index = context.functionContext->scopeContextStack.Count() - 1;
					while (index >= 0)
					{
						auto scopeContext = context.functionContext->scopeContextStack[index];
						if (exclusive && scopeContext->type == untilScopeType) break;
						ApplyExitCode(scopeContext);
						if (!exclusive && scopeContext->type == untilScopeType) break;
						index--;
					}
				}

				void Visit(WfBreakStatement* node)override
				{
					InlineScopeExitCode(WfCodegenScopeType::Loop, false);
					context.functionContext->GetCurrentScopeContext(WfCodegenScopeType::Loop)->breakInstructions.Add(INSTRUCTION(Ins::Jump(-1)));
				}

				void Visit(WfContinueStatement* node)override
				{
					InlineScopeExitCode(WfCodegenScopeType::Loop, true);
					context.functionContext->GetCurrentScopeContext(WfCodegenScopeType::Loop)->continueInstructions.Add(INSTRUCTION(Ins::Jump(-1)));
				}

				void Visit(WfReturnStatement* node)override
				{
					InlineScopeExitCode(WfCodegenScopeType::Function, false);
					if (node->expression)
					{
						GenerateExpressionInstructions(context, node->expression);
					}
					else
					{
						INSTRUCTION(Ins::LoadValue(Value()));
					}
					INSTRUCTION(Ins::Return());
				}

				void Visit(WfDeleteStatement* node)override
				{
					GenerateExpressionInstructions(context, node->expression);
					INSTRUCTION(Ins::DeleteRawPtr());
				}

				void Visit(WfRaiseExceptionStatement* node)override
				{
					if (node->expression)
					{
						GenerateExpressionInstructions(context, node->expression);
					}
					else
					{
						auto scope = context.manager->nodeScopes[node];
						while (scope)
						{
							if (auto tryCatch = scope->ownerNode.Cast<WfTryStatement>())
							{
								if (tryCatch->name.value != L"")
								{
									auto symbol = scope->symbols[tryCatch->name.value][0].Obj();
									vint index = context.functionContext->localVariables[symbol];
									INSTRUCTION(Ins::LoadLocalVar(index));
									break;
								}
							}
							scope = scope->parentScope;
						}
					}
					INSTRUCTION(Ins::RaiseException());
				}

				void Visit(WfIfStatement* node)override
				{
					vint variableIndex = -1;

					GenerateExpressionInstructions(context, node->expression);
					if (node->name.value != L"")
					{
						auto scope = context.manager->nodeScopes[node];
						auto symbol = scope->symbols[node->name.value][0];
						auto function = context.functionContext->function;
						variableIndex = function->argumentNames.Count() + function->localVariableNames.Add(L"<if>" + node->name.value);
						context.functionContext->localVariables.Add(symbol.Obj(), variableIndex);

						GenerateTypeCastInstructions(context, symbol->typeInfo, false, node->expression.Obj());
						INSTRUCTION(Ins::StoreLocalVar(variableIndex));
						INSTRUCTION(Ins::LoadLocalVar(variableIndex));
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::CompareReference());
					}
					else
					{
						INSTRUCTION(Ins::OpNot(WfInsType::Bool));
					}
					vint fillElseIndex = INSTRUCTION(Ins::JumpIf(-1));

					GenerateStatementInstructions(context, node->trueBranch);
					if (variableIndex != -1)
					{
						INSTRUCTION(Ins::LoadValue(Value()));
						INSTRUCTION(Ins::StoreLocalVar(variableIndex));
					}
					vint fillEndIndex = INSTRUCTION(Ins::Jump(-1));
					context.assembly->instructions[fillElseIndex].indexParameter = context.assembly->instructions.Count();

					if (node->falseBranch)
					{
						GenerateStatementInstructions(context, node->falseBranch);
					}
					context.assembly->instructions[fillEndIndex].indexParameter = context.assembly->instructions.Count();
				}

				void Visit(WfWhileStatement* node)override
				{
					vint continueLabelIndex = -1;
					vint breakLabelIndex = -1;
					vint loopLabelIndex = -1;
					auto loopContext = context.functionContext->PushScopeContext(WfCodegenScopeType::Loop);

					loopLabelIndex = context.assembly->instructions.Count();
					continueLabelIndex = context.assembly->instructions.Count();
					GenerateExpressionInstructions(context, node->condition);
					INSTRUCTION(Ins::OpNot(WfInsType::Bool));
					loopContext->breakInstructions.Add(INSTRUCTION(Ins::JumpIf(-1)));
					GenerateStatementInstructions(context, node->statement);
					INSTRUCTION(Ins::Jump(loopLabelIndex));
					breakLabelIndex = context.assembly->instructions.Count();

					FOREACH(vint, index, loopContext->continueInstructions)
					{
						context.assembly->instructions[index].indexParameter = continueLabelIndex;
					}
					FOREACH(vint, index, loopContext->breakInstructions)
					{
						context.assembly->instructions[index].indexParameter = breakLabelIndex;
					}
					context.functionContext->PopScopeContext();
				}

				Pair<int, int> GenerateTryProtected(WfStatement* node, Ptr<WfStatement> protectedStatement, Ptr<WfStatement> finallyStatement)
				{
					auto catchContext = context.functionContext->PushScopeContext(WfCodegenScopeType::TryCatch);
					EXIT_CODE(Ins::UninstallTry(0));
					catchContext->exitStatement = finallyStatement;

					vint trap = INSTRUCTION(Ins::InstallTry(-1));
					GenerateStatementInstructions(context, protectedStatement);
					context.functionContext->PopScopeContext();
					INSTRUCTION(Ins::UninstallTry(0));
					vint finish = INSTRUCTION(Ins::Jump(-1));

					return{ trap,finish };
				}

				vint GenerateExceptionVariable(WfTryStatement* node)
				{
					WfLexicalSymbol* exceptionSymbol = nullptr;
					WString exceptionName;
					if (node->catchStatement)
					{
						auto scope = context.manager->nodeScopes[node].Obj();
						exceptionSymbol = scope->symbols[node->name.value][0].Obj();
						exceptionName = L"<catch>" + node->name.value;
					}
					else
					{
						exceptionName = L"<try-finally-exception>";
					}

					auto function = context.functionContext->function;
					vint variableIndex = function->argumentNames.Count() + function->localVariableNames.Add(L"<catch>" + node->name.value);
					if (exceptionSymbol)
					{
						context.functionContext->localVariables.Add(exceptionSymbol, variableIndex);
					}

					return variableIndex;
				}

				void GenerateTrap(WfTryStatement* node, vint variableIndex, Pair<int, int> trap)
				{
					context.assembly->instructions[trap.key].indexParameter = context.assembly->instructions.Count();
					INSTRUCTION(Ins::LoadException());
					INSTRUCTION(Ins::StoreLocalVar(variableIndex));
				}

				void GenerateFinallyAndRaise(WfTryStatement* node, vint variableIndex)
				{
					GenerateStatementInstructions(context, node->finallyStatement);
					INSTRUCTION(Ins::LoadLocalVar(variableIndex));
					INSTRUCTION(Ins::RaiseException());
				}

				void Visit(WfTryStatement* node)override
				{
					// try
					auto trap1 = GenerateTryProtected(node, node->protectedStatement, node->finallyStatement);
					Pair<int, int> trap2 = { -1,-1 };
					auto variableIndex = GenerateExceptionVariable(node);

					// catch
					{
						GenerateTrap(node, variableIndex, trap1);
						if (node->catchStatement)
						{
							if (node->finallyStatement)
							{
								trap2 = GenerateTryProtected(node, node->catchStatement, node->finallyStatement);
								GenerateTrap(node, variableIndex, trap2);
								GenerateFinallyAndRaise(node, variableIndex);
							}
							else
							{
								GenerateStatementInstructions(context, node->catchStatement);
							}
						}
						else
						{
							GenerateFinallyAndRaise(node, variableIndex);
						}
					}

					// finally
					context.assembly->instructions[trap1.value].indexParameter = context.assembly->instructions.Count();
					if (trap2.value != -1)
					{
						context.assembly->instructions[trap2.value].indexParameter = context.assembly->instructions.Count();
					}
					if (node->finallyStatement)
					{
						GenerateStatementInstructions(context, node->finallyStatement);
					}
				}

				void Visit(WfBlockStatement* node)override
				{
					FOREACH(Ptr<WfStatement>, statement, node->statements)
					{
						GenerateStatementInstructions(context, statement);
					}
				}

				void Visit(WfExpressionStatement* node)override
				{
					GenerateExpressionInstructions(context, node->expression);
					INSTRUCTION(Ins::Pop());
				}

				void Visit(WfVariableStatement* node)override
				{
					auto manager = context.manager;
					auto scope = manager->nodeScopes[node->variable.Obj()];
					auto symbol = scope->symbols[node->variable->name.value][0].Obj();
					auto function = context.functionContext->function;
					vint index = function->argumentNames.Count() + function->localVariableNames.Add(node->variable->name.value);
					context.functionContext->localVariables.Add(symbol, index);

					GenerateExpressionInstructions(context, node->variable->expression);
					INSTRUCTION(Ins::StoreLocalVar(index));
				}

				void Visit(WfVirtualStatement* node)override
				{
					GenerateStatementInstructions(context, node->expandedStatement);
				}

				void Visit(WfCoroutineStatement* node)override
				{
					CHECK_FAIL(L"GenerateStatementInstructionsVisitor::Visit(WfCoroutineStatement*)#Internal error, All coroutine statements do not emit instructions.");
				}
			};

#undef EXIT_CODE
#undef INSTRUCTION

			void GenerateStatementInstructions(WfCodegenContext& context, Ptr<WfStatement> statement)
			{
				GenerateStatementInstructionsVisitor visitor(context);
				statement->Accept(&visitor);
			}
		}
	}
}

/***********************************************************************
EXPRESSION\WFEXPRESSION.CPP
***********************************************************************/

namespace vl
{
	namespace workflow
	{
		using namespace stream;
		using namespace collections;
		using namespace parsing;

/***********************************************************************
Unescaping Functions
***********************************************************************/

		void SetDefaultClassMember(vl::collections::List<vl::Ptr<WfDeclaration>>& value, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			FOREACH(Ptr<WfDeclaration>, decl, value)
			{
				if (!decl->classMember)
				{
					decl->classMember = MakePtr<WfClassMember>();
					decl->classMember->codeRange = decl->codeRange;
					decl->classMember->kind = WfClassMemberKind::Normal;
				}
			}
		}

		void UnescapeStringInternal(vl::parsing::ParsingToken& value, bool formatString)
		{
			MemoryStream memoryStream;
			{
				WString input = formatString ? value.value.Sub(2, value.value.Length() - 3) : value.value.Sub(1, value.value.Length() - 2);
				const wchar_t* reading = input.Buffer();
				StreamWriter writer(memoryStream);

				while (wchar_t c = *reading++)
				{
					if (c == L'\\')
					{
						switch (wchar_t e = *reading++)
						{
						case L'r':
							writer.WriteChar('\r');
							break;
						case L'n':
							writer.WriteChar('\n');
							break;
						case L't':
							writer.WriteChar('\t');
							break;
						default:
							writer.WriteChar(e);
						}
					}
					else
					{
						writer.WriteChar(c);
					}
				}
			}

			memoryStream.SeekFromBegin(0);
			{
				StreamReader reader(memoryStream);
				value.value = reader.ReadToEnd();
			}
		}

		void UnescapeFormatString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			UnescapeStringInternal(value, true);
		}

		void UnescapeString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			UnescapeStringInternal(value, false);
		}

		void EscapeString(const WString& text, ParsingWriter& writer)
		{
			writer.WriteChar(L'\"');
			const wchar_t* reading = text.Buffer();
			while (wchar_t c = *reading++)
			{
				switch (c)
				{
				case '\r':
					writer.WriteString(L"\\r");
					break;
				case '\n':
					writer.WriteString(L"\\n");
					break;
				case '\t':
					writer.WriteString(L"\\t");
					break;
				case '\"':
					writer.WriteString(L"\\\"");
					break;
				case '\\':
					writer.WriteString(L"\\\\");
					break;
				default:
					writer.WriteChar(c);
				}
			}
			writer.WriteChar(L'\"');
		}

/***********************************************************************
Print (Type)
***********************************************************************/

		class PrintTypeVisitor : public Object, public WfType::IVisitor
		{
		public:
			WString								indent;
			ParsingWriter&						writer;

			PrintTypeVisitor(const WString& _indent, ParsingWriter& _writer)
				:indent(_indent), writer(_writer)
			{
			}

			void Visit(WfPredefinedType* node)override
			{
				writer.BeforePrint(node);
				switch (node->name)
				{
				case WfPredefinedTypeName::Void:
					writer.WriteString(L"void");
					break;
				case WfPredefinedTypeName::Object:
					writer.WriteString(L"object");
					break;
				case WfPredefinedTypeName::Interface:
					writer.WriteString(L"interface");
					break;
				case WfPredefinedTypeName::Int:
					writer.WriteString(L"int");
					break;
				case WfPredefinedTypeName::UInt:
					writer.WriteString(L"uint");
					break;
				case WfPredefinedTypeName::Float:
					writer.WriteString(L"float");
					break;
				case WfPredefinedTypeName::Double:
					writer.WriteString(L"double");
					break;
				case WfPredefinedTypeName::String:
					writer.WriteString(L"string");
					break;
				case WfPredefinedTypeName::Char:
					writer.WriteString(L"char");
					break;
				case WfPredefinedTypeName::Bool:
					writer.WriteString(L"bool");
					break;
				}
				writer.AfterPrint(node);
			}

			void Visit(WfTopQualifiedType* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"::" + node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfReferenceType* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfRawPointerType* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->element, indent, writer);
				writer.WriteString(L"*");
				writer.AfterPrint(node);
			}

			void Visit(WfSharedPointerType* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->element, indent, writer);
				writer.WriteString(L"^");
				writer.AfterPrint(node);
			}

			void Visit(WfNullableType* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->element, indent, writer);
				writer.WriteString(L"?");
				writer.AfterPrint(node);
			}

			void Visit(WfEnumerableType* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->element, indent, writer);
				writer.WriteString(L"{}");
				writer.AfterPrint(node);
			}

			void Visit(WfMapType* node)override
			{
				writer.BeforePrint(node);
				if (node->writability == WfMapWritability::Readonly)
				{
					writer.WriteString(L"const ");
				}
				WfPrint(node->value, indent, writer);
				writer.WriteString(L"[");
				if (node->key)
				{
					WfPrint(node->key, indent, writer);
				}
				writer.WriteString(L"]");
				writer.AfterPrint(node);
			}

			void Visit(WfFunctionType* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"(func ");
				writer.WriteString(L"(");
				FOREACH_INDEXER(Ptr<WfType>, type, index, node->arguments)
				{
					if (index > 0)
					{
						writer.WriteString(L", ");
					}
					WfPrint(type, indent, writer);
				}
				writer.WriteString(L")");

				writer.WriteString(L" : (");
				WfPrint(node->result, indent, writer);
				writer.WriteString(L"))");
				writer.AfterPrint(node);
			}

			void Visit(WfChildType* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->parent, indent, writer);
				writer.WriteString(L"::");
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}
		};

/***********************************************************************
Print (Expression)
***********************************************************************/

		class PrintExpressionVisitor
			: public Object
			, public WfExpression::IVisitor
			, public WfVirtualExpression::IVisitor
		{
		public:
			WString								indent;
			ParsingWriter&						writer;

			PrintExpressionVisitor(const WString& _indent, ParsingWriter& _writer)
				:indent(_indent), writer(_writer)
			{
			}

			void Visit(WfThisExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"this");
				writer.AfterPrint(node);
			}

			void Visit(WfTopQualifiedExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"::");
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfReferenceExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfOrderedNameExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfOrderedLambdaExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"[");
				WfPrint(node->body, indent, writer);
				writer.WriteString(L"]");
				writer.AfterPrint(node);
			}

			void Visit(WfMemberExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->parent, indent, writer);
				writer.WriteString(L".");
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfChildExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->parent, indent, writer);
				writer.WriteString(L"::");
				writer.WriteString(node->name.value);
				writer.AfterPrint(node);
			}

			void Visit(WfLiteralExpression* node)override
			{
				writer.BeforePrint(node);
				switch (node->value)
				{
				case WfLiteralValue::Null:
					writer.WriteString(L"null");
					break;
				case WfLiteralValue::True:
					writer.WriteString(L"true");
					break;
				case WfLiteralValue::False:
					writer.WriteString(L"false");
					break;
				}
				writer.AfterPrint(node);
			}

			void Visit(WfFloatingExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(node->value.value);
				writer.AfterPrint(node);
			}

			void Visit(WfIntegerExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(node->value.value);
				writer.AfterPrint(node);
			}

			void Visit(WfStringExpression* node)override
			{
				writer.BeforePrint(node);
				EscapeString(node->value.value, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfUnaryExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"(");
				switch (node->op)
				{
				case WfUnaryOperator::Positive:
					writer.WriteString(L"+");
					break;
				case WfUnaryOperator::Negative:
					writer.WriteString(L"-");
					break;
				case WfUnaryOperator::Not:
					writer.WriteString(L"!");
					break;
				}
				WfPrint(node->operand, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfBinaryExpression* node)override
			{
				writer.BeforePrint(node);
				if (node->op == WfBinaryOperator::Index)
				{
					WfPrint(node->first, indent, writer);
					writer.WriteString(L"[");
					WfPrint(node->second, indent, writer);
					writer.WriteString(L"]");
				}
				else
				{
					writer.WriteString(L"(");
					WfPrint(node->first, indent, writer);
					switch (node->op)
					{
					case WfBinaryOperator::Assign:
						writer.WriteString(L" = ");
						break;
					case WfBinaryOperator::Union:
						writer.WriteString(L" & ");
						break;
					case WfBinaryOperator::Intersect:
						writer.WriteString(L" | ");
						break;
					case WfBinaryOperator::FailedThen:
						writer.WriteString(L" ?? ");
						break;
					case WfBinaryOperator::Exp:
						writer.WriteString(L" ^ ");
						break;
					case WfBinaryOperator::Add:
						writer.WriteString(L" + ");
						break;
					case WfBinaryOperator::Sub:
						writer.WriteString(L" - ");
						break;
					case WfBinaryOperator::Mul:
						writer.WriteString(L" * ");
						break;
					case WfBinaryOperator::Div:
						writer.WriteString(L" / ");
						break;
					case WfBinaryOperator::Mod:
						writer.WriteString(L" % ");
						break;
					case WfBinaryOperator::Shl:
						writer.WriteString(L" shl ");
						break;
					case WfBinaryOperator::Shr:
						writer.WriteString(L" shr ");
						break;
					case WfBinaryOperator::LT:
						writer.WriteString(L" < ");
						break;
					case WfBinaryOperator::GT:
						writer.WriteString(L" > ");
						break;
					case WfBinaryOperator::LE:
						writer.WriteString(L" <= ");
						break;
					case WfBinaryOperator::GE:
						writer.WriteString(L" >= ");
						break;
					case WfBinaryOperator::EQ:
						writer.WriteString(L" == ");
						break;
					case WfBinaryOperator::NE:
						writer.WriteString(L" != ");
						break;
					case WfBinaryOperator::Xor:
						writer.WriteString(L" xor ");
						break;
					case WfBinaryOperator::And:
						writer.WriteString(L" and ");
						break;
					case WfBinaryOperator::Or:
						writer.WriteString(L" or ");
						break;
					default:;
					}
					WfPrint(node->second, indent, writer);
					writer.WriteString(L")");
				}
				writer.AfterPrint(node);
			}

			void Visit(WfLetExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"let ");
				FOREACH_INDEXER(Ptr<WfLetVariable>, var, index, node->variables)
				{
					if (index > 0)
					{
						writer.WriteString(L", ");
					}
					writer.WriteString(var->name.value);
					writer.WriteString(L" = ");
					WfPrint(var->value, indent, writer);
				}
				writer.WriteString(L" in (");
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfIfExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->condition, indent, writer);
				writer.WriteString(L" ? ");
				WfPrint(node->trueBranch, indent, writer);
				writer.WriteString(L" : ");
				WfPrint(node->falseBranch, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfRangeExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"range ");
				writer.WriteString(node->beginBoundary == WfRangeBoundary::Exclusive ? L"(" : L"[");
				WfPrint(node->begin, indent, writer);
				writer.WriteString(L", ");
				WfPrint(node->end, indent, writer);
				writer.WriteString(node->endBoundary == WfRangeBoundary::Exclusive ? L")" : L"]");
				writer.AfterPrint(node);
			}

			void Visit(WfSetTestingExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->element, indent, writer);
				if (node->test == WfSetTesting::NotIn)
				{
					writer.WriteString(L" not");
				}
				writer.WriteString(L" in ");
				WfPrint(node->collection, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfConstructorExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"{");
				FOREACH_INDEXER(Ptr<WfConstructorArgument>, argument, index, node->arguments)
				{
					if (index > 0)
					{
						writer.WriteString(L" ");
					}
					WfPrint(argument->key, indent, writer);
					if (argument->value)
					{
						writer.WriteString(L" : ");
						WfPrint(argument->value, indent, writer);
					}
				}
				writer.WriteString(L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfInferExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L" of (");
				WfPrint(node->type, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfTypeCastingExpression* node)override
			{
				writer.BeforePrint(node);
				if (node->strategy == WfTypeCastingStrategy::Strong)
				{
					writer.WriteString(L"(cast (");
					WfPrint(node->type, indent, writer);
					writer.WriteString(L") ");
					WfPrint(node->expression, indent, writer);
					writer.WriteString(L")");
				}
				else
				{
					writer.WriteString(L"(");
					WfPrint(node->expression, indent, writer);
					writer.WriteString(L" as (");
					WfPrint(node->type, indent, writer);
					writer.WriteString(L"))");
				}
				writer.AfterPrint(node);
			}

			void Visit(WfTypeTestingExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->expression, indent, writer);
				switch (node->test)
				{
				case WfTypeTesting::IsType:
					writer.WriteString(L" is (");
					WfPrint(node->type, indent, writer);
					writer.WriteString(L")");
					break;
				case WfTypeTesting::IsNotType:
					writer.WriteString(L" is not (");
					WfPrint(node->type, indent, writer);
					writer.WriteString(L")");
					break;
				case WfTypeTesting::IsNull:
					writer.WriteString(L" is null");
					break;
				case WfTypeTesting::IsNotNull:
					writer.WriteString(L" is not null");
					break;
				}
				writer.AfterPrint(node);
			}

			void Visit(WfTypeOfTypeExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"typeof(");
				WfPrint(node->type, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfTypeOfExpressionExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"type(");
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfAttachEventExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"attach(");
				WfPrint(node->event, indent, writer);
				writer.WriteString(L", ");
				WfPrint(node->function, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfDetachEventExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"detach(");
				WfPrint(node->event, indent, writer);
				writer.WriteString(L", ");
				WfPrint(node->handler, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfObserveExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->parent, indent, writer);
				writer.WriteString(L".observe");
				if (node->observeType == WfObserveType::ExtendedObserve)
				{
					writer.WriteString(L" as ");
					writer.WriteString(node->name.value);
				}
				writer.WriteString(L"(");
				WfPrint(node->expression, indent, writer);
				if (node->events.Count() > 0)
				{
					writer.WriteString(L" on ");
					FOREACH_INDEXER(Ptr<WfExpression>, argument, index, node->events)
					{
						if (index > 0)
						{
							writer.WriteString(L", ");
						}
						WfPrint(argument, indent, writer);
					}
				}
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfCallExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->function, indent, writer);
				writer.WriteString(L"(");
				FOREACH_INDEXER(Ptr<WfExpression>, argument, index, node->arguments)
				{
					if (index > 0)
					{
						writer.WriteString(L", ");
					}
					WfPrint(argument, indent, writer);
				}
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfFunctionExpression* node)override
			{
				writer.BeforePrint(node);
				WfPrint(Ptr<WfDeclaration>(node->function), indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfNewClassExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"new (");
				WfPrint(node->type, indent, writer);
				writer.WriteString(L")");

				writer.WriteString(L"(");
				FOREACH_INDEXER(Ptr<WfExpression>, argument, index, node->arguments)
				{
					if (index > 0)
					{
						writer.WriteString(L", ");
					}
					WfPrint(argument, indent, writer);
				}
				writer.WriteString(L")");

				writer.AfterPrint(node);
			}

			void Visit(WfNewInterfaceExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"new (");
				WfPrint(node->type, indent, writer);
				writer.WriteString(L")");

				writer.WriteLine(L"");
				writer.WriteString(indent);
				writer.WriteLine(L"{");
				FOREACH_INDEXER(Ptr<WfDeclaration>, decl, index, node->declarations)
				{
					if (index > 0)
					{
						writer.WriteLine(L"");
					}

					writer.WriteString(indent + L"    ");
					WfPrint(decl, indent + L"    ", writer);
					writer.WriteLine(L"");
				}
				writer.WriteString(indent);
				writer.WriteString(L"}");

				writer.AfterPrint(node);
			}

			void Visit(WfVirtualExpression* node)override
			{
				if (node->expandedExpression)
				{
					writer.BeforePrint(node);
					WfPrint(node->expandedExpression, indent, writer);
					writer.AfterPrint(node);
				}
				else
				{
					node->Accept((WfVirtualExpression::IVisitor*)this);
				}
			}

			void Visit(WfBindExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"bind(");
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L")");
				writer.AfterPrint(node);
			}

			void Visit(WfFormatExpression* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"$");
				EscapeString(node->value.value, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfNewCoroutineExpression* node)override
			{
				writer.BeforePrint(node);
				if (node->name.value == L"")
				{
					writer.WriteLine(L"$coroutine");
				}
				else
				{
					writer.WriteString(L"$coroutine(");
					writer.WriteString(node->name.value);
					writer.WriteLine(L")");
				}
				writer.WriteString(indent);
				WfPrint(node->statement, indent, writer);
				writer.AfterPrint(node);
			}
		};

/***********************************************************************
Print (Statement)
***********************************************************************/

		class PrintStatementVisitor
			: public Object
			, public WfStatement::IVisitor
			, public WfVirtualStatement::IVisitor
			, public WfCoroutineStatement::IVisitor
		{
		public:
			WString								indent;
			ParsingWriter&						writer;

			PrintStatementVisitor(const WString& _indent, ParsingWriter& _writer)
				:indent(_indent), writer(_writer)
			{
			}

			void Visit(WfBreakStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"break;");
				writer.AfterPrint(node);
			}

			void Visit(WfContinueStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"continue;");
				writer.AfterPrint(node);
			}

			void Visit(WfReturnStatement* node)override
			{
				writer.BeforePrint(node);
				if (node->expression)
				{
					writer.WriteString(L"return ");
					WfPrint(node->expression, indent, writer);
					writer.WriteString(L";");
				}
				else
				{
					writer.WriteString(L"return;");
				}
				writer.AfterPrint(node);
			}

			void Visit(WfDeleteStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"delete ");
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L";");
				writer.AfterPrint(node);
			}

			void Visit(WfRaiseExceptionStatement* node)override
			{
				writer.BeforePrint(node);
				if (node->expression)
				{
					writer.WriteString(L"raise ");
					WfPrint(node->expression, indent, writer);
					writer.WriteString(L";");
				}
				else
				{
					writer.WriteString(L"raise;");
				}
				writer.AfterPrint(node);
			}

			void Visit(WfIfStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"if (");
				if (node->type)
				{
					writer.WriteString(L"var ");
					writer.WriteString(node->name.value);
					writer.WriteString(L" : ");
					WfPrint(node->type, indent, writer);
					writer.WriteString(L" = ");
				}
				WfPrint(node->expression, indent, writer);
				writer.WriteLine(L")");

				writer.WriteString(indent);
				WfPrint(node->trueBranch, indent, writer);
				if (node->falseBranch)
				{
					writer.WriteLine(L"");
					writer.WriteString(indent);
					if (node->falseBranch.Cast<WfIfStatement>())
					{
						writer.WriteString(L"else ");
						WfPrint(node->falseBranch, indent, writer);
					}
					else
					{
						writer.WriteLine(L"else");
						writer.WriteString(indent);
						WfPrint(node->falseBranch, indent, writer);
					}
				}
				writer.AfterPrint(node);
			}

			void Visit(WfWhileStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"while (");
				WfPrint(node->condition, indent, writer);
				writer.WriteLine(L")");
				writer.WriteString(indent);
				WfPrint(node->statement, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfTryStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteLine(L"try");
				writer.WriteString(indent);
				WfPrint(node->protectedStatement, indent, writer);

				if (node->catchStatement)
				{
					writer.WriteLine(L"");
					writer.WriteString(indent);
					writer.WriteString(L"catch (");
					writer.WriteString(node->name.value);
					writer.WriteLine(L")");
					writer.WriteString(indent);
					WfPrint(node->catchStatement, indent, writer);
				}

				if (node->finallyStatement)
				{
					writer.WriteLine(L"");
					writer.WriteString(indent);
					writer.WriteLine(L"finally");
					writer.WriteString(indent);
					WfPrint(node->finallyStatement, indent, writer);
				}
				writer.AfterPrint(node);
			}

			void Visit(WfBlockStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteLine(L"{");
				FOREACH(Ptr<WfStatement>, statement, node->statements)
				{
					writer.WriteString(indent + L"    ");
					WfPrint(statement, indent + L"    ", writer);
					writer.WriteLine(L"");
				}
				writer.WriteString(indent);
				writer.WriteString(L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfExpressionStatement* node)override
			{
				writer.BeforePrint(node);
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L";");
				writer.AfterPrint(node);
			}

			void Visit(WfVariableStatement* node)override
			{
				writer.BeforePrint(node);
				WfPrint(Ptr<WfDeclaration>(node->variable), indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfVirtualStatement* node)override
			{
				if (node->expandedStatement)
				{
					writer.BeforePrint(node);
					WfPrint(node->expandedStatement, indent, writer);
					writer.AfterPrint(node);
				}
				else
				{
					node->Accept((WfVirtualStatement::IVisitor*)this);
				}
			}

			void Visit(WfSwitchStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"switch (");
				WfPrint(node->expression, indent, writer);
				writer.WriteLine(L")");

				writer.WriteString(indent);
				writer.WriteLine(L"{");

				FOREACH(Ptr<WfSwitchCase>, switchCase, node->caseBranches)
				{
					writer.WriteString(indent);
					writer.WriteString(L"    case ");
					WfPrint(switchCase->expression, indent, writer);
					writer.WriteLine(L":");
					writer.WriteString(indent + L"    ");
					WfPrint(switchCase->statement, indent + L"    ", writer);
					writer.WriteLine(L"");
				}
				if (node->defaultBranch)
				{
					writer.WriteString(indent);
					writer.WriteLine(L"    default:");
					writer.WriteString(indent + L"    ");
					WfPrint(node->defaultBranch, indent + L"    ", writer);
					writer.WriteLine(L"");
				}

				writer.WriteString(indent);
				writer.WriteString(L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfForEachStatement* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"for (");
				writer.WriteString(node->name.value);
				writer.WriteString(L" in ");
				if (node->direction == WfForEachDirection::Reversed)
				{
					writer.WriteString(L"reversed ");
				}
				WfPrint(node->collection, indent, writer);
				writer.WriteLine(L")");
				writer.WriteString(indent);
				WfPrint(node->statement, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfCoProviderStatement* node)override
			{
				writer.BeforePrint(node);
				if (node->name.value == L"")
				{
					writer.WriteString(L"$");
				}
				else
				{
					writer.WriteString(node->name.value);
					writer.WriteString(L" ");
				}
				WfPrint(node->statement, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfCoroutineStatement* node)override
			{
				node->Accept((WfCoroutineStatement::IVisitor*)this);
			}

			void Visit(WfCoPauseStatement* node)override
			{
				writer.BeforePrint(node);
				if (node->statement)
				{
					writer.WriteLine(L"$pause");
					writer.WriteString(indent);
					WfPrint(node->statement, indent, writer);
				}
				else
				{
					writer.WriteString(L"$pause;");
				}
				writer.AfterPrint(node);
			}

			void Visit(WfCoOperatorStatement* node)override
			{
				if (node->varName.value != L"")
				{
					writer.WriteString(L"var ");
					writer.WriteString(node->varName.value);
					writer.WriteString(L" = ");
				}
				writer.WriteString(node->opName.value);

				FOREACH_INDEXER(Ptr<WfExpression>, argument, index, node->arguments)
				{
					writer.WriteString(index == 0 ? L" " : L", ");
					WfPrint(argument, indent, writer);
				}
				writer.WriteString(L";");
			}
		};

/***********************************************************************
Print (Declaration)
***********************************************************************/

		class PrintDeclarationVisitor
			: public Object
			, public WfDeclaration::IVisitor
			, public WfVirtualDeclaration::IVisitor
		{
		public:
			WString								indent;
			ParsingWriter&						writer;

			PrintDeclarationVisitor(const WString& _indent, ParsingWriter& _writer)
				:indent(_indent), writer(_writer)
			{
			}

			void Visit(WfNamespaceDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteLine(L"namespace " + node->name.value);
				writer.WriteString(indent);
				writer.WriteLine(L"{");
				FOREACH_INDEXER(Ptr<WfDeclaration>, decl, index, node->declarations)
				{
					if (index != 0)
					{
						writer.WriteLine(L"");
					}
					writer.WriteString(indent + L"    ");
					WfPrint(decl, indent + L"    ", writer);
					writer.WriteLine(L"");
				}
				writer.WriteString(indent);
				writer.WriteString(L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfFunctionDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"func ");
				if (node->anonymity == WfFunctionAnonymity::Named)
				{
					writer.WriteString(node->name.value);
				}

				writer.WriteString(L"(");
				FOREACH_INDEXER(Ptr<WfFunctionArgument>, argument, index, node->arguments)
				{
					if (index > 0)
					{
						writer.WriteString(L", ");
					}
					FOREACH(Ptr<WfAttribute>, attribute, argument->attributes)
					{
						WfPrint(attribute, indent, writer);
						writer.WriteString(L" ");
					}
					writer.WriteString(argument->name.value);
					writer.WriteString(L" : ");
					WfPrint(argument->type, indent, writer);
				}
				writer.WriteString(L")");

				writer.WriteString(L" : (");
				WfPrint(node->returnType, indent, writer);
				writer.WriteString(L")");
				if (node->statement)
				{
					writer.WriteLine(L"");

					writer.WriteString(indent);
					WfPrint(node->statement, indent, writer);
				}
				else
				{
					writer.WriteString(L";");
				}
				writer.AfterPrint(node);
			}

			void Visit(WfVariableDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"var ");
				writer.WriteString(node->name.value);
				if (node->type)
				{
					writer.WriteString(L" : ");
					WfPrint(node->type, indent, writer);
				}
				writer.WriteString(L" = ");
				WfPrint(node->expression, indent, writer);
				writer.WriteString(L";");
				writer.AfterPrint(node);
			}

			void Visit(WfEventDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"event ");
				writer.WriteString(node->name.value);
				writer.WriteString(L"(");
				FOREACH_INDEXER(Ptr<WfType>, type, index, node->arguments)
				{
					if (index != 0)
					{
						writer.WriteString(L", ");
					}
					WfPrint(type, indent, writer);
				}
				writer.WriteString(L");");
				writer.AfterPrint(node);
			}

			void Visit(WfPropertyDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"prop ");
				writer.WriteString(node->name.value);
				writer.WriteString(L" : ");
				WfPrint(node->type, indent, writer);
				writer.WriteString(L"{");
				writer.WriteString(node->getter.value);
				if (node->setter.value != L"")
				{
					writer.WriteString(L", ");
					writer.WriteString(node->setter.value);
				}
				if (node->valueChangedEvent.value != L"")
				{
					writer.WriteString(L" : ");
					writer.WriteString(node->valueChangedEvent.value);
				}
				writer.WriteString(L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfConstructorDeclaration* node)override
			{
				writer.BeforePrint(node);
				if (node->constructorType == WfConstructorType::RawPtr)
				{
					writer.WriteString(L"new* ");
				}
				else
				{
					writer.WriteString(L"new ");
				}
				
				writer.WriteString(L"(");
				FOREACH_INDEXER(Ptr<WfFunctionArgument>, argument, index, node->arguments)
				{
					if (index > 0)
					{
						writer.WriteString(L", ");
					}
					writer.WriteString(argument->name.value);
					writer.WriteString(L" : ");
					WfPrint(argument->type, indent, writer);
				}
				writer.WriteString(L")");
				FOREACH_INDEXER(Ptr<WfBaseConstructorCall>, call, callIndex, node->baseConstructorCalls)
				{
					writer.WriteLine(L"");
					writer.WriteString(indent + L"    ");
					if (callIndex == 0)
					{
						writer.WriteString(L":");
					}
					else
					{
						writer.WriteString(L",");
					}
					WfPrint(call->type, indent + L"    ", writer);
					writer.WriteString(L"(");
					FOREACH_INDEXER(Ptr<WfExpression>, argument, argumentIndex, call->arguments)
					{
						if (argumentIndex != 0)
						{
							writer.WriteString(L", ");
						}
						WfPrint(argument, indent + L"    ", writer);
					}
					writer.WriteString(L")");
				}

				writer.WriteLine(L"");
				writer.WriteString(indent);
				WfPrint(node->statement, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfDestructorDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteLine(L"delete");
				writer.WriteString(indent);
				WfPrint(node->statement, indent, writer);
				writer.AfterPrint(node);
			}

			void Visit(WfClassDeclaration* node)override
			{
				writer.BeforePrint(node);
				switch (node->kind)
				{
				case WfClassKind::Class:
					writer.WriteString(L"class ");
					break;
				case WfClassKind::Interface:
					writer.WriteString(L"interface ");
					break;
				}
				writer.WriteString(node->name.value);
				if (node->constructorType == WfConstructorType::RawPtr)
				{
					writer.WriteString(L"*");
				}

				FOREACH_INDEXER(Ptr<WfType>, type, index, node->baseTypes)
				{
					if (index == 0)
					{
						writer.WriteString(L" : ");
					}
					else
					{
						writer.WriteString(L", ");
					}
					WfPrint(type, indent, writer);
				}

				writer.WriteLine(L"");
				writer.WriteLine(indent + L"{");

				FOREACH_INDEXER(Ptr<WfDeclaration>, decl, index, node->declarations)
				{
					if (index > 0)
					{
						writer.WriteLine(L"");
					}

					writer.WriteString(indent + L"    ");
					WfPrint(decl, indent + L"    ", writer);
					writer.WriteLine(L"");
				}

				writer.WriteString(indent + L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfEnumDeclaration* node)override
			{
				writer.BeforePrint(node);
				switch (node->kind)
				{
				case WfEnumKind::Normal:
					writer.WriteString(L"enum ");
					break;
				case WfEnumKind::Flag:
					writer.WriteString(L"flagenum ");
					break;
				}
				writer.WriteLine(node->name.value);
				writer.WriteLine(indent + L"{");

				auto newIndent = indent + L"    ";
				FOREACH(Ptr<WfEnumItem>, item, node->items)
				{
					FOREACH(Ptr<WfAttribute>, attribute, item->attributes)
					{
						writer.WriteString(newIndent);
						WfPrint(attribute, newIndent, writer);
						writer.WriteLine(L"");
					}
					writer.WriteString(newIndent);
					writer.WriteString(item->name.value);
					writer.WriteString(L" = ");
					switch (item->kind)
					{
					case WfEnumItemKind::Constant:
						writer.WriteString(item->number.value);
						break;
					case WfEnumItemKind::Intersection:
						FOREACH_INDEXER(Ptr<WfEnumItemIntersection>, itemInt, index, item->intersections)
						{
							if (index != 0)writer.WriteString(L" | ");
							writer.WriteString(itemInt->name.value);
						}
						break;
					}
					writer.WriteLine(L",");
				}

				writer.WriteString(indent + L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfStructDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"struct ");
				writer.WriteLine(node->name.value);
				writer.WriteLine(indent + L"{");

				auto newIndent = indent + L"    ";
				FOREACH(Ptr<WfStructMember>, member, node->members)
				{
					FOREACH(Ptr<WfAttribute>, attribute, member->attributes)
					{
						writer.WriteString(newIndent);
						WfPrint(attribute, newIndent, writer);
						writer.WriteLine(L"");
					}
					writer.WriteString(newIndent);
					writer.WriteString(member->name.value);
					writer.WriteString(L" : ");
					WfPrint(member->type, newIndent, writer);
					writer.WriteLine(L";");
				}

				writer.WriteString(indent + L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfVirtualDeclaration* node)override
			{
				if (node->expandedDeclarations.Count() > 0)
				{
					writer.BeforePrint(node);
					FOREACH_INDEXER(Ptr<WfDeclaration>, decl, index, node->expandedDeclarations)
					{
						if (index > 0)
						{
							writer.WriteLine(L"");
							writer.WriteString(indent);
						}
						WfPrint(decl, indent, writer);
						if (index < node->expandedDeclarations.Count() - 1)
						{
							writer.WriteLine(L"");
						}
					}
					writer.AfterPrint(node);
				}
				else
				{
					node->Accept(static_cast<WfVirtualDeclaration::IVisitor*>(this));
				}
			}

			void Visit(WfAutoPropertyDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"prop ");
				writer.WriteString(node->name.value);
				writer.WriteString(L" : ");
				WfPrint(node->type, indent, writer);
				if (node->expression)
				{
					writer.WriteString(L" = ");
					WfPrint(node->expression, indent, writer);
				}
				writer.WriteString(L" {");
				if (node->configConst == WfAPConst::Readonly)
				{
					if (node->configObserve == WfAPObserve::NotObservable)
					{
						writer.WriteString(L"const, not observe");
					}
					else
					{
						writer.WriteString(L"const");
					}
				}
				else
				{
					if (node->configObserve == WfAPObserve::NotObservable)
					{
						writer.WriteString(L"not observe");
					}
				}
				writer.WriteString(L"}");
				writer.AfterPrint(node);
			}

			void Visit(WfCastResultInterfaceDeclaration* node)override
			{
				writer.BeforePrint(node);
				writer.WriteString(L"$interface ");
				writer.WriteString(node->name.value);
				writer.WriteString(L" : ");
				WfPrint(node->baseType, indent, writer);
				writer.WriteString(L"<");
				WfPrint(node->elementType, indent, writer);
				writer.WriteString(L">;");
				writer.AfterPrint(node);
			}
		};

/***********************************************************************
Print (Module)
***********************************************************************/

		void WfPrint(Ptr<WfAttribute> node, const WString& indent, parsing::ParsingWriter& writer)
		{
			writer.BeforePrint(node.Obj());
			writer.WriteString(L"@");
			writer.WriteString(node->category.value);
			writer.WriteString(L":");
			writer.WriteString(node->name.value);
			if (node->value)
			{
				writer.WriteString(L"(");
				WfPrint(node->value, indent, writer);
				writer.WriteString(L")");
			}
			writer.AfterPrint(node.Obj());
		}

		void WfPrint(Ptr<WfType> node, const WString& indent, parsing::ParsingWriter& writer)
		{
			PrintTypeVisitor visitor(indent, writer);
			node->Accept(&visitor);
		}

		void WfPrint(Ptr<WfExpression> node, const WString& indent, parsing::ParsingWriter& writer)
		{
			PrintExpressionVisitor visitor(indent, writer);
			node->Accept(&visitor);
		}

		void WfPrint(Ptr<WfStatement> node, const WString& indent, parsing::ParsingWriter& writer)
		{
			PrintStatementVisitor visitor(indent, writer);
			node->Accept(&visitor);
		}

		void WfPrint(Ptr<WfDeclaration> node, const WString& indent, parsing::ParsingWriter& writer)
		{
			FOREACH(Ptr<WfAttribute>, attribute, node->attributes)
			{
				WfPrint(attribute, indent, writer);
				writer.WriteLine(L"");
				writer.WriteString(indent);
			}

			if (node->classMember)
			{
				switch (node->classMember->kind)
				{
				case WfClassMemberKind::Normal:
					break;
				case WfClassMemberKind::Static:
					writer.WriteString(L"static ");
					break;
				case WfClassMemberKind::Override:
					writer.WriteString(L"override ");
					break;
				}
			}

			PrintDeclarationVisitor visitor(indent, writer);
			node->Accept(&visitor);
		}

		void WfPrint(Ptr<WfModule> node, const WString& indent, parsing::ParsingWriter& writer)
		{
			writer.WriteString(indent);
			switch (node->moduleType)
			{
			case WfModuleType::Module:
				writer.WriteLine(L"module " + node->name.value + L";");
				break;
			case WfModuleType::Unit:
				writer.WriteLine(L"unit " + node->name.value + L";");
				break;
			}

			FOREACH(Ptr<WfModuleUsingPath>, path, node->paths)
			{
				writer.WriteString(indent);
				writer.WriteString(L"using ");
				FOREACH_INDEXER(Ptr<WfModuleUsingItem>, item, index, path->items)
				{
					if (index > 0)
					{
						writer.WriteString(L"::");
					}
					FOREACH(Ptr<WfModuleUsingFragment>, fragment, item->fragments)
					{
						if (auto name = fragment.Cast<WfModuleUsingNameFragment>())
						{
							writer.WriteString(name->name.value);
						}
						else
						{
							writer.WriteString(L"*");
						}
					}
				}
				writer.WriteLine(L";");
			}

			FOREACH(Ptr<WfDeclaration>, decl, node->declarations)
			{
				writer.WriteLine(L"");
				writer.WriteString(indent);
				WfPrint(decl, indent, writer);
				writer.WriteLine(L"");
			}
		}

/***********************************************************************
Print (Module)
***********************************************************************/

		void WfPrint(Ptr<WfAttribute> node, const WString& indent, stream::TextWriter& writer)
		{
			ParsingWriter parsingWriter(writer);
			WfPrint(node, indent, parsingWriter);
		}

		void WfPrint(Ptr<WfType> node, const WString& indent, stream::TextWriter& writer)
		{
			ParsingWriter parsingWriter(writer);
			WfPrint(node, indent, parsingWriter);
		}

		void WfPrint(Ptr<WfExpression> node, const WString& indent, stream::TextWriter& writer)
		{
			ParsingWriter parsingWriter(writer);
			WfPrint(node, indent, parsingWriter);
		}

		void WfPrint(Ptr<WfStatement> node, const WString& indent, stream::TextWriter& writer)
		{
			ParsingWriter parsingWriter(writer);
			WfPrint(node, indent, parsingWriter);
		}

		void WfPrint(Ptr<WfDeclaration> node, const WString& indent, stream::TextWriter& writer)
		{
			ParsingWriter parsingWriter(writer);
			WfPrint(node, indent, parsingWriter);
		}

		void WfPrint(Ptr<WfModule> node, const WString& indent, stream::TextWriter& writer)
		{
			ParsingWriter parsingWriter(writer);
			WfPrint(node, indent, parsingWriter);
		}
	}
}

/***********************************************************************
EXPRESSION\WFEXPRESSION_AST.CPP
***********************************************************************/
/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::WfExpression.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/


namespace vl
{
	namespace workflow
	{
/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void WfPredefinedType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTopQualifiedType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfReferenceType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfRawPointerType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfSharedPointerType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNullableType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfEnumerableType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfMapType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFunctionType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfChildType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNamespaceDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFunctionDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVariableDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfEventDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfPropertyDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfConstructorDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfDestructorDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfClassDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfEnumDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStructDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfAutoPropertyDeclaration::Accept(WfVirtualDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCastResultInterfaceDeclaration::Accept(WfVirtualDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBreakStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfContinueStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfReturnStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfDeleteStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfRaiseExceptionStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfIfStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfWhileStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTryStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBlockStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVariableStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfExpressionStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfForEachStatement::Accept(WfVirtualStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfSwitchStatement::Accept(WfVirtualStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoProviderStatement::Accept(WfVirtualStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoroutineStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoPauseStatement::Accept(WfCoroutineStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoOperatorStatement::Accept(WfCoroutineStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfThisExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTopQualifiedExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfReferenceExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfOrderedNameExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfOrderedLambdaExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfMemberExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfChildExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfLiteralExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFloatingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfIntegerExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStringExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfUnaryExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBinaryExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfLetExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfIfExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfRangeExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfSetTestingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfConstructorExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfInferExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeCastingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeTestingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeOfTypeExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeOfExpressionExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfAttachEventExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfDetachEventExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfObserveExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCallExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFunctionExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNewClassExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNewInterfaceExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBindExpression::Accept(WfVirtualExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFormatExpression::Accept(WfVirtualExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNewCoroutineExpression::Accept(WfVirtualExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfModuleUsingNameFragment::Accept(WfModuleUsingFragment::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfModuleUsingWildCardFragment::Accept(WfModuleUsingFragment::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::workflow;

#define PARSING_TOKEN_FIELD(NAME)\
			CLASS_MEMBER_EXTERNALMETHOD_TEMPLATE(get_##NAME, NO_PARAMETER, vl::WString(ClassType::*)(), [](ClassType* node) { return node->NAME.value; }, L"*", L"*")\
			CLASS_MEMBER_EXTERNALMETHOD_TEMPLATE(set_##NAME, { L"value" }, void(ClassType::*)(const vl::WString&), [](ClassType* node, const vl::WString& value) { node->NAME.value = value; }, L"*", L"*")\
			CLASS_MEMBER_PROPERTY_REFERENCETEMPLATE(NAME, get_##NAME, set_##NAME, L"$This->$Name.value")\

			IMPL_TYPE_INFO_RENAME(vl::workflow::WfClassMemberKind, workflow::WfClassMemberKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfClassMember, workflow::WfClassMember)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfType, workflow::WfType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpression, workflow::WfExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStatement, workflow::WfStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAttribute, workflow::WfAttribute)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDeclaration, workflow::WfDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfPredefinedTypeName, workflow::WfPredefinedTypeName)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfPredefinedType, workflow::WfPredefinedType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTopQualifiedType, workflow::WfTopQualifiedType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfReferenceType, workflow::WfReferenceType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRawPointerType, workflow::WfRawPointerType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSharedPointerType, workflow::WfSharedPointerType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNullableType, workflow::WfNullableType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumerableType, workflow::WfEnumerableType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMapWritability, workflow::WfMapWritability)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMapType, workflow::WfMapType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionType, workflow::WfFunctionType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfChildType, workflow::WfChildType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNamespaceDeclaration, workflow::WfNamespaceDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionArgument, workflow::WfFunctionArgument)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionAnonymity, workflow::WfFunctionAnonymity)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionDeclaration, workflow::WfFunctionDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVariableDeclaration, workflow::WfVariableDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEventDeclaration, workflow::WfEventDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfPropertyDeclaration, workflow::WfPropertyDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfClassKind, workflow::WfClassKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorType, workflow::WfConstructorType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBaseConstructorCall, workflow::WfBaseConstructorCall)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorDeclaration, workflow::WfConstructorDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDestructorDeclaration, workflow::WfDestructorDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfClassDeclaration, workflow::WfClassDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumKind, workflow::WfEnumKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumItemKind, workflow::WfEnumItemKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumItemIntersection, workflow::WfEnumItemIntersection)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumItem, workflow::WfEnumItem)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumDeclaration, workflow::WfEnumDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStructMember, workflow::WfStructMember)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStructDeclaration, workflow::WfStructDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualDeclaration, workflow::WfVirtualDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAPConst, workflow::WfAPConst)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAPObserve, workflow::WfAPObserve)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAutoPropertyDeclaration, workflow::WfAutoPropertyDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCastResultInterfaceDeclaration, workflow::WfCastResultInterfaceDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBreakStatement, workflow::WfBreakStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfContinueStatement, workflow::WfContinueStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfReturnStatement, workflow::WfReturnStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDeleteStatement, workflow::WfDeleteStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRaiseExceptionStatement, workflow::WfRaiseExceptionStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfIfStatement, workflow::WfIfStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfWhileStatement, workflow::WfWhileStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTryStatement, workflow::WfTryStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBlockStatement, workflow::WfBlockStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVariableStatement, workflow::WfVariableStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpressionStatement, workflow::WfExpressionStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualStatement, workflow::WfVirtualStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfForEachDirection, workflow::WfForEachDirection)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfForEachStatement, workflow::WfForEachStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSwitchCase, workflow::WfSwitchCase)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSwitchStatement, workflow::WfSwitchStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoProviderStatement, workflow::WfCoProviderStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoroutineStatement, workflow::WfCoroutineStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoPauseStatement, workflow::WfCoPauseStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoOperatorStatement, workflow::WfCoOperatorStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfThisExpression, workflow::WfThisExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTopQualifiedExpression, workflow::WfTopQualifiedExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfReferenceExpression, workflow::WfReferenceExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfOrderedNameExpression, workflow::WfOrderedNameExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfOrderedLambdaExpression, workflow::WfOrderedLambdaExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMemberExpression, workflow::WfMemberExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfChildExpression, workflow::WfChildExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLiteralValue, workflow::WfLiteralValue)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLiteralExpression, workflow::WfLiteralExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFloatingExpression, workflow::WfFloatingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfIntegerExpression, workflow::WfIntegerExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStringExpression, workflow::WfStringExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfUnaryOperator, workflow::WfUnaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfUnaryExpression, workflow::WfUnaryExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBinaryOperator, workflow::WfBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBinaryExpression, workflow::WfBinaryExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLetVariable, workflow::WfLetVariable)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLetExpression, workflow::WfLetExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfIfExpression, workflow::WfIfExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRangeBoundary, workflow::WfRangeBoundary)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRangeExpression, workflow::WfRangeExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSetTesting, workflow::WfSetTesting)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSetTestingExpression, workflow::WfSetTestingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorArgument, workflow::WfConstructorArgument)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorExpression, workflow::WfConstructorExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfInferExpression, workflow::WfInferExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeCastingStrategy, workflow::WfTypeCastingStrategy)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeCastingExpression, workflow::WfTypeCastingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeTesting, workflow::WfTypeTesting)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeTestingExpression, workflow::WfTypeTestingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeOfTypeExpression, workflow::WfTypeOfTypeExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeOfExpressionExpression, workflow::WfTypeOfExpressionExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAttachEventExpression, workflow::WfAttachEventExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDetachEventExpression, workflow::WfDetachEventExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfObserveType, workflow::WfObserveType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfObserveExpression, workflow::WfObserveExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCallExpression, workflow::WfCallExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionExpression, workflow::WfFunctionExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNewClassExpression, workflow::WfNewClassExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNewInterfaceExpression, workflow::WfNewInterfaceExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualExpression, workflow::WfVirtualExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBindExpression, workflow::WfBindExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFormatExpression, workflow::WfFormatExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNewCoroutineExpression, workflow::WfNewCoroutineExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingFragment, workflow::WfModuleUsingFragment)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingNameFragment, workflow::WfModuleUsingNameFragment)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingWildCardFragment, workflow::WfModuleUsingWildCardFragment)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingItem, workflow::WfModuleUsingItem)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingPath, workflow::WfModuleUsingPath)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleType, workflow::WfModuleType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModule, workflow::WfModule)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfType::IVisitor, workflow::WfType::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpression::IVisitor, workflow::WfExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStatement::IVisitor, workflow::WfStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDeclaration::IVisitor, workflow::WfDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualDeclaration::IVisitor, workflow::WfVirtualDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualStatement::IVisitor, workflow::WfVirtualStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoroutineStatement::IVisitor, workflow::WfCoroutineStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualExpression::IVisitor, workflow::WfVirtualExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingFragment::IVisitor, workflow::WfModuleUsingFragment::IVisitor)

			BEGIN_ENUM_ITEM(WfClassMemberKind)
				ENUM_ITEM_NAMESPACE(WfClassMemberKind)
				ENUM_NAMESPACE_ITEM(Static)
				ENUM_NAMESPACE_ITEM(Override)
				ENUM_NAMESPACE_ITEM(Normal)
			END_ENUM_ITEM(WfClassMemberKind)

			BEGIN_CLASS_MEMBER(WfClassMember)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfClassMember>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
			END_CLASS_MEMBER(WfClassMember)

			BEGIN_CLASS_MEMBER(WfType)
				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfType::*)(WfType::IVisitor* visitor))
			END_CLASS_MEMBER(WfType)

			BEGIN_CLASS_MEMBER(WfExpression)
				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfExpression::*)(WfExpression::IVisitor* visitor))
			END_CLASS_MEMBER(WfExpression)

			BEGIN_CLASS_MEMBER(WfStatement)
				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfStatement::*)(WfStatement::IVisitor* visitor))
			END_CLASS_MEMBER(WfStatement)

			BEGIN_CLASS_MEMBER(WfAttribute)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfAttribute>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(category)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(WfAttribute)

			BEGIN_CLASS_MEMBER(WfDeclaration)
				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfDeclaration::*)(WfDeclaration::IVisitor* visitor))
				CLASS_MEMBER_FIELD(attributes)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(classMember)
			END_CLASS_MEMBER(WfDeclaration)

			BEGIN_ENUM_ITEM(WfPredefinedTypeName)
				ENUM_ITEM_NAMESPACE(WfPredefinedTypeName)
				ENUM_NAMESPACE_ITEM(Void)
				ENUM_NAMESPACE_ITEM(Object)
				ENUM_NAMESPACE_ITEM(Interface)
				ENUM_NAMESPACE_ITEM(Int)
				ENUM_NAMESPACE_ITEM(UInt)
				ENUM_NAMESPACE_ITEM(Float)
				ENUM_NAMESPACE_ITEM(Double)
				ENUM_NAMESPACE_ITEM(String)
				ENUM_NAMESPACE_ITEM(Char)
				ENUM_NAMESPACE_ITEM(Bool)
			END_ENUM_ITEM(WfPredefinedTypeName)

			BEGIN_CLASS_MEMBER(WfPredefinedType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfPredefinedType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(WfPredefinedType)

			BEGIN_CLASS_MEMBER(WfTopQualifiedType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTopQualifiedType>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfTopQualifiedType)

			BEGIN_CLASS_MEMBER(WfReferenceType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfReferenceType>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfReferenceType)

			BEGIN_CLASS_MEMBER(WfRawPointerType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfRawPointerType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(WfRawPointerType)

			BEGIN_CLASS_MEMBER(WfSharedPointerType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfSharedPointerType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(WfSharedPointerType)

			BEGIN_CLASS_MEMBER(WfNullableType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfNullableType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(WfNullableType)

			BEGIN_CLASS_MEMBER(WfEnumerableType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfEnumerableType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(WfEnumerableType)

			BEGIN_ENUM_ITEM(WfMapWritability)
				ENUM_ITEM_NAMESPACE(WfMapWritability)
				ENUM_NAMESPACE_ITEM(Readonly)
				ENUM_NAMESPACE_ITEM(Writable)
			END_ENUM_ITEM(WfMapWritability)

			BEGIN_CLASS_MEMBER(WfMapType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfMapType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(writability)
				CLASS_MEMBER_FIELD(key)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(WfMapType)

			BEGIN_CLASS_MEMBER(WfFunctionType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfFunctionType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(result)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfFunctionType)

			BEGIN_CLASS_MEMBER(WfChildType)
				CLASS_MEMBER_BASE(WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfChildType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfChildType)

			BEGIN_CLASS_MEMBER(WfNamespaceDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfNamespaceDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(WfNamespaceDeclaration)

			BEGIN_CLASS_MEMBER(WfFunctionArgument)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfFunctionArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(WfFunctionArgument)

			BEGIN_ENUM_ITEM(WfFunctionAnonymity)
				ENUM_ITEM_NAMESPACE(WfFunctionAnonymity)
				ENUM_NAMESPACE_ITEM(Named)
				ENUM_NAMESPACE_ITEM(Anonymous)
			END_ENUM_ITEM(WfFunctionAnonymity)

			BEGIN_CLASS_MEMBER(WfFunctionDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfFunctionDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(anonymity)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(returnType)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfFunctionDeclaration)

			BEGIN_CLASS_MEMBER(WfVariableDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfVariableDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfVariableDeclaration)

			BEGIN_CLASS_MEMBER(WfEventDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfEventDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfEventDeclaration)

			BEGIN_CLASS_MEMBER(WfPropertyDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfPropertyDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				PARSING_TOKEN_FIELD(getter)
				PARSING_TOKEN_FIELD(setter)
				PARSING_TOKEN_FIELD(valueChangedEvent)
			END_CLASS_MEMBER(WfPropertyDeclaration)

			BEGIN_ENUM_ITEM(WfClassKind)
				ENUM_ITEM_NAMESPACE(WfClassKind)
				ENUM_NAMESPACE_ITEM(Class)
				ENUM_NAMESPACE_ITEM(Interface)
			END_ENUM_ITEM(WfClassKind)

			BEGIN_ENUM_ITEM(WfConstructorType)
				ENUM_ITEM_NAMESPACE(WfConstructorType)
				ENUM_NAMESPACE_ITEM(Undefined)
				ENUM_NAMESPACE_ITEM(SharedPtr)
				ENUM_NAMESPACE_ITEM(RawPtr)
			END_ENUM_ITEM(WfConstructorType)

			BEGIN_CLASS_MEMBER(WfBaseConstructorCall)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfBaseConstructorCall>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfBaseConstructorCall)

			BEGIN_CLASS_MEMBER(WfConstructorDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfConstructorDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(constructorType)
				CLASS_MEMBER_FIELD(baseConstructorCalls)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfConstructorDeclaration)

			BEGIN_CLASS_MEMBER(WfDestructorDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfDestructorDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfDestructorDeclaration)

			BEGIN_CLASS_MEMBER(WfClassDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfClassDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(constructorType)
				CLASS_MEMBER_FIELD(baseTypes)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(WfClassDeclaration)

			BEGIN_ENUM_ITEM(WfEnumKind)
				ENUM_ITEM_NAMESPACE(WfEnumKind)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Flag)
			END_ENUM_ITEM(WfEnumKind)

			BEGIN_ENUM_ITEM(WfEnumItemKind)
				ENUM_ITEM_NAMESPACE(WfEnumItemKind)
				ENUM_NAMESPACE_ITEM(Constant)
				ENUM_NAMESPACE_ITEM(Intersection)
			END_ENUM_ITEM(WfEnumItemKind)

			BEGIN_CLASS_MEMBER(WfEnumItemIntersection)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfEnumItemIntersection>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfEnumItemIntersection)

			BEGIN_CLASS_MEMBER(WfEnumItem)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfEnumItem>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(kind)
				PARSING_TOKEN_FIELD(number)
				CLASS_MEMBER_FIELD(intersections)
			END_CLASS_MEMBER(WfEnumItem)

			BEGIN_CLASS_MEMBER(WfEnumDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfEnumDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(WfEnumDeclaration)

			BEGIN_CLASS_MEMBER(WfStructMember)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfStructMember>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(WfStructMember)

			BEGIN_CLASS_MEMBER(WfStructDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfStructDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(members)
			END_CLASS_MEMBER(WfStructDeclaration)

			BEGIN_CLASS_MEMBER(WfVirtualDeclaration)
				CLASS_MEMBER_BASE(WfDeclaration)

				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfVirtualDeclaration::*)(WfVirtualDeclaration::IVisitor* visitor))
				CLASS_MEMBER_FIELD(expandedDeclarations)
			END_CLASS_MEMBER(WfVirtualDeclaration)

			BEGIN_ENUM_ITEM(WfAPConst)
				ENUM_ITEM_NAMESPACE(WfAPConst)
				ENUM_NAMESPACE_ITEM(Readonly)
				ENUM_NAMESPACE_ITEM(Writable)
			END_ENUM_ITEM(WfAPConst)

			BEGIN_ENUM_ITEM(WfAPObserve)
				ENUM_ITEM_NAMESPACE(WfAPObserve)
				ENUM_NAMESPACE_ITEM(Observable)
				ENUM_NAMESPACE_ITEM(NotObservable)
			END_ENUM_ITEM(WfAPObserve)

			BEGIN_CLASS_MEMBER(WfAutoPropertyDeclaration)
				CLASS_MEMBER_BASE(WfVirtualDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfAutoPropertyDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(configConst)
				CLASS_MEMBER_FIELD(configObserve)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfAutoPropertyDeclaration)

			BEGIN_CLASS_MEMBER(WfCastResultInterfaceDeclaration)
				CLASS_MEMBER_BASE(WfVirtualDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfCastResultInterfaceDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(baseType)
				CLASS_MEMBER_FIELD(elementType)
			END_CLASS_MEMBER(WfCastResultInterfaceDeclaration)

			BEGIN_CLASS_MEMBER(WfBreakStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfBreakStatement>(), NO_PARAMETER)

			END_CLASS_MEMBER(WfBreakStatement)

			BEGIN_CLASS_MEMBER(WfContinueStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfContinueStatement>(), NO_PARAMETER)

			END_CLASS_MEMBER(WfContinueStatement)

			BEGIN_CLASS_MEMBER(WfReturnStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfReturnStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfReturnStatement)

			BEGIN_CLASS_MEMBER(WfDeleteStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfDeleteStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfDeleteStatement)

			BEGIN_CLASS_MEMBER(WfRaiseExceptionStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfRaiseExceptionStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfRaiseExceptionStatement)

			BEGIN_CLASS_MEMBER(WfIfStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfIfStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(WfIfStatement)

			BEGIN_CLASS_MEMBER(WfWhileStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfWhileStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfWhileStatement)

			BEGIN_CLASS_MEMBER(WfTryStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTryStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(protectedStatement)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(catchStatement)
				CLASS_MEMBER_FIELD(finallyStatement)
			END_CLASS_MEMBER(WfTryStatement)

			BEGIN_CLASS_MEMBER(WfBlockStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfBlockStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statements)
			END_CLASS_MEMBER(WfBlockStatement)

			BEGIN_CLASS_MEMBER(WfVariableStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfVariableStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(variable)
			END_CLASS_MEMBER(WfVariableStatement)

			BEGIN_CLASS_MEMBER(WfExpressionStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfExpressionStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfExpressionStatement)

			BEGIN_CLASS_MEMBER(WfVirtualStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfVirtualStatement::*)(WfVirtualStatement::IVisitor* visitor))
				CLASS_MEMBER_FIELD(expandedStatement)
			END_CLASS_MEMBER(WfVirtualStatement)

			BEGIN_ENUM_ITEM(WfForEachDirection)
				ENUM_ITEM_NAMESPACE(WfForEachDirection)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Reversed)
			END_ENUM_ITEM(WfForEachDirection)

			BEGIN_CLASS_MEMBER(WfForEachStatement)
				CLASS_MEMBER_BASE(WfVirtualStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfForEachStatement>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(direction)
				CLASS_MEMBER_FIELD(collection)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfForEachStatement)

			BEGIN_CLASS_MEMBER(WfSwitchCase)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfSwitchCase>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfSwitchCase)

			BEGIN_CLASS_MEMBER(WfSwitchStatement)
				CLASS_MEMBER_BASE(WfVirtualStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfSwitchStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(caseBranches)
				CLASS_MEMBER_FIELD(defaultBranch)
			END_CLASS_MEMBER(WfSwitchStatement)

			BEGIN_CLASS_MEMBER(WfCoProviderStatement)
				CLASS_MEMBER_BASE(WfVirtualStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfCoProviderStatement>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfCoProviderStatement)

			BEGIN_CLASS_MEMBER(WfCoroutineStatement)
				CLASS_MEMBER_BASE(WfStatement)

				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfCoroutineStatement::*)(WfCoroutineStatement::IVisitor* visitor))
			END_CLASS_MEMBER(WfCoroutineStatement)

			BEGIN_CLASS_MEMBER(WfCoPauseStatement)
				CLASS_MEMBER_BASE(WfCoroutineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfCoPauseStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfCoPauseStatement)

			BEGIN_CLASS_MEMBER(WfCoOperatorStatement)
				CLASS_MEMBER_BASE(WfCoroutineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfCoOperatorStatement>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(varName)
				PARSING_TOKEN_FIELD(opName)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfCoOperatorStatement)

			BEGIN_CLASS_MEMBER(WfThisExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfThisExpression>(), NO_PARAMETER)

			END_CLASS_MEMBER(WfThisExpression)

			BEGIN_CLASS_MEMBER(WfTopQualifiedExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTopQualifiedExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfTopQualifiedExpression)

			BEGIN_CLASS_MEMBER(WfReferenceExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfReferenceExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfReferenceExpression)

			BEGIN_CLASS_MEMBER(WfOrderedNameExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfOrderedNameExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfOrderedNameExpression)

			BEGIN_CLASS_MEMBER(WfOrderedLambdaExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfOrderedLambdaExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(body)
			END_CLASS_MEMBER(WfOrderedLambdaExpression)

			BEGIN_CLASS_MEMBER(WfMemberExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfMemberExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfMemberExpression)

			BEGIN_CLASS_MEMBER(WfChildExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfChildExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfChildExpression)

			BEGIN_ENUM_ITEM(WfLiteralValue)
				ENUM_ITEM_NAMESPACE(WfLiteralValue)
				ENUM_NAMESPACE_ITEM(Null)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
			END_ENUM_ITEM(WfLiteralValue)

			BEGIN_CLASS_MEMBER(WfLiteralExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfLiteralExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(WfLiteralExpression)

			BEGIN_CLASS_MEMBER(WfFloatingExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfFloatingExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(value)
			END_CLASS_MEMBER(WfFloatingExpression)

			BEGIN_CLASS_MEMBER(WfIntegerExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfIntegerExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(value)
			END_CLASS_MEMBER(WfIntegerExpression)

			BEGIN_CLASS_MEMBER(WfStringExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfStringExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(value)
			END_CLASS_MEMBER(WfStringExpression)

			BEGIN_ENUM_ITEM(WfUnaryOperator)
				ENUM_ITEM_NAMESPACE(WfUnaryOperator)
				ENUM_NAMESPACE_ITEM(Positive)
				ENUM_NAMESPACE_ITEM(Negative)
				ENUM_NAMESPACE_ITEM(Not)
			END_ENUM_ITEM(WfUnaryOperator)

			BEGIN_CLASS_MEMBER(WfUnaryExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfUnaryExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(operand)
			END_CLASS_MEMBER(WfUnaryExpression)

			BEGIN_ENUM_ITEM(WfBinaryOperator)
				ENUM_ITEM_NAMESPACE(WfBinaryOperator)
				ENUM_NAMESPACE_ITEM(Assign)
				ENUM_NAMESPACE_ITEM(Index)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(FailedThen)
				ENUM_NAMESPACE_ITEM(Exp)
				ENUM_NAMESPACE_ITEM(Add)
				ENUM_NAMESPACE_ITEM(Sub)
				ENUM_NAMESPACE_ITEM(Mul)
				ENUM_NAMESPACE_ITEM(Div)
				ENUM_NAMESPACE_ITEM(Mod)
				ENUM_NAMESPACE_ITEM(Shl)
				ENUM_NAMESPACE_ITEM(Shr)
				ENUM_NAMESPACE_ITEM(LT)
				ENUM_NAMESPACE_ITEM(GT)
				ENUM_NAMESPACE_ITEM(LE)
				ENUM_NAMESPACE_ITEM(GE)
				ENUM_NAMESPACE_ITEM(EQ)
				ENUM_NAMESPACE_ITEM(NE)
				ENUM_NAMESPACE_ITEM(Xor)
				ENUM_NAMESPACE_ITEM(And)
				ENUM_NAMESPACE_ITEM(Or)
			END_ENUM_ITEM(WfBinaryOperator)

			BEGIN_CLASS_MEMBER(WfBinaryExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfBinaryExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
			END_CLASS_MEMBER(WfBinaryExpression)

			BEGIN_CLASS_MEMBER(WfLetVariable)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfLetVariable>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(WfLetVariable)

			BEGIN_CLASS_MEMBER(WfLetExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfLetExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(variables)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfLetExpression)

			BEGIN_CLASS_MEMBER(WfIfExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfIfExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(WfIfExpression)

			BEGIN_ENUM_ITEM(WfRangeBoundary)
				ENUM_ITEM_NAMESPACE(WfRangeBoundary)
				ENUM_NAMESPACE_ITEM(Inclusive)
				ENUM_NAMESPACE_ITEM(Exclusive)
			END_ENUM_ITEM(WfRangeBoundary)

			BEGIN_CLASS_MEMBER(WfRangeExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfRangeExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(begin)
				CLASS_MEMBER_FIELD(beginBoundary)
				CLASS_MEMBER_FIELD(end)
				CLASS_MEMBER_FIELD(endBoundary)
			END_CLASS_MEMBER(WfRangeExpression)

			BEGIN_ENUM_ITEM(WfSetTesting)
				ENUM_ITEM_NAMESPACE(WfSetTesting)
				ENUM_NAMESPACE_ITEM(In)
				ENUM_NAMESPACE_ITEM(NotIn)
			END_ENUM_ITEM(WfSetTesting)

			BEGIN_CLASS_MEMBER(WfSetTestingExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfSetTestingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(test)
				CLASS_MEMBER_FIELD(element)
				CLASS_MEMBER_FIELD(collection)
			END_CLASS_MEMBER(WfSetTestingExpression)

			BEGIN_CLASS_MEMBER(WfConstructorArgument)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfConstructorArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(key)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(WfConstructorArgument)

			BEGIN_CLASS_MEMBER(WfConstructorExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfConstructorExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfConstructorExpression)

			BEGIN_CLASS_MEMBER(WfInferExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfInferExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(WfInferExpression)

			BEGIN_ENUM_ITEM(WfTypeCastingStrategy)
				ENUM_ITEM_NAMESPACE(WfTypeCastingStrategy)
				ENUM_NAMESPACE_ITEM(Strong)
				ENUM_NAMESPACE_ITEM(Weak)
			END_ENUM_ITEM(WfTypeCastingStrategy)

			BEGIN_CLASS_MEMBER(WfTypeCastingExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTypeCastingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(strategy)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(WfTypeCastingExpression)

			BEGIN_ENUM_ITEM(WfTypeTesting)
				ENUM_ITEM_NAMESPACE(WfTypeTesting)
				ENUM_NAMESPACE_ITEM(IsType)
				ENUM_NAMESPACE_ITEM(IsNotType)
				ENUM_NAMESPACE_ITEM(IsNull)
				ENUM_NAMESPACE_ITEM(IsNotNull)
			END_ENUM_ITEM(WfTypeTesting)

			BEGIN_CLASS_MEMBER(WfTypeTestingExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTypeTestingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(test)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(WfTypeTestingExpression)

			BEGIN_CLASS_MEMBER(WfTypeOfTypeExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTypeOfTypeExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(WfTypeOfTypeExpression)

			BEGIN_CLASS_MEMBER(WfTypeOfExpressionExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfTypeOfExpressionExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfTypeOfExpressionExpression)

			BEGIN_CLASS_MEMBER(WfAttachEventExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfAttachEventExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(event)
				CLASS_MEMBER_FIELD(function)
			END_CLASS_MEMBER(WfAttachEventExpression)

			BEGIN_CLASS_MEMBER(WfDetachEventExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfDetachEventExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(event)
				CLASS_MEMBER_FIELD(handler)
			END_CLASS_MEMBER(WfDetachEventExpression)

			BEGIN_ENUM_ITEM(WfObserveType)
				ENUM_ITEM_NAMESPACE(WfObserveType)
				ENUM_NAMESPACE_ITEM(SimpleObserve)
				ENUM_NAMESPACE_ITEM(ExtendedObserve)
			END_ENUM_ITEM(WfObserveType)

			BEGIN_CLASS_MEMBER(WfObserveExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfObserveExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(observeType)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(events)
			END_CLASS_MEMBER(WfObserveExpression)

			BEGIN_CLASS_MEMBER(WfCallExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfCallExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(function)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfCallExpression)

			BEGIN_CLASS_MEMBER(WfFunctionExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfFunctionExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(function)
			END_CLASS_MEMBER(WfFunctionExpression)

			BEGIN_CLASS_MEMBER(WfNewClassExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfNewClassExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(WfNewClassExpression)

			BEGIN_CLASS_MEMBER(WfNewInterfaceExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfNewInterfaceExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(WfNewInterfaceExpression)

			BEGIN_CLASS_MEMBER(WfVirtualExpression)
				CLASS_MEMBER_BASE(WfExpression)

				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfVirtualExpression::*)(WfVirtualExpression::IVisitor* visitor))
				CLASS_MEMBER_FIELD(expandedExpression)
			END_CLASS_MEMBER(WfVirtualExpression)

			BEGIN_CLASS_MEMBER(WfBindExpression)
				CLASS_MEMBER_BASE(WfVirtualExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfBindExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(WfBindExpression)

			BEGIN_CLASS_MEMBER(WfFormatExpression)
				CLASS_MEMBER_BASE(WfVirtualExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfFormatExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(value)
			END_CLASS_MEMBER(WfFormatExpression)

			BEGIN_CLASS_MEMBER(WfNewCoroutineExpression)
				CLASS_MEMBER_BASE(WfVirtualExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfNewCoroutineExpression>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(WfNewCoroutineExpression)

			BEGIN_CLASS_MEMBER(WfModuleUsingFragment)
				CLASS_MEMBER_METHOD_OVERLOAD(Accept, {L"visitor"}, void(WfModuleUsingFragment::*)(WfModuleUsingFragment::IVisitor* visitor))
			END_CLASS_MEMBER(WfModuleUsingFragment)

			BEGIN_CLASS_MEMBER(WfModuleUsingNameFragment)
				CLASS_MEMBER_BASE(WfModuleUsingFragment)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfModuleUsingNameFragment>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
			END_CLASS_MEMBER(WfModuleUsingNameFragment)

			BEGIN_CLASS_MEMBER(WfModuleUsingWildCardFragment)
				CLASS_MEMBER_BASE(WfModuleUsingFragment)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfModuleUsingWildCardFragment>(), NO_PARAMETER)

			END_CLASS_MEMBER(WfModuleUsingWildCardFragment)

			BEGIN_CLASS_MEMBER(WfModuleUsingItem)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfModuleUsingItem>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(fragments)
			END_CLASS_MEMBER(WfModuleUsingItem)

			BEGIN_CLASS_MEMBER(WfModuleUsingPath)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfModuleUsingPath>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(WfModuleUsingPath)

			BEGIN_ENUM_ITEM(WfModuleType)
				ENUM_ITEM_NAMESPACE(WfModuleType)
				ENUM_NAMESPACE_ITEM(Module)
				ENUM_NAMESPACE_ITEM(Unit)
			END_ENUM_ITEM(WfModuleType)

			BEGIN_CLASS_MEMBER(WfModule)
				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<WfModule>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(moduleType)
				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(paths)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(WfModule)

			BEGIN_INTERFACE_MEMBER(WfType::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfPredefinedType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfTopQualifiedType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfReferenceType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfRawPointerType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfSharedPointerType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfNullableType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfEnumerableType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfMapType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfFunctionType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfType::IVisitor::*)(WfChildType* node))
			END_INTERFACE_MEMBER(WfType)

			BEGIN_INTERFACE_MEMBER(WfExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfThisExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfTopQualifiedExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfReferenceExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfOrderedNameExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfOrderedLambdaExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfMemberExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfChildExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfLiteralExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfFloatingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfIntegerExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfStringExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfUnaryExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfBinaryExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfLetExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfIfExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfRangeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfSetTestingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfConstructorExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfInferExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfTypeCastingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfTypeTestingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfTypeOfTypeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfTypeOfExpressionExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfAttachEventExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfDetachEventExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfObserveExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfCallExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfFunctionExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfNewClassExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfNewInterfaceExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfExpression::IVisitor::*)(WfVirtualExpression* node))
			END_INTERFACE_MEMBER(WfExpression)

			BEGIN_INTERFACE_MEMBER(WfStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfBreakStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfContinueStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfReturnStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfDeleteStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfRaiseExceptionStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfIfStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfWhileStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfTryStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfBlockStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfVariableStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfExpressionStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfVirtualStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfStatement::IVisitor::*)(WfCoroutineStatement* node))
			END_INTERFACE_MEMBER(WfStatement)

			BEGIN_INTERFACE_MEMBER(WfDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfNamespaceDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfFunctionDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfVariableDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfEventDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfPropertyDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfConstructorDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfDestructorDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfClassDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfEnumDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfStructDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfDeclaration::IVisitor::*)(WfVirtualDeclaration* node))
			END_INTERFACE_MEMBER(WfDeclaration)

			BEGIN_INTERFACE_MEMBER(WfVirtualDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualDeclaration::IVisitor::*)(WfAutoPropertyDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualDeclaration::IVisitor::*)(WfCastResultInterfaceDeclaration* node))
			END_INTERFACE_MEMBER(WfVirtualDeclaration)

			BEGIN_INTERFACE_MEMBER(WfVirtualStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualStatement::IVisitor::*)(WfForEachStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualStatement::IVisitor::*)(WfSwitchStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualStatement::IVisitor::*)(WfCoProviderStatement* node))
			END_INTERFACE_MEMBER(WfVirtualStatement)

			BEGIN_INTERFACE_MEMBER(WfCoroutineStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfCoroutineStatement::IVisitor::*)(WfCoPauseStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfCoroutineStatement::IVisitor::*)(WfCoOperatorStatement* node))
			END_INTERFACE_MEMBER(WfCoroutineStatement)

			BEGIN_INTERFACE_MEMBER(WfVirtualExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualExpression::IVisitor::*)(WfBindExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualExpression::IVisitor::*)(WfFormatExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfVirtualExpression::IVisitor::*)(WfNewCoroutineExpression* node))
			END_INTERFACE_MEMBER(WfVirtualExpression)

			BEGIN_INTERFACE_MEMBER(WfModuleUsingFragment::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfModuleUsingFragment::IVisitor::*)(WfModuleUsingNameFragment* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(WfModuleUsingFragment::IVisitor::*)(WfModuleUsingWildCardFragment* node))
			END_INTERFACE_MEMBER(WfModuleUsingFragment)

#undef PARSING_TOKEN_FIELD

			class WfTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::workflow::WfClassMemberKind)
					ADD_TYPE_INFO(vl::workflow::WfClassMember)
					ADD_TYPE_INFO(vl::workflow::WfType)
					ADD_TYPE_INFO(vl::workflow::WfExpression)
					ADD_TYPE_INFO(vl::workflow::WfStatement)
					ADD_TYPE_INFO(vl::workflow::WfAttribute)
					ADD_TYPE_INFO(vl::workflow::WfDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfPredefinedTypeName)
					ADD_TYPE_INFO(vl::workflow::WfPredefinedType)
					ADD_TYPE_INFO(vl::workflow::WfTopQualifiedType)
					ADD_TYPE_INFO(vl::workflow::WfReferenceType)
					ADD_TYPE_INFO(vl::workflow::WfRawPointerType)
					ADD_TYPE_INFO(vl::workflow::WfSharedPointerType)
					ADD_TYPE_INFO(vl::workflow::WfNullableType)
					ADD_TYPE_INFO(vl::workflow::WfEnumerableType)
					ADD_TYPE_INFO(vl::workflow::WfMapWritability)
					ADD_TYPE_INFO(vl::workflow::WfMapType)
					ADD_TYPE_INFO(vl::workflow::WfFunctionType)
					ADD_TYPE_INFO(vl::workflow::WfChildType)
					ADD_TYPE_INFO(vl::workflow::WfNamespaceDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfFunctionArgument)
					ADD_TYPE_INFO(vl::workflow::WfFunctionAnonymity)
					ADD_TYPE_INFO(vl::workflow::WfFunctionDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVariableDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfEventDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfPropertyDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfClassKind)
					ADD_TYPE_INFO(vl::workflow::WfConstructorType)
					ADD_TYPE_INFO(vl::workflow::WfBaseConstructorCall)
					ADD_TYPE_INFO(vl::workflow::WfConstructorDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfDestructorDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfClassDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfEnumKind)
					ADD_TYPE_INFO(vl::workflow::WfEnumItemKind)
					ADD_TYPE_INFO(vl::workflow::WfEnumItemIntersection)
					ADD_TYPE_INFO(vl::workflow::WfEnumItem)
					ADD_TYPE_INFO(vl::workflow::WfEnumDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfStructMember)
					ADD_TYPE_INFO(vl::workflow::WfStructDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVirtualDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfAPConst)
					ADD_TYPE_INFO(vl::workflow::WfAPObserve)
					ADD_TYPE_INFO(vl::workflow::WfAutoPropertyDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfCastResultInterfaceDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfBreakStatement)
					ADD_TYPE_INFO(vl::workflow::WfContinueStatement)
					ADD_TYPE_INFO(vl::workflow::WfReturnStatement)
					ADD_TYPE_INFO(vl::workflow::WfDeleteStatement)
					ADD_TYPE_INFO(vl::workflow::WfRaiseExceptionStatement)
					ADD_TYPE_INFO(vl::workflow::WfIfStatement)
					ADD_TYPE_INFO(vl::workflow::WfWhileStatement)
					ADD_TYPE_INFO(vl::workflow::WfTryStatement)
					ADD_TYPE_INFO(vl::workflow::WfBlockStatement)
					ADD_TYPE_INFO(vl::workflow::WfVariableStatement)
					ADD_TYPE_INFO(vl::workflow::WfExpressionStatement)
					ADD_TYPE_INFO(vl::workflow::WfVirtualStatement)
					ADD_TYPE_INFO(vl::workflow::WfForEachDirection)
					ADD_TYPE_INFO(vl::workflow::WfForEachStatement)
					ADD_TYPE_INFO(vl::workflow::WfSwitchCase)
					ADD_TYPE_INFO(vl::workflow::WfSwitchStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoProviderStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoroutineStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoPauseStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoOperatorStatement)
					ADD_TYPE_INFO(vl::workflow::WfThisExpression)
					ADD_TYPE_INFO(vl::workflow::WfTopQualifiedExpression)
					ADD_TYPE_INFO(vl::workflow::WfReferenceExpression)
					ADD_TYPE_INFO(vl::workflow::WfOrderedNameExpression)
					ADD_TYPE_INFO(vl::workflow::WfOrderedLambdaExpression)
					ADD_TYPE_INFO(vl::workflow::WfMemberExpression)
					ADD_TYPE_INFO(vl::workflow::WfChildExpression)
					ADD_TYPE_INFO(vl::workflow::WfLiteralValue)
					ADD_TYPE_INFO(vl::workflow::WfLiteralExpression)
					ADD_TYPE_INFO(vl::workflow::WfFloatingExpression)
					ADD_TYPE_INFO(vl::workflow::WfIntegerExpression)
					ADD_TYPE_INFO(vl::workflow::WfStringExpression)
					ADD_TYPE_INFO(vl::workflow::WfUnaryOperator)
					ADD_TYPE_INFO(vl::workflow::WfUnaryExpression)
					ADD_TYPE_INFO(vl::workflow::WfBinaryOperator)
					ADD_TYPE_INFO(vl::workflow::WfBinaryExpression)
					ADD_TYPE_INFO(vl::workflow::WfLetVariable)
					ADD_TYPE_INFO(vl::workflow::WfLetExpression)
					ADD_TYPE_INFO(vl::workflow::WfIfExpression)
					ADD_TYPE_INFO(vl::workflow::WfRangeBoundary)
					ADD_TYPE_INFO(vl::workflow::WfRangeExpression)
					ADD_TYPE_INFO(vl::workflow::WfSetTesting)
					ADD_TYPE_INFO(vl::workflow::WfSetTestingExpression)
					ADD_TYPE_INFO(vl::workflow::WfConstructorArgument)
					ADD_TYPE_INFO(vl::workflow::WfConstructorExpression)
					ADD_TYPE_INFO(vl::workflow::WfInferExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeCastingStrategy)
					ADD_TYPE_INFO(vl::workflow::WfTypeCastingExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeTesting)
					ADD_TYPE_INFO(vl::workflow::WfTypeTestingExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeOfTypeExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeOfExpressionExpression)
					ADD_TYPE_INFO(vl::workflow::WfAttachEventExpression)
					ADD_TYPE_INFO(vl::workflow::WfDetachEventExpression)
					ADD_TYPE_INFO(vl::workflow::WfObserveType)
					ADD_TYPE_INFO(vl::workflow::WfObserveExpression)
					ADD_TYPE_INFO(vl::workflow::WfCallExpression)
					ADD_TYPE_INFO(vl::workflow::WfFunctionExpression)
					ADD_TYPE_INFO(vl::workflow::WfNewClassExpression)
					ADD_TYPE_INFO(vl::workflow::WfNewInterfaceExpression)
					ADD_TYPE_INFO(vl::workflow::WfVirtualExpression)
					ADD_TYPE_INFO(vl::workflow::WfBindExpression)
					ADD_TYPE_INFO(vl::workflow::WfFormatExpression)
					ADD_TYPE_INFO(vl::workflow::WfNewCoroutineExpression)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingFragment)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingNameFragment)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingWildCardFragment)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingItem)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingPath)
					ADD_TYPE_INFO(vl::workflow::WfModuleType)
					ADD_TYPE_INFO(vl::workflow::WfModule)
					ADD_TYPE_INFO(vl::workflow::WfType::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfExpression::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfVirtualDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfVirtualStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfCoroutineStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfVirtualExpression::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingFragment::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool WfLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new WfTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}

/***********************************************************************
EXPRESSION\WFEXPRESSION_COPY.CPP
***********************************************************************/
/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::WfExpression.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/


namespace vl
{
	namespace workflow
	{
		namespace copy_visitor
		{

/***********************************************************************
TypeVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void TypeVisitor::CopyFields(WfPredefinedType* from, WfPredefinedType* to)
			{
				to->name = from->name;
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfType* from, WfType* to)
			{
				to->codeRange = from->codeRange;
			}

			void TypeVisitor::CopyFields(WfTopQualifiedType* from, WfTopQualifiedType* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfReferenceType* from, WfReferenceType* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfRawPointerType* from, WfRawPointerType* to)
			{
				to->element = CreateField(from->element);
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfSharedPointerType* from, WfSharedPointerType* to)
			{
				to->element = CreateField(from->element);
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfNullableType* from, WfNullableType* to)
			{
				to->element = CreateField(from->element);
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfEnumerableType* from, WfEnumerableType* to)
			{
				to->element = CreateField(from->element);
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfMapType* from, WfMapType* to)
			{
				to->writability = from->writability;
				to->key = CreateField(from->key);
				to->value = CreateField(from->value);
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfFunctionType* from, WfFunctionType* to)
			{
				to->result = CreateField(from->result);
				FOREACH(vl::Ptr<WfType>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			void TypeVisitor::CopyFields(WfChildType* from, WfChildType* to)
			{
				to->parent = CreateField(from->parent);
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfType*>(from), static_cast<WfType*>(to));
			}

			// Visitor Members -----------------------------------

			void TypeVisitor::Visit(WfPredefinedType* node)
			{
				auto newNode = vl::MakePtr<WfPredefinedType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfTopQualifiedType* node)
			{
				auto newNode = vl::MakePtr<WfTopQualifiedType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfReferenceType* node)
			{
				auto newNode = vl::MakePtr<WfReferenceType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfRawPointerType* node)
			{
				auto newNode = vl::MakePtr<WfRawPointerType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfSharedPointerType* node)
			{
				auto newNode = vl::MakePtr<WfSharedPointerType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfNullableType* node)
			{
				auto newNode = vl::MakePtr<WfNullableType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfEnumerableType* node)
			{
				auto newNode = vl::MakePtr<WfEnumerableType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfMapType* node)
			{
				auto newNode = vl::MakePtr<WfMapType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfFunctionType* node)
			{
				auto newNode = vl::MakePtr<WfFunctionType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void TypeVisitor::Visit(WfChildType* node)
			{
				auto newNode = vl::MakePtr<WfChildType>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

/***********************************************************************
ExpressionVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void ExpressionVisitor::CopyFields(WfThisExpression* from, WfThisExpression* to)
			{
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfExpression* from, WfExpression* to)
			{
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfTopQualifiedExpression* from, WfTopQualifiedExpression* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfReferenceExpression* from, WfReferenceExpression* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfOrderedNameExpression* from, WfOrderedNameExpression* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfOrderedLambdaExpression* from, WfOrderedLambdaExpression* to)
			{
				to->body = CreateField(from->body);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfMemberExpression* from, WfMemberExpression* to)
			{
				to->parent = CreateField(from->parent);
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfChildExpression* from, WfChildExpression* to)
			{
				to->parent = CreateField(from->parent);
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfLiteralExpression* from, WfLiteralExpression* to)
			{
				to->value = from->value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfFloatingExpression* from, WfFloatingExpression* to)
			{
				to->value.codeRange = from->value.codeRange;
				to->value.tokenIndex = from->value.tokenIndex;
				to->value.value = from->value.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfIntegerExpression* from, WfIntegerExpression* to)
			{
				to->value.codeRange = from->value.codeRange;
				to->value.tokenIndex = from->value.tokenIndex;
				to->value.value = from->value.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfStringExpression* from, WfStringExpression* to)
			{
				to->value.codeRange = from->value.codeRange;
				to->value.tokenIndex = from->value.tokenIndex;
				to->value.value = from->value.value;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfUnaryExpression* from, WfUnaryExpression* to)
			{
				to->op = from->op;
				to->operand = CreateField(from->operand);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfBinaryExpression* from, WfBinaryExpression* to)
			{
				to->op = from->op;
				to->first = CreateField(from->first);
				to->second = CreateField(from->second);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfLetExpression* from, WfLetExpression* to)
			{
				FOREACH(vl::Ptr<WfLetVariable>, listItem, from->variables)
				{
					to->variables.Add(CreateField(listItem));
				}
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfLetVariable* from, WfLetVariable* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->value = CreateField(from->value);
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfIfExpression* from, WfIfExpression* to)
			{
				to->condition = CreateField(from->condition);
				to->trueBranch = CreateField(from->trueBranch);
				to->falseBranch = CreateField(from->falseBranch);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfRangeExpression* from, WfRangeExpression* to)
			{
				to->begin = CreateField(from->begin);
				to->beginBoundary = from->beginBoundary;
				to->end = CreateField(from->end);
				to->endBoundary = from->endBoundary;
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfSetTestingExpression* from, WfSetTestingExpression* to)
			{
				to->test = from->test;
				to->element = CreateField(from->element);
				to->collection = CreateField(from->collection);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfConstructorExpression* from, WfConstructorExpression* to)
			{
				FOREACH(vl::Ptr<WfConstructorArgument>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfConstructorArgument* from, WfConstructorArgument* to)
			{
				to->key = CreateField(from->key);
				to->value = CreateField(from->value);
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfInferExpression* from, WfInferExpression* to)
			{
				to->expression = CreateField(from->expression);
				to->type = CreateField(from->type);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfTypeCastingExpression* from, WfTypeCastingExpression* to)
			{
				to->strategy = from->strategy;
				to->expression = CreateField(from->expression);
				to->type = CreateField(from->type);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfTypeTestingExpression* from, WfTypeTestingExpression* to)
			{
				to->test = from->test;
				to->expression = CreateField(from->expression);
				to->type = CreateField(from->type);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfTypeOfTypeExpression* from, WfTypeOfTypeExpression* to)
			{
				to->type = CreateField(from->type);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfTypeOfExpressionExpression* from, WfTypeOfExpressionExpression* to)
			{
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfAttachEventExpression* from, WfAttachEventExpression* to)
			{
				to->event = CreateField(from->event);
				to->function = CreateField(from->function);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfDetachEventExpression* from, WfDetachEventExpression* to)
			{
				to->event = CreateField(from->event);
				to->handler = CreateField(from->handler);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfObserveExpression* from, WfObserveExpression* to)
			{
				to->parent = CreateField(from->parent);
				to->observeType = from->observeType;
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->expression = CreateField(from->expression);
				FOREACH(vl::Ptr<WfExpression>, listItem, from->events)
				{
					to->events.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfCallExpression* from, WfCallExpression* to)
			{
				to->function = CreateField(from->function);
				FOREACH(vl::Ptr<WfExpression>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfFunctionExpression* from, WfFunctionExpression* to)
			{
				to->function = CreateField(from->function);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfFunctionDeclaration* from, WfFunctionDeclaration* to)
			{
				to->anonymity = from->anonymity;
				FOREACH(vl::Ptr<WfFunctionArgument>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				to->returnType = CreateField(from->returnType);
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void ExpressionVisitor::CopyFields(WfDeclaration* from, WfDeclaration* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->classMember = CreateField(from->classMember);
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfAttribute* from, WfAttribute* to)
			{
				to->category.codeRange = from->category.codeRange;
				to->category.tokenIndex = from->category.tokenIndex;
				to->category.value = from->category.value;
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->value = CreateField(from->value);
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfClassMember* from, WfClassMember* to)
			{
				to->kind = from->kind;
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfFunctionArgument* from, WfFunctionArgument* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->type = CreateField(from->type);
				to->codeRange = from->codeRange;
			}

			void ExpressionVisitor::CopyFields(WfNewClassExpression* from, WfNewClassExpression* to)
			{
				to->type = CreateField(from->type);
				FOREACH(vl::Ptr<WfExpression>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void ExpressionVisitor::CopyFields(WfNewInterfaceExpression* from, WfNewInterfaceExpression* to)
			{
				to->type = CreateField(from->type);
				FOREACH(vl::Ptr<WfDeclaration>, listItem, from->declarations)
				{
					to->declarations.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			// CreateField ---------------------------------------

			vl::Ptr<WfLetVariable> ExpressionVisitor::CreateField(vl::Ptr<WfLetVariable> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfLetVariable>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfConstructorArgument> ExpressionVisitor::CreateField(vl::Ptr<WfConstructorArgument> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfConstructorArgument>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfFunctionDeclaration> ExpressionVisitor::CreateField(vl::Ptr<WfFunctionDeclaration> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfFunctionDeclaration>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfAttribute> ExpressionVisitor::CreateField(vl::Ptr<WfAttribute> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfAttribute>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfClassMember> ExpressionVisitor::CreateField(vl::Ptr<WfClassMember> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfClassMember>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfFunctionArgument> ExpressionVisitor::CreateField(vl::Ptr<WfFunctionArgument> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfFunctionArgument>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// Visitor Members -----------------------------------

			void ExpressionVisitor::Visit(WfThisExpression* node)
			{
				auto newNode = vl::MakePtr<WfThisExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfTopQualifiedExpression* node)
			{
				auto newNode = vl::MakePtr<WfTopQualifiedExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfReferenceExpression* node)
			{
				auto newNode = vl::MakePtr<WfReferenceExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfOrderedNameExpression* node)
			{
				auto newNode = vl::MakePtr<WfOrderedNameExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfOrderedLambdaExpression* node)
			{
				auto newNode = vl::MakePtr<WfOrderedLambdaExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfMemberExpression* node)
			{
				auto newNode = vl::MakePtr<WfMemberExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfChildExpression* node)
			{
				auto newNode = vl::MakePtr<WfChildExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfLiteralExpression* node)
			{
				auto newNode = vl::MakePtr<WfLiteralExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfFloatingExpression* node)
			{
				auto newNode = vl::MakePtr<WfFloatingExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfIntegerExpression* node)
			{
				auto newNode = vl::MakePtr<WfIntegerExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfStringExpression* node)
			{
				auto newNode = vl::MakePtr<WfStringExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfUnaryExpression* node)
			{
				auto newNode = vl::MakePtr<WfUnaryExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfBinaryExpression* node)
			{
				auto newNode = vl::MakePtr<WfBinaryExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfLetExpression* node)
			{
				auto newNode = vl::MakePtr<WfLetExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfIfExpression* node)
			{
				auto newNode = vl::MakePtr<WfIfExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfRangeExpression* node)
			{
				auto newNode = vl::MakePtr<WfRangeExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfSetTestingExpression* node)
			{
				auto newNode = vl::MakePtr<WfSetTestingExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfConstructorExpression* node)
			{
				auto newNode = vl::MakePtr<WfConstructorExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfInferExpression* node)
			{
				auto newNode = vl::MakePtr<WfInferExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfTypeCastingExpression* node)
			{
				auto newNode = vl::MakePtr<WfTypeCastingExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfTypeTestingExpression* node)
			{
				auto newNode = vl::MakePtr<WfTypeTestingExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfTypeOfTypeExpression* node)
			{
				auto newNode = vl::MakePtr<WfTypeOfTypeExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfTypeOfExpressionExpression* node)
			{
				auto newNode = vl::MakePtr<WfTypeOfExpressionExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfAttachEventExpression* node)
			{
				auto newNode = vl::MakePtr<WfAttachEventExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfDetachEventExpression* node)
			{
				auto newNode = vl::MakePtr<WfDetachEventExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfObserveExpression* node)
			{
				auto newNode = vl::MakePtr<WfObserveExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfCallExpression* node)
			{
				auto newNode = vl::MakePtr<WfCallExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfFunctionExpression* node)
			{
				auto newNode = vl::MakePtr<WfFunctionExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfNewClassExpression* node)
			{
				auto newNode = vl::MakePtr<WfNewClassExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfNewInterfaceExpression* node)
			{
				auto newNode = vl::MakePtr<WfNewInterfaceExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ExpressionVisitor::Visit(WfVirtualExpression* node)
			{
				this->result = Dispatch(node);
			}

/***********************************************************************
StatementVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void StatementVisitor::CopyFields(WfBreakStatement* from, WfBreakStatement* to)
			{
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfStatement* from, WfStatement* to)
			{
				to->codeRange = from->codeRange;
			}

			void StatementVisitor::CopyFields(WfContinueStatement* from, WfContinueStatement* to)
			{
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfReturnStatement* from, WfReturnStatement* to)
			{
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfDeleteStatement* from, WfDeleteStatement* to)
			{
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfRaiseExceptionStatement* from, WfRaiseExceptionStatement* to)
			{
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfIfStatement* from, WfIfStatement* to)
			{
				to->type = CreateField(from->type);
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->expression = CreateField(from->expression);
				to->trueBranch = CreateField(from->trueBranch);
				to->falseBranch = CreateField(from->falseBranch);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfWhileStatement* from, WfWhileStatement* to)
			{
				to->condition = CreateField(from->condition);
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfTryStatement* from, WfTryStatement* to)
			{
				to->protectedStatement = CreateField(from->protectedStatement);
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->catchStatement = CreateField(from->catchStatement);
				to->finallyStatement = CreateField(from->finallyStatement);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfBlockStatement* from, WfBlockStatement* to)
			{
				FOREACH(vl::Ptr<WfStatement>, listItem, from->statements)
				{
					to->statements.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfVariableStatement* from, WfVariableStatement* to)
			{
				to->variable = CreateField(from->variable);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void StatementVisitor::CopyFields(WfVariableDeclaration* from, WfVariableDeclaration* to)
			{
				to->type = CreateField(from->type);
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void StatementVisitor::CopyFields(WfDeclaration* from, WfDeclaration* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->classMember = CreateField(from->classMember);
				to->codeRange = from->codeRange;
			}

			void StatementVisitor::CopyFields(WfAttribute* from, WfAttribute* to)
			{
				to->category.codeRange = from->category.codeRange;
				to->category.tokenIndex = from->category.tokenIndex;
				to->category.value = from->category.value;
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->value = CreateField(from->value);
				to->codeRange = from->codeRange;
			}

			void StatementVisitor::CopyFields(WfClassMember* from, WfClassMember* to)
			{
				to->kind = from->kind;
				to->codeRange = from->codeRange;
			}

			void StatementVisitor::CopyFields(WfExpressionStatement* from, WfExpressionStatement* to)
			{
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			// CreateField ---------------------------------------

			vl::Ptr<WfVariableDeclaration> StatementVisitor::CreateField(vl::Ptr<WfVariableDeclaration> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfVariableDeclaration>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfAttribute> StatementVisitor::CreateField(vl::Ptr<WfAttribute> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfAttribute>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfClassMember> StatementVisitor::CreateField(vl::Ptr<WfClassMember> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfClassMember>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// Visitor Members -----------------------------------

			void StatementVisitor::Visit(WfBreakStatement* node)
			{
				auto newNode = vl::MakePtr<WfBreakStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfContinueStatement* node)
			{
				auto newNode = vl::MakePtr<WfContinueStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfReturnStatement* node)
			{
				auto newNode = vl::MakePtr<WfReturnStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfDeleteStatement* node)
			{
				auto newNode = vl::MakePtr<WfDeleteStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfRaiseExceptionStatement* node)
			{
				auto newNode = vl::MakePtr<WfRaiseExceptionStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfIfStatement* node)
			{
				auto newNode = vl::MakePtr<WfIfStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfWhileStatement* node)
			{
				auto newNode = vl::MakePtr<WfWhileStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfTryStatement* node)
			{
				auto newNode = vl::MakePtr<WfTryStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfBlockStatement* node)
			{
				auto newNode = vl::MakePtr<WfBlockStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfVariableStatement* node)
			{
				auto newNode = vl::MakePtr<WfVariableStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfExpressionStatement* node)
			{
				auto newNode = vl::MakePtr<WfExpressionStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void StatementVisitor::Visit(WfVirtualStatement* node)
			{
				this->result = Dispatch(node);
			}

			void StatementVisitor::Visit(WfCoroutineStatement* node)
			{
				this->result = Dispatch(node);
			}

/***********************************************************************
DeclarationVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void DeclarationVisitor::CopyFields(WfNamespaceDeclaration* from, WfNamespaceDeclaration* to)
			{
				FOREACH(vl::Ptr<WfDeclaration>, listItem, from->declarations)
				{
					to->declarations.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfDeclaration* from, WfDeclaration* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->classMember = CreateField(from->classMember);
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfAttribute* from, WfAttribute* to)
			{
				to->category.codeRange = from->category.codeRange;
				to->category.tokenIndex = from->category.tokenIndex;
				to->category.value = from->category.value;
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->value = CreateField(from->value);
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfClassMember* from, WfClassMember* to)
			{
				to->kind = from->kind;
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfFunctionDeclaration* from, WfFunctionDeclaration* to)
			{
				to->anonymity = from->anonymity;
				FOREACH(vl::Ptr<WfFunctionArgument>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				to->returnType = CreateField(from->returnType);
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfFunctionArgument* from, WfFunctionArgument* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->type = CreateField(from->type);
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfVariableDeclaration* from, WfVariableDeclaration* to)
			{
				to->type = CreateField(from->type);
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfEventDeclaration* from, WfEventDeclaration* to)
			{
				FOREACH(vl::Ptr<WfType>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfPropertyDeclaration* from, WfPropertyDeclaration* to)
			{
				to->type = CreateField(from->type);
				to->getter.codeRange = from->getter.codeRange;
				to->getter.tokenIndex = from->getter.tokenIndex;
				to->getter.value = from->getter.value;
				to->setter.codeRange = from->setter.codeRange;
				to->setter.tokenIndex = from->setter.tokenIndex;
				to->setter.value = from->setter.value;
				to->valueChangedEvent.codeRange = from->valueChangedEvent.codeRange;
				to->valueChangedEvent.tokenIndex = from->valueChangedEvent.tokenIndex;
				to->valueChangedEvent.value = from->valueChangedEvent.value;
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfConstructorDeclaration* from, WfConstructorDeclaration* to)
			{
				to->constructorType = from->constructorType;
				FOREACH(vl::Ptr<WfBaseConstructorCall>, listItem, from->baseConstructorCalls)
				{
					to->baseConstructorCalls.Add(CreateField(listItem));
				}
				FOREACH(vl::Ptr<WfFunctionArgument>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfBaseConstructorCall* from, WfBaseConstructorCall* to)
			{
				to->type = CreateField(from->type);
				FOREACH(vl::Ptr<WfExpression>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfDestructorDeclaration* from, WfDestructorDeclaration* to)
			{
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfClassDeclaration* from, WfClassDeclaration* to)
			{
				to->kind = from->kind;
				to->constructorType = from->constructorType;
				FOREACH(vl::Ptr<WfType>, listItem, from->baseTypes)
				{
					to->baseTypes.Add(CreateField(listItem));
				}
				FOREACH(vl::Ptr<WfDeclaration>, listItem, from->declarations)
				{
					to->declarations.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfEnumDeclaration* from, WfEnumDeclaration* to)
			{
				to->kind = from->kind;
				FOREACH(vl::Ptr<WfEnumItem>, listItem, from->items)
				{
					to->items.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfEnumItem* from, WfEnumItem* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->kind = from->kind;
				to->number.codeRange = from->number.codeRange;
				to->number.tokenIndex = from->number.tokenIndex;
				to->number.value = from->number.value;
				FOREACH(vl::Ptr<WfEnumItemIntersection>, listItem, from->intersections)
				{
					to->intersections.Add(CreateField(listItem));
				}
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfEnumItemIntersection* from, WfEnumItemIntersection* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->codeRange = from->codeRange;
			}

			void DeclarationVisitor::CopyFields(WfStructDeclaration* from, WfStructDeclaration* to)
			{
				FOREACH(vl::Ptr<WfStructMember>, listItem, from->members)
				{
					to->members.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void DeclarationVisitor::CopyFields(WfStructMember* from, WfStructMember* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->type = CreateField(from->type);
				to->codeRange = from->codeRange;
			}

			// CreateField ---------------------------------------

			vl::Ptr<WfAttribute> DeclarationVisitor::CreateField(vl::Ptr<WfAttribute> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfAttribute>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfClassMember> DeclarationVisitor::CreateField(vl::Ptr<WfClassMember> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfClassMember>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfFunctionArgument> DeclarationVisitor::CreateField(vl::Ptr<WfFunctionArgument> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfFunctionArgument>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfBaseConstructorCall> DeclarationVisitor::CreateField(vl::Ptr<WfBaseConstructorCall> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfBaseConstructorCall>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfEnumItem> DeclarationVisitor::CreateField(vl::Ptr<WfEnumItem> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfEnumItem>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfEnumItemIntersection> DeclarationVisitor::CreateField(vl::Ptr<WfEnumItemIntersection> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfEnumItemIntersection>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfStructMember> DeclarationVisitor::CreateField(vl::Ptr<WfStructMember> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfStructMember>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// Visitor Members -----------------------------------

			void DeclarationVisitor::Visit(WfNamespaceDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfNamespaceDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfFunctionDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfFunctionDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfVariableDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfVariableDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfEventDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfEventDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfPropertyDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfPropertyDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfConstructorDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfConstructorDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfDestructorDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfDestructorDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfClassDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfClassDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfEnumDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfEnumDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfStructDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfStructDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void DeclarationVisitor::Visit(WfVirtualDeclaration* node)
			{
				this->result = Dispatch(node);
			}

/***********************************************************************
VirtualDeclarationVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void VirtualDeclarationVisitor::CopyFields(WfAutoPropertyDeclaration* from, WfAutoPropertyDeclaration* to)
			{
				to->type = CreateField(from->type);
				to->configConst = from->configConst;
				to->configObserve = from->configObserve;
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfVirtualDeclaration*>(from), static_cast<WfVirtualDeclaration*>(to));
			}

			void VirtualDeclarationVisitor::CopyFields(WfVirtualDeclaration* from, WfVirtualDeclaration* to)
			{
				FOREACH(vl::Ptr<WfDeclaration>, listItem, from->expandedDeclarations)
				{
					to->expandedDeclarations.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfDeclaration*>(from), static_cast<WfDeclaration*>(to));
			}

			void VirtualDeclarationVisitor::CopyFields(WfDeclaration* from, WfDeclaration* to)
			{
				FOREACH(vl::Ptr<WfAttribute>, listItem, from->attributes)
				{
					to->attributes.Add(CreateField(listItem));
				}
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->classMember = CreateField(from->classMember);
				to->codeRange = from->codeRange;
			}

			void VirtualDeclarationVisitor::CopyFields(WfAttribute* from, WfAttribute* to)
			{
				to->category.codeRange = from->category.codeRange;
				to->category.tokenIndex = from->category.tokenIndex;
				to->category.value = from->category.value;
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->value = CreateField(from->value);
				to->codeRange = from->codeRange;
			}

			void VirtualDeclarationVisitor::CopyFields(WfClassMember* from, WfClassMember* to)
			{
				to->kind = from->kind;
				to->codeRange = from->codeRange;
			}

			void VirtualDeclarationVisitor::CopyFields(WfCastResultInterfaceDeclaration* from, WfCastResultInterfaceDeclaration* to)
			{
				to->baseType = CreateField(from->baseType);
				to->elementType = CreateField(from->elementType);
				CopyFields(static_cast<WfVirtualDeclaration*>(from), static_cast<WfVirtualDeclaration*>(to));
			}

			// CreateField ---------------------------------------

			vl::Ptr<WfAttribute> VirtualDeclarationVisitor::CreateField(vl::Ptr<WfAttribute> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfAttribute>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfClassMember> VirtualDeclarationVisitor::CreateField(vl::Ptr<WfClassMember> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfClassMember>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// Visitor Members -----------------------------------

			void VirtualDeclarationVisitor::Visit(WfAutoPropertyDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfAutoPropertyDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void VirtualDeclarationVisitor::Visit(WfCastResultInterfaceDeclaration* node)
			{
				auto newNode = vl::MakePtr<WfCastResultInterfaceDeclaration>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

/***********************************************************************
VirtualStatementVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void VirtualStatementVisitor::CopyFields(WfForEachStatement* from, WfForEachStatement* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->direction = from->direction;
				to->collection = CreateField(from->collection);
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfVirtualStatement*>(from), static_cast<WfVirtualStatement*>(to));
			}

			void VirtualStatementVisitor::CopyFields(WfVirtualStatement* from, WfVirtualStatement* to)
			{
				to->expandedStatement = CreateField(from->expandedStatement);
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void VirtualStatementVisitor::CopyFields(WfStatement* from, WfStatement* to)
			{
				to->codeRange = from->codeRange;
			}

			void VirtualStatementVisitor::CopyFields(WfSwitchStatement* from, WfSwitchStatement* to)
			{
				to->expression = CreateField(from->expression);
				FOREACH(vl::Ptr<WfSwitchCase>, listItem, from->caseBranches)
				{
					to->caseBranches.Add(CreateField(listItem));
				}
				to->defaultBranch = CreateField(from->defaultBranch);
				CopyFields(static_cast<WfVirtualStatement*>(from), static_cast<WfVirtualStatement*>(to));
			}

			void VirtualStatementVisitor::CopyFields(WfSwitchCase* from, WfSwitchCase* to)
			{
				to->expression = CreateField(from->expression);
				to->statement = CreateField(from->statement);
				to->codeRange = from->codeRange;
			}

			void VirtualStatementVisitor::CopyFields(WfCoProviderStatement* from, WfCoProviderStatement* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfVirtualStatement*>(from), static_cast<WfVirtualStatement*>(to));
			}

			// CreateField ---------------------------------------

			vl::Ptr<WfSwitchCase> VirtualStatementVisitor::CreateField(vl::Ptr<WfSwitchCase> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfSwitchCase>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// Visitor Members -----------------------------------

			void VirtualStatementVisitor::Visit(WfForEachStatement* node)
			{
				auto newNode = vl::MakePtr<WfForEachStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void VirtualStatementVisitor::Visit(WfSwitchStatement* node)
			{
				auto newNode = vl::MakePtr<WfSwitchStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void VirtualStatementVisitor::Visit(WfCoProviderStatement* node)
			{
				auto newNode = vl::MakePtr<WfCoProviderStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

/***********************************************************************
CoroutineStatementVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void CoroutineStatementVisitor::CopyFields(WfCoPauseStatement* from, WfCoPauseStatement* to)
			{
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfCoroutineStatement*>(from), static_cast<WfCoroutineStatement*>(to));
			}

			void CoroutineStatementVisitor::CopyFields(WfCoroutineStatement* from, WfCoroutineStatement* to)
			{
				CopyFields(static_cast<WfStatement*>(from), static_cast<WfStatement*>(to));
			}

			void CoroutineStatementVisitor::CopyFields(WfStatement* from, WfStatement* to)
			{
				to->codeRange = from->codeRange;
			}

			void CoroutineStatementVisitor::CopyFields(WfCoOperatorStatement* from, WfCoOperatorStatement* to)
			{
				to->varName.codeRange = from->varName.codeRange;
				to->varName.tokenIndex = from->varName.tokenIndex;
				to->varName.value = from->varName.value;
				to->opName.codeRange = from->opName.codeRange;
				to->opName.tokenIndex = from->opName.tokenIndex;
				to->opName.value = from->opName.value;
				FOREACH(vl::Ptr<WfExpression>, listItem, from->arguments)
				{
					to->arguments.Add(CreateField(listItem));
				}
				CopyFields(static_cast<WfCoroutineStatement*>(from), static_cast<WfCoroutineStatement*>(to));
			}

			// Visitor Members -----------------------------------

			void CoroutineStatementVisitor::Visit(WfCoPauseStatement* node)
			{
				auto newNode = vl::MakePtr<WfCoPauseStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void CoroutineStatementVisitor::Visit(WfCoOperatorStatement* node)
			{
				auto newNode = vl::MakePtr<WfCoOperatorStatement>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

/***********************************************************************
VirtualExpressionVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void VirtualExpressionVisitor::CopyFields(WfBindExpression* from, WfBindExpression* to)
			{
				to->expression = CreateField(from->expression);
				CopyFields(static_cast<WfVirtualExpression*>(from), static_cast<WfVirtualExpression*>(to));
			}

			void VirtualExpressionVisitor::CopyFields(WfVirtualExpression* from, WfVirtualExpression* to)
			{
				to->expandedExpression = CreateField(from->expandedExpression);
				CopyFields(static_cast<WfExpression*>(from), static_cast<WfExpression*>(to));
			}

			void VirtualExpressionVisitor::CopyFields(WfExpression* from, WfExpression* to)
			{
				to->codeRange = from->codeRange;
			}

			void VirtualExpressionVisitor::CopyFields(WfFormatExpression* from, WfFormatExpression* to)
			{
				to->value.codeRange = from->value.codeRange;
				to->value.tokenIndex = from->value.tokenIndex;
				to->value.value = from->value.value;
				CopyFields(static_cast<WfVirtualExpression*>(from), static_cast<WfVirtualExpression*>(to));
			}

			void VirtualExpressionVisitor::CopyFields(WfNewCoroutineExpression* from, WfNewCoroutineExpression* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				to->statement = CreateField(from->statement);
				CopyFields(static_cast<WfVirtualExpression*>(from), static_cast<WfVirtualExpression*>(to));
			}

			// Visitor Members -----------------------------------

			void VirtualExpressionVisitor::Visit(WfBindExpression* node)
			{
				auto newNode = vl::MakePtr<WfBindExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void VirtualExpressionVisitor::Visit(WfFormatExpression* node)
			{
				auto newNode = vl::MakePtr<WfFormatExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void VirtualExpressionVisitor::Visit(WfNewCoroutineExpression* node)
			{
				auto newNode = vl::MakePtr<WfNewCoroutineExpression>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

/***********************************************************************
ModuleUsingFragmentVisitor
***********************************************************************/

			// CopyFields ----------------------------------------

			void ModuleUsingFragmentVisitor::CopyFields(WfModuleUsingNameFragment* from, WfModuleUsingNameFragment* to)
			{
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				CopyFields(static_cast<WfModuleUsingFragment*>(from), static_cast<WfModuleUsingFragment*>(to));
			}

			void ModuleUsingFragmentVisitor::CopyFields(WfModuleUsingFragment* from, WfModuleUsingFragment* to)
			{
				to->codeRange = from->codeRange;
			}

			void ModuleUsingFragmentVisitor::CopyFields(WfModuleUsingWildCardFragment* from, WfModuleUsingWildCardFragment* to)
			{
				CopyFields(static_cast<WfModuleUsingFragment*>(from), static_cast<WfModuleUsingFragment*>(to));
			}

			// Visitor Members -----------------------------------

			void ModuleUsingFragmentVisitor::Visit(WfModuleUsingNameFragment* node)
			{
				auto newNode = vl::MakePtr<WfModuleUsingNameFragment>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

			void ModuleUsingFragmentVisitor::Visit(WfModuleUsingWildCardFragment* node)
			{
				auto newNode = vl::MakePtr<WfModuleUsingWildCardFragment>();
				CopyFields(node, newNode.Obj());
				this->result = newNode;
			}

/***********************************************************************
ModuleVisitor
***********************************************************************/

			vl::Ptr<WfModule> ModuleVisitor::CreateField(vl::Ptr<WfModule> from)
			{
				auto to = vl::MakePtr<WfModule>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// CopyFields ----------------------------------------

			void ModuleVisitor::CopyFields(WfModule* from, WfModule* to)
			{
				to->moduleType = from->moduleType;
				to->name.codeRange = from->name.codeRange;
				to->name.tokenIndex = from->name.tokenIndex;
				to->name.value = from->name.value;
				FOREACH(vl::Ptr<WfModuleUsingPath>, listItem, from->paths)
				{
					to->paths.Add(CreateField(listItem));
				}
				FOREACH(vl::Ptr<WfDeclaration>, listItem, from->declarations)
				{
					to->declarations.Add(CreateField(listItem));
				}
				to->codeRange = from->codeRange;
			}

			void ModuleVisitor::CopyFields(WfModuleUsingPath* from, WfModuleUsingPath* to)
			{
				FOREACH(vl::Ptr<WfModuleUsingItem>, listItem, from->items)
				{
					to->items.Add(CreateField(listItem));
				}
				to->codeRange = from->codeRange;
			}

			void ModuleVisitor::CopyFields(WfModuleUsingItem* from, WfModuleUsingItem* to)
			{
				FOREACH(vl::Ptr<WfModuleUsingFragment>, listItem, from->fragments)
				{
					to->fragments.Add(CreateField(listItem));
				}
				to->codeRange = from->codeRange;
			}

			// CreateField ---------------------------------------

			vl::Ptr<WfModuleUsingPath> ModuleVisitor::CreateField(vl::Ptr<WfModuleUsingPath> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfModuleUsingPath>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			vl::Ptr<WfModuleUsingItem> ModuleVisitor::CreateField(vl::Ptr<WfModuleUsingItem> from)
			{
				if (!from) return nullptr;
				auto to = vl::MakePtr<WfModuleUsingItem>();
				CopyFields(from.Obj(), to.Obj());
				return to;
			}

			// CreateField (virtual) -----------------------------

			vl::Ptr<WfType> ModuleVisitor::CreateField(vl::Ptr<WfType> from)
			{
				if (!from) return nullptr;
				from->Accept(static_cast<TypeVisitor*>(this));
				return this->result.Cast<WfType>();
			}

			vl::Ptr<WfExpression> ModuleVisitor::CreateField(vl::Ptr<WfExpression> from)
			{
				if (!from) return nullptr;
				from->Accept(static_cast<ExpressionVisitor*>(this));
				return this->result.Cast<WfExpression>();
			}

			vl::Ptr<WfStatement> ModuleVisitor::CreateField(vl::Ptr<WfStatement> from)
			{
				if (!from) return nullptr;
				from->Accept(static_cast<StatementVisitor*>(this));
				return this->result.Cast<WfStatement>();
			}

			vl::Ptr<WfDeclaration> ModuleVisitor::CreateField(vl::Ptr<WfDeclaration> from)
			{
				if (!from) return nullptr;
				from->Accept(static_cast<DeclarationVisitor*>(this));
				return this->result.Cast<WfDeclaration>();
			}

			vl::Ptr<WfModuleUsingFragment> ModuleVisitor::CreateField(vl::Ptr<WfModuleUsingFragment> from)
			{
				if (!from) return nullptr;
				from->Accept(static_cast<ModuleUsingFragmentVisitor*>(this));
				return this->result.Cast<WfModuleUsingFragment>();
			}

			// Dispatch (virtual) --------------------------------

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ModuleVisitor::Dispatch(WfVirtualExpression* node)
			{
				node->Accept(static_cast<VirtualExpressionVisitor*>(this));
				return this->result;
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ModuleVisitor::Dispatch(WfVirtualStatement* node)
			{
				node->Accept(static_cast<VirtualStatementVisitor*>(this));
				return this->result;
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ModuleVisitor::Dispatch(WfCoroutineStatement* node)
			{
				node->Accept(static_cast<CoroutineStatementVisitor*>(this));
				return this->result;
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ModuleVisitor::Dispatch(WfVirtualDeclaration* node)
			{
				node->Accept(static_cast<VirtualDeclarationVisitor*>(this));
				return this->result;
			}
		}
	}
}

/***********************************************************************
EXPRESSION\WFEXPRESSION_EMPTY.CPP
***********************************************************************/
/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::WfExpression.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/


namespace vl
{
	namespace workflow
	{
		namespace empty_visitor
		{

/***********************************************************************
TypeVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void TypeVisitor::Visit(WfPredefinedType* node)
			{
			}

			void TypeVisitor::Visit(WfTopQualifiedType* node)
			{
			}

			void TypeVisitor::Visit(WfReferenceType* node)
			{
			}

			void TypeVisitor::Visit(WfRawPointerType* node)
			{
			}

			void TypeVisitor::Visit(WfSharedPointerType* node)
			{
			}

			void TypeVisitor::Visit(WfNullableType* node)
			{
			}

			void TypeVisitor::Visit(WfEnumerableType* node)
			{
			}

			void TypeVisitor::Visit(WfMapType* node)
			{
			}

			void TypeVisitor::Visit(WfFunctionType* node)
			{
			}

			void TypeVisitor::Visit(WfChildType* node)
			{
			}

/***********************************************************************
ExpressionVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void ExpressionVisitor::Visit(WfThisExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfTopQualifiedExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfReferenceExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfOrderedNameExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfOrderedLambdaExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfMemberExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfChildExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfLiteralExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfFloatingExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfIntegerExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfStringExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfUnaryExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfBinaryExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfLetExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfIfExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfRangeExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfSetTestingExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfConstructorExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfInferExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfTypeCastingExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfTypeTestingExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfTypeOfTypeExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfTypeOfExpressionExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfAttachEventExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfDetachEventExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfObserveExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfCallExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfFunctionExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfNewClassExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfNewInterfaceExpression* node)
			{
			}

			void ExpressionVisitor::Visit(WfVirtualExpression* node)
			{
				Dispatch(node);
			}

/***********************************************************************
StatementVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void StatementVisitor::Visit(WfBreakStatement* node)
			{
			}

			void StatementVisitor::Visit(WfContinueStatement* node)
			{
			}

			void StatementVisitor::Visit(WfReturnStatement* node)
			{
			}

			void StatementVisitor::Visit(WfDeleteStatement* node)
			{
			}

			void StatementVisitor::Visit(WfRaiseExceptionStatement* node)
			{
			}

			void StatementVisitor::Visit(WfIfStatement* node)
			{
			}

			void StatementVisitor::Visit(WfWhileStatement* node)
			{
			}

			void StatementVisitor::Visit(WfTryStatement* node)
			{
			}

			void StatementVisitor::Visit(WfBlockStatement* node)
			{
			}

			void StatementVisitor::Visit(WfVariableStatement* node)
			{
			}

			void StatementVisitor::Visit(WfExpressionStatement* node)
			{
			}

			void StatementVisitor::Visit(WfVirtualStatement* node)
			{
				Dispatch(node);
			}

			void StatementVisitor::Visit(WfCoroutineStatement* node)
			{
				Dispatch(node);
			}

/***********************************************************************
DeclarationVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void DeclarationVisitor::Visit(WfNamespaceDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfFunctionDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfVariableDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfEventDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfPropertyDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfConstructorDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfDestructorDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfClassDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfEnumDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfStructDeclaration* node)
			{
			}

			void DeclarationVisitor::Visit(WfVirtualDeclaration* node)
			{
				Dispatch(node);
			}

/***********************************************************************
VirtualDeclarationVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void VirtualDeclarationVisitor::Visit(WfAutoPropertyDeclaration* node)
			{
			}

			void VirtualDeclarationVisitor::Visit(WfCastResultInterfaceDeclaration* node)
			{
			}

/***********************************************************************
VirtualStatementVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void VirtualStatementVisitor::Visit(WfForEachStatement* node)
			{
			}

			void VirtualStatementVisitor::Visit(WfSwitchStatement* node)
			{
			}

			void VirtualStatementVisitor::Visit(WfCoProviderStatement* node)
			{
			}

/***********************************************************************
CoroutineStatementVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void CoroutineStatementVisitor::Visit(WfCoPauseStatement* node)
			{
			}

			void CoroutineStatementVisitor::Visit(WfCoOperatorStatement* node)
			{
			}

/***********************************************************************
VirtualExpressionVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void VirtualExpressionVisitor::Visit(WfBindExpression* node)
			{
			}

			void VirtualExpressionVisitor::Visit(WfFormatExpression* node)
			{
			}

			void VirtualExpressionVisitor::Visit(WfNewCoroutineExpression* node)
			{
			}

/***********************************************************************
ModuleUsingFragmentVisitor
***********************************************************************/

			// Visitor Members -----------------------------------

			void ModuleUsingFragmentVisitor::Visit(WfModuleUsingNameFragment* node)
			{
			}

			void ModuleUsingFragmentVisitor::Visit(WfModuleUsingWildCardFragment* node)
			{
			}
		}
	}
}

/***********************************************************************
EXPRESSION\WFEXPRESSION_PARSER.CPP
***********************************************************************/
/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::WfExpression.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/


namespace vl
{
	namespace workflow
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (Root Types)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"enum ClassMemberKind"
L"\r\n" L"{"
L"\r\n" L"\tStatic,"
L"\r\n" L"\tOverride,"
L"\r\n" L"\tNormal,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ClassMember"
L"\r\n" L"{"
L"\r\n" L"\tClassMemberKind\t\t\tkind;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Type"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Expression"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Statement"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Attribute"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tcategory;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tExpression\t\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Declaration"
L"\r\n" L"{"
L"\r\n" L"\tAttribute[]\t\t\t\tattributes;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tClassMember\t\t\t\tclassMember;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (Types)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"enum PredefinedTypeName"
L"\r\n" L"{"
L"\r\n" L"\tVoid,"
L"\r\n" L"\tObject,"
L"\r\n" L"\tInterface,"
L"\r\n" L"\tInt,"
L"\r\n" L"\tUInt,"
L"\r\n" L"\tFloat,"
L"\r\n" L"\tDouble,"
L"\r\n" L"\tString,"
L"\r\n" L"\tChar,"
L"\r\n" L"\tBool,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PredefinedType : Type"
L"\r\n" L"{"
L"\r\n" L"\tPredefinedTypeName\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TopQualifiedType : Type"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ReferenceType : Type"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class RawPointerType : Type"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\telement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SharedPointerType : Type"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\telement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class NullableType : Type"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\telement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class EnumerableType : Type"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\telement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum MapWritability"
L"\r\n" L"{"
L"\r\n" L"\tReadonly,"
L"\r\n" L"\tWritable,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class MapType : Type"
L"\r\n" L"{"
L"\r\n" L"\tMapWritability\t\t\twritability;"
L"\r\n" L"\tType\t\t\t\t\tkey;"
L"\r\n" L"\tType\t\t\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class FunctionType : Type"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\tresult;"
L"\r\n" L"\tType[]\t\t\t\t\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ChildType : Type"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\tparent;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (Declarations)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class NamespaceDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tDeclaration[]\t\t\tdeclarations;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class FunctionArgument"
L"\r\n" L"{"
L"\r\n" L"\tAttribute[]\t\t\t\tattributes;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum FunctionAnonymity"
L"\r\n" L"{"
L"\r\n" L"\tNamed,"
L"\r\n" L"\tAnonymous,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class FunctionDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tFunctionAnonymity\t\tanonymity;"
L"\r\n" L"\tFunctionArgument[]\t\targuments;"
L"\r\n" L"\tType\t\t\t\t\treturnType;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class VariableDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class EventDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tType[]\t\t\t\t\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PropertyDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\ttoken\t\t\t\t\tgetter;"
L"\r\n" L"\ttoken\t\t\t\t\tsetter;"
L"\r\n" L"\ttoken\t\t\t\t\tvalueChangedEvent;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ClassKind"
L"\r\n" L"{"
L"\r\n" L"\tClass,"
L"\r\n" L"\tInterface,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ConstructorType"
L"\r\n" L"{"
L"\r\n" L"\tUndefined,"
L"\r\n" L"\tSharedPtr,"
L"\r\n" L"\tRawPtr,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class BaseConstructorCall"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\tExpression[]\t\t\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ConstructorDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tConstructorType\t\t\tconstructorType;"
L"\r\n" L"\tBaseConstructorCall[]\tbaseConstructorCalls;"
L"\r\n" L"\tFunctionArgument[]\t\targuments;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class DestructorDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ClassDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tClassKind\t\t\t\tkind;"
L"\r\n" L"\tConstructorType\t\t\tconstructorType;"
L"\r\n" L"\tType[]\t\t\t\t\tbaseTypes;"
L"\r\n" L"\tDeclaration[]\t\t\tdeclarations (SetDefaultClassMember);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum EnumKind"
L"\r\n" L"{"
L"\r\n" L"\tNormal,"
L"\r\n" L"\tFlag,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum EnumItemKind"
L"\r\n" L"{"
L"\r\n" L"\tConstant,"
L"\r\n" L"\tIntersection,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class EnumItemIntersection"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class EnumItem"
L"\r\n" L"{"
L"\r\n" L"\tAttribute[]\t\t\t\tattributes;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tEnumItemKind\t\t\tkind;"
L"\r\n" L"\ttoken\t\t\t\t\tnumber;"
L"\r\n" L"\tEnumItemIntersection[]\tintersections;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class EnumDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tEnumKind\t\t\t\tkind;"
L"\r\n" L"\tEnumItem[]\t\t\t\titems;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class StructMember"
L"\r\n" L"{"
L"\r\n" L"\tAttribute[]\t\t\t\tattributes;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class StructDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tStructMember[]\t\t\tmembers;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (VirtualDeclarations)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class VirtualDeclaration : Declaration"
L"\r\n" L"{"
L"\r\n" L"\tDeclaration[]\t\t\texpandedDeclarations;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum APConst"
L"\r\n" L"{"
L"\r\n" L"\tReadonly,"
L"\r\n" L"\tWritable,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum APObserve"
L"\r\n" L"{"
L"\r\n" L"\tObservable,"
L"\r\n" L"\tNotObservable,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class AutoPropertyDeclaration : VirtualDeclaration"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\tAPConst\t\t\t\t\tconfigConst;"
L"\r\n" L"\tAPObserve\t\t\t\tconfigObserve;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CastResultInterfaceDeclaration : VirtualDeclaration"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\tbaseType;"
L"\r\n" L"\tType\t\t\t\t\telementType;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (Statements)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class BreakStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ContinueStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ReturnStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class DeleteStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class RaiseExceptionStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class IfStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tStatement\t\t\t\ttrueBranch;"
L"\r\n" L"\tStatement\t\t\t\tfalseBranch;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class WhileStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tcondition;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TryStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tStatement\t\t\t\tprotectedStatement;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tStatement\t\t\t\tcatchStatement;"
L"\r\n" L"\tStatement\t\t\t\tfinallyStatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class BlockStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tStatement[]\t\t\t\tstatements;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class VariableStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tVariableDeclaration\t\tvariable;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ExpressionStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (VirtualStatements)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class VirtualStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"\tStatement\t\t\t\texpandedStatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ForEachDirection"
L"\r\n" L"{"
L"\r\n" L"\tNormal,"
L"\r\n" L"\tReversed,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ForEachStatement : VirtualStatement"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tForEachDirection\t\tdirection;"
L"\r\n" L"\tExpression\t\t\t\tcollection;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SwitchCase"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SwitchStatement : VirtualStatement"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tSwitchCase[]\t\t\tcaseBranches;"
L"\r\n" L"\tStatement\t\t\t\tdefaultBranch;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CoProviderStatement : VirtualStatement"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (CoroutineStatements)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class CoroutineStatement : Statement"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CoPauseStatement : CoroutineStatement"
L"\r\n" L"{"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CoOperatorStatement : CoroutineStatement"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tvarName;"
L"\r\n" L"\ttoken\t\t\t\t\topName;"
L"\r\n" L"\tExpression[]\t\t\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (Expressions)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class ThisExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TopQualifiedExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ReferenceExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class OrderedNameExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class OrderedLambdaExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tbody;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class MemberExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tparent;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ChildExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tparent;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum LiteralValue"
L"\r\n" L"{"
L"\r\n" L"\tNull,"
L"\r\n" L"\tTrue,"
L"\r\n" L"\tFalse,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class LiteralExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tLiteralValue\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class FloatingExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class IntegerExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class StringExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tvalue(UnescapeString);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum UnaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tPositive,"
L"\r\n" L"\tNegative,"
L"\r\n" L"\tNot,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class UnaryExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tUnaryOperator\t\t\top;"
L"\r\n" L"\tExpression\t\t\t\toperand;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tAssign,"
L"\r\n" L"\tIndex,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tFailedThen,"
L"\r\n" L"\tExp,"
L"\r\n" L"\tAdd,"
L"\r\n" L"\tSub,"
L"\r\n" L"\tMul,"
L"\r\n" L"\tDiv,"
L"\r\n" L"\tMod,"
L"\r\n" L"\tShl,"
L"\r\n" L"\tShr,"
L"\r\n" L"\tLT,"
L"\r\n" L"\tGT,"
L"\r\n" L"\tLE,"
L"\r\n" L"\tGE,"
L"\r\n" L"\tEQ,"
L"\r\n" L"\tNE,"
L"\r\n" L"\tXor,"
L"\r\n" L"\tAnd,"
L"\r\n" L"\tOr,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class BinaryExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tBinaryOperator\t\t\top;"
L"\r\n" L"\tExpression\t\t\t\tfirst;"
L"\r\n" L"\tExpression\t\t\t\tsecond;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class LetVariable"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tExpression\t\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class LetExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tLetVariable[]\t\t\tvariables;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class IfExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tcondition;"
L"\r\n" L"\tExpression\t\t\t\ttrueBranch;"
L"\r\n" L"\tExpression\t\t\t\tfalseBranch;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum RangeBoundary"
L"\r\n" L"{"
L"\r\n" L"\tInclusive,"
L"\r\n" L"\tExclusive,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class RangeExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tbegin;"
L"\r\n" L"\tRangeBoundary\t\t\tbeginBoundary;"
L"\r\n" L"\tExpression\t\t\t\tend;"
L"\r\n" L"\tRangeBoundary\t\t\tendBoundary;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum SetTesting"
L"\r\n" L"{"
L"\r\n" L"\tIn,"
L"\r\n" L"\tNotIn,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetTestingExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tSetTesting\t\t\t\ttest;"
L"\r\n" L"\tExpression\t\t\t\telement;"
L"\r\n" L"\tExpression\t\t\t\tcollection;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ConstructorArgument"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tkey;"
L"\r\n" L"\tExpression\t\t\t\tvalue;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ConstructorExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tConstructorArgument[]\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class InferExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum TypeCastingStrategy"
L"\r\n" L"{"
L"\r\n" L"\tStrong,"
L"\r\n" L"\tWeak,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TypeCastingExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tTypeCastingStrategy\t\tstrategy;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum TypeTesting"
L"\r\n" L"{"
L"\r\n" L"\tIsType,"
L"\r\n" L"\tIsNotType,"
L"\r\n" L"\tIsNull,"
L"\r\n" L"\tIsNotNull,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TypeTestingExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tTypeTesting\t\t\t\ttest;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TypeOfTypeExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class TypeOfExpressionExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class AttachEventExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tevent;"
L"\r\n" L"\tExpression\t\t\t\tfunction;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class DetachEventExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tevent;"
L"\r\n" L"\tExpression\t\t\t\thandler;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ObserveType"
L"\r\n" L"{"
L"\r\n" L"\tSimpleObserve,"
L"\r\n" L"\tExtendedObserve,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObserveExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tparent;"
L"\r\n" L"\tObserveType\t\t\t\tobserveType;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"\tExpression[]\t\t\tevents;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CallExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\tfunction;"
L"\r\n" L"\tExpression[]\t\t\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class FunctionExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tFunctionDeclaration\t\tfunction;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class NewClassExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\tExpression[]\t\t\targuments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class NewInterfaceExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tType\t\t\t\t\ttype;"
L"\r\n" L"\tDeclaration[]\t\t\tdeclarations (SetDefaultClassMember);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (VirtualExpressions)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class VirtualExpression : Expression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpandedExpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class BindExpression : VirtualExpression"
L"\r\n" L"{"
L"\r\n" L"\tExpression\t\t\t\texpression;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class FormatExpression : VirtualExpression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tvalue(UnescapeFormatString);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class NewCoroutineExpression : VirtualExpression"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tStatement\t\t\t\tstatement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST (Module)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class ModuleUsingFragment"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ModuleUsingNameFragment : ModuleUsingFragment"
L"\r\n" L"{"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ModuleUsingWildCardFragment : ModuleUsingFragment"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ModuleUsingItem"
L"\r\n" L"{"
L"\r\n" L"\tModuleUsingFragment[]\tfragments;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ModuleUsingPath"
L"\r\n" L"{"
L"\r\n" L"\tModuleUsingItem[]\t\titems;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ModuleType"
L"\r\n" L"{"
L"\r\n" L"\tModule,"
L"\r\n" L"\tUnit,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Module"
L"\r\n" L"{"
L"\r\n" L"\tModuleType\t\t\t\tmoduleType;"
L"\r\n" L"\ttoken\t\t\t\t\tname;"
L"\r\n" L"\tModuleUsingPath[]\t\tpaths;"
L"\r\n" L"\tDeclaration[]\t\t\tdeclarations;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Lexer"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"token EXP = \"/^\";"
L"\r\n" L"token ADD = \"/+\";"
L"\r\n" L"token SUB = \"-\";"
L"\r\n" L"token MUL = \"/*\";"
L"\r\n" L"token DIV = \"//\";"
L"\r\n" L"token MOD = \"%\";"
L"\r\n" L"token UNION = \"&\";"
L"\r\n" L"token INTERSECTION = \"/|\";"
L"\r\n" L"token LE = \"/</=\";"
L"\r\n" L"token GE = \"/>/=\";"
L"\r\n" L"token LT = \"/<\";"
L"\r\n" L"token GT = \"/>\";"
L"\r\n" L"token EQ = \"/=/=\";"
L"\r\n" L"token NE = \"/!/=\";"
L"\r\n" L"token ASSIGN = \"/=\";"
L"\r\n" L"token FAILED_THEN = \"/?/?\";"
L"\r\n" L"token QUESTION_MARK = \"/?\";"
L"\r\n" L"token SCOPE_DELIMITER = \"::\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token SEMICOLON = \";\";"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L"token OPEN_ARRAY = \"/[\";"
L"\r\n" L"token CLOSE_ARRAY = \"/]\";"
L"\r\n" L"token OPEN_BRACE = \"/{\";"
L"\r\n" L"token CLOSE_BRACE = \"/}\";"
L"\r\n" L"token OPEN_BRACKET = \"/(\";"
L"\r\n" L"token CLOSE_BRACKET = \"/)\";"
L"\r\n" L"token AT = \"@\";"
L"\r\n" L""
L"\r\n" L"token TYPE_VOID = \"void\";"
L"\r\n" L"token TYPE_OBJECT = \"object\";"
L"\r\n" L"token TYPE_INTERFACE = \"interface\";"
L"\r\n" L"token TYPE_INT = \"int\";"
L"\r\n" L"token TYPE_UINT = \"uint\";"
L"\r\n" L"token TYPE_FLOAT = \"float\";"
L"\r\n" L"token TYPE_DOUBLE = \"double\";"
L"\r\n" L"token TYPE_STRING = \"string\";"
L"\r\n" L"token TYPE_CHAR = \"char\";"
L"\r\n" L"token TYPE_BOOL = \"bool\";"
L"\r\n" L""
L"\r\n" L"token KEYWORD_CONST = \"const\";"
L"\r\n" L"token KEYWORD_SHL = \"shl\";"
L"\r\n" L"token KEYWORD_SHR = \"shr\";"
L"\r\n" L"token KEYWORD_XOR = \"xor\";"
L"\r\n" L"token KEYWORD_AND = \"and\";"
L"\r\n" L"token KEYWORD_OR = \"or\";"
L"\r\n" L"token KEYWORD_NOT = \"not\";"
L"\r\n" L"token KEYWORD_NULL= \"null\";"
L"\r\n" L"token KEYWORD_THIS= \"this\";"
L"\r\n" L"token KEYWORD_TRUE= \"true\";"
L"\r\n" L"token KEYWORD_FALSE = \"false\";"
L"\r\n" L"token KEYWORD_LET = \"let\";"
L"\r\n" L"token KEYWORD_IN = \"in\";"
L"\r\n" L"token KEYWORD_RANGE = \"range\";"
L"\r\n" L"token KEYWORD_NEW = \"new\";"
L"\r\n" L"token KEYWORD_OF = \"of\";"
L"\r\n" L"token KEYWORD_AS = \"as\";"
L"\r\n" L"token KEYWORD_IS = \"is\";"
L"\r\n" L"token KEYWORD_CAST = \"cast\";"
L"\r\n" L"token KEYWORD_FUNC = \"func\";"
L"\r\n" L"token KEYWORD_TYPEOF = \"typeof\";"
L"\r\n" L"token KEYWORD_TYPE = \"type\";"
L"\r\n" L"token KEYWORD_BIND = \"bind\";"
L"\r\n" L"token KEYWORD_OBSERVE = \"observe\";"
L"\r\n" L"token KEYWORD_ON = \"on\";"
L"\r\n" L"token KEYWORD_ATTACH = \"attach\";"
L"\r\n" L"token KEYWORD_DETACH = \"detach\";"
L"\r\n" L"token KEYWORD_VAR = \"var\";"
L"\r\n" L"token KEYWORD_BREAK = \"break\";"
L"\r\n" L"token KEYWORD_CONTINUE = \"continue\";"
L"\r\n" L"token KEYWORD_RETURN = \"return\";"
L"\r\n" L"token KEYWORD_DELETE = \"delete\";"
L"\r\n" L"token KEYWORD_RAISE = \"raise\";"
L"\r\n" L"token KEYWORD_IF = \"if\";"
L"\r\n" L"token KEYWORD_ELSE = \"else\";"
L"\r\n" L"token KEYWORD_SWITCH = \"switch\";"
L"\r\n" L"token KEYWORD_CASE = \"case\";"
L"\r\n" L"token KEYWORD_DEFAULT = \"default\";"
L"\r\n" L"token KEYWORD_WHILE = \"while\";"
L"\r\n" L"token KEYWORD_FOR = \"for\";"
L"\r\n" L"token KEYWORD_REVERSED = \"reversed\";"
L"\r\n" L"token KEYWORD_TRY = \"try\";"
L"\r\n" L"token KEYWORD_CATCH = \"catch\";"
L"\r\n" L"token KEYWORD_FINALLY = \"finally\";"
L"\r\n" L"token KEYWORD_CLASS = \"class\";"
L"\r\n" L"token KEYWORD_ENUM = \"enum\";"
L"\r\n" L"token KEYWORD_FLAGENUM = \"flagenum\";"
L"\r\n" L"token KEYWORD_STRUCT = \"struct\";"
L"\r\n" L"token KEYWORD_PROP = \"prop\";"
L"\r\n" L"token KEYWORD_EVENT = \"event\";"
L"\r\n" L"token KEYWORD_STATIC = \"static\";"
L"\r\n" L"token KEYWORD_OVERRIDE = \"override\";"
L"\r\n" L"token KEYWORD_USING = \"using\";"
L"\r\n" L"token KEYWORD_NAMESPACE = \"namespace\";"
L"\r\n" L"token KEYWORD_MODULE = \"module\";"
L"\r\n" L"token KEYWORD_UNIT = \"unit\";"
L"\r\n" L""
L"\r\n" L"token COROUTINE_COROUTINE = \"/$coroutine\";"
L"\r\n" L"token COROUTINE_PAUSE = \"/$pause\";"
L"\r\n" L"token COROUTINE_INTERFACE = \"/$interface\";"
L"\r\n" L"token COROUTINE_OPERATOR = \"/$[A-Z]/w*\";"
L"\r\n" L"token COROUTINE_SIGN = \"/$\";"
L"\r\n" L""
L"\r\n" L"token NAME = \"[a-zA-Z_]/w*\";"
L"\r\n" L"token ORDERED_NAME = \"/$[0-9]*\";"
L"\r\n" L"token FLOAT = \"/d+./d+\";"
L"\r\n" L"token INTEGER = \"/d+\";"
L"\r\n" L"token STRING = \"\'([^\'\\\\]|\\\\\\.)*\'|\"\"([^\"\"\\\\]|\\\\\\.)*\"\"\";"
L"\r\n" L"token FORMATSTRING = \"/$(\'([^\'\\\\]|\\\\\\.)*\'|\"\"([^\"\"\\\\]|\\\\\\.)*\"\")\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L"discardtoken COMMENT = \"///*([^*]|/*+[^//])*/*+//\";"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rule (Type)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Type _Type"
L"\r\n" L"\t= \"void\" as PredefinedType with {name=\"Void\"}"
L"\r\n" L"\t= \"object\" as PredefinedType with {name=\"Object\"}"
L"\r\n" L"\t= \"interface\" as PredefinedType with {name=\"Interface\"}"
L"\r\n" L"\t= \"int\" as PredefinedType with {name=\"Int\"}"
L"\r\n" L"\t= \"uint\" as PredefinedType with {name=\"UInt\"}"
L"\r\n" L"\t= \"float\" as PredefinedType with {name=\"Float\"}"
L"\r\n" L"\t= \"double\" as PredefinedType with {name=\"Double\"}"
L"\r\n" L"\t= \"string\" as PredefinedType with {name=\"String\"}"
L"\r\n" L"\t= \"char\" as PredefinedType with {name=\"Char\"}"
L"\r\n" L"\t= \"bool\" as PredefinedType with {name=\"Bool\"}"
L"\r\n" L"\t= NAME : name as ReferenceType"
L"\r\n" L"\t= \"func\" \"(\" [_Type : arguments {\",\" _Type : arguments}] \")\" \":\" _Type : result as FunctionType"
L"\r\n" L"\t= _Type : element \"*\" as RawPointerType"
L"\r\n" L"\t= _Type : element \"^\" as SharedPointerType"
L"\r\n" L"\t= _Type : element \"?\" as NullableType"
L"\r\n" L"\t= _Type : element \"{\" \"}\" as EnumerableType"
L"\r\n" L"\t= _Type : value \"[\" [_Type : key] \"]\" as MapType with {writability=\"Writable\"}"
L"\r\n" L"\t= \"const\" _Type : value \"[\" [_Type : key] \"]\" as MapType with {writability=\"Readonly\"}"
L"\r\n" L"\t= _Type : parent \"::\" NAME : name as ChildType"
L"\r\n" L"\t= \"::\" NAME : name as TopQualifiedType"
L"\r\n" L"\t= \"(\" !_Type \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rule (Expression)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule ConstructorArgument _CtorFragment"
L"\r\n" L"\t= _Expression : key [ \":\" _Expression : value] as ConstructorArgument"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule LetVariable _LetVariable"
L"\r\n" L"\t= NAME : name \"=\" _Expression : value as LetVariable"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Expression _VirtualExpression"
L"\r\n" L"\t= FORMATSTRING : value as FormatExpression"
L"\r\n" L"\t= \"bind\" \"(\" _Expression : expression \")\" as BindExpression"
L"\r\n" L"\t= \"$coroutine\" [\"(\" NAME : name \")\"] _Block : statement as NewCoroutineExpression"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Expression _ExpPrimitive"
L"\r\n" L"\t= \"null\" as LiteralExpression with {value = \"Null\"}"
L"\r\n" L"\t= \"true\" as LiteralExpression with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as LiteralExpression with {value = \"False\"}"
L"\r\n" L"\t= INTEGER : value as IntegerExpression"
L"\r\n" L"\t= FLOAT : value as FloatingExpression"
L"\r\n" L"\t= STRING : value as StringExpression"
L"\r\n" L"\t= \"this\" as ThisExpression"
L"\r\n" L"\t= NAME : name as ReferenceExpression"
L"\r\n" L"\t= ORDERED_NAME : name as OrderedNameExpression"
L"\r\n" L"\t= \"(\" !_Expression \")\""
L"\r\n" L"\t= \"[\" _Expression : body \"]\" as OrderedLambdaExpression"
L"\r\n" L"\t= _Function : function as FunctionExpression"
L"\r\n" L"\t= \"let\" _LetVariable : variables {\",\" _LetVariable : variables} \"in\" \"(\" _Expression : expression \")\" as LetExpression"
L"\r\n" L"\t= \"range\""
L"\r\n" L"\t\t((\"(\" with {beginBoundary = \"Exclusive\"}) | (\"[\" with {beginBoundary = \"Inclusive\"}))"
L"\r\n" L"\t\t_Expression : begin \",\" _Expression : end"
L"\r\n" L"\t\t((\")\" with {endBoundary = \"Exclusive\"}) | (\"]\" with {endBoundary = \"Inclusive\"}))"
L"\r\n" L"\t\tas RangeExpression"
L"\r\n" L"\t= \"{\" {_CtorFragment : arguments} \"}\" as ConstructorExpression"
L"\r\n" L"\t= \"new\" _Type : type \"(\" [_Expression : arguments {\",\" _Expression : arguments}] \")\" as NewClassExpression"
L"\r\n" L"\t= \"new\" _Type : type \"{\" {_MemberDeclaration : declarations} \"}\" as NewInterfaceExpression"
L"\r\n" L"\t= _ExpPrimitive : parent \".\" \"observe\" \"(\" _Expression : expression [\"on\" _Expression : events {\",\" _Expression : events}]\")\" as ObserveExpression with {observeType = \"SimpleObserve\"}"
L"\r\n" L"\t= _ExpPrimitive : parent \".\" \"observe\" \"as\" NAME : name \"(\" _Expression : expression [\"on\" _Expression : events {\",\" _Expression : events}]\")\" as ObserveExpression with {observeType = \"ExtendedObserve\"}"
L"\r\n" L"\t= _ExpPrimitive : function \"(\" [_Expression : arguments {\",\" _Expression : arguments}] \")\" as CallExpression"
L"\r\n" L"\t= _ExpPrimitive : parent \".\" NAME : name as MemberExpression"
L"\r\n" L"\t= _ExpPrimitive : parent \"::\" NAME : name as ChildExpression"
L"\r\n" L"\t= _ExpPrimitive : first \"[\" _Expression : second \"]\" as BinaryExpression with {op = \"Index\"}"
L"\r\n" L"\t= _ExpPrimitive : element"
L"\r\n" L"\t\t((\"in\" with {test=\"In\"}) | (\"not\" \"in\" with {test=\"NotIn\"}))"
L"\r\n" L"\t\t_Expression : collection as SetTestingExpression"
L"\r\n" L"\t= _ExpPrimitive : expression \"of\" _Type : type as InferExpression"
L"\r\n" L"\t= _ExpPrimitive : expression"
L"\r\n" L"\t\t("
L"\r\n" L"\t\t\t("
L"\r\n" L"\t\t\t\t("
L"\r\n" L"\t\t\t\t\t(\"is\" with {test=\"IsType\"})"
L"\r\n" L"\t\t\t\t\t| (\"is\" \"not\" with {test=\"IsNotType\"})"
L"\r\n" L"\t\t\t\t) _Type : type as TypeTestingExpression"
L"\r\n" L"\t\t\t)"
L"\r\n" L"\t\t\t| (\"is\" \"null\" as TypeTestingExpression with {test=\"IsNull\"})"
L"\r\n" L"\t\t\t| (\"is\" \"not\" \"null\" as TypeTestingExpression with {test=\"IsNotNull\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t= _ExpPrimitive : expression \"as\" _Type : type as TypeCastingExpression with {strategy = \"Weak\"}"
L"\r\n" L"\t= \"typeof\" \"(\" _Type : type \")\" as TypeOfTypeExpression"
L"\r\n" L"\t= \"type\" \"(\" _Expression : expression \")\" as TypeOfExpressionExpression"
L"\r\n" L"\t= \"attach\" \"(\" _Expression : event \",\" _Expression : function \")\" as AttachEventExpression"
L"\r\n" L"\t= \"detach\" \"(\" _Expression : event \",\" _Expression : handler \")\" as DetachEventExpression"
L"\r\n" L"\t= \"::\" NAME : name as TopQualifiedExpression"
L"\r\n" L"\t= !_VirtualExpression"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Expression _Exp0"
L"\r\n" L"\t= !_ExpPrimitive"
L"\r\n" L"\t= \"+\" _Exp0 : operand as UnaryExpression with {op = \"Positive\"}"
L"\r\n" L"\t= \"-\" _Exp0 : operand as UnaryExpression with {op = \"Negative\"}"
L"\r\n" L"\t= \"not\" _Exp0 : operand as UnaryExpression with {op = \"Not\"}"
L"\r\n" L"\t= \"cast\" _Type : type _Exp0 : expression as TypeCastingExpression with {strategy = \"Strong\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Expression _Exp1"
L"\r\n" L"\t= !_Exp0"
L"\r\n" L"\t= _Exp1 : first \"^\" _Exp0 : second as BinaryExpression with {op = \"Exp\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp2"
L"\r\n" L"\t= !_Exp1"
L"\r\n" L"\t= _Exp2 : first \"*\" _Exp1 : second as BinaryExpression with {op = \"Mul\"}"
L"\r\n" L"\t= _Exp2 : first \"/\" _Exp1 : second as BinaryExpression with {op = \"Div\"}"
L"\r\n" L"\t= _Exp2 : first \"%\" _Exp1 : second as BinaryExpression with {op = \"Mod\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp3"
L"\r\n" L"\t= !_Exp2"
L"\r\n" L"\t= _Exp3 : first \"+\" _Exp2 : second as BinaryExpression with {op = \"Add\"}"
L"\r\n" L"\t= _Exp3 : first \"-\" _Exp2 : second as BinaryExpression with {op = \"Sub\"}"
L"\r\n" L"\t= _Exp3 : first \"&\" _Exp2 : second as BinaryExpression with {op = \"Union\"}"
L"\r\n" L"\t= _Exp3 : first \"|\" _Exp2 : second as BinaryExpression with {op = \"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp4"
L"\r\n" L"\t= !_Exp3"
L"\r\n" L"\t= _Exp4 : first \"shl\" _Exp3 : second as BinaryExpression with {op = \"Shl\"}"
L"\r\n" L"\t= _Exp4 : first \"shr\" _Exp3 : second as BinaryExpression with {op = \"Shr\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp5"
L"\r\n" L"\t= !_Exp4"
L"\r\n" L"\t= _Exp5 : first \"<\" _Exp4 : second as BinaryExpression with {op = \"LT\"}"
L"\r\n" L"\t= _Exp5 : first \">\" _Exp4 : second as BinaryExpression with {op = \"GT\"}"
L"\r\n" L"\t= _Exp5 : first \"<=\" _Exp4 : second as BinaryExpression with {op = \"LE\"}"
L"\r\n" L"\t= _Exp5 : first \">=\" _Exp4 : second as BinaryExpression with {op = \"GE\"}"
L"\r\n" L"\t= _Exp5 : first \"==\" _Exp4 : second as BinaryExpression with {op = \"EQ\"}"
L"\r\n" L"\t= _Exp5 : first \"!=\" _Exp4 : second as BinaryExpression with {op = \"NE\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp6"
L"\r\n" L"\t= !_Exp5"
L"\r\n" L"\t= _Exp6 : first \"xor\" _Exp5 : second as BinaryExpression with {op = \"Xor\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp7"
L"\r\n" L"\t= !_Exp6"
L"\r\n" L"\t= _Exp7 : first \"and\" _Exp6 : second as BinaryExpression with {op = \"And\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp8"
L"\r\n" L"\t= !_Exp7"
L"\r\n" L"\t= _Exp8 : first \"or\" _Exp7 : second as BinaryExpression with {op = \"Or\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp9"
L"\r\n" L"\t= !_Exp8"
L"\r\n" L"\t= _Exp9 : first \"??\" _Exp8 : second as BinaryExpression with {op = \"FailedThen\"}"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp10"
L"\r\n" L"\t= !_Exp9"
L"\r\n" L"\t= _Exp9 : condition \"?\" _Exp10 : trueBranch \":\" _Exp10 : falseBranch as IfExpression"
L"\r\n" L"\t;"
L"\r\n" L"rule Expression _Exp11"
L"\r\n" L"\t= !_Exp10"
L"\r\n" L"\t= _Exp10 : first \"=\" _Exp11 : second as BinaryExpression with {op = \"Assign\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Expression _Expression"
L"\r\n" L"\t= !_Exp11"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rule (Statement)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule SwitchCase _SwitchCase"
L"\r\n" L"\t= \"case\" _Expression : expression \":\" _Block : statement as SwitchCase"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Statement _Block"
L"\r\n" L"\t= \"{\" {_Statement : statements} \"}\" as BlockStatement"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule IfStatement _If"
L"\r\n" L"\t= \"if\" \"(\" [\"var\" NAME : name \":\" _Type : type \"=\"] _Expression : expression \")\" _Block : trueBranch [\"else\" (_Block : falseBranch | _If : falseBranch)] as IfStatement"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Statement _VirtualStatement"
L"\r\n" L"\t= \"switch\" \"(\" _Expression : expression \")\" \"{\" {_SwitchCase : caseBranches} [\"default\" \":\" _Block : defaultBranch] \"}\" as SwitchStatement"
L"\r\n" L"\t= \"for\" \"(\" NAME : name "
L"\r\n" L"\t\t((\"in\" with {direction=\"Normal\"}) | (\"in\" \"reversed\" with {direction=\"Reversed\"}))"
L"\r\n" L"\t\t_Expression : collection \")\" _Block : statement as ForEachStatement"
L"\r\n" L"\t= [\"var\" NAME : varName \"=\"] COROUTINE_OPERATOR : opName [_Expression : arguments {\",\" _Expression : arguments}] \";\" as CoOperatorStatement"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Statement _CoStatement"
L"\r\n" L"\t= \"$pause\" (\";\" | _Block : statement) as CoPauseStatement"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Statement _CoProvider"
L"\r\n" L"\t= (\"$\" | COROUTINE_OPERATOR : name) _Block : statement as CoProviderStatement"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Statement _Statement"
L"\r\n" L"\t= !_Block"
L"\r\n" L"\t= _Variable : variable as VariableStatement"
L"\r\n" L"\t= \"break\" \";\" as BreakStatement"
L"\r\n" L"\t= \"continue\" \";\" as ContinueStatement"
L"\r\n" L"\t= \"return\" [_Expression : expression] \";\" as ReturnStatement"
L"\r\n" L"\t= \"delete\" _Expression : expression \";\" as DeleteStatement"
L"\r\n" L"\t= \"raise\" [_Expression : expression] \";\" as RaiseExceptionStatement"
L"\r\n" L"\t= !_If"
L"\r\n" L"\t= \"while\" \"(\" _Expression : condition \")\" _Block : statement as WhileStatement"
L"\r\n" L"\t= \"try\" _Block : protectedStatement [\"catch\" \"(\" NAME : name \")\" _Block : catchStatement] [\"finally\" _Block : finallyStatement] as TryStatement"
L"\r\n" L"\t= _Expression : expression \";\" as ExpressionStatement"
L"\r\n" L"\t= !_VirtualStatement"
L"\r\n" L"\t= !_CoStatement"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rule (Declaration -- Basic)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Attribute _Attribute"
L"\r\n" L"\t= \"@\" NAME : category \":\" NAME : name [\"(\" _Expression : value \")\"] as Attribute"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule NamespaceDeclaration _Namespace"
L"\r\n" L"\t= \"namespace\" NAME : name \"{\" {_Declaration : declarations} \"}\" as NamespaceDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule FunctionArgument _FunctionArgument"
L"\r\n" L"\t= {_Attribute : attributes} NAME : name \":\" _Type : type as FunctionArgument"
L"\r\n" L"\t;"
L"\r\n" L"rule FunctionDeclaration _Function"
L"\r\n" L"\t= \"func\" "
L"\r\n" L"\t\t("
L"\r\n" L"\t\t\t(NAME : name \"(\" with {anonymity=\"Named\"})"
L"\r\n" L"\t\t\t| (\"(\" with {anonymity=\"Anonymous\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[_FunctionArgument : arguments {\",\" _FunctionArgument : arguments}] \")\" \":\" _Type : returnType"
L"\r\n" L"\t\t(_Block : statement | _CoProvider : statement | \";\") as FunctionDeclaration"
L"\r\n" L"\t;"
L"\r\n" L"rule VariableDeclaration _Variable"
L"\r\n" L"\t= \"var\" NAME : name [\":\" _Type : type] \"=\" _Expression : expression \";\" as VariableDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule EventDeclaration _Event"
L"\r\n" L"\t= \"event\" NAME : name \"(\" [_Type : arguments {\",\" _Type : arguments}] \")\" \";\" as EventDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PropertyDeclaration _Property"
L"\r\n" L"\t= \"prop\" NAME : name \":\" _Type : type \"{\" NAME : getter [\",\" NAME : setter] [\":\" NAME : valueChangedEvent] \"}\" as PropertyDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule BaseConstructorCall _BaseConstructorCall"
L"\r\n" L"\t= _Type : type \"(\" [_Expression : arguments {\",\" _Expression : arguments}] \")\" as BaseConstructorCall"
L"\r\n" L"\t;"
L"\r\n" L"rule ConstructorDeclaration _Constructor"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(\"new\" with {constructorType = \"SharedPtr\"})"
L"\r\n" L"\t\t\t| (\"new\" \"*\" with {constructorType = \"RawPtr\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t\"(\" [_FunctionArgument : arguments {\",\" _FunctionArgument : arguments}] \")\""
L"\r\n" L"\t\t[\":\" _BaseConstructorCall : baseConstructorCalls {\",\" _BaseConstructorCall : baseConstructorCalls}]"
L"\r\n" L"\t\t_Block : statement as ConstructorDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule DestructorDeclaration _Destructor"
L"\r\n" L"\t= \"delete\" _Block : statement as DestructorDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ClassDeclaration _ClassBody"
L"\r\n" L"\t= [\":\" _Type : baseTypes {\",\" _Type : baseTypes}] \"{\" {_MemberDeclaration : declarations} \"}\" as ClassDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ClassDeclaration _Class"
L"\r\n" L"\t= \"class\" NAME : name !_ClassBody with {kind = \"Class\"} with {constructorType = \"Undefined\"}"
L"\r\n" L"\t= \"interface\" NAME : name !_ClassBody with {kind = \"Interface\"} with {constructorType = \"SharedPtr\"}"
L"\r\n" L"\t= \"interface\" NAME : name \"*\" !_ClassBody with {kind = \"Interface\"} with {constructorType = \"RawPtr\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule EnumItemIntersection _EnumItemInt"
L"\r\n" L"\t= NAME : name as EnumItemIntersection"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule EnumItem _EnumItemA"
L"\r\n" L"\t= {_Attribute : attributes} NAME : name \"=\" INTEGER : number \",\" as EnumItem with {kind = \"Constant\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule EnumItem _EnumItemB"
L"\r\n" L"\t= {_Attribute : attributes} NAME : name \"=\" _EnumItemInt : intersections {\"|\" _EnumItemInt : intersections} \",\" as EnumItem with {kind = \"Intersection\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule EnumDeclaration _Enum"
L"\r\n" L"\t= \"enum\" NAME : name \"{\" _EnumItemA : items {_EnumItemA : items} \"}\" as EnumDeclaration with {kind = \"Normal\"}"
L"\r\n" L"\t= \"flagenum\" NAME : name \"{\" _EnumItemA : items {_EnumItemA : items} {_EnumItemB : items} \"}\" as EnumDeclaration with {kind = \"Flag\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule StructMember _StructMember"
L"\r\n" L"\t= {_Attribute : attributes} NAME : name \":\" _Type : type \";\" as StructMember"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule StructDeclaration _Struct"
L"\r\n" L"\t= \"struct\" NAME : name \"{\" {_StructMember : members} \"}\" as StructDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule AutoPropertyDeclaration _APConfig"
L"\r\n" L"\t= \"{\" \"}\""
L"\r\n" L"\t\t\tas AutoPropertyDeclaration"
L"\r\n" L"\t\t\twith {configConst=\"Writable\"} with {configObserve=\"Observable\"}"
L"\r\n" L"\t= \"{\" \"const\" \"}\""
L"\r\n" L"\t\t\tas AutoPropertyDeclaration"
L"\r\n" L"\t\t\twith {configConst=\"Readonly\"} with {configObserve=\"Observable\"}"
L"\r\n" L"\t= \"{\" \"not\" \"observe\" \"}\""
L"\r\n" L"\t\t\tas AutoPropertyDeclaration"
L"\r\n" L"\t\t\twith {configConst=\"Writable\"} with {configObserve=\"NotObservable\"}"
L"\r\n" L"\t= \"{\" \"const\" \",\" \"not\" \"observe\" \"}\""
L"\r\n" L"\t\t\tas AutoPropertyDeclaration"
L"\r\n" L"\t\t\twith {configConst=\"Readonly\"} with {configObserve=\"NotObservable\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule AutoPropertyDeclaration _AutoProperty"
L"\r\n" L"\t= \"prop\" NAME : name \":\" _Type : type [\"=\" _Expression : expression] !_APConfig"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule CastResultInterfaceDeclaration _CastResultInterface"
L"\r\n" L"\t= \"$interface\" NAME : name \":\" _Type : baseType \"<\" _Type : elementType \">\" \";\" as CastResultInterfaceDeclaration"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rule (Declaration -- Branches)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Declaration _SharedDeclarationBranch"
L"\r\n" L"\t= !_Namespace"
L"\r\n" L"\t= !_Variable"
L"\r\n" L"\t= !_Event"
L"\r\n" L"\t= !_Property"
L"\r\n" L"\t= !_Constructor"
L"\r\n" L"\t= !_Destructor"
L"\r\n" L"\t= !_Class"
L"\r\n" L"\t= !_Enum"
L"\r\n" L"\t= !_Struct"
L"\r\n" L"\t= !_CastResultInterface"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Declaration _MemberDeclarationBranch"
L"\r\n" L"\t= !_Function"
L"\r\n" L"\t= !_AutoProperty"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Declaration _Declaration"
L"\r\n" L"\t= {_Attribute : attributes} !_SharedDeclarationBranch"
L"\r\n" L"\t= {_Attribute : attributes} !_MemberDeclarationBranch"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ClassMember _ClassMember"
L"\r\n" L"\t=\t\"static\" as ClassMember with {kind = \"Static\"}"
L"\r\n" L"\t=\t\"override\" as ClassMember with {kind = \"Override\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Declaration _MemberDeclaration"
L"\r\n" L"\t= {_Attribute : attributes} !_SharedDeclarationBranch"
L"\r\n" L"\t= {_Attribute : attributes} [_ClassMember : classMember] !_MemberDeclarationBranch"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rule (Module)"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule ModuleUsingFragment _UsingFragment"
L"\r\n" L"\t= NAME : name as ModuleUsingNameFragment"
L"\r\n" L"\t= \"*\" as ModuleUsingWildCardFragment"
L"\r\n" L"\t;"
L"\r\n" L"rule ModuleUsingItem _UsingItem"
L"\r\n" L"\t= _UsingFragment : fragments {_UsingFragment : fragments} as ModuleUsingItem"
L"\r\n" L"\t;"
L"\r\n" L"rule ModuleUsingPath _UsingPath"
L"\r\n" L"\t= \"using\" _UsingItem : items {\"::\" _UsingItem : items} \";\" as ModuleUsingPath"
L"\r\n" L"\t;"
L"\r\n" L"rule Module _Module"
L"\r\n" L"\t= ("
L"\r\n" L"\t\t(\"module\" with {moduleType=\"Module\"})"
L"\r\n" L"\t\t| (\"unit\" with {moduleType=\"Unit\"})"
L"\r\n" L"\t\t) NAME : name \";\" {_UsingPath : paths} {_Declaration : declarations} as Module"
L"\r\n" L"\t;"
;

		vl::WString WfGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 161284; // 1812077 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 516;
const vint parserBufferRows = 158;
const char* parserBuffer[] = {
"\xFF\x00\x01\x82\x81\x8F\x2B\x82\x81\x0A\x06\x81\x88\x81\x81\x24\x38\x3B\x30\x63\x68\x05\x36\x35\x36\x34\x3B\x22\x78\x70\x32\x25\x33\x3B\x39\x35\x37\x6E\x7F\x62\x83\x92\x91\x05\x84\x00\x26\x8C\x8E\x92\x39\x32\x31\x3A\x3A\x65\x24\xA4\x97\x07\x94\x98\x87\x97\x6F\x50\x32\x2F\x30\x3D\x32\x38\x3A\x79\x44\x25\x23\x3C\x31\x32\x39\x30\x74\x1F\xA1\x92\x92\x93\x0B\x92\xA7\x01\xC2\x21\x33\x35\x33\x20\x91\x39\x74\x72\x35\x23\x34\x3F\x36\x39\x21\x61\x6C\x2C\x2C\xA2\x90\x0B\x92\xB3\x51\xE9\x2E\x26\xA9\x38\x8E\x8C\x8E\x1E\xA0\xA4\xBF\x7E\x07\x91\xBB\xB4\x6E\x64\x2E\xBB\x8D\x8A\xA7\xB9\xBB\x06\x80\xC2\x2C\x3F\x33\x33\x35\x29\x0F\xB0\xAD\x35\x84\x3F\xBE\xBA\x81\x42\x1B\xA1\x27\xC9\xC5\x33\xC4\x8B\x8E\x89\x80\xC0\xB2\xB3\xBC\xB8\xBF\x64\x9E\x27\x82\xD1\x80\xB0\xAC\x29\x1C\xF5\x2C\x34\x39\x26\x8A\x9E\x33\x10\xE5\x02\xA4\xA6\xA0\xA4\xD0\xA6\x0F\x27\xB9\xC5\xD8\x31\x34\x36\xBD\x19\xFC\xB1\xAB\xAC\xA1\x96\x82\xE3\x43\x3D\xFF\xD4\x29\x3D\x9F\xB8\xB4\x06\xD0\xC3\x25\xAD\x8B\xD9\xA3\xA3\x49\xF2\xA4\xAB\x07\x94\xED\xD2\xEA\x73\x4D\x16\xC2\x3E\x9B\xB8\xA8\x83\xE7\xD6\x8F\x3D\x98\xEE\xAC\xC4\xA4\x96\x8C\xCF\xE7\xB2\x86\xA8\x29\x30\x75\x54\xAF\xEA\xC2\xFC\xB3\xF3\x81\xE9\x79\x4B\x4E\x1D\x69\x24\x1E\x4F\x7E\xF1\x58\x6E\x7F\x53\xF5\x57\x59\x57\x56\x5D\x72\x11\x12\x1C\x67\x35\x17\x65\x63\x64\x56\x07\x4A\x86\xA5\x4E\x8A\x54\x57\x5E\x56\x75\x6D\x76\xC4\x72\x4B\x42\x41\x27\x96\x5E\x18\x56\x1F\x91\x8E\x65\x5F\xDA\x4C\x51\x07\x49\x33\x9D\x86\x46\x5A\x75\x25\x18\x83\x85\x73\x52\x07\x4A\x8F\x1D\xBB\x4F\x4A\x5A\x3A\x95\x6C\x8F\x76\xDD\x42\x42\x88\x76\xB7\x72\x4B\x6E\x41\x4F\x82\x5C\x19\x19\x30\x7B\x8D\x7C\x53\x27\x83\x47\x8A\x50\x2C\x90\x81\x8B\x50\xD7\x76\x61\x8E\x89\x27\x5B\x94\x94\x44\x12\x54\x46\x47\x8B\xC3\x73\x5F\x93\x40\x4F\x85\x1E\x1A\x85\x4B\xA2\x95\x88\x49\x08\x27\x49\x9D\x40\x72\x96\x89\x12\x62\x73\x54\x07\x4A\xA0\x7C\xB3\x9D\x1B\x9F\x96\x6D\x60\x4E\x1C\x54\x5C\x5D\x90\x49\x80\x43\x40\x61\x9F\x8B\x47\x52\x1B\x94\xCC\x4E\x74\x58\x74\x03\x50\x73\x44\x63\x75\xA4\x83\x5E\x02\x27\x64\xAC\x9D\x70\x9F\x63\x94\x4B\x7F\x02\x67\x7C\x9A\x52\x56\x8A\x8C\x50\x90\x06\x74\xA6\x10\x61\xB6\x6E\x17\x1B\xAB\xAA\xA3\x4C\xA6\x40\xD0\x46\x1E\x55\x11\x68\xB1\xA8\x84\x53\xBF\x81\x41\xB2\x57\x6D\x08\x5C\xAF\x9D\xBE\xB4\x71\x42\x11\x75\x2E\x1E\xA0\x48\x13\x95\x87\x90\x53\xAC\x81\x47\x78\xB5\xD6\xA4\x81\xAB\xA3\x23\x74\xA3\x42\xAD\xD5\x97\xBE\x1B\xB3\x73\x4C\x07\x4A\xBB\xD3\xA9\xB4\x89\xA6\x31\x64\x50\xBE\x41\xF7\x89\x16\x18\xBB\x48\x89\x4E\x74\x00\xFA\x86\xBE\x9A\x6E\x02\x6D\x66\x1A\x4F\xFC\xB2\x84\x8D\xC1\xAE\x67\x18\xC0\xAA\x30\x90\xB2\x49\x03\x27\x54\xC1\x40\x13\x54\x89\xC2\x4F\xBF\x03\x7F\xB8\xC4\x1D\x56\x06\x59\x19\x18\x97\xB5\xBA\xC1\x42\x35\x80\x0C\x11\x1A\x8B\xA1\x5A\xC4\x49\x07\x27\x41\xCD\x40\x4D\x21\x10\x1C\xBD\xF3\x49\x40\x76\x78\x6D\x24\x72\x1F\xCB\x23\x46\x07\x4A\xD0\x34\xEF\x14\x1A\x6A\x26\xF2\x4D\xB4\x00\xE7\x4D\x16\xD0\xD2\x55\x1E\x4A\xAE\x11\x47\x67\x1B\xB6\x93\x04\xC5\xD7\xD3\x94\x51\xEA\x57\x18\xA2\x6D\x33\x56\x4E\x41\x63\xCE\xDB\xD5\x19\x5D\xFA\xAE\x11\x18\x8B\x54\xD1\x1A\xD5\x57\x98\xD9\x43\x93\x66\xD0\xD2\xD7\x19\xF7\x74\x18\x1B\x5C\x1B\x27\x4D\xDE\xD6\x76\xDE\xD7\x16\x6F\x64\x20\x52\x1C\x19\x6E\xF0\xD2\xAE\x4C\x84\x86\x4D\xE3\xDA\x8B\x73\x10\x1D\x6C\xE3\xBD\xA2\x4A\xB9\x02\x74\xAE\x11\x19\x77\x13\x73\x57\x1C\x40\xE2\x4C\x86\x41\xA3\xDB\xED\xE6\x57\x6F\x03\x9E\x19\x19\xA1\xFF\x33\xEB\x40\xA5\xDC\xEA\xA3\x6B\xB1\x6D\xE7\xBF\x40\xF7\x8E\x1A\x69\x51\x25\xF8\xC4\x59\xCA\x03\x69\xCF\x12\x18\x54\x72\x14\x45\xEB\x63\xC3\x43\xDB\x13\x87\xFE\x45\x18\x19\x4C\x2C\xD2\x18\x19\x61\x2D\xE9\x97\x41\x02\x4C\xF6\x83\x46\x64\x10\xEC\xE8\xC4\x6D\xA4\x51\xA6\x40\x80\x7A\x4F\xF1\x19\x66\x04\x94\x1A\xEF\xDC\x8C\x81\x42\x4E\x3C\x7E\x40\x51\xE5\x12\xFF\x39\xF2\x40\x63\xD2\x11\x19\x1A\x54\x58\x43\x19\x19\x70\x04\x46\xC0\x64\x2F\x4C\x81\x0F\x4A\x7F\xBA\x5F\x7B\x5B\x11\x69\x33\xC0\x02\x22\x7F\x77\x10\x0B\x1B\x6A\x2B\x50\xF6\x4A\x6E\x7D\x00\x08\x37\xC1\x1B\x26\x5A\x05\x82\x3C\x5C\x13\x75\x63\x03\xE8\x7E\x79\x0E\x96\x84\x24\x05\x81\x23\x01\xD4\x45\x0E\x39\x2E\x0B\x80\x4C\x2D\x73\x40\x0D\x73\x0A\x2A\x54\x0C\x23\x49\x3A\x55\xEB\x40\x72\x21\x94\x53\x08\x0D\x46\x2F\x7A\x04\x94\x8E\x27",
"\x13\xA3\x26\x38\x03\x26\x38\x0C\xB2\x29\x58\x00\x10\x38\x31\x2C\x3A\x84\xF8\x20\x8F\x1E\x1E\x81\x26\x87\x0F\x5C\x28\xFD\x6D\x5F\x5C\x81\x10\x88\x42\x3C\x7E\x67\xA8\x25\x5E\x8B\x3B\x2C\x61\x22\xA6\x29\x68\x0A\xD9\x60\x01\x29\x26\x8C\x0E\x11\x2B\x88\xA4\x0F\x31\x20\x2A\x3D\x30\x74\x53\x96\x72\xEB\x1B\x42\x20\x2A\x3C\x21\x0A\x75\x01\x2D\x1A\x69\x7F\x79\xD6\x4D\x88\x3A\x7E\x90\x0C\x20\x82\x94\x91\xF5\x4D\x3A\x8D\x23\x37\x76\x40\x77\x54\x0A\x39\x39\x0A\x8E\x23\x24\x03\x49\x1A\x95\x8F\x47\xB3\x2F\x7A\x0A\x3D\x8F\x23\xA6\x39\x87\x5D\x79\x8D\x7E\x1A\x07\x25\x2A\x9D\x9D\x27\x27\x3B\x5F\x94\xAD\x72\x86\x40\x0D\x74\x5E\x57\xB4\x5E\x7A\x65\x42\x95\x4F\x37\x88\x2A\xAF\x6D\x71\x85\x00\x0F\x49\x15\x6B\x26\x93\xD6\x4B\x6F\x3C\x21\x6C\x24\xC9\x53\x4B\x8B\xDF\x4B\x61\x20\xC9\x83\x65\xC9\x18\x97\x73\x1F\x42\x26\x0A\x69\x1F\x25\x20\xEC\x0D\x99\x93\x46\x21\x65\xD8\x9A\x9A\xCB\x27\x99\x67\xE8\x17\x99\x9B\x74\x1B\x98\x35\xF4\x24\x8E\x00\x17\x0A\x39\x45\x50\x3F\xD5\x24\x2A\x1B\x5C\x89\x27\x44\x0D\x2F\x21\x44\x1F\x5B\x4D\x53\x85\x07\x24\xFF\x81\x21\x19\x6A\x47\x58\x32\x77\x9A\x20\xF9\x88\x4C\x3F\x97\x27\x95\x3D\x46\x26\xA1\x66\x12\x5C\x15\xC8\x82\x20\xE3\x39\x9C\x25\x2E\x30\x26\x43\x83\x2E\xA1\x31\x30\x3F\x0C\x5E\x39\x0F\x5C\x14\xA1\x20\x8B\xAB\x25\x25\x2F\x25\x0C\x27\x86\x2B\xA5\xB5\x0B\x33\xA4\x27\x26\xA5\x56\x28\xA0\x27\x80\x86\x26\xA6\x76\x01\x2D\x8E\x62\x65\x26\x84\xB8\x20\x7E\xEC\x33\x7C\x98\x23\x4A\x28\x53\x46\x26\xA8\x48\x33\xA5\x46\x9C\x2C\xA7\x84\x23\x69\x08\x3F\xBB\x25\x50\xC1\x23\xA8\x26\x60\x24\x63\x02\x3F\x5C\x6D\x1D\x21\x8D\xF2\x24\x2F\x7E\x01\x2F\xA9\x54\xF1\x7F\x26\xAA\xB4\x36\xAA\x6E\x18\xA9\x40\x5A\xA0\x25\xF4\x67\x0A\x45\x58\x2D\xA8\xD9\x3E\xAD\x2A\xA0\xB2\x7E\xAC\x61\x44\x46\xC5\x06\x2B\xAF\x31\x2D\xA9\x0D\x67\x03\x79\xF1\x14\x22\xAE\xE5\x74\xAA\x40\x64\xA2\xAB\x59\xF6\x42\x97\x80\x0D\x75\x0C\x19\x21\x0D\x5E\x4F\x74\x7F\x39\x05\xB0\x7F\x87\xB6\xAD\x59\xF4\x76\xA9\x81\x06\xA8\xB2\x0B\x81\x7C\x53\x60\xA0\x00\xB1\xB5\xAA\xAA\x77\xB4\x7F\x4A\x83\x2D\xA4\xB6\x50\x92\x24\xA4\xA6\xB4\x62\xD3\xAA\xB5\x4D\x82\x20\x28\x9A\x4D\x7D\x42\x67\x32\x2A\xAA\x30\xA9\x8B\x11\x5C\x30\x1B\x24\xA8\x24\x81\x06\x2A\x5B\x8C\x36\xB3\x82\x3B\xB0\x33\xA9\x15\x2E\x43\x5E\x5F\x29\x58\x6C\x0B\xB4\x81\x2B\xA0\xB7\xAF\xBF\x1F\x21\x90\x3A\x2C\xB6\x0F\x5E\xA6\x03\x36\xA5\xFA\x0C\x55\xA0\x92\x1B\xB8\x2F\xDE\xA7\x96\x00\x27\x2B\xBD\x80\x3C\x25\x9C\x9D\x5C\xB8\x31\xED\x27\x94\xA2\x46\x26\xBE\x8D\x40\x24\x19\x0D\x82\x52\xF9\x80\x39\xB4\x4A\x38\x71\x40\x34\x50\xB4\xC9\x86\x47\xBF\x1F\x9A\x8F\xF8\x01\x22\x30\xB5\x08\xC1\x55\x6E\x1D\xB2\x40\x1F\xB4\x9C\xF1\x6D\x9B\x30\x85\x34\x32\x3C\x8C\x32\xC3\x80\x06\xA8\x2B\x1B\xD6\x22\x72\xCC\x2B\xC0\x00\x1B\x33\xBA\xCF\x44\xBA\x71\x47\xB6\x43\xE4\xBC\xBC\x7C\xF5\x28\xC5\x43\xFA\x42\x21\x88\xA1\x5C\x8A\xA4\x26\x21\x8E\xA4\x98\x35\x39\x2A\x34\x35\xAE\x32\x0C\x6C\x7F\x7C\xB2\x32\x81\x21\xA9\x18\xA9\xA7\x88\xB2\x29\xC7\x81\x3B\xC3\x2A\x74\x1D\xC7\x8F\xB3\x72\xC8\xCA\x55\xAE\x4E\x1B\xA2\x22\x43\xE2\x0E\xB8\x23\xA2\x25\xC9\x02\x2F\xCB\x69\x29\x3B\x34\x2A\xC3\xCA\x36\x57\xC4\x46\x5A\x80\x0A\xAA\xF0\x1D\xAA\x0E\x73\x20\xCD\x40\x62\xC1\xCA\x32\xC0\xCB\x51\x67\xD4\x7F\x9A\xFF\x55\x0D\x29\x57\x46\xCB\xFF\x12\xCC\x00\x74\xC2\xCB\x32\xC1\xC9\xCF\x69\xCA\x29\x63\x80\x0F\xB1\xC8\x93\xB4\x0C\x95\xB1\xCF\x68\x31\xC3\xCC\x1F\xC6\xD0\xCF\x56\xCB\xB0\x89\x55\xB1\x21\xD6\xAF\xA4\x80\x6C\x89\x38\xE1\x4F\x5C\xD2\x00\x1E\xD1\xBB\xC0\x8F\x4A\xA8\xBF\x3F\x58\xFB\x83\x26\xBE\x93\x7C\x81\x79\xC7\x81\xA7\xFA\x0A\x3E\x91\x3D\x25\xD7\xA9\xB0\xA9\x20\xE4\x37\xD4\x5E\xAE\xC2\x20\xAC\xC1\x8B\x70\xF3\x92\x58\x00\x9E\x75\x39\xA2\xA0\x2D\xC2\x00\x08\xAF\xA4\x4B\xAB\xCA\xB1\xBA\x65\x3E\xF0\x34\x7A\xC5\x02\x3C\xC8\x55\x74\x52\xDB\x68\x54\xDF\x3B\x9F\x7A\xCD\x92\x01\x2B\xAB\xF0\x23\x3E\xAB\xC8\x47\xD9\xB2\xF3\x04\x7F\x54\xC2\x26\xAF\x2B\x40\xBA\x57\x00\xD7\xBC\x64\xD6\xDB\xD9\x6E\x12\x91\x40\x77\x56\x40\x4D\xCA\x2D\xDB\x65\x2A\xDF\xBD\xFE\xD0\x24\x5D\xC2\x23\x0D\x0E\xD0\xBC\xB0\x55\xD1\xDC\x7C\xC6\xE1\x20\x2E\xB9\xBB\x9E\x8C\xEC\xAB\x73\xF2\x0F\xE1\x00\x08\xE1\x5E\x66\x38\x82\xF5\x2C\x38\x29\xEE\x26\x48\x63\x58\xD7\xC8\x0A\x6D\xC2\xC4\x1C\xEC\xB9\x87\x6B\x3E\x26\x90",
"\xF2\x0E\x58\xC1\xC1\x22\x7D\xBC\x2E\x7B\x94\xE8\x3D\x41\x2C\xED\x3F\xCB\xA2\xE6\x23\x99\x46\x26\xE7\x39\xB2\x0D\xCD\x9B\x5A\xDD\x9C\x38\x3A\x3F\x3C\xF4\x0C\xC9\x80\x00\xC4\xFE\x05\xDB\x24\xC7\x8D\x40\xFC\x04\x4B\x7A\x63\x56\x88\x00\x29\x65\xC3\xA3\xEB\x91\xEB\x0E\x53\xED\x40\x07\x49\xE8\xC6\x91\xE6\xE6\x00\x52\xEB\x40\x60\xFB\xE5\x88\xCA\xE5\xD7\x80\x0D\xE9\x41\xB3\xCD\x29\xC7\xD0\xB0\x44\x09\x66\xE7\x42\x03\x07\x25\xDE\x81\x2B\x0D\x32\x22\xA3\xB9\x37\xF6\x45\x97\x75\xE9\x5B\x93\xF4\x08\xBC\x02\x38\xA6\x4E\xD9\xBF\x74\x81\x23\x77\xB7\x2D\x5F\x48\xC1\xEE\x0B\xE8\x16\xD7\x40\xE0\x7B\x89\x23\xE3\xF4\xE1\x43\x22\xC9\x27\xD9\x4A\xAA\xCB\x5C\x0D\xF1\x21\xCD\xF1\xD9\xF2\x72\x14\x7F\xA2\x8D\x7A\xDB\xE7\xA7\xF1\xBA\xC2\xB8\xF0\xE9\x80\x06\xF5\xC1\xDD\xF0\xDF\x13\xE4\xDE\x9B\x96\xE3\xF4\x3E\x82\xF2\xDE\xA9\xF8\xDE\xBB\xE4\xDC\xF3\x79\xDE\x91\x43\xBE\xE8\xD9\xF1\xC1\xF3\xF3\xB1\xEE\xB5\xF7\x9A\xED\x43\xEB\xF5\xE7\xDB\xB6\xCC\xE9\xE9\x9F\x96\x9E\xF2\xD3\xFE\x45\x53\x95\xF7\xEE\x2E\xDD\x5E\x41\x7F\x5E\xF3\xA3\x86\xB8\xDA\xA2\xE2\xFD\xC7\x4A\x48\xF7\x71\xC0\x05\xDC\x6F\xD3\x2D\xEE\x80\x05\xB7\x84\x3B\xD0\xD4\x73\x6C\xFF\x94\x55\x49\xE9\x66\xD4\xC0\xC0\x7A\x40\x4A\x00\x06\x26\xB6\x72\x79\x79\x55\x54\x46\x60\x00\x48\x64\x53\x4C\x54\x16\x02\x84\x80\xC0\x72\x6E\xFE\x2F\x6E\xBB\x7D\x33\xE8\x66\x50\x28\x2C\x7E\x05\x8C\x7C\x07\x85\x70\xB6\x50\x71\xCF\x7E\x80\xDA\x7C\x25\x11\x88\x6F\x4B\x7F\x76\xF3\x43\x12\x0F\x8C\x7E\xFA\x49\x26\x8C\x1F\x5D\x00\x52\x10\x03\x51\x37\x24\x1B\x82\x01\x12\x14\x2D\x8B\x50\xCF\x2E\x73\x03\x1E\x73\x40\x49\x17\x53\x20\x67\xF8\x70\x25\x02\x14\x29\xE5\x7E\x59\xE7\x71\x7A\x30\x18\x79\xC3\x70\x00\x46\x8D\x7E\x13\x8A\x7B\x9F\x31\x7F\x43\x80\x27\x45\x86\x28\xF4\x38\x78\x01\x16\x53\x2C\x36\x19\x4C\x8C\x46\x4F\x8D\x7C\x1F\x89\x71\x09\x75\x85\x06\x47\x85\x74\x2E\x70\x63\x84\x76\x64\x19\x65\x01\x1E\x50\x94\x20\x36\xFE\x79\x84\x49\x6B\x84\x73\x1E\x86\x00\x00\x87\x86\x20\x36\x7B\x53\x10\x7B\x54\x44\x8C\x23\x14\x24\x28\x79\x78\x8A\x87\x7E\x2A\x18\x18\x7A\x71\xFB\x5D\x86\x34\x65\x28\x87\x86\x19\xCE\x7F\x69\x4C\x15\x88\x68\x87\x28\x8A\x11\x73\x00\x06\x5F\x86\x22\x46\x64\x1B\x7A\x95\x80\x36\x54\x6D\x28\x9B\x6B\x86\x21\x84\x62\xED\x44\x29\x2D\x7D\x3B\x8F\x4C\x83\x02\x1E\x73\x7D\x60\x77\x0A\x7A\x2C\x45\x84\x50\xD5\x7D\x6B\xC6\x50\x7E\x28\x74\x74\xDF\x6E\x84\xB4\x88\x6F\x73\x87\x64\xE8\x76\x87\xBA\x86\x4E\x7C\x2D\x8B\x93\x73\x7F\xF0\x7C\x7B\xC3\x81\x5F\xC5\x80\x2A\x6A\x86\x7F\x02\x1C\x86\xBA\x51\x78\x4E\x87\x4A\xC6\x2F\x8B\x00\x00\x5A\x09\x65\x3F\x02\x60\x00\xB6\x28\x2B\xA5\x40\x83\x09\x1A\x78\x6C\x0B\x53\xCB\x8B\x70\xD3\x23\x2C\xC5\x2D\x7F\x09\x8E\x57\x62\x12\x88\x54\x45\x6F\xC2\x2F\x33\xEB\x8B\x76\x4B\x74\x06\xD9\x40\x8F\x7A\x42\x8F\xEA\x81\x47\x49\x77\x75\x59\x7E\x68\x07\x6B\x4E\xFC\x84\x8F\xFE\x8B\x76\x91\x89\x5D\x05\x94\x2C\x07\x9E\x74\x6C\x76\x8B\x6E\x78\x7D\xE7\x82\x8B\xE9\x82\x07\xCD\x2C\x50\x00\x8E\x06\xDD\x84\x60\x02\x95\x48\x15\x69\x6E\xBB\x83\x8F\x17\x92\x8E\x37\x52\x10\x39\x55\x8E\x0A\x97\x6C\xE0\x2A\x2E\x85\x77\x21\xD8\x8B\x80\xD1\x61\x8B\x4E\x42\x10\x2B\x94\x22\x2D\x9C\x18\x09\x92\x93\xC1\x22\x51\xD8\x28\x8B\x74\x08\x71\xD8\x55\x76\xAD\x24\x93\x3C\x9E\x06\xB5\x87\x1C\xC6\x5E\x06\x20\x19\x07\x6D\x0C\x32\x7F\x73\x8D\x66\x71\x2F\x37\x60\x12\x47\x99\x44\xB7\x88\x5C\xB9\x80\x95\x43\x92\x95\xEA\x27\x84\x13\x64\x87\x0C\x88\x79\x5D\x70\x00\x35\x9A\x14\x12\x83\x7E\x14\x83\x85\xCA\x8A\x95\xDE\x24\x94\x53\x96\x94\xCF\x8C\x52\xD1\x85\x8A\x17\x4A\x72\x64\x95\x94\x5E\x9E\x61\x02\x1B\x11\xE9\x4E\x42\x80\x63\x96\x65\x94\x95\x26\x86\x7D\x28\x84\x83\xE5\x26\x4D\x5C\x94\x22\xCF\x24\x89\x01\x16\x63\xEA\x2C\x45\x09\x17\x2F\x81\x9E\x06\xF4\x2F\x7D\x58\x94\x07\x98\x7A\x6F\x00\x02\x99\x45\x90\x6C\x43\x3B\x97\x76\x60\x99\xF8\x25\x30\xAF\x49\x91\x4B\x70\x6F\xF8\x82\x2A\xF6\x2D\x45\x01\x1A\x2F\xCF\x23\x7F\xB0\x1C\x06\x54\x11\x19\x92\x51\x11\xA2\x98\x3B\xA4\x9F\x2C\xD8\x8F\x20\x65\x04\x9B\xD6\x2B\x37\xEA\x79\x55\xA4\x97\x8D\x09\x8A\x8D\x10\x62\x7F\xEE\x71\x30\x49\x70\x9B\x61\x13\x9B\x47\x1F\x9B\xC8\x91\x85\x00\x36\x06\xC6\x29\x93\xC1\x9B\x56\xC3\x9C\x8E\x9F\x77\x5B\x5A\x1D\x9B\xCF\x96\x9B\xD7\x9C\x66\xD9\x98\x90\x63\x81\x94\x66\x8A\x42\x0C\x3B\x41",
"\xBA\x95\x9C\x1F\x92\x37\x44\x8D\x9A\x6E\x0A\x9E\xA7\x40\x94\xC7\x7E\x4D\xC1\x3C\x30\x30\x1E\x30\x3F\x3E\x4F\x31\x81\x10\x27\x96\x8E\x4C\x1D\x87\x02\x1B\x57\x1F\x3B\x9E\xDB\x92\x50\xED\x94\x12\x02\xA1\x10\x04\xA9\x31\xDE\x76\x7D\x41\x72\x4D\x53\x28\x79\xF3\x7F\x31\xD1\x4B\x4C\x2A\x54\x8A\x92\x8B\x31\xEE\x76\xA1\x22\x38\xA1\x5A\x80\x00\xE4\x80\xA0\x32\x10\x90\x02\x1B\x32\x2D\x3C\x06\x24\x91\x5E\x26\x9B\x78\x73\x1C\x8A\x01\x1E\x73\x35\x37\x33\x8F\x4B\x77\x06\x16\xA3\x7D\x7F\x94\x32\x10\xA3\x00\x02\xA3\x36\x34\x2F\x21\xA3\xA2\xD9\x5C\xA3\x3E\xA4\xA3\x3D\x13\x7F\x77\x0C\x12\x0F\x12\x06\xBE\x1E\x94\x3A\x92\x10\x6F\x64\x6A\x1A\xA9\x92\xBB\x81\xA5\xF5\x5F\x99\x01\x11\x6B\x86\x92\x12\x98\x86\x5F\x75\x33\x25\x9A\x9C\x6F\xF8\x68\x79\x5D\xA0\xA5\x4F\x33\x25\xD8\x8D\x06\x67\xA5\x06\x80\x65\xA6\x80\x33\x25\xD6\x9C\x14\x6E\xA0\x00\x5F\xA5\x06\x41\xA2\x10\x93\x3A\x37\x5F\x89\x7F\x6F\xA8\x36\x77\x30\x36\x4B\x76\x06\x55\x37\x79\x97\x51\x56\x66\xA7\x36\x69\x37\x06\xDE\x39\x38\x17\x21\xA7\xEE\x96\x85\x7D\xA9\xA8\x79\x38\x06\x77\xA1\x10\x5D\x8D\x06\x98\x7E\x89\x01\x1E\x3D\x92\x39\x69\x1D\x81\x61\x09\x80\x93\xE9\x71\x43\x83\x22\x10\x9C\xA3\x39\x44\x60\x85\x68\x92\x85\x15\x76\x81\x42\x84\xAA\x09\x1F\x38\xAE\x5D\xA9\xA9\xA3\x79\x61\xA2\x10\xFD\x6F\xA9\x99\xA5\xAA\x9B\xA3\xAB\xA8\xA8\x66\x62\x80\x8D\x20\x8B\xA1\x24\x1B\x91\xA6\xAC\x39\xEB\x69\x62\xD6\x76\x79\xE1\x73\x2B\x88\x90\x00\xA6\x39\xAC\xF3\x95\x9E\xF5\x92\x13\xB3\x71\x3B\xA7\x32\x24\x39\x4E\x41\x10\x66\xAC\x08\xA3\x39\x8F\x6D\x3A\xD7\xA7\xAC\xD9\xA9\x3A\xDB\xA2\xA5\xC2\xA0\x00\xD2\x86\xAD\xC9\x71\xAD\xA8\x3A\x3A\xDC\xA1\x31\x27\x82\x91\x4C\x13\xAE\x9B\xA2\x3B\x87\x65\x3B\xA7\x47\xAB\x01\x19\xAB\x44\x57\x15\xD0\x74\x3A\xE4\xA6\x66\xFA\xA9\x91\xF4\x99\x5B\x32\x1C\xAF\xD0\xAB\x3B\x18\xA4\x2F\x44\xA2\x83\x7E\x6B\xA5\x55\x4F\x4C\x00\x02\x58\x3E\x17\x3C\x57\xA9\x10\xF6\x53\x83\x59\x95\xA2\x14\xB6\xB1\xC6\x31\xAF\xC3\x18\x8D\xC6\x9C\x40\xCE\x48\x32\xD9\x34\x3C\x17\xB2\xB2\x4A\x1E\xA8\x24\x16\xA2\x01\x10\xB2\x18\xB9\x91\xF3\x7F\x06\x2A\xB1\xB2\x80\x60\xB3\x15\xB7\xB3\x33\xBB\x8D\x73\xAA\xA5\x4F\x70\x5B\x3D\x51\xB3\xCD\x3C\x3D\xD1\x3D\x33\xD4\x38\xAE\x72\x91\x10\x62\x06\x34\x3A\xA5\x83\xDA\x7A\x3D\xCE\x3D\x3D\xAE\x5A\xB4\xAC\x53\x97\xC4\xA3\x12\x25\x65\x3E\xDC\x38\x3E\xEA\x34\x2F\x2E\xB0\x75\x18\x4A\x59\x8A\x5F\xA9\x2F\x91\x8C\x0D\x8C\x96\x4C\x32\x10\x64\xB8\x57\xFF\xA9\x56\xEE\x79\x8C\xAE\xA2\x94\x6D\x9F\x3E\xA8\x5B\x59\xF8\x63\xA7\x0E\x3E\x10\x17\x8B\x2A\x63\xB7\xB7\x65\xBF\xB6\x61\xB2\x77\x76\x9D\xB6\xF4\x33\xA7\x54\x1C\xB7\xAF\xA5\x97\xD4\x86\xB8\x71\x97\xB5\x01\x16\x9E\x6A\xB7\x1E\x8E\xB3\x79\x3A\xBF\x9F\x55\x1F\x83\x0E\x3A\x17\x04\x55\xA8\xA5\x5F\x40\xFB\x3D\x3F\x78\x0F\x3F\x01\x40\x2B\xDA\x96\x7E\xDF\xAB\x8D\x03\x3C\xA7\x19\x42\x59\x0E\x3B\xA2\x89\x79\x6D\x65\x07\x06\x6A\x1B\xBA\xEF\x9D\xBA\x09\x4F\x2C\x0B\xA0\x00\x7B\x54\x1E\xB4\xBE\x06\x42\x09\x3A\x79\x1C\x16\xB6\xB0\xA9\xB8\xBF\xBA\xA7\x46\xA3\x03\x16\xA3\x15\x1B\x88\xB8\x1C\x46\x08\x48\xBC\x34\xBE\x7E\xCD\xB1\xBC\xD5\x24\x3D\x96\x4F\x62\x0C\x60\xBA\x11\x43\x41\x41\x6E\xB0\x32\x30\xB1\xB0\x80\x78\x51\x99\x41\x24\x4C\x41\xFF\x36\xB5\xD6\x58\xB5\xD9\x5B\xBB\x7B\x5A\x41\x25\x4F\x3F\x60\xB3\xA5\xC5\xB7\x86\x01\x18\x1A\x7D\x9F\x42\xA7\xB8\x84\xA9\xB7\x9C\x9D\x8C\xAB\x6D\x46\x43\x38\x4E\x4B\xA7\x48\x8D\xEE\x83\x25\x8F\x9F\xBF\xB1\xAE\x45\x02\xCD\x4B\x52\x49\x91\x0F\xB2\x50\x11\xB1\xB4\xFF\x0A\xA9\x01\xC4\x07\xBC\x41\x8E\xD3\xA9\xAE\x4B\x81\x77\x13\xB8\xB2\x01\x1F\x43\x41\x44\x06\x43\x4F\xBD\xAB\x81\xBE\x12\xC3\xBE\x20\x94\x8C\x6D\x43\x53\x0F\xCB\x8D\x95\xA0\x00\x98\xB3\x17\x3A\xBF\x45\x5A\x4E\x8B\xA1\xA8\xB6\x98\x75\xC3\xC0\x57\x96\xEB\x7C\xAA\xE6\x63\xB7\x27\xBF\x4D\x5E\x4D\xC3\xF8\x61\xC1\x00\x0B\x18\xAE\xAB\xC3\x14\xB6\xC3\x74\x05\x7F\x4B\xBA\xAE\x74\x94\x12\x0A\xBE\xC4\x6F\x67\xB6\x4A\x89\xB6\x09\xBC\x9A\x2D\xCD\x22\x6F\x63\xB8\xFF\x05\xC5\xC0\x5F\xC5\xD4\xA8\xB0\x24\x18\x8D\x6E\x47\x46\x68\x09\x46\x24\xB9\xA0\x23\x18\xC6\x6F\x48\x46\xCE\x53\xAF\x6B\x75\xBF\xE8\x91\xC2\x71\xC8\x06\xC6\x2A\xB0\x1E\x5E\x9C\xB5\x98\x06\x5A\xCB\x46\xAC\xB9\xC6\x70\x4A\xC7\x49\x7E\xBE\xB8\xA8\x3E\xF8\x1B\x1A\xBE\x90\x9E\xCF\xB3\xC8\x79\xC6\x75\x14\xBA\x75\x03",
"\x94\xAF\x8F\xA6\xBF\x6D\x41\xC9\xFB\xBF\x95\xFD\xB6\xB2\xF5\xA9\x7C\x89\x4B\x48\x6C\x03\x48\x69\x0E\x91\x06\xB4\xBF\x13\x93\x93\x75\x4F\x47\xDB\x44\xCA\xCF\x33\xBF\xE9\xAB\xAE\x54\xCC\xC5\x95\x47\x49\x49\x7B\xB5\xEF\x68\x14\x0D\x9A\xC2\x5B\xC1\x99\x7D\x46\x49\xC6\x25\x6F\xE9\x3B\x16\x62\x16\xCB\x75\xCB\x9A\xBE\xC5\x47\xC0\xC2\x76\xA8\xCC\x14\x0A\xB5\xCB\xC6\x2E\xAD\x00\x0A\x11\x6F\x00\x13\x5C\x1F\x3C\xEB\x46\x83\x00\x04\x2F\xA4\x44\xC0\x19\x9D\xC6\x19\x99\x7D\x07\x5C\x4A\x55\x10\x65\xDE\xCB\x8D\x8C\x97\x7D\xD8\x13\xBB\x4F\xBA\x82\xDA\x7C\xCD\xE6\xCF\xC2\x10\x67\xB0\xD9\x5B\x4A\x06\x16\xCF\xB5\x45\x9A\xDB\x86\xA0\xA8\xB9\x8D\x6E\xC2\x12\x16\xC9\xCF\xB7\x4B\xC1\x51\xC2\xB9\x18\x8A\x25\xBA\x4C\xA6\x03\xC2\xCF\x11\x30\xCE\xAA\xB2\x82\xE3\xCB\xCD\x8F\x49\xC1\xE7\xC3\xCF\xE5\x98\x43\xE2\xC9\x81\xE4\xC4\xD1\x0C\xD3\x1C\xF4\xC6\xC7\xC1\x42\x10\xC3\x49\x5E\x19\x9D\x5E\x06\x16\xD2\xEF\x57\x9E\x21\xD1\x10\x23\xD5\x4C\xA7\x48\xC4\x64\x56\x60\x74\xBB\xB6\xD0\x4F\xA1\x25\x39\x97\xCE\x60\x96\x31\x94\xBE\x5B\x90\x00\x17\xA7\xD3\xAA\xAF\xC3\xEF\x75\x81\x9C\x83\xB9\xD7\x46\xD3\xCC\x48\xC3\x07\xAE\xCF\xE1\xCC\xD3\x75\xBE\xD3\x48\xD0\xAC\x9F\xA0\xC6\x63\x9F\xD3\x49\xD1\xAC\x05\xD5\xAD\x2F\xB4\xB1\x56\xD1\x4F\x0E\x99\xCE\x11\xA8\xA1\x3D\x2F\xAC\xE1\x49\x4E\x61\x18\xD3\xA0\x75\x87\x81\xC7\x98\x09\x14\x2B\x65\xDB\x4D\x3E\xC2\x9C\x40\xC4\x85\xCE\xAD\xD6\xE7\x42\x4E\xDC\x48\x6F\x16\xC4\xC9\x94\x53\xA6\x63\xD6\xD7\xD0\x48\x4E\x70\xDF\xB8\xEB\xB3\xAC\xD9\x5A\xB3\x6F\xD3\x4E\x19\x92\xCD\x7C\xDF\x60\x9E\xCC\x44\xC7\x69\xD8\x6C\x02\xC9\x20\xCC\xD4\x06\x68\xCD\x96\xC3\x47\x9A\x12\x10\xEF\x4E\x1B\x5E\xD0\x77\xA7\x9A\x5F\x2C\x34\x45\xB8\xC1\x10\x9D\xD3\x25\xC6\x24\xC7\x0E\x93\x17\x6E\x07\x12\x37\x06\xD2\xD1\x87\x12\xB2\xD2\xDB\x73\x13\x17\xB3\xD7\x12\xB5\xD4\x16\xB7\xD9\x10\xB9\xDC\x14\xBB\xD6\x10\xBD\xD2\x13\xCA\xB2\x10\x36\xA5\x04\x58\x00\x05\xB0\xD2\x10\x26\xDF\x02\x5E\x04\xDB\x64\x13\xDC\x01\x16\xA3\x41\x04\x04\x44\x09\xDC\x01\x1B\xDC\x2B\x01\x00\xB8\xDF\xDC\x7A\x7E\x45\x55\x02\x04\xDA\xD9\x10\xE1\xD0\x00\x2D\x06\xDD\x00\x03\x17\xD0\xD0\x00\x36\xAD\x04\x55\x0C\x04\xE6\xDB\xDC\x2A\x09\xDE\xE8\xDD\xDD\x37\x89\x04\x56\x0F\xDE\x02\x1F\x02\x2F\x05\x6A\xF3\xD9\x10\xEB\xDF\x04\x44\x03\xDE\x03\x13\xDE\x25\x01\xA2\x73\x11\xC3\x55\x0E\x04\x49\x0F\x04\x4E\x02\xE0\x02\x13\xDE\x26\x08\x89\xB7\x93\x49\x05\x3E\x04\x54\x05\x04\x52\x03\x05\x45\x03\x04\x54\x0B\xE0\x4E\x08\xDF\x01\x1F\x02\x7C\x0C\xA3\x73\x10\xE2\x2A\x35\x04\x18\x7F\x02\x3C\x0F\x02\x3D\x08\x87\x25\xEC\x5E\x02\x17\x04\x28\xE3\x86\x2F\x0E\x03\x2C\xE4\x5C\x2F\xE9\x10\x26\xDC\x04\x54\x06\xE2\x2A\xED\x6C\x39\xE7\xD2\x31\xED\xE3\x30\xE1\xE2\x3E\x0B\x66\x41\xE3\x10\x26\xD5\x04\x51\x09\xE2\x3D\x0C\xE2\x9A\x99\xE4\xCA\xD6\xAA\x33\xE9\xAE\x2F\x01\x02\x2C\xEB\xBB\x73\x13\xA7\x41\x03\x05\x53\x09\x04\x47\x0F\xE1\x45\xE0\x00\x2C\xE5\x62\xD1\x9B\xAA\x64\x91\x04\x49\x0C\x04\x45\x04\x04\x5F\x04\x05\x48\x05\x04\x4E\x09\xE2\x3F\x0F\x02\x3F\x00\x4C\x73\x18\xC8\x01\x11\x05\x55\x05\x04\x53\x0D\xE1\x0C\xEF\x05\x4D\x01\x04\x52\x0B\x04\x3E\xEF\x03\x4D\x40\xD2\x4F\x23\x05\x43\x0F\x04\x50\x05\x04\x5F\x04\x04\x45\x0C\x04\x49\x0D\x04\x49\x07\xE1\x52\x06\xE2\x3A\x0A\x03\x57\x77\xE0\xFD\x98\x6C\x4F\x0C\x04\x0C\xEE\xE0\x01\x13\xDE\x3A\x0D\x8D\xBC\x68\x94\x21\xC5\x04\x96\xED\xE8\xA2\xED\xE0\x27\x13\xDE\x3B\x0B\x34\x9E\xE3\x8E\xF5\x1F\x04\x4D\x03\xE8\xA4\xE0\x00\xE3\xDC\x02\x8B\x6D\xDF\x37\xAA\x24\x4F\x04\x05\xBB\xE3\xDE\x2E\x02\x80\x63\x4B\xD4\x8E\xE2\xE7\x5F\x04\xE8\x52\x01\x04\x59\x0E\xE3\x5B\x03\x7B\x67\xE2\xD4\x43\x02\xEA\x1A\xED\xEC\x52\x0F\xEC\xD1\xE3\xE6\x2F\x0D\x05\xA4\x59\xEC\xFD\xCB\xEC\x4E\x0F\x05\x42\x0F\xEC\x43\x05\x04\x3E\xEB\x07\x18\x0B\xDD\x4C\x13\x7F\xD7\xEF\x04\xD9\xE7\xEE\x41\x09\xEE\x3E\xED\x07\x19\x0E\xEE\xBD\xC3\x9A\x31\xBF\xE8\xE5\xE4\xEF\x43\x0B\x04\x45\x04\xE4\x3A\xE9\xDF\x28\x06\xCF\x03\x19\xE7\x22\x45\x1A\xD8\xE0\xE9\x00\xF2\xF0\x04\xF2\xE4\x21\xE9\x02\x7F\x30\xDC\x64\x16\xE2\x41\x04\xEC\xB1\xE2\x10\x40\x0C\x01\xFA\xE4\x12\x4B\x74\x05\x59\x0F\xE8\x5F\x06\x05\x4F\x09\x04\x44\x08\x71\x76\x03\x41\x64\x0D\x01\x1F\xF3\x12\xF3\x72\xF2\x24\xFF\x04\x42\x0A\x04\x1B\xE4\x05\x73\xA6\xB3\x6A\x02\x88\x82\x6A\xBD\x26\x6D",
"\x47\x23\xF0\xE9\x49\x06\xE1\x18\xE6\x04\xF5\xE5\x04\x4B\x70\x88\x67\x6F\x01\x2F\xF2\x12\xE9\xC2\xF3\x42\xF6\xE1\xE9\xD6\xA3\x14\x40\x02\x4D\xFF\x0F\x21\xF1\xF4\x5F\x05\x05\x43\xF4\x05\x18\x75\x07\x14\x41\x02\x57\xF8\x8D\x50\xFF\x05\x46\x02\xEA\x19\xF1\xC3\x66\x00\x8E\x22\x07\xF5\x31\xFA\xF5\x44\x0F\x04\xDF\xDC\xE6\x73\xA4\x06\xA9\x35\x32\x23\x0E\xF6\xEE\x75\xF6\x7F\xE2\x05\x43\xF7\x04\x88\xBE\xC2\x67\x04\x02\x57\xF9\xF5\x24\xF3\x04\x48\x04\xE8\x18\x71\x11\x46\x15\x02\x85\xF6\x7D\x65\xF2\x04\x4F\x01\xEA\x18\x7D\xB4\x6F\x0C\x06\x26\x07\xF5\x7A\xE0\x00\x02\xF9\x05\x57\x0F\x04\x52\x0E\xE6\x8D\xEE\x04\x7F\xE1\xC3\xF0\x68\x15\x27\x0A\xF7\xD2\x9D\xF9\x9F\xF1\xFA\x5F\x03\x05\x48\x0C\x04\x53\xF2\x10\x73\x08\x06\x6C\x08\x02\xAA\xF8\xE6\xAC\xF0\xFA\x6E\xE0\xFB\x52\x03\xFB\x6E\x78\x06\x72\x09\x02\xB9\xF2\xD4\xBB\xFE\xFA\x58\x00\xFA\xC0\xF0\x00\x78\x0E\x15\x2A\x05\xFC\x72\xDC\xF9\x45\x0E\xF9\xBC\xFD\xEC\x4E\x04\x04\xCB\xF6\x60\x2B\x03\xF6\x09\x87\xFC\x6E\xE0\xFA\x26\xEE\x15\x2C\x00\xFD\xD8\x91\x10\xDE\xFF\x05\x4E\x03\xEC\xCB\xFA\x94\x74\x0D\x02\x57\xFA\xB0\xE7\xFE\x04\xED\xDC\x04\x63\x7B\x3B\x2E\x0F\xFE\x5C\xC7\xFE\x70\xE9\x04\x53\x00\x94\x77\x4F\x02\xF8\x79\x99\x52\x7E\xEA\x7E\xFA\x54\x02\x14\x1D\x73\x40\x4D\x3B\x70\x00\xCD\x7B\xF0\x03\x81\xEB\x6E\x73\x46\x7C\x09\x1A\x70\xB5\x7D\x9C\x65\x01\x0C\x04\x7F\xE2\x4E\xFC\x53\x7F\x07\x8F\x05\x6C\x70\x15\x0B\x7E\xFB\x3A\x06\x1C\x7F\xA5\x67\xFE\x43\x7A\x89\x6A\x0B\x33\x04\x01\x89\x09\xBD\x27\xFE\x4F\x76\x13\x12\x71\x31\x67\x39\x4E\x18\x1A\x08\x01\xFF\x15\xFC\x65\x02\x57\x03\xFD\x5C\x1D\x1A\x03\x02\xFD\x67\xF9\x6F\x02\x46\x01\xFC\x66\x02\x1B\x0D\x03\xFC\x5E\x03\x95\x7E\x5D\x76\xC4\x53\x0B\x1B\x05\x04\x9C\x67\x11\x8E\x7D\xFC\x7F\x04\xB3\x02\x1C\x01\x00\xFC\x77\x13\x82\x7D\x5D\x76\xEB\x63\x43\x3E\x64\x07\x39\x01\x15\x98\x4D\x1A\x84\x00\x90\x81\x04\x73\x04\x18\x3A\x63\x5A\x01\x57\x7D\xB4\x57\x83\x37\x71\xF4\x40\x83\x9C\x58\x2E\x6F\x06\x0C\x3B\x01\x2F\x84\xE1\x61\x80\x07\x90\x7A\xF4\x64\x07\x34\x83\x7D\x32\x10\x67\x7E\x10\x03\x7A\x29\x7B\x0C\x4C\x53\xBC\x0D\x03\x57\x79\x13\x5F\x81\x42\x02\xC3\x52\x02\x2B\x05\x04\x30\x68\xCF\x45\x03\x3E\x05\x09\xBA\x4A\x3B\x85\xFD\x0C\x71\xF8\x6E\x03\x3F\x01\x0D\xAD\x27\xF3\x79\xF1\x54\x01\xBD\x68\x02\x73\x51\xA9\x28\x12\x20\x0A\x09\x9B\x6C\x25\x8E\x7D\x92\x76\x13\x88\x7D\xBA\x77\x26\x11\x09\x10\x15\x81\x7D\x83\x03\x95\x7E\x2B\x04\xE8\x4B\x7D\xD0\x22\x02\x2A\x84\xAF\x31\x84\x31\x86\xEE\x52\x01\x11\x01\x02\x4B\x01\x86\x62\x02\xC9\x0B\x06\x43\x03\xD5\x75\x37\xE7\x7B\xF4\x5D\x70\xF9\x75\x04\x69\x64\xBC\x39\x21\x39\x14\x08\x25\x84\x07\x27\x0A\xEE\x72\x2F\x94\x02\x55\x02\x0A\x0E\x03\x39\x5C\x97\x2D\x23\xBA\x13\x86\xFD\x2D\x1A\x91\x75\x49\x73\xF0\x45\x00\x2B\x9B\x3F\x65\x06\x08\x39\x84\x3F\x4B\x0B\x9C\x83\xB3\x7C\x7F\x45\x01\x06\xA1\x5D\x32\x07\x04\x12\x85\x4E\x62\x87\x49\x01\x08\xA3\x73\x41\x28\x04\x7B\x83\x66\x4D\x87\xD5\x7B\xD2\x5A\x70\x8C\x3D\x67\x54\x09\x12\x00\x87\x30\x32\x1C\x93\x03\x2B\x07\xE9\x2B\x84\x96\x4C\x3A\x79\x62\x09\x3E\x87\x7B\x19\x0C\xDD\x71\x95\x71\x62\x7D\x65\x0C\x0B\x02\x43\x8C\x46\x67\x7E\xA4\x66\x7A\xED\x6C\x0A\x08\x62\x03\x10\x1B\x3F\x30\x13\x0B\x87\x03\x50\x20\xAE\x7D\x2B\x08\x04\x6B\x71\x3C\x9F\x74\x77\x00\x9E\x0D\x02\x58\x82\x0E\xC6\x02\xF2\x74\x6F\x00\x06\x0C\x1E\x0A\x27\x07\x0C\xC7\x35\x0B\x85\x02\x8C\x81\xC3\x6D\x73\x74\x6B\x11\x14\x09\x20\x44\x03\x4F\x04\x26\xAB\x82\x03\x89\x05\x4B\x7D\x56\x19\x03\x50\x00\x25\x8C\x50\x95\x88\x05\xD4\x00\xE2\x66\x7D\xBA\x60\x0D\x11\x02\x8E\x8C\xBA\x67\x7E\x11\x03\x7A\x41\x04\x09\x0C\x03\x2C\x08\xC4\x43\x67\x74\x39\x03\x52\x02\x2A\xBC\x5C\xAA\x8F\x05\x57\x75\x97\x73\x02\xA6\x78\x3C\x13\x03\x89\x8C\x16\xF2\x71\x15\x0D\x02\x04\x8E\x50\x14\x03\x9E\x8B\x8B\x5E\x88\x13\x01\x02\x32\x72\xFE\x4D\x03\x74\x6B\xF6\x6F\x19\x45\x16\x10\x55\x00\x21\x9B\x5E\x85\x86\x00\xD5\x00\x87\x61\x7C\x2D\x16\x0A\x34\x8A\x71\x80\x05\x52\x02\xA3\x78\x38\xD4\x60\x0E\x17\x02\xB5\x8C\x02\xB2\x86\xEB\x60\x8A\x72\x74\x0A\x31\x60\x8E\x54\x07\x58\x02\x62\x9F\x79\x8C\x89\xE3\x49\x03\x21\x01\xF8\x36\x0F\x18\x19\x02\x7C\x8C\x85\x7F\x81\xA0\x8E\xF7\x12\x75\x3A\x6F\x03\x46\x8C\x25\x06\x10\x2D\x0C\x19\xEC\x89\x15\x1F\x72\x2F\x81\x86\x79\x0E\xAF\x1B",
"\x05\x57\x7A\xCE\x51\x7F\x41\x05\x09\x3E\x72\x28\x07\xF4\x4B\x39\xC4\x34\x55\x65\x04\x0B\x27\x8C\xC0\x07\xFE\x4D\x00\x80\x6D\x6F\xE6\x87\x21\xAA\x53\xB3\x1D\x05\x13\x8F\x1A\x89\x70\x97\x77\xEB\x6E\x02\x96\x1D\xDC\x3C\x6E\x53\x74\x69\xA0\x76\x32\x95\x03\x65\x80\xE9\x0D\x76\x7A\x8C\x8F\xF3\x3F\x05\x24\x00\xBF\x2A\xAD\x44\x11\x41\x06\x8F\x8F\x67\x76\x6E\x8E\xB9\x7C\x1E\xDF\x00\x73\x9F\x8D\x8D\x80\x85\x64\x72\x12\x03\x39\x79\x0D\x19\x00\x03\x57\x7B\x2C\x7B\x8F\xF5\x83\xF4\x51\x78\xA6\x66\x7A\xE9\x71\x3E\xA4\x00\xA5\x71\x1B\x61\x03\xD5\x72\x66\x0B\x95\x3F\x8B\x77\x67\x74\x05\x20\x7C\x36\x52\x8F\x5B\x01\x08\x2D\x00\x2D\x0D\x05\x2F\x03\x1D\x0A\x01\x62\x03\x3A\xB7\x75\xF7\x8D\x20\xAF\x7C\x98\x62\x73\x05\x79\xC4\x73\x8F\xAB\x78\x71\x4E\x01\x72\x85\x02\x0A\x5B\x0B\x21\x03\x16\x0A\x07\x22\x92\x16\x1F\x02\x25\x97\x44\xA4\x02\xEF\x8C\xFB\x18\x71\x9B\x68\x7F\x37\x91\x9D\x60\x90\x18\x0D\x02\x39\x01\x17\x0A\x01\x65\x07\xEA\x71\x61\xB3\x7F\x04\x19\x78\x12\x6F\x01\x64\x03\x05\x2E\x00\x2C\x9B\x02\x66\x03\xD5\x68\x62\x5D\x7D\x08\x32\x71\xDF\x78\x13\xDC\x93\x19\x17\x7A\x73\x55\xEF\x7F\x7A\xB1\x79\x10\x6C\x90\x00\x07\x01\x28\x03\x0B\x1E\x03\x13\x0C\x05\x5C\x01\x17\x1C\x03\x75\x94\x0B\x2E\x01\x14\x0A\x02\x27\x00\x1F\x02\x01\x71\x96\x0B\x22\x01\x3A\x97\x27\xF9\x93\x9E\x8A\x01\x22\x00\x0D\x1E\x8E\x9B\x82\x05\x03\x74\x15\x0A\x93\x2F\x86\xF1\x49\x08\x49\x93\x20\xA8\x00\x9C\x92\x93\x74\x96\x4E\xB8\x93\x3A\x97\x28\xFE\x90\xA0\x92\x93\x83\x92\x53\x86\x94\x3E\x92\x02\x29\x01\x1A\x17\x7A\xE6\x69\x86\x53\x02\xE6\x89\xEE\x4B\x7F\x0B\x13\x03\x2B\x02\x0D\x1F\x92\x01\x9D\xE8\x39\x75\x68\x99\x77\x09\x08\x57\xA4\x72\xFD\x6A\x02\x01\x96\x0A\x17\x93\x2F\x02\x05\x2B\x00\x39\x9A\xDF\x5D\x00\x9F\x81\x96\x2B\x02\xBF\x6B\x03\xAB\x7F\xDA\x00\x6D\xAD\x02\x08\x25\x7A\xB0\x4A\x6D\x6D\x4E\xF1\x09\x09\xB5\x80\x00\xD1\x90\xAF\x4F\x16\x17\x02\x05\x6F\x01\x35\x6F\x0F\x3F\x09\xB6\x1C\x78\x10\x04\x02\x3C\x01\xB6\x86\x6B\x2A\x57\x94\x3E\x00\x69\x67\x2E\xDB\x27\xB3\x0D\x77\x09\x08\x5E\x98\x96\xC9\x6B\x2D\xE0\x94\x1D\x16\x57\x00\x00\x08\x20\x00\x73\x94\x2F\xEA\x94\xBB\x9D\x97\x19\x4E\x82\x6D\x97\x69\x90\x61\x2E\x01\x0C\x1B\x07\x27\x08\x61\x81\x08\x7E\x92\x2D\xE9\x95\x46\x5E\x01\x3A\x00\x04\x0C\x94\x47\x90\x29\xC7\x00\x08\x11\x98\x98\x58\x04\x13\x0A\x89\x9C\x2C\x4E\x17\x29\x20\x02\x0D\x02\x01\x0C\x98\x6D\x9A\x2E\x91\x9A\x08\x13\x8F\xEF\x53\x5B\x62\x00\x10\x0B\x05\x20\x00\xA0\x8B\x99\x36\x92\x39\x97\x98\x10\x01\x71\x2E\x99\x0A\x0B\x99\x5D\x00\x04\x26\x76\xC2\x06\x18\x33\x99\x61\x56\x08\x1A\x9B\x0E\x20\x00\x77\x55\x1F\xAB\x1F\xB3\x00\x99\x22\x9B\x60\x8E\x99\x6D\x40\x31\xAE\x9B\x20\x84\x03\x2B\x9F\x65\xBA\x99\x67\x13\x33\xA5\x5B\x70\x16\x99\x2B\x9B\x63\x82\x02\x07\x37\x34\xFF\x95\xC3\x8F\x16\x02\x98\x60\x9B\x46\x17\x02\x03\x51\x89\x42\x06\x9B\x00\x03\x64\xA8\x97\x67\x1D\x34\xA2\x03\xD3\x82\x01\xFA\x92\x6A\x9F\x02\xAA\x91\x31\xD6\x9A\x52\x18\x9A\x41\x98\x04\x1B\x9B\xBC\x0F\x2C\x5E\x98\xC9\x81\x98\x00\x62\x69\x9B\x97\x19\x0A\x28\x89\x09\xE1\x89\x9B\x82\x9D\x64\xAE\x98\x94\x95\x34\xE5\x00\xDC\x8C\x99\x2E\x98\x05\x30\x99\x1B\x93\x33\xB5\x99\xA9\x98\x99\x3A\x98\xC3\x3D\x99\x88\x9F\x33\xF4\x01\xDE\x84\x9A\xE6\x54\x48\x3D\x9B\x67\x59\x38\x99\x48\xC2\x62\x08\xF6\x65\x74\xA3\x9B\x6E\x95\xCD\x72\x10\x19\x02\x97\x01\x0D\x5C\xAA\x9C\x08\x3E\x03\x20\x00\xC8\x8D\x80\x73\x99\x23\x3A\x09\x34\x0D\x94\x49\x08\x45\x15\x37\xB9\x98\x0E\x3B\x9D\xDE\x99\x06\x14\x08\xD9\x91\x01\x76\x03\x41\x49\x9F\x85\x91\x3C\xC3\x9F\x68\x74\x08\x6D\x9B\x4E\x22\x0B\xAC\x92\x34\xA8\x51\xCB\x2B\x9A\x10\x30\x04\x2F\x22\x34\x00\x02\x7B\x00\x08\x19\x98\x3D\x06\x65\xBA\x1D\xE9\x90\x02\x7D\x00\xD2\x86\x97\x6E\x0E\x79\xBE\x9C\x48\x86\x32\xB1\x4C\x55\x14\x9E\x20\x06\x7A\x87\x0A\xEC\x91\x31\x5A\x9C\xCB\x1C\x9E\xDE\x98\x7C\xAE\x98\x23\x05\x01\xAB\x9A\xF9\x81\x99\xE8\x9A\x77\xAC\x08\xE2\x90\x3D\xA6\x98\x6F\x50\x9F\xF2\x9C\x60\xB5\x9F\xED\x9D\x3D\xDF\x9F\xE2\x20\x01\xE1\x9A\x04\x15\x25\x1C\x1E\x3F\xE7\x9D\xF3\x83\xA0\xCF\x9C\x7D\xA0\x01\x22\x9E\x0B\xEE\x71\xCC\x85\x02\x95\x9E\xB5\x39\x9A\xA9\x5C\x3D\x5E\x1F\xD1\x80\xA0\x17\xA4\x77\x99\xA1\xB6\x9A\x37\x7C\x1C\xFC\x96\x23\xFC\x1F\x84\x89\x9B\xF4\x98\x41\xEB\x9D\xD3\x94\x92\x19\x7B\x66\x99",
"\x99\x8D\x97\x2B\x6F\x01\xAE\x06\x25\x19\x4E\x82\xB4\xA0\x15\xA6\x43\x91\x99\xC5\x9A\xA1\x0F\xA3\x63\x90\x23\x8A\x61\x31\x42\xA2\x00\xA4\xA2\xC5\x9A\x83\x92\x9B\x10\x01\x3C\xDB\x44\xD6\x8E\xA2\xC2\x9D\x86\x91\xA3\xB6\x9B\x05\x2B\x99\x15\xB9\x9E\x11\x9D\x69\x64\x03\x3C\x0E\x32\xDD\x00\xFC\x84\xA1\xCF\x1F\x68\x53\x1F\xEA\x1F\x31\xA8\xA3\x10\xA4\xA0\x1A\xA7\x83\xA1\xA1\xC5\x09\x37\xF0\x5C\xFA\x4C\x59\x20\x08\x8B\xAA\x9F\x2D\xA1\x31\xE6\x79\x51\x53\x99\x8E\x4C\x44\x39\x9B\xC9\x42\x43\x81\xA1\x16\xB0\xA2\x05\xA0\x04\x21\x93\x31\x98\x44\xA8\x49\xDE\x93\x1D\xFA\x4D\x90\xA9\xA0\x38\xAD\x34\x93\xA5\x06\xB3\x99\x40\x5E\x73\xA2\x00\x17\x01\x35\xB6\x5B\x60\x2E\x9C\x2E\x9B\x2A\x13\x9C\x99\x91\x31\x96\x9E\xE4\x93\x9A\xA7\x25\x6A\xA9\xA5\x96\x92\x02\x20\x0A\x17\xB4\x9B\x20\x04\x34\x82\x9A\xEF\x92\x02\x2C\x03\x2B\xA9\xA5\x75\x9C\xA0\x02\x9B\x3E\x00\x02\x39\x9B\xE5\x83\xA1\x8F\x84\x6A\x8C\xA0\xEF\x9E\x49\xAB\x58\xBD\x10\xA0\x2E\x98\x23\x30\x09\x47\x32\xB3\x20\xA7\xFF\x93\xA1\x4F\xA4\x92\xBD\xA3\x37\xA7\x49\x91\x99\x20\xB7\x9B\x52\x9D\x65\x9F\xA3\xFA\x91\x31\xCC\x56\x88\x2D\xA0\xB5\xA7\x96\x99\x49\x99\x9E\x4D\x98\x4D\xF9\x9D\xA5\x78\x9B\x63\x82\x2E\x49\xA4\x4D\xC5\xA2\xCB\x9B\x3F\x5E\xA6\x43\x4A\x27\x92\x18\x44\xF3\xA7\x84\x40\xA7\xB6\xA2\x67\xB2\xA6\x09\x55\x06\x75\xA4\x3F\xBB\xA5\x2E\x9A\x2D\x11\x9B\x53\xAB\x4D\xD7\x99\xDD\x89\xA5\xBF\xA3\x63\x85\x51\x36\xA0\x4D\x87\xA6\x34\xAE\x99\x32\x80\x94\xA8\x00\x10\x03\x51\xD2\x9B\x30\xA0\x01\xBE\x5A\x2D\x16\x5F\xE1\x56\x49\x48\xA6\x08\x1E\x1F\xE5\x46\x23\x14\x08\xFF\x90\x02\x29\x00\x08\x1C\x03\x14\xAE\x65\x9D\xA2\xFB\x9A\x37\x0D\xA1\x46\xA0\x5E\xC2\x58\x7B\x64\xA3\x08\xAD\x1A\x44\x0B\x70\x83\xA9\xE7\xA6\xA4\xA6\xA9\x82\xA7\x37\xE1\xA3\xEC\x4A\x0B\x2E\x99\x9F\xBC\xA8\x90\x05\x35\xF9\x09\x4A\xB5\xA8\x37\x9C\xA5\xB8\x9F\x58\xA9\x17\x1B\xAA\x4C\xBE\xA8\x20\xAF\xA6\x8E\xA7\x92\xA7\x52\xA9\xAA\x08\x06\xA3\x4A\xAD\x81\x95\x5F\x98\xAC\x16\x1E\xA9\x4D\xA1\xA9\x51\xA4\xA4\xBA\xA9\x3A\xAE\xBA\x78\xA2\x1B\x1A\xA3\x5A\xA1\x91\xA2\x01\x3D\x0B\x32\xDE\x9D\x5B\x91\x10\x8C\x54\x31\x24\xA6\x9F\x40\x50\xA2\x01\x1F\x10\x9F\x90\x39\xBA\x2C\xA7\x68\xAB\x42\xA6\x9B\xEA\x17\x03\x5E\xA7\x98\x91\x98\xEC\x21\x39\xAB\x9A\x36\xB0\xA5\xE5\xA3\x96\x81\xAA\x71\xA6\x45\xDD\xA4\x5D\xA7\xA7\xBE\xA1\xA9\x9B\x99\x68\x50\x1E\x7B\xAA\x43\xBD\xAB\x2E\x9F\xAF\x81\xAD\x47\x23\x33\x84\xAF\x5A\xAD\xAB\x3A\x9F\xCD\x34\x1F\x99\x9E\xAF\x68\x29\x5D\xB7\xAB\x9F\x98\x5F\x58\x35\xF4\x5C\x50\x86\xA7\x1E\xA9\xA4\x96\xA3\x7D\x98\xA4\x62\x3A\x49\x9C\xA6\xCB\x85\xA6\x21\x5B\xA0\x8C\xAC\x30\xA1\x4B\xAB\xA7\x6D\xAE\x03\xBB\xAC\x9B\xB1\xA4\x5D\xA8\x4F\xC1\xAE\x41\xA3\xAE\xC9\x28\xB2\xA9\xA6\xA1\x9D\x4C\xC2\xA7\xFD\x8D\xA0\xB8\xAC\x22\x07\xA7\x08\xA3\x05\x3C\x9C\x1C\x13\x12\xCD\xA5\x82\xAE\xA2\xBE\xAE\x4E\xA2\x02\x28\x91\x08\xBA\xA8\x95\xA3\xA7\x5C\xA2\x57\xE1\xA6\x78\xAD\xAC\x20\x07\x9A\x84\xAB\x84\xA2\x34\x89\x2B\x3E\x24\x28\x96\xAF\xB5\x92\xA2\x03\x1D\x82\x61\xAF\x50\xAE\x03\x55\x9C\xA0\x0B\xAD\xF3\xAC\x5B\xBF\x40\x19\x01\x42\xCB\xA8\x04\x38\x40\x85\x20\x5F\xAD\xAD\x6C\xBC\xA3\x20\x04\x8A\xA2\x9A\x08\x38\x56\x88\xA6\x14\xBB\x74\xA3\xA0\x84\xA5\xA4\x11\xAB\x31\xA1\x65\x2B\x6D\x24\xF1\xA9\xAD\x9A\xA1\x03\xB4\x11\x2A\xA7\x38\xAD\xA5\x66\x03\xB3\xBD\x09\xCE\xAC\x59\x9B\x9A\xC1\x0F\x18\x41\xA3\xBB\x97\xAC\x77\xAC\x61\xFD\xA5\xDD\x93\x60\x9E\x9B\xA2\x95\xA8\x81\xA9\x55\xDE\x9D\x07\x7E\xAA\xC0\xA9\xA7\x95\xAB\x8A\xAC\xFE\x51\x98\x8D\xB7\xA8\x37\xB1\x82\x8E\x03\x6A\x6D\x1A\x62\xA8\x55\xB7\xAF\x33\x9F\x80\x7A\x46\xFC\xAA\x44\x8D\x62\x06\x69\xB1\x0D\xAA\xBE\x95\xA5\x76\xA1\x45\xB3\xAE\xAC\x2E\x99\x10\xB3\x68\x94\x9D\x09\xB4\x47\xEA\xA7\xAD\x39\xB0\x0E\xB3\xCA\x9C\xAF\x2A\xB6\x4D\xD9\x24\x56\x0A\xA9\xC6\xAD\xA7\xA0\x01\xFC\x26\x54\xD7\xA8\xFC\x9B\x9B\x24\x6E\x8A\x97\xA8\x9E\x08\x63\x86\x10\x1E\x1A\xAE\x51\xB2\xC3\xA2\xB3\x15\xB4\x66\xBD\xAF\x38\xB2\xB1\x47\xA9\xA0\xB3\x03\x95\x90\x64\xB8\x22\x57\xB3\x03\xF4\x16\xC8\xA8\xA9\x19\xB3\x68\x99\xAD\x35\x64\xB4\xCF\xAE\xC6\x86\xB4\x9A\xA3\x07\x43\xB0\x06\x6F\x24\x46\xB3\xA7\x82\xAC\x10\x04\x58\x95\xB3\x44\x6B\x68\x40\xA6\x8A\xA6\xA9\x45\xB2\x68\xD1\x9A\xF4\x8C\x03\x2F\xA7\xD3\x8E\x61\x50\xB9\x3D\x85\xB7\x99\xB4\xB4\xE3",
"\x98\xD5\xBA\xB0\x52\xB2\x02\x2E\xA2\xA3\xB4\x03\xA6\xB3\x77\x29\xB5\x5D\x20\x6A\xCE\xAD\x4B\xB2\xB4\xAF\xB6\x65\x89\x03\x4A\xB5\xCD\x31\xB5\xA6\xAD\xB0\x0F\xAA\x04\x18\x2E\xFB\xA0\x4B\xF6\x9B\x7A\xB2\xAC\x42\x99\x9F\x4F\x16\x30\xBF\x50\xAD\xB2\x87\xB6\xA2\xDE\xAD\xD1\xAF\x72\xCE\xA3\x58\xA5\xB1\xB4\xA3\x25\xF1\x64\xD5\x8B\xA1\x48\xBB\x66\xD9\x0B\x47\x33\xA9\x2E\x9F\x0A\x25\x03\xC9\x08\x67\xAE\xAE\x9E\xA6\xA0\x8F\x21\x0E\xB6\xAF\x4D\xBE\x59\xD0\xB4\x08\x02\x68\x8F\x24\xDA\x98\xAC\x6B\xB1\x31\x99\xA6\xCB\x96\xAD\x72\xA4\xCB\xBD\xA7\x8D\x96\xA5\x41\xA2\xDF\x8B\x9B\xA7\x21\x6C\x9F\x9B\x53\x2E\x02\x35\x00\xDA\x83\x08\x68\x9A\x6D\xAE\x96\xC5\x9E\x36\x8E\x32\x6E\xBA\x97\x48\xB7\xA0\x9F\xB0\x7B\xBB\x37\x8E\x6F\x70\x07\xB8\x13\xB8\x70\x8B\x60\x82\x0B\x60\x91\x1A\x0B\x16\x01\x87\x9B\x20\x07\x9C\x89\xBA\x40\xC3\x0D\xDB\x8C\x9C\xA1\x9B\x75\x06\xAD\xC2\xAA\x2F\x81\xB8\xCD\x82\xA1\xBF\xA1\x67\xBB\x99\x0C\x3E\x33\xC9\x39\x6A\xA5\x57\xF0\x55\xD5\x0F\x89\x9D\xB6\x18\x69\x64\xD1\xAB\x03\x64\x9A\x10\x27\x08\xA5\xBC\x3C\x9A\x9F\x1A\x0D\x9B\x6C\xAE\x76\xAE\xAA\x63\x1D\x73\xEB\x3B\x69\xAF\xB3\x3C\x9A\xC3\x0E\x48\x14\xAE\x74\xD0\xBB\xE3\x93\xBA\x3E\xBC\x73\x89\x3B\xAB\xB9\x37\xCE\xBA\xB1\x1B\x7C\x2D\xB5\x09\x6D\xB0\x17\x07\x03\x31\x04\xA9\x6E\xBB\xCC\x9C\xCA\xB0\xAC\xB9\xBE\x62\xA0\x01\x26\xB1\x9B\xB6\xAD\x95\x8F\x84\x66\xB8\x4B\xFE\xB2\x15\xAC\xA5\xAE\xA4\xBF\x82\xAE\x59\xA5\x5C\x82\xBF\x71\xA4\xBC\xBC\xA1\xB2\xA7\xA3\x60\xA9\x4A\xF3\xB3\x23\x93\xAE\x2E\x9D\xBA\xAD\x03\xEB\xA5\x06\x59\xAD\xF9\x8A\xB1\x52\xB3\x9A\xA3\xB3\x0E\xBD\x6F\xB4\xAC\xDE\xBD\xA4\x7B\xB9\x94\x8D\xB4\x9B\xB6\x4A\xE9\xB0\x51\xBA\xB8\x7F\xBF\xB7\xA6\xBC\xFC\xA4\x5E\xDF\xA4\x2D\xA2\xAA\xCD\xB4\xB8\x89\xBD\x00\xBD\x5C\x8D\xBC\xB9\xB1\xAE\x6C\x54\xB3\x91\xA0\x65\xAD\xBC\x4F\x1E\xE5\xBD\x03\x68\xBC\xEE\xAA\xBA\xBA\xBE\x02\x38\x00\x20\x07\x09\xC7\xB9\xEE\x9B\xBD\x0D\xB4\x77\x80\xA5\x51\x51\x9B\xA7\xA7\xB0\xBD\xBB\xC4\xA5\x78\x99\xBA\xC6\x8F\xAC\xB3\xBC\xBD\xA0\x01\x75\xA7\x4A\x41\xBF\xF2\xA3\xBE\xCB\xBE\x05\x39\x01\x93\x89\x10\x64\xBC\xE2\x94\xBB\x7B\xB2\xBE\x96\xB2\xC6\x0F\x79\xDA\xB0\x29\xB7\xB9\x5D\xB2\x68\x85\xB9\x6D\x4E\x7D\xFC\xB3\xEF\x87\x36\x6B\xB9\x06\x30\x00\xF3\xB3\x10\x66\xBE\xBB\xA1\xB3\x9A\xBE\xFE\xB5\xBB\xBB\xB8\x65\xBA\x01\x84\xB3\xA3\x03\xBA\x68\xAB\x34\x8F\xBA\x14\x75\xBE\x7C\xA0\x9E\xC4\xB9\x06\x31\x01\xD6\x69\x10\x14\xC3\xF9\xAB\xBE\xE9\xBA\xC3\x80\xA4\x33\xB4\x07\x71\x9B\x4A\xB6\xBE\x6C\xB4\x0C\x25\xA3\x37\xBD\x5D\x2E\x6B\x38\xB3\xB3\x70\x05\xCE\x90\x2C\xFF\x9E\x80\x9A\xB0\x04\xC1\xBF\x31\x02\x06\x25\x05\x93\x03\x83\xCA\xBE\x00\xD9\xC0\x0E\xB5\x6A\xB0\xB0\x7D\x90\x68\xB5\xB5\x8E\xAE\xB5\x9E\x9C\xA6\xB9\xB0\x5E\xA3\x6A\xD6\xA9\x8F\xA1\xA8\x3F\xC4\xDC\x81\xB2\xF1\x94\x64\xC3\xC0\x55\xBB\xA9\xB0\xA2\xC9\xAA\x17\xBC\x95\x43\x18\x61\xAF\xBD\xBE\xB8\x9C\xEE\xAF\xC0\x01\xC6\x30\xB3\x03\x56\x89\x08\x5F\xC7\x02\xF7\xC1\x00\xCA\x7E\xA8\xBC\x83\xB7\xAD\x21\xB2\x67\xB4\xB6\x6F\xBA\x48\xF1\x4C\x8A\xB4\xBF\x59\xC3\xF9\x9B\xC2\xF9\xA6\x30\xB4\x02\x0F\x04\x75\x77\xC6\x06\xD9\xBC\xF1\xA5\x86\xFE\xBB\x19\xC0\xB4\x3D\xC6\xD6\x80\xC3\x43\xB9\x68\xB3\xB6\x55\xB6\xB5\x22\x07\x08\xC3\xC4\x58\xB5\xCD\x05\xC4\x11\xC7\xB2\x6B\xC3\xC4\x9E\xB4\x5E\xBB\x6A\xD4\x99\x11\xCC\xB4\xB9\xB4\x7C\x93\xC4\x85\x65\x89\xB6\xBF\xAF\xBC\xB4\x93\xB2\xD8\x95\xB4\x5D\xB6\x88\x98\xC7\xAD\xB9\xC4\xB2\xB3\x13\xDC\x68\x71\xB7\x35\x8B\xC6\x28\xD6\xB4\xC6\xB2\xC7\xA9\x01\x16\xCE\x60\xF3\xC2\x86\xA6\x98\x35\x02\x0E\x27\x08\x5D\xCA\x87\xEF\xB4\x1F\xDA\xC0\x66\xC5\x89\xA2\xBC\x11\xB5\x77\x9D\xB7\xB7\xBD\x09\xDD\x65\xA3\x77\x9B\x8B\xAC\x22\x67\xB6\x47\xAA\xB7\xEC\xB7\xF2\xB1\xC2\x01\xCA\xCD\x6B\xB8\xEB\x97\x08\x79\x0A\x9A\x72\x9C\xF4\xB6\x3B\xB1\x61\xF0\x90\x01\x48\x67\x1B\xCD\xB8\x2F\x04\xEA\x64\xC6\x0D\xD0\x01\x6D\x9C\x0B\x84\xC6\x12\xB3\x62\xDF\xC7\xB5\xB9\x9E\x9B\xC1\x19\xEC\xC5\x65\xC4\x6E\xCD\xC5\x7E\x48\xB7\x22\x00\x8A\x20\x09\x33\x0D\x6E\xDF\xC5\xDB\x8D\x01\xE2\xA0\x06\x33\x99\x98\x66\x54\x9B\x99\x4B\x74\x2F\x27\xC7\xF6\xA9\xC0\x21\xB3\xBB\x36\x0C\x4E\xAF\xA6\x86\xA0\x1D\xFE\xAB\x47\xB2\x5E\x82\xC9\xC4\x84\xC8\x22\xC6\x20\xF3\x2E\x5F\xBB\x54\xF4\xB2\x90\xB4\xC8\x10\xCE\x1F\xE6\x99\x15\x01\x90\x83\xCB\xC7",
"\x25\xC8\x42\x9F\x20\xDC\xC8\xE8\xAB\x90\xAE\x9A\x04\x3E\x08\xEB\x9D\x1F\xEE\x0A\x89\xC9\x60\xAD\xB3\xED\x8B\x81\xD0\x92\xF8\xAC\x23\xFC\xBB\x0B\x49\x15\x4F\xDD\xC5\x00\xC6\x65\x87\xA1\xBC\x99\x40\xF4\x9F\x70\x1A\x97\x17\xAA\x7F\x92\xA1\xEE\x4C\x82\xF9\xB1\x50\xC9\xC4\xA4\xC2\xA1\x9D\x43\xF9\x97\x34\xB5\xB2\x03\xAE\xA4\x42\xB4\x14\xC0\xBE\xA7\xCF\x50\x9C\xA3\x91\x84\xBD\x14\xB4\xB9\x85\x5B\xE7\x16\x42\x86\xB0\xFA\xB1\x98\x8B\xA0\xC3\x4D\xA5\x1C\x1F\x48\x8D\x1B\x1B\xCC\xB0\x98\xBE\x17\xE2\x01\x0F\xC0\x4B\xE2\xA0\x19\xAE\xB3\x23\xA3\x2C\xD0\x1E\xE9\x19\xB4\x66\xC8\x06\xD1\x98\x60\xC9\xFE\xA0\x00\x3B\xA5\x11\x2C\xAC\x94\xBF\xBF\xC9\xB6\x7D\xA0\xA4\xA9\xC9\xA2\x55\xC9\x52\xCF\xA0\x11\xA4\x7F\xB2\x4C\x67\xA1\x97\xC1\xC8\x0E\xB4\x02\x6B\xC9\x01\xD2\x98\x70\x4C\x44\xC7\xC9\x65\xCF\xA8\x47\xA0\x63\x89\xA2\xA1\x9B\x44\xCA\xC5\x1E\xBF\xCC\xFB\xB3\x32\x4E\xBF\xB7\x43\x48\xC5\x4A\xBE\xBD\xAE\x2D\xA5\xD1\x95\xB1\x3B\x2F\x9A\x88\xB0\xBF\xA9\xAF\x7F\xA1\x9B\x86\xBC\x35\xB4\x7D\xAF\xBF\xEA\xB3\xAB\x97\x48\xA0\x8A\xBD\xBC\x9C\x7D\x87\xCD\x8B\xB8\xC1\x70\xA3\xFD\x80\x9B\x4D\xA0\x7A\x9F\xA5\xD4\x82\xA5\xEE\xBA\xC2\xB0\xBF\x7E\xA2\x37\xCD\xB6\x6F\xAD\xA5\x39\xB6\xFA\x84\xBC\xDF\xCB\x9B\xA7\xBC\x72\xBF\xA6\xD9\xBE\xDE\xB5\xBD\x20\xA6\x95\xB8\xBC\xE4\xBF\xA8\x78\x03\x99\x87\x31\xDF\xB8\x9A\xDD\xAC\x3C\xBA\xA7\x54\x15\xAB\x7E\xA6\x0C\x5A\x58\xE6\xAD\x07\x91\xCF\x51\x6B\x3E\xE5\x19\xBA\xA4\x63\xD5\xCD\xDF\xAE\xB6\xF8\xAA\xFB\x8B\xA8\xE3\xC7\x96\x99\xAC\xE7\x0B\xC7\xDD\xB3\xC4\xBA\xCC\xEB\xBD\x9B\xFB\xAC\x83\xD8\xBE\xE8\xA2\xFB\x94\xAD\xCF\x15\x9B\xEA\xA9\x44\xAB\x99\x3D\xC7\x94\x97\xA9\x97\xAE\x54\xDD\xAB\xEE\xA3\x5D\x60\xAF\x21\xD4\xAA\x5A\xBB\x52\x9B\xD3\x4F\xB0\xA9\xD7\x5E\x43\xC2\xB6\x6B\x11\xA2\xD3\xAB\x58\xB6\xBE\x2F\xAE\x41\xCD\xB6\xA3\xAD\x83\xC9\xAB\x45\xBB\xAA\x29\xD5\xA3\x9F\xD0\x9B\xA2\x52\xAE\xD3\x8E\xA3\xC1\x56\xC8\x47\xDC\xA8\x7C\xCF\x55\xD2\xA9\xA6\xA4\xAB\xB9\x5E\x2F\xE3\xC2\x97\x91\x75\xEE\xAB\x10\x10\xAB\x83\x52\xAE\x8E\xAD\xE0\xC7\x4E\xF6\xA8\x5E\xAB\x3E\x15\xD2\x8A\x97\xD1\x40\xB6\x51\xE4\xB4\x87\xDC\xAA\x3A\xD1\x99\xA0\xD0\x23\xD5\x8A\xE8\xB2\x55\xDF\xD2\x39\xD4\x48\xEC\xD0\x32\xDF\x88\xD0\xC1\xDF\xB1\xD1\xF6\xCB\x46\xE2\xC1\x1A\xD0\x69\x9F\xC6\x90\xCF\xAA\x3B\xD5\x45\xCA\xB4\xAB\xA8\x55\xB7\xD1\x53\xA0\xD3\x6A\xD4\x47\xE1\xAA\x59\xC8\xA4\xD2\x5F\x36\x48\xB6\x98\xA9\x11\xC7\xD0\x35\xCC\x6D\x9C\xB4\x67\xBF\xAC\x0D\xA2\xD0\x56\x39\xD1\xA1\x31\xA5\xAE\x9D\x04\xBB\x93\xAA\xB5\xB4\x1C\xC3\xC7\xA8\xED\xCE\x6D\xCD\xBE\x9D\xBF\xCA\x8C\xCF\xDB\xA1\x7A\xFE\xCF\x78\xBE\xC3\xF5\x98\xF0\x99\xCF\xD8\xB9\x5C\xDC\xCE\x76\xD2\xBD\x11\xD2\x3C\xCC\xBC\xF2\xCE\x78\x9F\xA7\x79\xD2\xBC\x94\xBC\x3D\xDC\xCB\x44\xDF\x5D\xE8\x00\xDF\xA7\xD5\xA4\x8A\x46\xFD\xBA\xF5\xA1\xA0\xF6\xB6\x7B\xAE\x41\xFD\x24\x40\xFF\xCA\x97\x94\x5F\xE8\x13\xAF\xC8\xAF\xC1\xD1\x4E\xFD\xBA\xFF\xA0\x60\xDA\xBF\x80\xAF\xAF\x2F\x42\x49\xFB\xC2\x11\x09\x65\x81\xCE\x66\xD6\xB0\x8C\x25\x94\x4C\xC1\xD3\xCB\xAB\xAC\xB0\xA8\xC8\xD5\x57\x98\xC4\x88\xD0\x47\xD2\x89\xC2\x9B\x89\xBB\x4F\xCA\xD3\x49\xF7\xCC\x7F\xBC\xAD\x86\xC1\x74\xC8\xC0\xC4\xCF\xCB\x9A\xD6\x5F\xC7\x9B\xAF\x47\x85\x1C\xD2\x3F\xB2\x09\xE1\xC4\x11\x05\x64\xE5\xD1\x22\xD4\xC8\x3E\xC5\x4E\xCB\xAB\x25\xC2\x02\x16\xB5\xC1\xCD\xD3\xDD\xCC\xF5\xA0\x00\x29\xC2\x48\xCD\xB2\x15\xDD\xC4\xF1\xD3\x0F\xF7\xCD\xF1\x27\x66\xF3\xCB\x6F\xDC\x9C\x43\x0A\xBF\x00\xD2\xAD\x95\x82\x88\xCB\xA1\xC5\xCF\x2D\xCC\x60\xD3\x2D\x3B\xB7\x79\xE5\xD7\xA7\xCB\xBE\xEF\xC5\x7E\x80\xC5\x43\xCD\x68\xAE\xC4\xC1\xC8\xB4\x98\xB6\x60\xC8\xC4\x45\xC2\xB0\xC1\xB7\xCD\xD6\xB4\x8E\xC7\x09\xCC\xD5\x11\xB9\xA0\xDF\xD6\xAA\xAF\xB2\xA2\xB7\x47\xF5\xB5\x46\xB0\x95\x9A\xC7\x31\xDC\xC4\x48\xDD\xD5\xBD\xD9\x20\xCF\x8A\xDA\xCB\x88\xD4\xD9\xA6\xB0\x61\xE7\xB5\x5D\xB0\xB5\x9D\xCC\x3D\xDF\xC4\x0C\xDB\xD8\xB0\xC4\xAB\xDA\x53\x88\xD6\xB9\xD0\xD9\xC1\xC7\x6A\xB3\xD8\x53\xC6\xB3\xC3\xB5\xD0\xD7\xC4\xA5\xB7\x14\xD6\xCB\xB0\xD4\x6C\x97\xB5\x4F\x07\xD2\xDB\xB4\x68\xEC\xD6\xA3\xD4\x89\xD1\xD9\xFD\x90\xDB\x4B\xD8\x15\xDC\xDB\x55\xCB\x92\xC0\xB4\xD5\xDF\xD9\x64\xDA\x69\xFB\xD8\xAD\xD1\x95\xCF\xD8\xE1\xDE\xC4\x0B\xDB\x60\xE2\xDB\x62\xB9\xB8\xA9\x02\xD9\xCF\xD9\x02\xC1\x66\xE9\xD6\xE8\xC9\xB7",
"\xC5\xC4\x1B\xD0\x67\x18\xDF\x64\xCC\xC6\x73\xB7\x8F\xCF\xC7\xBA\xAB\x03\x4D\xC8\x31\xC9\xD4\x38\x89\x86\xF2\x99\x24\xD4\xCE\xF6\xB0\xDF\xBD\x09\x2C\xD8\x9C\xD5\xA4\xBA\xD7\x9B\x6B\xD9\x6E\xED\xDA\x9C\xD7\xB7\xBA\xD8\xD3\xDC\xD9\x60\xDA\x72\xF5\xDB\xB7\xD0\x89\x8D\xD6\x31\xD7\xB7\x47\xDE\x6B\xC4\xAA\xC0\xDB\xB3\x8D\xDC\xF2\xDD\xDB\xCA\xD8\xBF\xBB\xDD\x58\xCF\x88\xB4\xB7\xE2\xD8\xB5\x99\xAE\x79\xF4\x17\xC7\xD9\x90\xC1\xDE\xCF\xD3\xDC\x74\x04\x7A\xCF\xC3\xCB\xDA\x56\xCB\xB5\x61\xB1\xD8\x9A\xD8\x9B\xB1\xDD\x47\x2E\x4A\x53\xB7\xBE\xC1\xCA\xF3\xD4\xB6\xBF\xB7\x03\xC2\x70\xF9\x9B\xFC\xB0\xCB\xD3\xC2\xBE\xA0\xBE\x2E\xC2\x03\x19\x7D\x42\x1E\xDF\x62\xC3\x5B\xD2\x9C\x7D\x94\x45\xD4\x9B\xE5\x94\xC5\x70\xA3\x7F\xF4\xC3\x19\x05\x0F\x89\x09\x03\xE1\xE0\x72\xCD\x8B\x98\xB9\xBA\xCE\xB4\x23\xDA\x58\xDB\x1E\x69\xA4\x2F\xEC\xA2\xD3\x46\x7D\x7E\xA3\x5B\x53\x3F\x1E\xE2\x5D\x06\x99\x12\x04\xEA\x24\xE0\xF3\x93\x4C\x6D\x9E\x31\x4F\x9C\x40\xBE\xAD\xE7\xDF\x45\xB2\x2C\x4B\x4D\x77\xB8\xC6\xEF\x10\x35\x86\xDA\x86\xC4\xB7\x30\xE6\x0D\x0C\x4A\xA7\x4E\x51\xC1\x02\x52\x5A\xE1\x6A\x51\x3F\x07\xD2\x6D\xA3\x99\x37\x48\xD0\x93\xD2\x86\x3D\x3E\xC2\xAB\x22\xEE\x93\x40\xCD\x12\xEA\xAE\xBF\xA4\x5B\xEB\xD7\x6E\x8E\x97\x1C\xAF\x44\xA7\xBA\x55\xBE\x21\x55\xAB\xB6\x88\x58\x54\x3A\x4F\x19\xE2\x70\x3D\xAA\xA2\x01\x1D\x0B\x32\xA6\xA8\x0F\xB8\x4B\xF8\x30\x81\xD9\xA0\x05\xE7\x8B\xB4\x02\x04\x04\x75\x6F\xE0\x28\xC9\xB6\x78\xA8\x71\xFB\xA4\x86\x5A\xCF\xF7\xA6\x55\xF6\xE2\x7A\xA2\x9A\xF6\xA4\x47\x15\xD2\xFD\xCC\xA0\x96\xCF\x8D\xB8\x40\x8E\x51\x46\x5E\xD4\x6A\xAF\x3D\xF7\xCE\x90\x19\x9F\xFD\xE3\x3F\xA5\xAE\x75\xE0\x3F\xFE\xE2\x3C\xEF\xC7\xBC\xA5\xC2\xC7\xDF\xDA\xC8\xA1\xB6\xB7\x01\xD0\x87\xB8\xC8\x41\x1A\xC9\xAC\x5B\xED\xB5\x01\x38\xE5\x2B\x61\x6E\xEA\xDD\xAE\x17\xD4\x07\xD6\xAB\x1B\xEF\x89\xE8\xD3\x90\xD0\xAA\x63\xD5\x47\xFB\xD3\x8A\xA5\xA2\xDE\xD3\x89\xDD\xD0\x61\xD2\x65\xC2\xD4\x11\xDF\xA2\xF5\xCB\x89\xC2\xD6\xC0\xD4\x46\xD6\xAA\x1B\xD4\x6E\xF7\xD2\x8A\xC8\xCF\xBB\xE6\x47\xF4\xB5\x3E\xD5\xCC\xFF\xD1\x9A\xD8\xB1\xC9\xE7\x48\xDB\x99\xE8\x56\x56\xEA\xE3\xFA\x96\xC5\x0E\xB4\x6C\xB5\x00\x51\x07\x12\x5C\xE6\x1C\xE9\xD4\x51\xB8\x08\x0E\xD2\x28\xDF\x36\x7F\xD4\x12\xF7\x3C\x55\xD0\xB5\xAA\xA6\x2C\xDD\x7D\xAE\xDA\x5A\xAC\xAB\xFA\x93\x9C\xDE\x0B\xB8\xA7\xC4\xD7\xBC\x95\xD6\xE4\xEA\xE2\x01\xEC\xE7\x43\xE9\xBF\x9A\xB0\x1B\xF9\xE6\x36\x04\x1D\x27\x08\x81\xEF\xCD\xDD\xAE\x66\xB8\xB8\xAF\xDF\x7C\xD2\xBF\x53\xDD\xA0\xD2\xD4\x43\xF0\xD0\xC3\xC9\x53\xDD\x1D\xCA\xAD\xCE\xA7\xE4\x82\xAA\xD4\x80\xA8\xA1\xC6\xDF\x47\xDD\xA4\xA1\xAF\xA4\xD8\x37\xA4\xAB\x4C\x69\xE6\xF8\x96\x3A\x04\x58\xA7\xD0\x30\xD6\xE1\x8A\x98\xE6\x38\xA6\x30\xB6\x03\x03\xE3\x08\x0F\xE6\xA2\xE5\xDF\x78\xB1\x62\xD0\xBF\xBA\xD5\xB7\x5C\xDE\x96\x39\xB6\x2C\xCE\xC9\xD8\x96\x16\xD8\xBF\x11\xC7\x06\x1B\x8D\x84\x03\xD4\x90\xE3\x53\xCB\xB6\x36\xE8\x7D\xE9\xDA\xF5\xD9\xD3\xFA\x64\x84\x3A\x5D\xFD\xE5\x16\xC0\xEA\x18\xC8\x03\x32\x95\x42\x16\xEA\x46\xE9\xD9\xBD\xD5\xC7\x96\xAA\xD0\xD6\x7E\xAE\xE8\xE8\xAC\x58\xC1\xB1\x63\xDA\x83\x3C\xEA\x2E\x9F\xE4\x72\xC3\xAA\xDC\xC3\x18\x09\x03\x27\x95\x42\x0E\xEB\x59\xE9\x51\xCD\xD6\xF0\xA9\xD4\xAF\xD5\x79\xB0\xBD\xD3\xD6\xC0\x15\xD6\x7B\xB7\xAD\xC8\xD4\x46\x5D\xE4\x67\xEE\xA7\xE9\xEB\x5D\x4B\x76\xB2\x00\x0C\x1A\x83\x09\x08\xB1\xF1\xEB\xEE\xA0\x61\xB5\xBB\x96\xB3\xCE\x79\x98\x5C\xE3\x64\x0C\xBC\x9F\x36\x74\x5A\xF0\x03\xE0\xC2\x40\xA2\xC7\x18\x0C\x0D\x27\x09\x67\xE7\xC7\x6D\x9C\x24\xD3\xE1\x8C\x06\x91\xA0\x00\x46\xD9\x9B\x2A\xC8\x72\xEC\xC8\x8F\xAF\x92\x99\xA1\xEA\xC2\xC9\xA7\xC3\xB4\xD8\xEC\x93\xCD\x72\x28\xC8\x08\x09\xED\xDD\xDD\x23\xE9\xD8\x4B\xBF\xDA\xB3\xCB\x3F\xCF\x9C\xEE\xC7\x22\xE7\xC9\x8C\xC9\x92\x9B\xCA\x6A\xE4\xA6\xBB\xED\x21\xF1\xC9\xF2\x9E\x8D\xB3\xC9\x38\xD3\xC9\x64\x9E\x4B\x89\x08\xE9\xE2\x86\xB4\xCA\x08\x0A\xC7\x1A\xEA\x6F\xC4\xAD\xE0\xE7\xBB\xC4\xA9\x3C\xC1\xB7\x85\xDD\xDC\xAB\x67\x33\x08\x8F\xFA\xC6\xAE\x1E\x9F\x20\xBD\xE5\x8A\x35\xC0\x95\x72\xC3\x0D\xF1\xA9\xB9\x02\x0B\xE5\xB3\x9D\x88\x1F\x72\xF4\x8D\xCC\xA0\xA5\xAC\xA7\x94\x9E\xD7\xB8\x99\x54\xBA\xBA\xD3\xA0\xE3\xFF\xD2\xA2\xD6\x0B\xC6\x92\x74\x9A\x58\xB4\x8E\xBA\x46\xBE\xE9\x86\x98\x52\x89\x10\x0C\xF0\xE2\x9D\xBA\x26\x9D\xA3\xEF\x7D",
"\xB0\xB5\x6E\xD6\xBB\x48\xE5\xBB\x59\xBE\x58\x00\x03\xA5\x35\xF2\x51\x68\x08\xFD\x6A\x06\x9C\x0D\x27\x08\x11\xFC\x3C\xDD\x69\xDB\x81\x3A\x8F\x9D\x85\xEC\xA4\x7B\xDD\xB9\xEC\xC5\x3F\xBE\xA5\x3D\x07\x63\xDD\xEF\x00\xD4\xC6\xF9\x99\x57\x68\x6B\xD0\x93\x8F\x5C\x63\x09\xFB\x76\x64\x9A\x23\x04\x75\x3F\xF4\x79\x86\x17\xB6\x93\x0C\xA7\xDC\x57\xF5\xF1\x5A\x9C\x18\xA7\xBB\xA4\x93\xE4\xA6\x9B\x51\x1C\x1F\xF8\xEA\xA9\xF3\xF1\x5E\xA1\x37\xC8\xF2\xD0\x9A\x1F\x50\xF6\x7F\x00\x20\x01\x27\xC8\x4C\xF1\xD2\x2D\x9B\x54\xE1\xC7\x8B\xE8\x68\xD9\x4A\xDD\x01\x95\xF0\x9F\xF8\x5E\x1B\x8B\xF2\x73\x9D\xE4\xCC\xD7\x2B\x50\x09\x32\xF0\x40\xE7\xF3\xBC\x92\x25\x54\x13\x67\x77\x10\x28\xA5\xCD\xD7\xEE\x90\x00\x0D\x8E\x9F\x9C\xEB\xE7\x37\x13\x4E\x37\xF2\xC6\x09\xE7\xDF\xF1\x00\xC4\xF3\xE4\xCB\x8C\xF0\x9F\x67\x14\x9C\x4B\x68\x8F\xEE\x48\x0A\x5F\xD1\xF0\x3A\x17\x03\x03\x1B\x89\x42\x16\xF4\x88\x9A\xCF\xE1\xF3\xC7\x93\xE6\xBC\xAC\x80\xD1\xD0\x56\xF3\x30\xEC\x20\x17\x2D\xE8\xFD\x66\xA4\xF7\x10\x91\xF6\x58\x2E\x00\x1A\x0F\xD2\xB1\x72\x40\x0C\xF3\x86\xF6\xCD\xE8\x86\xE0\xE3\xC8\xD8\xB5\xA8\xF5\xF3\xFC\x3B\xED\x18\x47\x53\xFC\x18\x29\xF5\xD2\x2D\xB8\x69\x89\x21\x01\xF7\x4C\xF1\xEB\xA2\x03\x93\xEF\x9F\xFA\x95\xD3\xC3\xBD\x32\xFE\x32\xA1\xF4\x96\xE2\x5D\xA4\x5C\xCB\xEB\x3B\xE5\x7F\x05\x7A\x16\x37\xDA\x17\x06\x9B\x16\x27\x08\x6D\xFC\x3C\xFA\x15\xDB\x83\x24\x5C\xE9\xFA\xAE\x98\x14\xF7\xAF\xF5\xDE\x14\xE3\xDA\x9E\xDA\x41\xF1\xF0\x74\xA9\xC9\x84\xE5\xE6\x99\xBA\x9D\xAD\x3B\x4D\x64\xEE\x9C\x4A\x85\x8A\x44\xAF\xF7\x3C\xBE\x9A\x95\x81\x79\xFB\xC5\xFA\x14\x20\xBB\xF7\xDF\x4C\x7B\xA6\xA9\x9C\x96\x62\xD4\x4F\x26\x73\x84\xD8\x92\xC7\xC2\x80\x5E\xF6\x11\x27\xB9\x71\x89\x08\x0F\xFC\xD8\xEB\x3B\xB6\x91\x13\x9E\x6D\xB8\xF2\xF1\xA8\x4B\xB4\x4F\xB6\x2F\xAF\xDF\xE2\xBB\xDA\x39\x9B\xA7\x6B\xD0\xD6\x09\x5D\xFA\xF0\xD6\x80\xC3\xF4\x03\x6C\xB8\x14\x27\x08\x95\xF2\xE4\xC5\xF7\x53\x80\xEE\x1D\xFE\xEE\xBB\x08\x6B\x60\x13\x64\x00\xD5\xAC\xA5\x1E\x2D\x90\x61\xAF\x16\xEF\x4B\xD8\xE1\xC4\x99\xF9\xBB\x67\x5F\xF9\x98\x56\xA6\x16\xC5\x64\xC7\xF0\xF7\x65\xB4\x98\x6C\x02\x63\x6A\xC5\x84\xF9\xB4\xAB\x66\x6B\x3A\x67\x4A\x9A\x63\x13\x96\x53\xFB\xAF\xF1\x01\xDE\xE6\x20\x19\xFA\x96\xB3\xD9\x45\xF7\x1C\x19\x63\x17\xFA\xCA\xDF\xF5\x28\xE2\xE1\x84\x66\x1C\x74\x0A\x49\xB6\xB9\x33\xF7\x4A\xE0\x39\xA2\x00\x49\x8B\x64\xD8\xDF\xDC\xFE\xF8\x10\x0F\xF6\xBF\x30\xBF\xFE\xA5\xF9\xE0\x04\x26\xFA\x43\x61\xF5\x94\x5A\xD5\xEB\x3B\x55\xFA\xB2\x6A\xF4\x19\x00\x0D\x27\x09\xE1\xE5\xF1\x0D\x9A\xCF\xFA\x88\x39\x01\xF6\xAD\xE1\x20\xC9\xC2\x9F\xC0\x1F\x5B\x09\x29\xCF\x91\x96\x49\x58\x13\xE5\x48\xC1\x6A\x85\x8A\x9F\x04\x15\x35\xE3\x45\xB2\xFC\x4B\xB6\xA3\xA8\x0C\xA3\x8D\xF9\xF8\xD9\x14\xD7\x7C\x08\x62\x90\xBD\xF9\x98\xFD\x39\x83\xA5\x3F\x5C\xFB\x0E\x4A\xEA\xC2\xFD\xA4\x31\xF8\x89\xFF\xAF\xF3\x01\x35\xC6\x20\x39\xFC\xAE\xFD\xE6\xAC\xA4\x8A\xEE\xEC\xEF\xB9\xE8\x1E\x1E\x97\x9B\xEE\xB9\x99\x86\x8D\x91\x1B\x91\xE3\x60\x7C\x93\xC3\xFC\xCA\xF7\x71\xAD\xE8\x78\xEF\xA1\xF7\xE6\x50\xF7\xA5\xB9\x3A\xCB\x34\x6C\x44\x64\xE4\xB6\xFC\xC0\xF8\x41\x7F\xFA\x43\x4B\xF5\xB9\xFB\x20\x3B\xFC\xEF\xF0\x77\x4D\x9A\xEF\xE6\x0A\xF4\xDE\x81\x82\x3A\x9C\xB5\xFC\xDB\xBC\xE8\x7C\x8F\xC8\xFF\xD1\x5C\x91\xE5\xF2\xDC\xDE\x1D\xB2\xF2\xF2\xD0\xFA\xC6\xD4\xBF\xEC\xB1\xEA\x9E\x39\xCB\x31\x10\x25\x7C\x18\x48\x2D\x56\x05\xC6\x0A\x1A\x4C\xC5\x6A\x7A\x31\x02\x44\x49\x10\x0A\x80\x88\x4C\x01\x85\xEC\x44\x48\x47\x1E\x9F\x76\x55\x75\x78\x28\x57\xDC\x7D\xFA\x66\x71\xFA\x73\x7D\x06\x20\x67\x5D\x51\x74\x1C\x5B\xD2\x59\x50\x64\x4C\x0E\x00\x77\x46\x04\x23\x82\x4C\x7C\x7C\x68\x6D\x76\x5E\xFC\x6C\x9C\x71\x4D\xB8\x5F\xB3\x6E\xE9\x57\x67\x81\x5E\x5D\x7E\x7A\x40\x73\x5E\x75\x72\x51\x9E\x4B\x5E\x9F\x51\x78\x76\x9E\x7A\x5E\x91\x5E\x75\x58\x5D\x61\x5E\x5B\x66\x09\x85\xBB\x72\x56\xA1\x69\x79\x5C\x49\x6C\x80\xA5\x68\x74\x6C\xF3\x42\x72\xFF\x64\x0C\x8B\xAA\x7F\x67\xC4\x56\xAB\x6C\xAA\x60\x67\xB1\x68\x0E\x8B\xB2\x3A\x80\x8F\x5C\x0F\x88\x9E\x6A\x67\xBE\x5C\x10\x89\xD2\x77\x5F\x84\x74\xF1\x52\x03\x39\x00\xC9\x5E\x41\x05\x06\x82\x81\x64\x60\x30\x68\x9B\x6C\x66\x2F\x4F\xFD\x7F\xA0\x54\x69\x52\x83\xF4\x50\xD1\x41\x58\xC5\x64\x60\x7C\x0E\x57\x76\x0F\x62\x5A\x7B\xC0\x7B\x5F\x27\x06\xFF\x57\x9C\x69",
"\x81\x39\x61\x11\x8B\x9C\x47\x81\xE5\x78\x64\x74\x70\x56\x1C\x50\x75\x4F\x7D\x62\x5F\x80\xEB\x4C\xA5\x71\x03\x3C\x5F\x27\x2B\xAB\x7F\x07\xBF\x62\x81\x81\x0A\x82\xAA\x4D\x76\x85\x81\xCD\x4E\x65\x63\x1A\x66\x77\x1D\x82\xD8\x42\x60\x8C\x81\x14\x54\xE9\x72\x00\x16\x63\x40\x06\x81\x68\x81\x94\x81\x72\x65\x66\x64\x17\x68\x5A\x6C\x78\x5E\x61\x60\x16\x72\xDE\x45\xB2\x7A\x80\x29\x6D\x6B\x06\x67\x6C\x60\x1D\x81\x06\x51\x0A\x86\x4F\x33\x00\x0D\x01\xFE\x42\x04\xE3\x7D\x81\x6D\xAF\x70\x58\x00\x6C\xE4\x71\xB9\x5F\x6F\x4E\x60\xE0\x6D\x63\x71\x4D\x01\x6E\xF7\x67\xB8\x4E\x6C\xC9\x83\x91\x57\xFA\x6F\x23\x53\x62\xC5\x6C\xBD\x76\x81\x29\x44\x1E\x8E\x82\x7A\x81\xB7\x63\x0C\x03\x03\x0C\x01\xA4\x38\x38\x85\xD0\x58\x6E\x7D\x62\xBF\x62\x57\x4F\x7E\x0A\x6D\x03\x51\xB6\x51\x83\xB4\x5B\x11\x67\xC9\x76\x6C\xD0\x83\xB1\x52\xE5\x54\x6C\x77\x4E\x35\x87\x85\x47\x72\xEE\x73\x09\x89\xB9\x6F\x58\x61\x70\x3A\x83\xB7\x52\x6E\xEC\x82\x11\x68\xB0\x4D\x83\xC7\x83\x33\x8D\x84\x72\x83\xD6\x5C\x3D\x8E\xDD\x64\x66\x4E\x59\xF4\x6F\x05\xA5\x01\xBB\x81\x19\x04\xE9\x75\x00\x61\x63\x40\x01\x86\x68\x82\xFD\x68\x42\x52\x6F\x59\x77\xE9\x7A\x66\x6F\xAE\x49\x82\x81\x77\x22\x8C\x0D\x99\x73\x33\x02\x0D\x0E\x0F\x1C\x1A\x27\x87\x38\x83\x77\x68\x80\x9F\x79\xEE\x61\xB8\x7F\x83\xDF\x6C\xEF\x6A\xCC\x58\x6D\x72\x6F\xF4\x6D\x88\x79\x6C\x10\x6D\x8B\x75\xB4\x51\x76\xC9\x6E\x69\x68\x5F\x4C\x6F\x83\x59\xDC\x4B\xB5\x7C\x84\xD0\x6E\x4F\x80\x13\x87\x6E\x62\x6D\xE2\x66\xBD\x7F\x6E\x8C\x6E\xD3\x6F\xBC\x5D\x6D\x46\x86\x4D\x81\xBE\x55\x6E\x88\x72\x3E\x85\x0E\xA9\x52\x2E\x86\x20\x63\xB5\x44\x62\x38\x87\xD5\x66\x8A\x47\x6C\xD8\x6E\x54\x84\xBC\x56\x6E\xE8\x7A\x8B\x74\x14\x90\x85\xF3\x63\xF2\x6A\xB8\x7F\x6E\xDA\x6D\x4F\x89\x16\x92\x6F\x5B\x84\xAC\x5A\x14\xB4\x84\x60\x86\xE0\x67\x16\x97\x83\x52\x6E\x33\x87\x68\x63\x6D\xE4\x4D\x9B\x65\x15\x83\x81\x7D\x59\x4B\x81\x68\x6C\x6D\x71\x86\x28\x64\xBC\x4B\x85\x5C\x74\xF0\x65\x10\xBB\x85\x37\x85\xEF\x69\x13\x89\x74\xAA\x63\x3D\x89\xB4\x48\x86\xD9\x6E\x53\x8B\xBD\x52\x86\x79\x87\x62\x82\x17\xBD\x85\x5E\x85\xDC\x65\x17\x95\x86\xA9\x62\xE3\x68\x19\xA3\x5B\x7A\x84\x23\x63\x15\x9C\x86\x3A\x57\x5F\x80\x08\xAA\x82\x53\x79\x56\x85\xB3\x45\x86\x37\x6F\x61\x84\x17\x8A\x86\xEA\x82\xF0\x60\xB4\x5D\x85\x2F\x68\x64\x82\x1A\xA1\x6E\xD9\x4C\x50\x86\x17\x91\x86\xBC\x84\x69\x8A\x19\x95\x6D\xA8\x87\x5A\x89\x18\x8D\x85\xA1\x87\x53\x88\x17\x82\x87\xB5\x85\x4C\x8C\x17\xB2\x5A\x7E\x85\x2E\x87\xCD\x63\x84\x2C\x77\x0C\x07\x03\x3C\x62\x06\x04\x76\x88\x11\xA7\x6B\x63\x7E\x28\x5C\x11\xA6\x85\xDF\x75\x70\x8D\x8A\x75\x63\xA4\x6C\x3B\x36\xBA\x51\x63\x7D\x01\x73\x74\xDA\x75\x5F\x30\x00\xB7\x4E\x2D\x58\x63\x64\x00\x36\x2B\x8D\x64\x76\xB5\x4C\x10\x0A\x1E\x98\x76\xCF\x74\x69\x7B\xEA\x41\x38\x09\x04\x7F\x85\xDD\x69\x63\x50\x1B\x4D\x7C\x59\x5C\x77\x9F\x79\x78\x8E\xB7\x47\x65\x56\x66\x3D\x66\x1E\x94\x57\x59\x07\x3E\x6D\xDB\x74\x87\x23\x65\x49\x62\xDC\x75\x76\xC4\x77\x6D\x76\xDC\x74\x6A\x0A\x64\x6B\x7F\x06\x30\x64\x83\x69\x10\x80\xDB\x62\x00\x00\x65\x45\x64\xDB\x4F\x27\x15\x88\x6E\x72\xBA\x59\x88\x0C\x67\x19\x0E\x90\x54\x66\x0D\x56\x75\x77\x84\x5C\x77\xA7\x76\x46\x61\x67\x67\x61\x28\x62\x47\x5C\xDB\x4C\x77\x9F\x39\xF0\x41\x03\x39\x87\x70\x01\x0C\x0B\xEA\x43\x49\x09\x04\x90\x82\x86\x71\x00\x7B\x59\x0C\x0B\x81\x6C\x82\x22\x02\xA0\x42\x22\xA0\x6C\xA8\x25\xD9\x53\x0B\x87\x77\xA6\x75\xCA\x6E\x16\x32\x64\x19\x04\x91\x81\x31\x45\x70\xA4\x76\x7D\x89\x23\xAE\x05\x3B\x8A\x66\x7C\x25\x94\x7A\xC3\x7B\x40\x03\xEC\x46\x52\x56\x8A\x78\x56\x24\xAB\x82\x1D\x6E\x92\x8C\xDD\x70\x82\x24\x6F\x85\x87\x22\x9F\x62\x1E\x66\x98\x60\x07\x3E\x4F\x1C\x7B\x64\x20\xC2\x53\x26\x94\x7A\x09\x76\x10\x3A\x89\xE6\x48\x0A\x7D\x3E\x69\x0B\x18\x69\x4A\x5B\x04\xA9\x83\xDE\x4D\x0E\x7B\xC3\x40\x05\x36\x8A\x6B\x15\xC3\x55\x6F\xAB\x70\xA1\x8A\x31\x7F\x70\x87\x88\x3E\x6E\xC3\x71\x70\xA9\x0D\xA3\x5D\xA6\x6E\x81\x4C\x73\x65\x2E\xC4\x68\x73\xAE\x69\xA6\x86\x78\x1B\x8A\x36\x81\x15\x88\x65\x53\x71\xA3\x78\x65\x26\xC5\x78\x7B\x9B\x4D\x85\x7A\xC5\x55\x80\xF6\x04\xDA\x1B\x3D\x00\x78\x72\x54\x4A\x5A\xE8\x54\x55\x67\x73\x5B\x25\x95\x15\x14\xD0\x4A\x9D\x8E\x7E\x21\x70\x24\x08\xD9\x4A\x27\x83\x04\x7C\x88\xAF\x8A\x14\x29\x70\x80\x89\xA0\x5B\xDF\x6E\x70\x38",
"\x70\xA4\x82\xC3\x49\x8A\x8B\x07\xA2\x8D\x19\x9D\x69\x9F\x62\xA1\x8B\x2C\x91\x50\x93\x88\x10\x75\x29\x83\x71\x3A\x4E\xA7\x86\xCE\x76\x73\x4F\x71\xA7\x85\x94\x06\x71\x9E\x4F\x39\x71\x2A\x83\x67\x72\x7F\xA6\x51\xE6\x47\x53\x57\x70\xEB\x7E\x73\x6C\x8A\x5D\x71\xDA\x10\x2B\x80\x4D\xB2\x89\x8D\x78\x01\x92\x4C\x68\x72\xAD\x2B\xE3\x7B\x71\x53\x0A\x01\x88\x2F\x92\x84\x31\x02\x31\x49\x10\x3E\x8B\x88\x4F\xBE\x8D\x34\x47\x8B\x22\x03\xBA\x76\x7D\x7B\x50\xD5\x4E\x24\x7C\x4F\x4F\x84\x11\x84\xD9\x44\x03\x26\x00\xD6\x34\xC4\x8A\x12\x9A\x69\x65\x55\xA0\x85\x51\x6C\x72\x4B\x56\x2B\x78\xA7\x62\x69\xD1\x72\xC1\x65\xCB\x6D\x72\xB7\x70\xA0\x60\xCD\x7A\x69\xB2\x62\x2B\x8C\x5B\x70\x69\xD1\x7C\xB4\x62\xCC\x48\x55\x8E\x8A\x31\x79\xCB\x51\x55\xB2\x72\xC1\x6C\xCC\x76\x69\xCE\x73\x2B\x72\x84\x5D\x8C\x10\x6F\x34\x75\x56\x7A\x2E\xF9\x80\x98\x75\x31\x9C\x69\x18\x8E\x4B\x51\x32\x8F\x73\x79\x68\x9B\x6F\x2C\x9F\x8C\x19\x8F\xD0\x86\x33\xAB\x68\x38\x8F\xF8\x62\xE5\x68\x8C\x71\x7B\xCA\x88\x37\x7E\x69\x64\x00\x2E\x78\x8F\x70\x8C\x1D\x8B\xB3\x83\x33\x8B\x55\x2E\x8D\xA0\x64\x32\xB9\x8C\x57\x7B\xCE\x85\xD9\x65\x24\x04\x04\xF8\x29\x10\x3E\x1C\x9D\x6E\xC1\x4C\x0E\x1C\x1A\x6B\x8C\xF3\x44\x2F\x03\x8C\x8F\x76\x26\x87\xE5\x67\x2F\x85\x65\xEE\x5D\x13\x16\x50\x6F\x8D\xFB\x4C\xF6\x39\x4D\xE6\x0C\x49\x4F\xB5\x0F\x12\x48\x64\xB9\x55\x33\x51\x66\x7B\x8E\x87\x89\x37\x8C\x6B\x77\x3F\x94\x00\x3F\x7D\x8D\x5E\x2F\xEA\x08\x6B\x25\x01\x81\x8F\x27\x63\x38\xAE\x4C\x44\x01\xE2\x8C\x22\xA6\x4B\x87\x8E\x08\x0A\xC2\x4A\x74\x65\x86\xB8\x83\x03\xB6\x67\x9B\x5B\xFE\x72\x2A\xA5\x8B\x8D\x68\x5F\x0F\x63\x2D\x66\x6F\x24\xBD\x08\x37\x8F\x12\x44\x7A\xB7\x49\x1C\x8C\x8E\xC3\x33\x2B\x30\x38\x96\x65\x93\x8E\x08\x01\xBC\x17\x3E\xAF\x75\xE6\x8C\x22\x1E\x0D\x8B\x8D\xD7\x21\x3B\x8F\x8E\x91\x8F\x52\x55\x3B\xA5\x66\xFC\x61\xCB\x68\x39\xAC\x8E\x26\x4C\xE3\x3C\xF8\x7C\x8D\xBE\x8F\xDF\x87\x37\xB4\x8E\x22\x51\x04\x59\x1C\x28\x7F\xC6\x8D\xE7\x65\x49\x5B\x5A\xE6\x83\x72\x6A\x24\x8A\x51\x40\x10\xF7\x05\xC2\x15\x10\x80\x8C\x0A\x57\x38\xBA\x84\xB1\x50\x31\x80\xA9\x56\x69\x79\x4C\x2A\x26\x29\x18\x0A\xE1\x8D\xD2\x43\x3E\x9B\x5A\x19\x4E\xC7\x60\x39\x64\x8F\x39\x29\x84\x68\x55\x44\x5C\x3F\x2B\xEC\x87\x51\x49\x29\x2C\x0C\xC9\x0D\xA4\x08\x8A\x11\x53\x15\x0A\xA4\x18\x28\xB9\x8C\xF2\x8D\x39\xA5\x8F\x61\x72\x08\x08\x28\x64\x55\xDD\x2C\x20\x2A\x3A\xA2\x8F\x06\x90\xF9\x89\x3D\x9A\x52\x3F\x00\x49\x7C\xB0\x2A\x22\x77\x8C\x04\x9D\x13\x29\x63\x0E\x0B\xBA\x61\x3F\xAB\x54\xDA\x53\xA6\x55\x3F\xBE\x52\xF7\x8E\xFC\x59\x3F\x8F\x8F\xFB\x8F\x00\x9C\xA4\x23\x32\x00\x92\xCB\x48\x1A\x21\x01\x76\x3E\x1B\x0B\xF4\x45\x90\x1B\x92\xC9\x4D\xAD\x71\x8D\x61\x67\xBD\x5C\xCA\x21\x6B\xB2\x8D\x06\x9E\x3E\x91\x90\x9B\x58\xBD\x67\x43\xAF\x5F\x72\x8F\xF6\x5F\x6B\x2D\x8F\xC7\x8D\x0D\x94\xAA\x7B\x3C\x5C\x05\xEF\x87\x3E\x3F\x8E\xAA\x8C\xF4\x84\x47\x51\x50\xC3\x0C\x13\x98\xBD\x46\x8E\x06\x92\x0F\x68\xBD\x5B\x4C\xB0\x8E\xF3\x80\x39\x92\x91\xFD\x52\x10\x67\x45\x9A\x90\x52\x50\x85\x4F\x3F\x0E\x91\x7E\x8E\xE3\x81\x45\x97\x54\xB5\x8E\x49\x77\x39\x96\x8F\x26\x4C\xD8\x36\x11\x28\x91\x8D\x8D\x0F\x9F\x45\xAC\x91\xD1\x8E\xCB\x4C\xF5\x33\x91\xD5\x8D\xE6\x8B\xF2\x05\x08\x74\x90\x14\x9A\x3F\x82\x8E\x79\x92\x08\x06\x05\x2C\x3C\xFE\x4E\x37\x66\x36\xBF\x1C\xD0\x48\xBD\x04\x36\x4B\x4B\x09\x04\x24\x98\x38\x59\x8E\x2A\x71\x52\x71\x42\x8D\x6A\xF9\x7F\x01\x92\x3A\xA4\x8B\x2C\x7A\xB9\x86\x67\x28\x8E\xEA\x08\x90\x29\x23\x8B\x92\x3D\x21\x23\x9F\x48\x05\x5F\x42\x8B\x40\x02\x24\x89\x91\x52\x53\xE9\x38\x6B\x5F\x87\xA2\x66\x23\x52\x3F\x97\x92\x7A\x6F\x08\x91\x0B\xB3\x28\xC7\x51\x0A\x9D\x3F\xAB\x90\x3C\x71\x04\x5F\x42\xB1\x90\x33\x90\x8E\x86\xD9\x58\x4B\xF4\x0A\xD1\x5E\x48\xBA\x5F\xF7\x3D\x42\x09\x4C\x93\x92\x59\x90\x26\x8D\xC2\x55\x58\x3B\x93\x64\x72\xAE\x62\x92\xC3\x91\xE7\x66\x4C\xA7\x92\x12\x62\xBC\x43\x10\x32\x4B\xAC\x91\xDB\x43\xC0\x75\x64\xC7\x53\x01\x72\x1D\xAA\x74\xD4\x84\x08\x83\x03\x38\x00\xAD\x79\x40\x01\xD3\x53\x82\xCA\x58\x4D\x77\x71\x47\x90\x38\x77\x59\x8A\xD3\x73\x6E\x9D\x81\x36\x8F\x09\xB9\x81\x61\x81\xF8\x53\x03\x39\x00\x45\x77\x40\x05\xD4\x68\x82\xED\x91\xEF\x6D\x06\xA2\x7D\x9A\x71\x53\x7E\xBE\x7C\x73\x8A\x83\x4F\x79\x4F\x9C\x61\x34\x00\x0C\x08\xD5\x43\x04\x58\x74\x40",
"\x9B\xD5\x74\x5C\x62\x7F\x57\x79\x32\xBC\x56\x62\x76\xF6\x54\xD6\x45\x58\x08\x95\x48\x8A\x50\xAC\x30\x6B\x5C\x0D\x01\x03\x30\x75\x03\x04\x5C\x70\x50\xB3\x75\xBE\x68\x45\x92\x03\x9A\x52\x17\x96\x70\x54\xAD\x5F\x71\xD6\x69\x2B\x4E\xD7\x63\x4E\xCE\x4B\x7C\x73\x1C\x0A\x5C\x7F\x4F\xD8\x49\x03\x30\x77\x01\x06\x7C\x7D\xDE\x43\x8B\x26\x4C\xCC\x50\xAF\x33\x5C\x52\x4C\xCF\x7D\xDF\x58\x5C\xEA\x8B\xC7\x72\xE0\x69\x4C\xA2\x4F\x29\x10\xC2\x7B\x7D\x69\x10\xDA\x50\x55\x8E\x17\xAB\x7B\x5E\x49\x10\x16\x95\x99\x79\x1E\x39\x46\x00\x88\xEF\x4C\x41\x9F\x61\x6C\x78\x49\x96\x16\x7A\x44\x5A\x95\xCE\x14\x10\x01\xE9\x4E\x80\x6B\x1E\x01\x88\x56\x9F\x7F\x32\x00\x03\x83\x10\x0C\x80\xE6\x4B\x5A\x95\xFE\x41\x95\x05\x49\x57\x95\x51\x54\x80\xA8\x8B\x1A\x0F\x2E\x9E\x4E\xF3\x8A\x7D\x01\x01\x9A\x78\x20\x71\xAB\x88\x1B\x69\x1D\x68\x5E\x60\x9E\xC5\x72\x01\x64\x4D\x77\x49\x10\x0A\x96\x0D\x81\xBB\x8B\x3D\x0D\x4D\x15\x54\x09\x0B\x32\x68\x54\xC7\x7E\x13\x00\xE9\x09\x7F\x1D\x4A\x14\x08\xAF\x7B\x54\x61\x95\x18\x7B\xCE\x5F\x1D\x55\x1D\xD2\x16\x56\xBB\x78\x79\x55\xDD\x1A\x56\x8B\x1F\xC5\x5E\x39\x66\x10\x2A\x96\x71\x97\xF2\x10\x59\x86\x61\x8B\x6B\x45\x5E\x4A\xA8\x1E\xB7\x69\xF7\x82\x44\x19\x05\x98\x7C\x46\x71\x35\x4B\x90\xB2\x97\xF2\x17\x9E\x50\x10\x50\x00\x6E\x94\xA8\x4B\x68\xDA\x8A\x94\x6C\x2D\x9C\x8A\x0E\x69\x71\x95\xCF\x5B\x92\x78\x4F\x8A\x7C\xF1\x4E\x17\xA5\x95\x70\x13\x5D\x33\x4C\xAD\x1D\x74\x9E\x15\x31\x1E\xD5\x5D\x6F\x1E\x7A\x1B\x20\xC2\x14\x75\x90\x5D\x8B\x1F\xD8\x97\xEC\x56\x01\xBE\x5C\x80\x7B\x06\x24\x3F\x00\x01\x24\x7F\x21\x38\x3B\x48\x80\x30\x01\x0D\x00\xDD\x2E\x97\x2D\x7F\xC4\x7E\xE4\x73\x43\x33\x5D\xBB\x76\x45\x7E\x52\xCE\x7B\x3C\x4A\xE5\x65\x2E\x20\x06\x86\x75\xE8\x72\x97\x35\x66\xBE\x06\x41\x7A\x79\x15\x7E\xE2\x88\xC9\x67\x7E\x79\x06\xC6\x75\xAC\x47\x7D\xF9\x7A\xAA\x8E\x59\x82\x4D\x21\x7E\x7F\x9E\xE5\x40\x98\x1D\x7B\x24\x7E\xC8\x77\x71\x1B\x4D\x57\x32\x61\xB0\x7A\x00\x9A\xDB\x44\x0C\x51\x4D\xA1\x79\x64\x07\xBA\x5B\x98\x27\x7D\xD3\x44\x45\x4E\x5D\x03\x99\xB1\x7B\xE9\x73\x8F\xB5\x79\xF6\x48\x5F\xA8\x79\xA5\x88\x89\x9A\xE7\x46\x08\xB3\x7A\x57\x96\xEB\x70\x4F\xB8\x7A\xC8\x7D\x81\x7F\x97\x0E\x24\x07\x91\xE8\x54\x50\xCD\x7B\x95\x6F\x63\xBA\x98\x29\x98\x85\x9D\x62\xB5\x4F\xB3\x8B\xC6\x4C\xE8\x62\x96\x3C\x9B\x5C\x95\x93\x72\x95\x17\x09\x91\x9D\x63\x97\x89\xE4\x7D\x94\x9D\x64\x97\x08\x2C\x52\x25\x1C\x60\xA9\x8A\xD4\x30\xCD\x78\xD9\x1F\x7C\x38\x7D\x56\x4B\xF3\x78\x90\x74\x53\xEA\x78\xF4\x53\x6C\x59\x44\xD5\x53\xF4\x6E\x4C\x45\x7D\x30\x93\xF7\x6D\x99\x4C\x7D\x18\x7E\xF4\x77\x5B\x50\x7E\x43\x28\x5E\x89\x20\x27\x7E\xAF\x7D\xE3\x79\x00\x2C\x7E\x41\x0D\x67\x9C\x98\x53\x9A\x50\x6A\x65\xB9\x95\x98\x53\xCC\x72\x88\x1F\x99\x76\x99\xDB\x70\xF4\x69\x94\x45\x94\x99\x90\xBB\x5B\x99\x7A\x97\xCF\x79\x66\xBE\x5C\x6B\x9A\xE6\x8D\x5D\x06\x7D\x84\x99\xD2\x77\x16\x6A\x99\x91\x75\x9D\x90\x77\x29\x97\x6B\x1E\x9E\x9F\xFD\x71\x00\xC7\x02\x75\x35\x6A\xB1\x97\x81\x99\x85\x9C\x4F\x54\x72\x36\x79\x54\x32\x63\xAA\x98\xF4\x94\x8B\x9D\x04\xA3\x53\x2F\x98\x59\x59\xE5\x63\x2E\x5B\x7A\xE9\x2B\x76\x12\x99\x4E\x9A\x08\x05\x60\xA0\x52\x5D\x74\x6F\x59\xF1\x6A\x7E\x49\x57\x78\x9A\x54\x90\x98\xF0\x13\xAB\x9D\x61\x85\x79\xD1\x61\x92\x92\x34\x62\x98\x93\x06\xB2\x91\x68\x86\x7B\xA5\x89\x7D\x97\x64\x97\x4D\xB5\x9B\x34\x71\x63\x8C\x99\x13\x9B\xB4\x94\x63\xB6\x79\x71\x78\x42\x57\xEB\x6F\x79\x44\x9B\x95\x9C\x18\x3E\x98\x7D\x78\x88\x92\x64\xBD\x79\xD2\x9A\x93\x96\x5F\x99\x4F\xCE\x98\x08\x0B\x64\xBB\x9A\xE6\x9A\x45\x09\x65\xB9\x01\x90\x99\xA1\x95\xCD\x07\x9A\x36\x7E\xCF\x51\x66\xBA\x7C\xE7\x6E\x51\x99\x6F\x92\x9A\x85\x30\xA7\x94\xF4\x57\x9A\x6E\x99\xCC\x70\x67\x9C\x9A\x15\x5A\xA7\x91\x65\xA0\x9A\x5B\x5F\x7A\x97\xF5\x78\x00\x7D\x9B\x40\x0F\x67\xA5\x98\x06\x53\xA0\x93\xF7\x5D\x99\xFC\x9B\xCD\x7E\x32\x4B\x9A\x63\x98\x11\x98\x73\x45\x9B\x31\x7F\xA2\x9A\x66\xB7\x7F\x96\x9A\xD2\x78\x6F\x99\x9A\xE9\x54\xC2\x91\x67\x82\x7D\x9D\x9B\xCB\x9C\x18\x14\x7B\xD6\x79\x8E\x88\xED\x78\x00\xDC\x7A\x41\x09\x73\xA6\x4B\xDE\x7A\xC9\x40\xEE\x5C\x8E\x22\x00\xB9\x7C\xF3\x5D\x92\x1B\x76\xBA\x78\x39\x6F\x9B\x48\x98\xC9\x97\x66\xBC\x26\xF3\x78\xCA\x96\xEF\x41\x8A\x6F\x98\xC0\x7F\xC7\x3D\x7B\x66\x03\xBF\x73\x99\x7C\x7B\x03\x7F\x23\x56\xF0",
"\x53\x7B\x38\x45\xB5\x76\x06\x33\x29\x5E\x9D\x17\x69\x73\x83\x04\x3B\x9E\xD7\x9F\xED\x6D\x6E\xE2\x79\xD0\x94\x3D\x83\x9D\x02\x8A\xD1\x9C\xEE\x57\x9B\x4C\x74\xCB\x9C\x74\x81\x7C\x6D\x7F\xD3\x99\x52\x51\x9D\x57\x9C\xDD\x95\x01\xBE\x7B\xFA\x79\xDE\x93\x75\x99\x9D\x05\x7E\x86\x75\x27\x85\x25\x91\x78\x9E\x8A\x7F\x7F\x8A\x02\x05\xB0\x8E\x27\xAC\x99\xC5\x88\x0B\x7E\x68\x88\x8B\xD1\x8A\xB2\x8D\x4B\xA2\x4F\x8A\x89\x6E\x91\x34\x85\x8A\x92\x9D\x0B\x92\x02\x15\x8B\x4C\x27\xB5\x84\xA8\x44\x71\xDF\x89\x13\x7E\x39\xA6\x53\xDE\x8B\x5B\x20\x2E\xA0\x8A\x54\x80\x27\x94\x2A\xB9\x2F\xE8\x88\xCB\x9D\xFA\x6C\x8B\xA0\x97\x17\x7E\xF1\x6B\x8A\x41\x98\xAD\x82\x34\x53\x26\xE7\x94\x08\x74\x82\x28\x1E\x68\x5F\xEE\x91\x5D\x24\x4D\xD2\x41\x7F\x82\x09\xBE\x9E\x75\x1D\xDB\x4F\x6D\xB0\x79\xAE\x9C\x79\x92\x34\x44\x9F\xB7\x1F\xE4\x10\x04\x20\x9D\x4E\x5E\x01\x8A\xE0\x57\x63\xAE\x4F\xFC\x12\x3B\x5D\x5D\xB6\x4E\xEC\x7B\xFD\x4E\x24\x38\x94\xBA\x43\xF8\x71\x00\x1B\x02\x75\x31\x7E\x88\x7E\x78\x36\xE2\x7E\x15\x21\x9C\xD2\x65\xCD\x4E\x0F\x9F\x7E\xF9\x20\xE5\x7C\x84\x56\x7E\xD0\x87\xB3\x8D\x9F\x5B\x7E\x47\x46\xA3\x80\xFA\x6E\x9F\x22\x03\xE8\x7C\xF9\x4F\x0F\xA6\x7D\xDF\x5A\x10\x8B\x98\xC9\x9F\xB1\x9C\x31\x46\x24\xB0\x7C\xDC\x16\x41\x73\x7E\x1D\x9B\xD7\x7A\xC6\x2E\x80\xCB\x7A\xBB\x70\xA9\x53\x5D\x64\x94\xDA\x72\x69\xBE\x31\xBF\x24\xDB\x7C\x4A\x75\x7D\xAB\x05\xD4\x40\x56\xA7\x99\x18\xA0\x1D\x07\xF7\x6E\x4C\x79\x7F\xDE\x74\x62\x88\xA0\x81\x9B\xF9\x7B\x3C\xB6\x5C\xC2\x7C\xFB\x78\x39\x55\x96\x97\x96\xFC\x7A\xFC\x5A\x96\xF5\x7E\x08\x5E\xFC\x7C\x66\x8F\x55\x1C\x82\xFD\x4F\x71\xFC\x7D\xF5\x7F\x71\x00\x80\xA2\x96\xF6\x95\x7E\x89\x1D\xDD\x9E\x3A\x1F\xEB\x72\x00\x32\x01\xD6\x73\x10\x1B\x7D\x55\x9B\xB9\x96\x32\x4A\xA0\x00\x9D\xB0\x9D\x80\x98\x5B\x49\x57\x03\xAA\x33\x53\x95\x12\xA0\x9A\x94\x81\x91\x04\x16\xA2\x9B\x75\x12\x59\xA0\xA3\x88\xCB\x9D\x81\xB7\x7D\x71\x4D\x08\xAA\xC9\x36\x23\x1D\x71\x57\x3F\xE1\x51\x35\x64\x4C\x89\x76\x10\x2A\xA1\xFC\x49\x54\x37\xE2\x6B\x9D\x8E\x98\xCA\x94\x74\x9A\x77\x9C\x54\x8C\x71\x6E\x9F\x58\xA1\x7B\x8D\x78\x6F\x34\x9C\x66\x03\xB5\x76\x06\x24\x4D\x63\x9E\x40\x05\x76\xBD\x9C\x01\x54\xDA\x9C\xE9\x63\x7B\x70\xA2\xC8\x95\x66\xB3\xA1\x1D\x84\xF1\x77\x74\xB0\x9D\x1B\x7E\xDC\x92\xEF\x74\x9D\xF5\x7B\x64\x60\x75\x8A\x9C\x52\x9F\x6F\x24\x75\x96\x9D\x57\xA2\xC0\x78\x4E\x41\x9E\x07\x7F\x3D\x49\xF0\x49\x1D\xA2\x9B\xA4\x78\x03\x11\x7C\x03\x05\xC4\x70\x68\xBD\x9A\xBF\x9B\x3B\x99\x10\xA2\x36\xC4\x9B\xC0\x9E\x60\x81\x78\xC8\x9A\x67\x38\xFD\x77\x27\xDA\x7F\x0F\xAC\xFD\x76\x25\x49\xA1\xC3\x7B\xCD\x5D\x73\x92\x80\x09\xAD\x6B\x8C\xA1\xE0\x56\x4A\x90\x89\x80\xA0\x52\xA3\xEB\x31\x81\xB5\x5D\x19\x47\xDA\x70\x50\x57\xA0\x8A\x33\x8F\x1A\x81\xB2\xA2\x5F\xA0\xDD\x98\xF7\x70\x4F\x22\xA3\x3F\x2E\xF7\x42\xA3\x17\x09\xED\x7A\x8B\x9F\x7F\x36\x03\xE1\x76\x10\x22\xA3\xBC\x7D\xB1\x7B\xF8\x6F\x93\x8E\x7F\x21\x66\x0C\x8D\x50\xF7\x9E\x20\x55\xF9\x4D\x0B\xF1\x9C\xF3\x69\x63\x54\x9B\xA4\x7C\xFF\x96\x95\x6D\xA3\x77\x4E\x2F\x93\x83\x35\x9F\x84\x6B\x2B\xA4\x0D\xB1\xA2\x01\xA2\x58\x97\x7B\xAF\x7E\xB7\xA1\x0F\x10\x2D\x5C\xA3\x8C\x06\x37\xAE\x7D\xBF\x7A\x37\x03\x2F\x81\x10\x23\x7F\x08\xA6\xBD\x91\x31\x66\xA0\xE9\x7D\x0A\xAB\x18\x31\x4D\xED\x7C\x0B\xAF\x05\x18\x96\xF4\x7D\x94\x8D\xFC\x78\x7F\x35\xA0\x0D\x8C\x5B\x4C\x97\xF1\x9A\xFF\x7A\x73\x1C\x80\x09\x97\x60\x70\x52\x84\x5F\x34\x02\x0D\x03\x02\x83\x04\x25\x83\x24\x81\xBF\x62\x6A\x79\x5D\x0B\x81\x37\x4A\x81\x8F\x9E\x13\xA7\x78\x4E\x81\x71\x79\x14\x82\x92\x83\x5E\xB0\x69\x44\x7C\x5C\x73\x6A\x72\x5B\xED\x59\x05\xA3\x58\x1F\x68\x17\x88\x14\x5E\x81\x3D\x8F\x6A\x86\xBB\x74\x6B\x35\xA7\xDE\x55\xD7\x47\xA3\x6D\x7D\x0C\x83\x05\xA4\x9E\x3F\xA7\xE1\x51\x94\xB4\x5E\x44\xA5\x66\x80\x5D\x47\xA5\x61\x91\x0F\x83\x79\x7F\x80\xCE\x66\x34\x69\x92\xA0\x82\xE5\x91\x23\x84\x03\x38\x00\x79\x62\x41\x0D\x96\x9B\x87\x2C\x84\x56\x83\x18\xBA\x6E\xB0\x86\xDB\x68\x1B\x86\x87\x35\x85\x5D\xA3\xBC\x77\xA5\x64\x84\xF9\x87\xBC\x57\x86\xE2\x87\xDD\x4E\x1B\xA0\x86\x83\x6F\x68\x83\x1E\xA5\x86\xC4\x85\x3C\xA8\x97\x9F\x86\x4D\x6D\x72\x80\x98\x87\x88\x5F\x6F\x70\x8F\xB3\x54\x6E\xC5\x87\x2C\x63\x4E\xA0\x81\x2B\xA5\xF8\x54\x03\x39\x00\x6D\xA7\x40\x0F\x96\xB2\xA4\xDC\x86\x5C\xA3\xB3\x6F\x84",
"\xBB\x6E\x6C\x8F\x15\xB4\x86\x86\x6C\x63\x86\xB7\x7E\x68\x9A\x59\xD1\x9C\xB7\x68\x85\x96\x63\x62\xA3\x14\x80\x87\x90\xA4\x51\x53\xBD\x73\x85\xA7\xA7\xA3\x52\x14\xAD\x85\x45\x87\x5B\x87\x14\xAA\xA6\xE2\x6E\x4E\x57\x1F\x9D\x89\x67\x8D\x4E\x65\x25\x86\x4C\x61\x8B\x03\x12\x09\x9C\x89\x45\x8B\x91\x88\x15\x31\x4D\x6A\x8B\x4C\x6E\x33\x61\x6C\xB6\x74\x9C\x56\x82\x45\xA5\x70\x8A\x94\x89\x11\x09\x92\x5B\x89\x95\x85\x7F\x7E\x88\xD4\x9D\x5E\x02\x1F\xA4\x89\xF5\x87\x7D\x82\x03\x3C\x88\x32\x03\xAA\x7C\x00\x24\x3A\xEB\xA6\x0D\x62\x03\x3B\x59\x32\x02\x73\xAA\x49\x6F\x00\xE2\x53\x99\x8B\x66\x54\xA7\x15\x8A\x75\xA6\xB2\x5E\xA5\xC8\x76\x47\x54\x04\x05\x4F\x54\x88\x1C\x0F\x9E\x81\x60\xF1\xA4\x9A\x8A\x49\x4B\x90\x3A\x8B\x74\xAD\x24\xAD\x89\x33\x88\x73\x8D\x9F\x91\x50\x4D\x02\x6A\x01\xA0\x83\xA8\x35\x64\x97\x88\x45\x54\xA8\xC1\x4D\x81\xAD\x72\x88\x89\x25\x01\x7D\xAA\xA0\xA2\x6C\x0C\xAB\x75\xAC\x9F\x91\x89\x1E\x56\xD9\x05\x41\x66\xA7\xE8\xA4\xA5\x7A\x0F\x27\x04\x2B\xAA\x7B\xA0\x9F\xB2\xA7\x2E\x4C\x82\xAC\x25\x9F\xA8\xD5\xA7\x93\x88\x21\x99\xA7\x25\xAA\x84\xA5\x3D\xAE\x05\x18\xA8\x8F\xA0\xA3\xA2\x00\xF4\xA6\x99\x84\xA3\xB9\xA7\x36\xAB\x9B\x8A\xDB\x7E\xA7\x00\xAB\x8E\xA9\x11\x3D\xA8\x4B\xAB\x8F\xAD\xA1\x82\xA9\x4C\x88\x88\xAF\x6C\x85\xA9\x34\x88\x8A\x8E\x32\x66\xA8\xE5\x4F\xE0\x9F\xC1\x7B\x8A\x78\x89\x0D\x08\x78\x81\x04\x8A\x9D\x51\x24\x2C\x96\x0B\x16\x8D\x26\x88\x73\x57\x9E\x8F\x89\x0C\x73\x79\x8D\x6C\x95\x9E\x0D\x7E\x28\x92\x8B\x6B\xA8\xE7\x91\xC4\x56\x8A\x42\x6C\xE8\x96\x7A\xA2\x9E\xC7\x95\xAB\x69\x5C\xA1\x9E\x9A\x8B\xE8\x92\x9C\x57\x51\x5D\xA0\xF9\x87\x2E\xA7\x8A\xC6\x98\xED\x9C\xC5\x71\x9E\x72\x03\x5E\x92\xC6\x72\x8B\xA0\x92\xB8\x08\x6F\x12\x7D\xCA\x94\x1D\x05\xF5\x51\xAA\x06\x4D\x8A\x49\x10\x16\xAA\x88\x4D\xA4\xAD\x34\x6E\x55\x17\x14\x03\x24\x4E\x7A\x30\xE7\x50\xC1\x8C\x88\xA0\x87\xB7\x9C\x9F\xA6\x78\x3B\x7A\x9D\xAB\x52\x11\xE9\x69\xAA\x29\x16\xC1\x47\x1F\x46\x04\xAF\xAA\xB9\x4C\xAA\xB0\x04\x6D\x4C\x10\x09\xE2\x4F\x76\x39\x7F\xEC\x21\x52\x1D\xA1\x2A\x7B\x81\x9D\x77\x71\x8F\xFD\x75\xDE\x43\xAB\xA5\x01\x5A\xAA\xBA\x07\x27\x85\x25\xAB\x7B\x97\xA0\x00\x21\xA9\x6F\x27\x98\xA3\x06\x25\xA9\x83\x8A\x55\x60\xA7\x9A\x9E\x34\x72\xE5\x9F\xA6\x99\x9E\x92\x8A\xB2\x8E\x79\x97\x8A\xF3\x8D\xA4\xA8\x7A\x98\xA5\xF6\x66\xB7\xAE\xA7\x90\x71\x51\xA3\xA8\xA1\x31\x43\xAA\x23\x59\xBA\x87\x66\xAF\x9E\x3A\x4E\x61\x9E\x2E\xB3\x9E\x61\x71\xBC\x85\xC6\x4D\xAA\x66\x24\xBE\x11\xE9\x7B\x8B\xFA\x8A\xC2\x88\xA1\x24\x4D\x00\x8F\x40\x00\x30\xA6\x4B\x02\x8C\x60\x69\x93\xB1\x78\x26\x8E\x70\x58\x30\xB1\x4F\xFA\xA9\xC9\x0C\x30\xA9\xA5\xA2\x82\x0C\x06\x03\x3E\x01\x27\x04\xC4\xA3\x31\x91\x4F\x8B\x6A\x5F\xA3\x3B\x8B\x68\x88\x55\x48\xA0\xD6\x63\xA4\x73\x82\x84\x68\xAC\x14\x74\x1D\x96\x27\x82\x12\x8B\x94\x74\x62\x0C\x07\x03\x2A\xA1\x03\x04\x1B\xAC\x4E\x9A\x56\xF0\x93\xC5\xA2\xE1\x62\x56\x20\x75\xA5\x62\xD2\x78\x73\x24\x76\xA6\x65\x65\x27\x74\x11\x0F\xC2\xA4\xB2\xB7\x62\x36\x01\x0C\x01\x00\x16\x37\x3F\xAF\xC4\xA6\x32\x4A\x72\xFB\x88\x25\x7A\xC4\x71\x53\x09\xAF\x94\x06\xB4\x80\x72\xF3\xA0\x13\x80\xAC\x5F\x4C\x01\x58\x27\x78\xD2\x4D\xA5\x6E\x79\x7D\x5E\xAB\x80\x6B\x16\x96\x8C\x7F\x52\xB2\x01\xFC\x74\x8E\x92\x53\xA5\x75\xF8\x80\x40\x96\xBE\x7A\xA4\x6A\x5A\x9C\x71\x60\x52\x5B\xB0\x11\x45\x7C\x4E\x93\x94\x64\xAE\x77\x61\xAD\x6D\x94\xC7\x54\xB1\x6D\xB5\x82\xAB\x0E\x04\x81\x59\xAD\x61\xAD\xEC\x90\xEB\x63\x6F\x6E\xA6\x73\xAF\x26\x63\x4F\xA6\x55\xF7\x85\x66\x75\x9C\x97\x76\xED\x87\x0C\x04\xDD\x43\x04\xD4\x75\x44\x6C\x55\x98\x6F\x16\xAF\xF3\x84\x20\xA9\x52\x06\x89\xF4\x69\x20\xA5\x87\xE4\x76\x47\x56\xDE\x45\x8F\xE9\x87\x28\x97\xC2\x03\xAE\xC4\x93\x29\x93\x03\x00\x40\x09\x04\xE8\xAC\x4C\x8A\x91\x12\x93\x0E\x61\xA3\xA8\x79\x61\x01\x03\x96\xC2\x3D\x04\x8A\x93\xE6\xAC\x48\xA5\x8D\xA7\x90\x0D\x02\x02\x49\x04\xB3\xAF\xE8\xAB\x61\x58\x8F\xA6\xAD\x92\x88\x8D\xB6\x96\x24\x32\xF7\x20\x3E\xAC\xAE\x9A\xAD\x4F\x01\x8E\x4E\x92\x35\x02\xFB\x39\x10\x06\xAF\xB6\xAF\xF5\x8D\xA8\x53\x90\x71\x4D\x05\x9F\x39\x57\x90\xEC\x8C\xF0\xA5\x4D\xA4\x92\xAD\x22\x29\x9D\x13\x27\x5C\x29\x41\x42\x09\xBD\x89\xAF\x7D\x50\xEE\xA6\x80\x8C\x69\x51\x4D\xDE\x7A\x3E\x8D\x2C\x8F\x11\xEB\xA2\xBC\x9A\x76\x8E\x93\x0D\x02\x1D\x49\x04\xEB\xAC",
"\xF7\xA7\x40\x98\x2E\x1E\x61\x7D\x92\x42\xBE\x1D\xF6\x8C\xFC\x48\x4B\x9C\x56\xBA\x93\x92\x2F\x3F\xB8\x63\x02\x93\x2E\x96\x60\x99\xAE\xD3\xAE\xEB\xA5\x4A\xB0\xAE\xD7\xAD\x0E\x04\x04\x49\x04\x07\xB2\xFB\xA4\x3E\x84\x60\xF5\x69\xFA\x75\x44\x8B\x60\xD4\x90\xD9\x8D\xB9\xBD\x04\xD7\x93\xF5\xA1\x03\x36\x00\xA9\x90\xAE\x22\x09\x99\x8E\xAE\x92\x07\x9B\x78\x31\xAF\xF3\x8F\xFC\xA4\x46\x64\x90\xF6\xAF\x09\x9D\x4F\x79\xAF\xFE\x8C\x0B\x98\x8F\x7F\x92\x20\x05\x30\x90\xC0\x92\xB0\xD6\x91\x23\x23\xC1\xBC\x8B\x38\x02\x36\x92\x10\x1C\x93\x70\x93\xF9\x64\x45\x51\x91\x97\x4E\xF9\xA5\x06\x28\x5D\x8E\x91\x78\xA1\x1F\x89\x20\xB2\x4F\xDB\x8D\x8D\x41\xAF\x65\x01\x05\xBC\x2F\xB9\x00\xD8\x03\x49\x0D\xC4\xAE\x8D\x59\x93\xE6\x8B\xA0\x61\x8E\x74\x55\x3C\x7E\xA0\x54\xB1\xD3\x7E\xEA\x97\x40\xA6\x8E\xAB\x04\xBD\xA0\x12\x34\x0B\x64\x92\xB3\xA1\x5E\x74\x92\x75\x5C\xF5\x52\xCE\x57\xB1\x98\x91\xC7\xA5\xAE\xA4\x8A\x96\x1A\xE7\x45\x2B\xA1\x92\xE5\xAC\x12\xBA\xC4\x8E\x8C\xC2\x03\x49\x05\xC7\x90\xB1\x4A\x93\x9E\x71\x6F\x1E\xB0\xB2\x90\x08\x97\x40\xA3\x90\x71\x4D\x09\x90\x02\x37\xAF\x23\x58\x0A\xBC\x4B\x9A\x9E\x2C\xB2\x0C\x9B\x72\x98\x91\xA4\xAC\xFC\x8F\x40\x73\x92\x7F\xB0\xFD\xA6\xE6\x77\x92\x26\xB2\x55\x6C\x3F\xBA\xAF\x2A\xB3\x33\x6A\x42\xBF\xAF\x1C\x7A\x19\xAB\x2B\xA0\x78\x35\x00\xCA\xA2\x10\x2A\xAC\x26\x7A\xC9\x42\x74\x8F\x9E\xCE\x95\xCB\xA3\x62\x53\xB2\x05\x8F\x1D\xA7\x63\xAD\x9A\x7E\x70\xFD\x0C\x87\xBE\xA1\xE2\x5D\x20\xA1\x10\x03\xA2\x66\x03\xD9\x93\xC6\x88\xA2\x27\xA1\x4E\xA6\xAE\xBB\x6D\x18\xA7\x23\xA3\x6B\x90\xA1\xB2\xA3\xDC\x93\x75\x95\xA2\x76\x94\xCB\x9A\x98\x7C\x7B\x7B\x9D\xD5\x9D\x77\x9D\xA2\x54\x57\x9C\x9A\x9C\x24\xA1\x10\x24\xB6\x4A\x2B\x92\x27\xC2\x88\x48\x02\x7E\x4A\xAB\xCC\xAA\xBA\x02\xC6\x86\x8B\x39\xA4\x9A\xA3\xAD\xB3\x70\x6D\xA8\xA3\x87\x31\x97\xAB\x6A\xAA\xE6\x92\xA7\x9B\xAB\x75\xA9\xB6\x86\xAA\x9B\x8B\x99\x91\x36\xBE\x06\x27\x9E\xE3\xAB\x0D\x81\xA8\x9E\x92\xAC\x9F\xEC\x8A\xAE\x8D\x98\xEC\xAB\xA1\xAE\x2A\xB2\x9E\xB3\xA1\xAC\x85\x7B\xB3\x8B\xB8\x9F\xA3\xAE\xF7\x51\xAA\x93\xAB\x3B\xBC\x18\x2B\x7A\x98\xAB\x40\x08\xA9\xBD\x89\x0A\xB6\x44\xA1\xA9\x43\xAB\x9F\xA9\x16\x30\x50\x6C\x9D\xAA\xB2\x66\x61\xA9\x80\x01\x02\x4E\x76\x96\x5D\x92\x17\x62\x04\xBE\x46\xEE\x1F\x97\xDC\x1F\x75\x93\x5D\x06\x4C\x65\x83\x40\x07\x06\xA3\xB4\xBE\x14\x78\x93\x5D\x0A\xAF\x74\xA3\xF3\x88\xB1\xB2\x81\x70\x81\x56\xA4\x83\x99\xB1\x01\x5A\x47\xBE\xD2\xA2\x05\x52\x97\x18\x36\x71\x2A\x5D\x56\x32\xC5\x1B\xEA\x65\x47\xAB\x96\x24\x81\xD4\xAE\x2A\x9B\xAA\xCE\x44\xD1\x9D\x53\xA0\xA8\x2F\x58\xD1\x8D\xAE\x5F\x91\xBC\x97\xD4\xBE\x0C\x68\x5C\x54\x17\x5A\x09\x16\x79\x02\xDA\x56\xD5\xB3\x16\x77\x17\xAA\x76\x21\x49\x04\x5F\xB4\xE2\x4B\xD5\xAD\x2D\x6D\x4D\x66\x4E\xC0\xB8\x5C\xBF\xB0\x76\x18\x72\x86\x8C\x54\xA5\xCE\x44\x45\x41\x01\x50\x02\x8A\x0E\x56\x02\x4C\x3C\x1A\x9D\x1E\x46\xA2\xB4\x75\xB5\x1B\xBE\x46\xAB\x7A\x88\x03\x49\x0D\xD7\x8C\x4F\x79\xB7\x94\x19\xAF\x3F\x0F\x2F\x5E\x19\x90\x4A\x4F\xB5\x9B\x59\xEB\x1C\xC3\xBC\x00\xEB\x6B\x04\x91\x4E\xBE\x00\xEA\x98\x71\x60\x65\x05\x1A\x77\x1B\xA6\x62\xD5\x2F\x2D\x74\xB7\x64\xB6\xD7\x83\xB6\x65\x00\x5E\xBA\xD9\xBA\xB5\x9C\xB7\xC9\x5F\xD7\x86\x04\xA3\xB5\x5C\x9F\xD9\x82\xB6\xAB\x56\x14\x53\x21\x5C\xB6\x67\xB7\x22\xAB\xAE\x4A\xB6\x8F\x68\x63\xB7\x40\x8E\xB6\x17\xAC\x64\xB5\x7B\xAA\x53\xA7\xB7\xA5\x16\xD9\xB7\x8A\x25\x14\xB4\x4D\xB6\x20\x70\x6D\x2F\xAA\x75\x09\x27\x04\xC3\xB4\xF3\x44\xD6\xA6\x4C\x66\xB6\x99\xAE\xDA\x99\xB4\x71\x4D\xD4\x56\x73\x7B\x2D\x8B\x09\xDB\x79\x4F\x76\x5C\x89\x2D\x74\xB5\x69\xB6\x6B\x28\xA3\xE2\x13\x3D\x89\x10\x9C\x2E\x5C\x57\x8D\x8C\x8F\x58\xB4\x8E\x74\x10\x2B\x1B\xC1\x2F\x18\x57\x56\xA0\x07\xE5\xB5\x1E\x0D\x70\x4A\x00\xA4\x38\x7B\xB0\xD8\xA8\xB7\x4E\x2E\xF9\x77\xCF\x8D\x6A\xB0\xB5\x4F\x02\x34\x67\xB1\xA0\x8C\x7D\xBD\x65\x0F\x12\x7F\xA9\x32\xA0\xB3\x93\x1E\x21\x77\xE4\x18\xA9\x4A\x60\x03\x1F\xA7\x28\x42\x64\xB7\xF1\xB7\x44\xA3\xDF\xBA\x6D\xF5\xB4\x47\x06\xC5\xB9\xB7\x0C\xBB\x7E\xB6\xDF\x90\x71\x2F\xAF\x47\x70\xE0\xB2\xAC\x02\xBB\x85\x7A\x4E\x45\xB8\x6F\x2C\xD8\x9B\x50\x06\x5D\x0B\x14\xDB\x5E\x0D\x27\x04\x23\xB9\xDC\x54\x50\x2D\x4D\xA4\x45\x6B\xB4\x9D\x62\x7B\xE4\x8E\x19\xBE\xAA\x58\xB1\x38\xA3\xE8\x81\xEA\x4B\x14\xF4\x0E\x1B\x57",
"\xE2\xA6\x4C\x29\xBA\x72\xBB\xE2\xB2\xAF\x69\xB1\x70\x6F\xE0\x82\x55\x30\xB8\x3A\x76\xCF\xB1\x9B\x34\xB8\xBE\x1E\xC3\xB3\xB1\x31\x03\x0C\x02\x49\x83\x04\x92\x91\x37\x9F\x27\xA4\xA9\x14\x94\x19\xBF\xAD\x87\xAD\x9A\x92\x1A\xB3\x8D\x9B\xB1\x9F\x93\x1B\xB3\x2F\x0F\x12\x4F\x97\x32\xA5\xF5\x54\xA1\x12\x86\x10\xB5\x6F\x32\x4E\x60\xB9\x7D\x8E\x83\x8B\xA4\x6B\x1D\x10\xA1\x16\x08\x80\x38\x02\x11\x04\xEA\x2E\xB9\xE4\x9C\x9A\xB3\x6D\x84\xA3\x8C\x9A\xD3\xA8\xE8\x44\xB3\xE0\xAE\xD4\x53\x85\x8B\xA3\x69\x7D\x27\xA9\x85\xAE\x7D\xD1\xA0\x17\xA2\xF7\x71\x7C\xD5\xA3\xD4\x9F\xDD\xA3\x95\x6A\x33\x9A\x7D\x8B\xB4\x01\x6D\x4C\x9D\xBC\x80\xBB\xA4\x0E\xA0\x3C\x71\xA9\x60\xB9\x7D\xBA\x77\x2F\xC7\x3F\xB9\x1D\xA3\x95\xB3\xF7\x45\xBA\x9A\xA3\xA1\xB4\x9A\x63\xA1\x90\x78\x69\x9F\x06\x06\x0B\x74\xB7\xA8\xBF\xEB\x42\xB1\x3A\x2E\xEC\x40\x65\xA7\x9B\xB6\x4D\x60\x9E\x58\xBE\x04\x55\x7E\xBB\xAB\x3D\x2E\x87\xAD\x4D\x5E\x03\xE6\xAD\x96\x88\xA9\x7D\x87\x56\x8B\x1F\xA5\xB9\x49\xB8\x58\xA8\xBA\x14\x2E\xAA\xBE\x5A\xB6\x4E\x36\xB1\x40\x02\x2F\x6F\x3E\xBC\xAC\xFD\x03\xEF\x67\x4E\x01\x05\xEA\x42\xC2\x1C\x0F\xCA\xB9\xC0\x76\x30\x5D\x02\xA4\x38\xB5\xB2\xE4\x49\xBB\xF8\x1B\xBC\x76\x62\xA8\x3F\xBE\x29\x6C\x03\x60\x98\xBB\x93\x1E\xB6\xB4\x65\x8C\x9F\x5E\x07\xB7\xB3\xC2\x11\xBB\x7F\x33\xB6\xBB\x50\x26\xBB\xD0\xB9\xB6\xB1\xF0\x5B\xBB\x1F\xB4\xBB\xBD\xD7\x21\xBB\xEF\xB8\x95\x9D\xB6\x32\xBB\x90\x1A\xBB\xB9\xEE\x94\x99\x5D\x34\xBE\xB8\xEE\xBF\x26\xDB\xBA\x13\x3E\xEF\xBA\xBB\x00\xBC\x95\x9B\x6E\x03\xBC\xF4\xBB\xBE\xBF\x64\xB9\xB6\x95\xB7\xCD\xA0\x39\xB9\x79\xE0\xBB\xA7\x22\xEE\x95\xA8\x86\x0B\x9D\x9E\xE8\x51\x33\xA4\x4E\xAA\x72\xC4\x8D\x21\x64\xBB\x97\x76\x3B\x50\x9C\x70\x1D\x4F\xBD\xE3\x71\x60\x15\x9E\x40\x07\x71\xBA\x79\x2F\x7C\xCB\x9C\x71\x97\x33\xFD\x98\x98\x9F\x71\xA2\x99\x49\x76\xC0\x9C\x72\xA6\x9C\x94\x99\xDB\x70\x67\xB2\xA2\x0B\x9D\xCD\xBD\x70\xB2\x9C\x23\x7C\x9E\x98\x92\xA1\x84\x08\x83\x0C\x05\xF2\x81\x04\x27\xBE\xCB\x7A\x71\xB1\x7C\x2B\xBD\xCD\x7E\x71\x97\x77\x62\x99\xC0\x99\x93\x8A\x9D\x0D\x98\xCD\xBF\xF1\x55\x9A\x37\xBC\x52\x97\x66\xB9\xBC\x53\xBD\xCC\x96\x2C\x3C\xA1\x60\x9C\xB6\x7A\x7F\x76\xB2\x00\x00\x2E\xBA\xCB\x80\x9D\xA7\xB2\x22\xA4\x9D\x69\xB5\x8F\x69\xFB\x78\x74\xA9\x6B\x50\xBD\xAA\x86\xCC\x9A\xA2\xC8\xB2\x04\x8B\xCF\xA9\x8A\xCB\xB2\xDE\x9A\x33\x7C\x9D\xE9\x55\x26\xA1\x11\x11\xB3\x5A\x9F\xD6\xBD\x75\xBA\x0B\x20\x70\xB6\x72\xC4\xA9\x33\xB2\x4E\xB7\x76\x3B\x45\xAB\x24\x08\xA4\xA8\xAC\x82\xB1\x6A\x42\xEC\x48\xC2\x44\xBB\x27\x07\xB1\xBF\xDF\x92\xBC\x01\x7C\xB3\xB0\x00\x29\x4E\x93\xBF\xDB\x23\xEF\x46\x4C\x58\x97\x40\x08\x55\xA6\x4B\x99\xBC\x5A\x13\xF1\xAF\xB5\x63\x17\x54\x16\x41\x61\xBE\x76\x0B\xE8\xB2\xCF\x80\x01\xBA\x9C\x0E\x18\x7A\x15\x7D\xE4\xBB\xAF\xBF\x1E\xAE\x4E\xB7\xB9\xA4\x3E\xFA\x91\x17\x66\xBB\x36\xAB\x7D\xB0\x1D\xBA\x4B\x40\x0A\x2B\x4B\xBA\xB4\xB8\x7C\x88\x2F\x72\x4E\x11\xA4\xA3\xB7\xF8\xA5\xA1\x1E\x7B\x27\xB8\x86\xB4\x00\xA2\xB1\x40\x04\xCA\xAE\xA1\xA6\xB1\x22\xA9\x7E\xB2\xA0\x0B\xB9\x23\xA6\x87\x85\xAC\x90\xBB\x2B\xB9\x61\x91\x35\xBC\xB5\x71\x14\x72\x49\xBF\xD8\xB0\x88\x73\x03\x0D\xBF\x00\x03\xF3\xBE\xC7\x6F\xA1\xBD\xB2\xD9\xBD\xF6\x46\x60\xB0\x93\xDE\x61\xA1\x6C\xB5\xC3\xB0\xBC\x99\x87\x9C\xBF\x7B\xA3\xDF\xBD\x87\xB6\x9C\x7F\xA3\x0C\x00\xF6\xA2\xBD\x3E\x9E\x21\xAD\xF6\x7F\x7E\x3A\xB9\xF5\xB6\x16\xAD\xB2\x6F\x9D\xFC\xB9\x74\x85\xB3\x93\xA3\x31\xBE\x32\x76\x9D\x73\xBD\xA4\x99\xF7\xBE\x9D\x9A\xA1\x33\xBC\x89\x96\xBA\x9A\xA0\xE0\x9E\xAE\x5B\x9D\xB1\x7E\xEE\xBF\x8D\xB0\x1D\x6A\xB9\xD7\x73\xF2\xB0\x00\xE2\xA3\x40\x04\x8E\x8B\xBA\x29\x73\xF9\x9E\xF4\xA6\xBD\xAA\x73\x8C\x5B\x8E\x9E\x4F\xF8\xA0\x51\x5F\x8E\x97\x7E\x3A\x6F\x3C\xA4\x7F\xA5\x7E\xF7\xA1\xFB\x9E\x8E\xAE\x90\xFB\xA0\x0D\xC9\x13\x93\x83\xA9\x7D\xDC\x95\xA8\x8F\x98\x03\xA0\x43\x25\x80\x97\x08\x67\xBA\x10\xA9\xE6\xAC\x77\xBB\xBF\x85\x06\x30\x71\x00\x0E\xA4\x00\x00\x91\x89\xC1\x4A\xA3\xFF\xB2\xFD\xB5\x53\xC3\x7C\x01\xC3\xC9\x9A\xA4\x1C\xA4\x0C\xAE\x91\x94\xBF\x6F\x81\xB7\x86\xD3\x9E\x67\x24\xA5\xFF\x7F\x06\x16\x7F\x3C\xA3\xDA\x1A\xB3\x99\xA6\x5C\x61\x0D\x07\x03\x21\x03\x27\x04\x1B\xC2\xB4\xA9\x82\x4F\xA6\x0A\x81\x95\xA5\xA5\xD9\x5B\xAD\xAA\xFE\xAD\xAD\x12\x6F\xA7\x7A\xAA\x7D\xA4\x7A\xAB\xC6\xA0\x94\xA3",
"\x8B\x5C\xA5\x0E\x80\x25\xBB\x80\x48\xA6\x98\x6A\x94\xAC\x67\x97\xA4\x44\x8C\xB0\x86\x4F\x35\x02\x0D\x0E\x0C\x27\x04\x8F\xC3\x1B\xC3\x93\x86\x81\xCD\x67\xCA\x2E\x8A\x94\xA5\x7B\xC1\x45\x9D\x07\xF0\xAD\x65\xAF\x56\xAA\x7D\x63\x67\xD8\xA5\x47\x60\x96\x96\xAE\x3E\x81\xE5\x50\x04\x83\xA7\x3C\x8A\x8F\x82\x03\x09\xA7\xF7\x2F\x72\xA5\x25\x8D\xA7\x06\xAA\xCB\x42\x28\x72\x76\xA5\x74\x9B\x83\xA5\xAE\x89\x23\xA9\x9C\x88\x9E\x73\x89\xC2\x90\x0C\xBC\xA3\xA9\xA8\x31\x01\x8B\xA6\x10\x02\xC3\x86\x50\x93\xA2\xA0\xB2\xA7\x71\x4E\x8C\xA5\x25\x83\xA9\x4E\x88\x2E\xCE\xA0\xA4\xA8\x10\xAA\x8E\xAE\x21\xBC\xA8\x2F\xAA\x81\xA1\x37\x41\xA9\x09\xA9\x94\xA5\xA3\x8E\xC3\x87\xA7\x91\xA1\x41\x7F\xA7\x76\x03\x83\x82\xA0\x95\xC3\x1B\xAB\x73\xAE\x32\x4F\xA9\xD9\xC3\x7D\xAB\xA0\xB7\xC2\x0D\xA9\x37\xCB\xDA\x50\xA8\x46\x0C\x77\xA5\x4D\xBC\xA8\xF5\x5D\x7A\xA2\xC4\xA3\xA7\x19\xA9\x79\xAD\x9D\xB0\x01\x33\x00\x8F\x83\x03\x06\x4C\x68\x00\xA9\x31\x10\xF6\x60\x33\x02\xBA\xBB\xA4\x98\x51\x05\xC5\x00\x63\x03\x3F\xA8\x26\x02\x38\x5A\xA1\xB6\xC2\xB2\x80\x37\xC1\x99\xAF\xC3\x7A\x93\x78\x41\x78\x61\x64\x6E\x05\x42\xC2\x5E\x4B\xC4\xB1\xC2\x08\x04\x92\x62\x57\x0F\xC4\x7E\xAD\x0C\xED\xC3\x13\xC7\x83\xAE\x32\x41\x01\x64\x03\xA2\x88\x10\xFB\x59\x1C\xC5\x39\xCA\x49\x61\x88\x19\xA8\x33\xC1\xA2\xBB\xA7\xCF\xC2\x2E\xC3\x05\x35\x01\x62\x01\x80\xAA\x11\xC1\x4F\x2D\xC4\xC7\x6A\x49\x7F\x49\x20\xC6\x4C\xCC\x0E\xE2\xA8\x35\xC5\x2D\x81\x64\x22\x22\x27\xAB\x3E\xCD\x0F\xDE\x89\x19\x07\x3F\xC4\x03\x16\x01\xA4\x38\x54\xC4\x10\xEC\xC4\x3F\xAB\x47\xC1\x13\xDA\xC3\x44\xAA\x44\xC9\x47\x68\x6C\x3D\x71\x4A\xC2\x0E\xFB\xC4\x19\xC4\x43\xCE\x10\xC2\xC5\x11\xC4\x49\xCB\x15\xF5\x88\x11\x53\x30\x1A\x14\x1F\xC5\x54\xC5\x47\xC0\x13\xFE\xA8\x58\xC7\x48\xC4\x14\xC8\x88\x68\xC5\xE4\x58\x13\xEC\xC5\x0A\xC7\x8F\xA0\x14\xD7\xC5\xEA\xC2\x94\xA5\x16\xF3\xC5\x4A\x05\xF0\x84\x11\xEA\x6C\x8B\x08\x52\xC9\xA5\x9D\x70\xD7\xB0\x9A\x32\xCF\xAC\x5D\xDC\xB2\x29\x72\xCF\x9F\xB3\x8E\x9F\x1D\xC2\xCE\x98\xAB\xCC\x8A\x3D\xA6\xCE\x90\x9E\x4B\x57\x38\xBD\xC3\x5A\xAB\x42\x73\xE7\x9E\xCE\xB7\xA9\x7D\xA9\x9E\xAF\x39\x8B\x71\x11\xB5\xB8\x82\x1A\xE6\x53\x43\xB8\xFB\xB8\xE5\xB9\xB3\xE9\xA9\x40\xA1\xAF\xAD\xAB\xAF\xB9\xA2\xA0\xAF\xBF\x6B\xF2\xAA\xED\x94\x2F\xB6\x8A\x06\xB5\x65\x32\xCF\xA0\x8B\x09\xB4\x68\xC6\x78\x14\x7A\x0D\xB5\xB6\x12\x09\x9A\xAA\x11\x4C\xA7\xA8\xB6\x15\xB4\x6A\x37\x45\xBE\xCB\x80\x77\xBA\x87\x6D\xCC\x92\x3E\x24\xA8\xA8\xDA\x2B\xAA\xA8\x2D\x64\x4F\xAB\xA3\x10\x31\xAA\xCD\x38\xDA\x25\xAB\xA9\x7F\xB9\xA8\x48\x16\x49\x31\x4D\xD8\xB4\x2A\xB7\xB5\xA8\x57\xC0\xA8\xE6\x4B\x31\x43\xAB\x67\xC0\x33\x27\x4F\xAD\x71\x34\x02\xC4\xA6\x10\x2E\xC7\x00\x94\xCB\xA0\xD5\x91\xB9\x20\xA5\x4D\xBE\x07\xCF\x7F\x56\xBB\xCF\x52\xAD\x21\xAC\xF6\x93\xC8\xA8\x06\xF4\x61\x34\x01\x0D\x05\x4F\x09\x04\x03\xCB\x62\x77\xD1\x72\xC7\x09\x77\x67\x56\xC5\x92\x6A\xAE\x28\xA5\x64\xF7\x73\xAC\x20\xA1\xCD\xA7\x07\x2E\x91\x3C\x8D\x7C\xC5\xB1\x89\xC8\xE1\x72\x5B\x58\xFA\x82\x52\x18\xBA\xAE\x2A\xE1\x82\x4D\x25\x74\x67\xB0\xBB\x1B\x21\xD6\xAD\x12\xB2\xC3\xA9\x8D\x31\x00\x0D\x0B\xBD\x83\x04\xDB\xAE\x93\xB3\xDB\xA6\x8F\x92\xB8\xFA\x8A\x64\x86\x0A\xA9\x21\xF4\xA6\xA7\x32\xB1\x27\xCB\x31\x95\x03\x2D\xAF\x03\x05\xFB\xAE\x22\xE4\x8F\x1F\x93\x21\xA4\x3F\x92\xB2\x94\xB2\x91\x27\xC2\xA4\x5B\x97\xB1\x0A\xBB\xA6\xBD\xAF\x4B\x2B\xFF\xA7\xE4\xB9\xC8\xD8\x93\x0D\x09\xC0\x83\x04\x09\xB3\x8F\xC1\x44\xAA\x80\xCE\x93\xE3\x9B\x09\x8B\x07\x71\xB1\x00\xB4\xC1\x90\xC9\xD7\xAE\x0C\x01\x03\x19\xB0\xFD\x2B\x06\xB9\x45\x9D\xB0\xEF\xAF\x23\xB2\xC1\x61\xB0\x8D\x6A\x2D\x98\x97\x78\x8F\x46\xCA\x25\xBA\x42\xBB\xAF\xA2\x7F\xBA\x50\x4C\x8B\xB2\x4F\xC9\x42\x0E\x50\x28\xC8\x32\x02\x01\x0A\x85\x3E\xC9\x78\xB1\x1C\x5A\x25\xF3\x8D\x1B\x11\xDD\x8F\x40\xBF\x90\x79\xB2\x14\xBC\xE2\x81\xB9\x9B\xC3\xBA\x64\x92\xAB\xB1\x58\xB9\x1B\xBE\xC5\xA6\x8A\x3E\x92\x8B\xCE\xF6\x56\x8E\x81\x92\x17\x90\x46\xBE\xA7\x98\xC9\xF9\x4B\x3A\xB9\xB1\xBB\x8F\x79\x7C\x3C\x8F\x91\x9A\xC8\x1E\x93\x45\x91\x5E\x82\x3D\x3F\x64\x49\xBB\x8D\x5C\x91\xF3\x8A\x46\xB8\xAF\x84\x93\xA9\xC2\x02\x3D\x50\x48\x06\xAA\xC7\x26\xDD\x8F\x99\xCB\xAB\xC5\xC8\xB1\xCA\x61\xA6\x08\x03\x3D\x8B\x8F\x21\x65\xE6\x86\xF9\x2F\x8E\xAE\xCA\x1D\x9B\x29\xD1\x50\xB7",
"\x8C\x74\x8F\x29\xF7\xAE\xCB\xAC\x8C\xC1\xBE\x8B\x7A\x34\xCB\xFA\x86\x37\x8F\xBC\x88\xC8\xB3\xCA\xB7\x53\x90\x2E\x4E\xF3\xA3\x59\x50\xAF\xD3\xCB\xB2\xC0\xD3\xB5\x5D\xD8\xCA\xEE\xA4\x85\x7C\xAE\xDF\x8D\x11\x18\x44\xB9\xB0\x40\xCA\x9A\xCC\xE3\xB5\x92\x44\xCB\x9B\xC6\x42\xB1\xC9\x86\xB0\x9D\xC1\x40\x9B\xB2\xCE\x52\xB7\xCD\xBD\x8D\xCB\x09\x93\x02\x9A\x33\xAA\xAE\xBF\xAC\xB5\xC6\x29\xE8\xC9\xE9\xC9\x1F\xBB\x2E\xF5\x5D\x6E\xCA\x20\xB4\xC8\x87\xC9\x9F\x61\x92\xC7\xC8\xAB\xB0\x76\xC9\x0B\xBB\xC8\xB6\xCB\x05\x62\x8A\xB1\xD9\x51\x93\xAE\x30\xF0\x81\xC6\xB7\xCB\x7A\x6E\x10\x91\x1E\xEA\xBF\x5B\xCA\xC5\xC5\x2D\xDE\x93\x2B\x4F\x0E\xBF\xA8\x77\x4C\x10\xCE\x16\x96\xD9\xB9\xCA\xC6\xCA\xA9\xCD\x2B\xEE\x91\xB6\xC9\x1E\xB4\x41\x28\xCC\x8F\x8F\xB1\xCB\xA2\x57\x91\x25\xCE\x1C\x9B\x45\x82\x4D\x5D\x92\xAE\xC8\x30\xC2\x8F\x85\x93\x1E\x94\x33\xD7\xCC\xE3\x78\x22\x93\x2A\xE9\x91\x29\xCC\xAF\xCE\x51\x47\x92\x80\x92\xA7\xC0\x34\xFA\x5D\x56\x90\xCC\xC9\x4B\x86\xCD\x54\x92\x18\x0D\x34\xDE\xCA\x79\xCB\x43\x15\x22\xE4\x4D\x30\x03\x92\xB7\x70\x26\xC9\x89\xC9\xB1\x83\xC5\xBD\xB8\x5E\xC0\x84\xB5\xC6\x96\xB9\xE0\xC4\x1B\xB7\x3A\x9A\xB9\x4A\x05\x04\xBC\xA2\x04\xB0\x26\xCA\x9E\xC7\x35\xC4\xA1\x5A\xCC\xDF\x1C\x35\xD2\x51\x8A\xCB\xC0\xC3\xE5\x90\x72\x55\xB8\x4E\xB1\xC5\x7F\xB2\x5C\xB2\x1B\xB5\xAA\xA9\x8E\x35\x2A\xFD\xBD\xF5\xBF\xA1\x31\x63\xFE\xB2\x09\x84\xA2\xB5\x5A\xFF\xB4\x91\x81\xC0\xA4\x8D\x4C\xB4\x9D\x45\x7F\xD8\xBD\xD9\xA5\x50\x92\xA2\x39\x08\xBF\x71\xF7\x97\xA2\x57\xBE\xDE\xBC\x3D\x52\xC0\xCF\xB0\x05\xCB\xF7\x96\xC0\x8A\x50\x06\xC0\x77\x2E\xBA\x88\xA9\x61\x91\x1B\xC6\x4C\x8C\x97\x40\x0C\x58\xB8\xBA\xFF\xB2\x1C\x0F\x5A\xA7\x4C\x93\x96\xFB\x7C\x22\x56\x96\x1B\xA6\x0B\xA9\x59\x9B\x96\x56\xBC\x3F\xBA\x7C\x9B\x5F\xB1\xC5\x00\x85\x07\x43\x80\xCB\x1F\x69\x9E\xEB\xAB\x7A\xBE\x02\x75\x35\x3C\xC0\xB6\xAE\x95\xC4\x4D\x83\x6C\xAC\xBD\x96\xAF\xB5\x5B\xA3\x30\xC1\x94\xB0\xCF\x2C\xAC\xAC\x0A\x92\xA3\x83\x5B\x91\x17\xBF\x95\xEA\xA1\x3D\xC7\x69\xC4\x95\x69\xC3\xE5\xBF\xB8\x5E\x52\xB8\xA7\x1A\xFD\xB7\x49\x55\x2A\xBC\xD2\x9B\x97\xC0\x1D\x77\x91\x46\x64\xB4\xDC\x97\x74\x14\xE5\xA7\xCF\x1F\xB6\xFA\xC8\x51\x6C\xCF\xE9\xCE\xFB\xCA\x5C\x7F\xC0\xB4\xA0\xEF\xCE\xEB\xB5\xB8\x49\x4F\x47\xBF\x5A\xBC\x58\xB1\x94\xB9\x57\x3D\xF5\x1D\xCF\xCE\xF7\x82\x5C\x97\xC6\xBA\x97\xE9\xA6\x95\x43\xD0\x11\x09\xF6\xC1\x41\x07\xD0\x42\x6D\xF7\xCE\x1B\xF0\xB3\x8F\x54\x7E\xB4\x1A\xD3\xD0\xC6\x97\xA3\xC4\x54\xA0\x95\xF4\xCC\xEA\x12\x3F\xD5\x97\x3B\xB6\x6C\x29\x5D\x9D\xD0\xB0\x1F\x74\x9B\x3E\xED\xB4\xBE\xB9\x78\x9C\xEE\x5D\x96\xF9\xCF\x47\xBD\xFD\x86\x07\xF2\xB3\xB1\xAF\x96\x05\x5F\xEE\x35\xF9\x5D\x5E\x10\xB4\xCD\xAB\x93\xBF\xAC\xA0\xB3\x92\xC4\x3A\xB0\xC4\x6B\xA9\xD5\xAA\x9B\xA2\xAD\x94\xC6\xD4\x88\x67\xC4\xA7\xA3\x55\x76\xAB\x73\xC1\x1A\xEE\xB8\x7B\xA8\x06\xDB\x5C\xB9\xC7\x8D\xCD\xDD\x58\xAE\xBD\x53\x0D\xC2\xA2\xA0\x7B\xAD\xCE\x56\xD3\x40\xB3\x29\xFC\xCF\x38\xD2\x37\xBA\x43\xD0\xAB\xE1\xB2\x0F\xD1\x29\x95\xC6\xCE\x88\xE0\x63\x19\xE9\xB3\xD9\xA8\xA5\x8D\x19\xD0\x6C\x49\xD2\x4D\x28\xA7\x89\x56\xE0\xCF\x67\xCA\x44\xDF\x8A\xF5\xB3\xE8\x8C\x37\xE5\x8A\xAD\x9C\xFE\xC2\xD0\xBE\xB3\x83\x97\xAB\x83\x1B\xC2\xB4\xB3\x88\x41\xB5\x2F\x9F\x2A\x8A\xBE\x13\xD4\x07\x3D\xBE\x02\x07\xEF\xB4\xA9\x82\xB1\xC3\xBD\x17\xDE\x46\xD7\x26\xF5\x85\x47\xB4\x42\xF5\x1D\xC2\x16\x48\xBA\xD3\xA9\xD0\x27\xB6\x0C\x09\xD2\x82\x04\x2B\xB7\x25\xDD\x3E\xE2\x05\xDF\xCB\x00\xCF\x4D\xB3\xA0\x60\xC2\xC6\xAC\x09\xE5\xD2\x7A\xCC\xC7\x53\x49\xD2\x97\x3C\xB6\xC4\x9E\xC5\x3F\xB4\x3B\x67\x54\xBE\x13\x23\x63\x27\x04\x51\xB0\xEB\x6F\xD2\x48\xB5\x71\xCA\xD4\x87\xC7\x4C\xB6\x45\xB1\xAA\x8B\xC7\x19\xB7\x6D\xB4\x9A\x7E\xB4\xAE\x2B\x4D\x61\x12\xA3\xB5\x80\x2D\x56\xBB\x93\x48\xD3\x58\xB5\xC3\x51\xD6\x83\x04\x61\xB6\xAC\xA5\xFA\xB7\x15\x65\xB6\x54\x12\x31\xD1\xD1\x66\x84\x2B\x54\xB0\xB6\x98\x2E\x99\x4D\x60\xD7\xB2\xB5\x80\x14\x87\x7F\x4D\xFF\x15\x67\x00\x08\x73\x4E\xF1\x27\x80\x17\xAA\x70\x02\x16\x37\xEB\xD0\xF3\x47\x4E\xEE\x15\x5E\x5E\xDC\x6A\x77\x4E\x67\x61\xA0\xFC\x4C\x4C\xF4\x16\x20\x75\xF3\xCE\x56\x3F\x16\x9A\xB2\xFF\xA3\x55\x7A\xD3\x80\x15\x33\x56\x23\x95\x33\x32\x2C\x01\x95\x3D\xAF\xD3\x80\x15\x3C\xDA\xC7\x98\x05\x51\x4D\x3E\x5C\x98\xB6\xA4\x11\xCA\xB0",
"\xA3\x4D\xF8\x2D\x00\xB8\x40\xDF\x56\x0E\x08\x75\xC8\x0C\x9E\x30\xE4\x54\x16\xD6\x40\xDF\x91\x74\x01\x05\xD5\xC9\x0F\xDA\x48\xD4\x67\x02\xD7\x55\x4F\xD2\xD4\x57\xB4\x3E\xD5\x51\xC2\xD0\xE4\xD0\x3F\xD3\x2F\xFE\xD3\x1C\xD4\x4B\xD8\x4E\xC1\x16\x8F\x42\x47\x51\x52\xFF\xAF\x28\x50\x49\xDA\x50\xDD\xB0\x27\xD7\x79\xC3\x51\xC1\x2E\x68\x17\x02\xDD\x52\xD8\xD4\xFA\xA2\x46\xDA\xC8\xB1\xD4\x9F\x60\xBC\x1E\x56\x1E\xD4\x2E\x4F\x4D\xDE\x4C\x62\xD3\x71\xB4\x39\xD6\x4E\xD1\xD5\x33\xD6\xC1\x46\x0A\x24\x3A\x57\xD6\x3B\xD4\x55\xF0\xD3\x11\x78\x57\x78\x26\xE6\x57\x0F\xD5\xA9\x69\xF7\x77\xD3\xA9\x15\x3E\xD2\x53\xFB\xD3\x44\xD4\x0E\xC6\x54\xEE\xB0\x42\xD7\x4C\xDC\x54\xCD\x6C\x04\xD4\xCF\x26\x50\xDE\x88\x3A\xD5\x57\xD2\x14\x88\x6C\x2D\x81\x44\xDE\x53\xE9\xD4\x65\xD7\x4A\xD9\x54\xC3\xD5\xF1\x19\x3F\xDD\x24\xFF\xD3\x67\xD5\x40\xD5\x53\xDF\xD4\x4E\xD7\x48\xDB\x55\xC9\xD4\x76\xD7\xC7\x9D\x41\xBA\xD5\xED\x57\x4F\xDE\xB6\x01\xD5\x16\xD6\x4B\xDA\x56\xF7\xC9\x48\xD7\x52\x5A\x54\xC6\xD6\x9F\x52\x4D\xD2\x57\xE2\xD4\xE5\x4D\x66\xB5\x69\x28\xB6\x96\xB6\x67\xB3\x5A\xFA\xB6\x0E\xBD\xC3\x53\xDA\x83\x04\xA5\xB5\x5B\x4C\xF0\xAE\x91\x85\xB4\x6B\xBC\x38\xFF\xB2\x0D\xBA\xCB\x4C\xD8\xAD\xBF\xB4\xB6\x82\x66\xDB\xA5\xA4\xAF\xD4\x67\xBA\x7A\x01\x4E\x81\xB4\x6A\xD7\x66\x26\xD6\x75\x18\x68\xB9\xDA\xAC\x5D\xAB\xD6\x40\x0D\x5A\xC1\xD7\x0D\xBF\x99\x11\x5B\xE9\xB6\xD7\xD0\x6D\xD2\xE1\x94\x67\xB2\xB5\xE9\xA0\x77\x0F\xB6\x47\x78\x5E\x5D\x5B\xE9\xB6\x2F\xD2\x6F\xB9\x4C\xC0\xB7\xC9\xD1\xC3\x55\xDC\x86\x04\xE3\xD6\xB9\x47\xDC\xAE\x4C\xC9\xB4\x62\xBE\x9A\xA0\xAF\xC0\x7E\x74\x60\xDD\x9F\x71\xAC\x53\x74\xBF\xD8\x55\xB7\x5F\x73\x75\xB5\x91\x9A\xB7\x9A\x2D\x21\x1A\x5F\x5E\xBA\x20\x01\xE5\x26\xB6\x38\x99\x08\xBA\x79\xB4\x5A\xB0\xB7\x63\x50\xD9\x4E\xDE\x87\x15\x8E\xC5\x80\xD9\x07\x32\xB7\xD8\xD3\x09\xD3\x2D\xEF\xCF\x89\xB7\x74\xDD\xDF\x99\xC8\x1E\x75\x83\xC1\xB3\x8F\xC8\x19\xB8\xCD\xA4\x9C\x5C\xB8\x68\x17\x81\xB4\x60\xCB\xD8\x0A\xB9\x83\xD3\x3F\xDB\x1B\xFC\xB5\xF5\x51\x61\xE4\xD8\x13\xB9\xF6\x52\xE9\x9A\xC8\x16\xBB\xA7\x21\xE0\x9E\xC8\x1A\xDB\x86\xBD\x70\x13\x1E\xBB\x7A\x82\xD7\xDE\x9F\x0E\xE9\xB4\xA5\x77\x60\xDE\x16\x09\xDB\x87\xDC\x60\xD2\xD7\x28\xDB\x1F\x7E\x9B\x6D\xBF\x0D\xBB\x84\xD0\x5A\x4C\xC8\x3E\x0E\x83\xC6\xA9\x43\x22\x1F\xCB\xF6\x5C\x61\xF6\x09\x1E\xD8\x8E\xD9\xE0\xAB\xBF\xCC\xC6\x7E\xB1\x64\xD0\xD8\x56\xDB\x83\xD4\xE1\x87\xD9\x1B\xCA\x9A\x5B\x64\xFF\x1B\x4D\xDB\xBA\x17\xB8\x03\x5D\x1F\xBB\x89\xC1\xE2\xB4\x00\xA5\x81\x6C\x36\xE2\x91\xC1\x22\x01\x8E\xB1\xAD\x92\xB9\xE3\xAB\x8B\xB0\x36\xC2\xB9\x55\x83\x9F\x72\x34\x45\xB9\x93\x1E\x87\xB4\x50\x20\xB8\x04\x15\xC3\x59\x66\xD0\x1C\xCB\xA7\x8D\xBB\x00\xC4\x14\xD7\xD3\xA2\xC3\x67\xCD\xCA\xED\xBE\x06\xD2\x4C\xF2\x9B\xC6\x20\x21\xDA\x01\xF2\xB9\x1C\xC0\x12\xCB\x01\xCA\xC1\x31\x03\x0D\x06\x84\x82\x04\x48\xA1\xF1\xBD\xE8\xA0\x7D\xE3\xC7\x0B\x81\xE9\x87\xD9\x94\xBB\x04\xAE\x39\xC0\x32\xCF\xA2\x16\xA0\xF7\x5C\x75\x1B\xA1\x83\x9C\xE9\xBB\xBD\xFC\xD5\x36\xAB\x76\x1D\xB9\x6A\x31\x54\x9B\x5E\x8B\xA3\x9C\xBF\x49\x0F\xF9\x8A\xA3\xB1\xDA\x73\x1C\x55\x92\x80\x6B\xBC\x36\x59\x6A\xE9\x8A\xAD\x7C\xA2\xB5\xC8\x29\x11\xC5\xB8\x00\x07\xEC\x8F\xBB\xF3\xB8\xE5\xB3\x75\xA7\x04\x56\x3C\x41\x08\x6C\xF9\xBB\x09\xBF\x6F\x21\xFC\xAE\x4E\x2E\x3D\x42\x05\x6D\xC0\x00\x64\xB9\xC4\xBA\xF9\xAF\xBB\xB6\x4D\xA4\x74\x3F\x06\x80\xF4\x0E\xC1\x4E\x08\x27\x04\xE3\xD8\xF3\x44\x3F\x09\xB5\xD9\xC5\x16\x38\x1C\xE1\x25\xE7\x50\x15\x5F\x6C\xFF\xBB\x11\x06\x05\x57\x6E\xFA\xD2\xE9\xDA\x5A\x3B\x6E\xD1\x1B\xED\xD8\x92\xDE\x13\x30\xDB\x68\x00\x10\x0C\x2E\x5D\xD9\x20\x06\xC0\x40\x70\xEE\x01\x06\x4D\x2E\x07\x12\x06\xDC\xCC\x4F\xC0\xD8\x6E\xCB\xB5\x1A\x4D\x53\xB5\x93\x6F\xDB\x04\xBD\xBC\xD8\x42\x4A\xDC\xF4\xD8\xC3\xD2\xAA\x0B\x21\xE7\x52\x36\x5B\x6E\x2F\x19\x49\x58\x51\x35\x5F\xF5\x64\x03\xDD\xD3\x90\xF2\xB8\x79\x12\x9F\xC8\xB5\x03\x03\xBD\x00\x01\xD1\xBD\x61\xA9\xBC\x1B\x9E\xA1\x9C\xF2\x8B\xBD\x20\x9C\x45\x92\xF3\xB3\x7D\x52\xBD\xD3\x76\xF3\xAE\x9C\x38\xBE\xCB\x9C\x70\x8F\x7D\x3C\xBC\x1D\x05\x6C\xD2\xBE\x2D\xDB\xB6\xDB\x6C\xC9\x04\xCD\xD8\xB6\x41\x72\xD2\xBB\x42\xB3\xB5\xD3\x10\x17\xDB\xB2\x4F\xD1\xD9\xEE\xB6\x4E\xB3\xB0\xFE\xBD\x70\x46\xCE\xDD\x79\x2E\xBD\xFF\xBB\xB2\x6A\x9D\xFA\xB3\xFD",
"\x97\xA4\x02\xC3\x4E\x86\x05\xDC\xD3\x07\xC0\xE5\xC3\x6A\xF5\x9D\x96\xA3\xDD\x98\x89\x90\xC0\x7B\xBC\xE7\xCF\x00\xD0\xB3\xA0\xCF\x34\xB9\x01\xFA\xC6\xC5\xBD\x07\xC8\x00\xB4\x00\xA2\x00\xA9\x35\x77\xF1\xB9\x46\xC3\xB4\x97\x8E\xA7\xC0\x5B\xDC\x15\xDA\x8E\xB6\x9F\x36\xC1\x3E\xAF\x7E\xB0\xA3\xB9\x96\x40\x51\x37\x73\xC0\xF6\xA0\xFB\x93\xF9\x77\xC0\xF9\x9D\x0E\xC6\x19\xC2\x6D\xFE\xA1\x0F\xC1\x89\xBA\xD1\x40\x4C\x0F\x54\x90\x9D\x79\xE5\xA1\x87\x9B\x77\xCD\x9A\xEA\xBF\xFA\x94\x6E\x6D\xC0\xF8\x57\x0B\xCA\x98\x96\x6F\x32\xC2\xE3\xDE\xF9\x5F\xDE\x81\xDE\x0B\xC8\x03\xF5\xA3\x65\xD1\x49\x51\x39\xDE\x67\xFF\x9C\xDE\x44\x79\xFE\xCD\x41\xC1\x3D\x21\x71\xA7\xA5\xF8\x93\x7F\xCC\xB3\xB5\x00\x6E\xC2\x41\x0D\x7B\xF0\xA5\xFB\x82\x25\x84\x09\xE4\x6A\x74\xC0\x4E\xA8\x02\xDD\xDA\x4F\xA1\xF6\x49\x09\xEB\x94\xEF\xCF\x55\xA4\x3E\xD6\x81\x21\x2C\x16\x86\xAB\x5A\x81\xBC\x5C\x33\x57\x0A\xFB\xC3\xE7\xA4\x53\xC2\xA0\xA4\x4D\xC2\xC3\x40\x04\x0C\xF9\xC3\x04\xAB\x8F\xA8\x28\x72\x76\xF6\xA4\x44\xCA\x9F\xB4\x82\x39\xA8\x74\x8A\x62\x46\xC3\x1A\xAA\x4F\xCE\x32\x74\xA7\xE4\xDC\x59\xC7\x7E\xC3\xC2\x29\x6C\x38\xC2\x0E\xEC\xDF\x4E\xA8\xAD\x7B\x0C\xF1\xC5\x33\xC4\xFA\xD0\x0F\xCB\x8A\xF7\x87\x52\xCC\xB9\xBC\xC4\x64\x4E\x54\xC6\x10\x06\xE0\x86\x50\x58\xCD\x14\xC8\xC3\x2E\x4F\x5B\xCD\xA4\xBC\xDF\x43\xC4\x4D\xCE\x0E\xE6\xC4\xF9\x63\x5D\xCA\xA4\xBC\xC3\x6D\xC6\x4B\xC1\x37\x56\xC5\x70\xC5\x5F\xCB\x0D\xE6\xC5\x70\x84\x8E\xA4\x2D\x9E\xC5\x17\xE2\x02\xEC\x0F\xCC\xE0\x22\x01\x43\xC1\x14\xD0\xE0\x7F\xC6\x04\xE5\x12\xD0\xC3\x15\xC7\x5A\xC5\x82\xD9\xE0\x3E\xC5\xDC\x4B\x17\xDD\xE0\xE6\xDC\x95\xA5\x14\xF8\x58\x85\xC6\x20\x22\x0F\xFE\xC2\x4D\xC5\xFD\x5F\x0F\xF7\xC3\x44\xB1\x02\xEA\x0F\xF3\xC3\x19\x04\x0D\x0C\x23\xB4\x00\xAB\x78\x2F\x07\x12\x0E\xE1\x36\x62\x1D\x61\x80\x74\x00\x3F\xA9\xED\x3B\x3C\xBC\xC4\xF2\xDE\x0E\xE3\x81\xF0\xE0\xF9\x62\xF0\x31\xA0\x92\xE1\x15\xA9\x53\xC8\x45\x60\xE1\xC1\x4C\x15\xED\x11\xF5\x3E\xB2\x58\x16\xEC\x82\xF3\xDF\xB9\x77\x60\xCF\x43\x0A\xCB\xF7\x86\x12\xEA\x7D\xCC\xE1\x33\x02\x2A\x07\x12\x36\xE1\x51\xE3\x9E\x56\x86\xEE\xC4\x2E\x4E\x15\xE2\x4E\x6D\xC4\x39\xE2\x56\xC7\x56\x5C\xC5\xD4\x56\x17\xE7\x81\xE4\xE1\x6E\x07\x1E\xEE\x7E\xE2\x00\x68\xE3\x1F\xE9\x85\xC2\xE2\x82\xC4\x05\xEF\x86\xFE\x4F\xD1\xC5\x16\x33\x1D\xD9\x31\x94\x7A\x75\xC0\x2D\x52\x82\xC3\xAB\x76\xC5\x08\x9D\xC7\xBB\xAA\x14\x7D\x5E\xF8\x6B\xF9\x76\x8C\x75\x1E\xDF\xA2\xED\x54\xDA\x2B\xEB\x67\x2A\xB1\x05\xA4\x7C\x8A\xFF\x0F\x06\x4F\xE1\xA5\x63\x12\x82\xAF\xE2\x14\x5F\x1C\x7F\x2A\x76\xC1\xDF\xD9\xE7\xAE\x55\x4A\xD8\x84\xC2\x23\xE0\xC8\xDD\xB9\xAD\x2F\xA9\x3A\xD9\x8C\x04\x9F\xDB\xD0\x93\x60\x27\x07\x29\x83\x37\x42\xDA\x6D\xD8\xA1\xD3\x8A\xE6\x7B\x86\xDA\xDE\x61\xCF\x8C\xCA\xA9\x9C\xDE\x44\xE4\x8D\xDA\x6F\x2C\x87\x7F\xDB\xBB\x8A\xC1\xB5\x0C\x03\x5E\xC3\x04\xE5\xD6\x7F\x49\x4C\xD5\xD3\x3C\x05\x2E\xE8\xAF\x62\xD8\x9E\x56\x73\xBF\xD8\x6F\xD7\x89\xA9\x7C\xD9\xFE\x74\xD7\x89\xAA\x7D\xD5\x08\x98\x2E\xDB\xB7\xE6\x2B\x50\x11\x68\x79\x7E\x7F\xDF\xB6\x3B\xBA\xBE\xBA\xF0\xCB\x81\x14\x7A\xC7\xCE\x41\x01\x90\xED\x96\xBE\xBB\xFF\xC6\xA0\x40\x56\x6D\xD7\x06\x25\x40\xF7\x96\xD2\xCE\x32\x8B\xA8\x55\xCF\x09\xE4\xF0\x1E\x40\xDB\xCF\x25\x8C\xE7\x8B\x1B\xEF\xD1\xA6\xD1\xF8\xCE\x3D\xF5\xD1\xC3\x66\xF9\xCE\x49\xF5\xCF\x62\x06\x77\x98\x42\xDF\xD2\x22\xD2\xAB\x6F\x91\xDE\xD0\x26\xD3\x88\xD8\x3E\xE8\xE4\x62\x07\x9F\xA3\x7B\xC4\x67\xCB\x1C\x17\xDC\xC5\x45\xE4\xCA\xCC\x6C\x98\x90\xCD\xCF\x0A\xE6\x16\x8F\x6C\xD4\xE4\x08\xD0\xF5\xCC\x5B\xB2\xD4\x39\xE5\x21\xC9\x7F\x9A\xCF\x10\xD1\xD9\x66\x91\xE2\xCF\xF1\xB0\x52\xE9\x1F\xDE\xE4\xAB\xD2\x49\xB1\x92\xCE\xD8\xF1\xCE\xFD\xC6\x92\xCD\xE5\x20\xB4\x1B\x02\x92\xEB\xE4\x25\xD1\x4B\xE7\x3F\xEC\xD0\x72\x55\x79\x95\x82\x36\x8B\x0B\x7F\x47\xBE\x8F\xC0\x1F\x06\x4E\x6A\x93\x10\x2C\x96\x33\xE7\x06\x26\x90\xC9\xD0\x38\xE6\x44\xEA\x93\xE4\xCB\x45\xE6\xD2\x67\xD0\x4A\xD0\x6D\xE4\x6D\x9A\x05\x80\x97\x71\xE6\x49\x52\x41\xF3\xD1\x14\xD2\x7D\xC7\x41\xFC\xE5\x19\xD3\x52\xE1\xA8\xA7\xE4\x59\xE6\x55\xE0\x95\xE1\xD0\xEF\xCC\x61\xE4\x49\xE9\xE4\x20\xD0\x26\xDA\x95\xE2\x97\x5C\xE5\xE5\xDA\xCF\x7B\xCF\x41\x35\xF4\x36\xFB\x9B\x20\xBD\x9F\xED\xB5\x77\x06\x4C\xC1\x9E\x41\x0D\x99\xE6\x4B\xB1\xBE\xF1\x94\x6E\xB0\x7C",
"\xEB\xAB\xEE\xC1\xFB\xA3\xD9\x06\x7B\x78\xB0\x1E\x06\x5D\xEB\x1A\xC1\x44\x52\x82\x04\x26\x95\x5B\x40\x1E\x29\x63\xE0\x06\x39\xE5\xBF\x54\x51\x0A\xDA\x55\x6A\x88\x1E\x54\xEB\x19\x66\xDD\x40\x4C\xD0\xC6\x1E\x50\xE3\x4C\x04\xCD\x8B\x88\xD8\x9B\x6E\x2C\xE6\xE0\x04\xD9\x45\x0E\x27\x04\xCB\xE7\x7B\xBF\x39\x1F\x7B\xAC\xB7\x33\xE0\xD9\x50\xE4\xB8\xE7\x87\xDA\x9B\xCE\x18\x3C\xE3\xC9\xC7\x4E\x75\xE5\xD8\xCF\x5D\xE4\x94\xC0\xCB\x51\xD9\x47\x00\x9D\xD0\xD7\xD2\xE5\xCD\x45\x9D\xD2\xD9\x63\x53\x75\xE6\x54\x62\x91\xDA\xE4\x2F\x5C\x9D\xC4\xD0\x6F\xE4\xF4\xC7\x40\xCD\x77\x86\x0B\x73\x76\x28\x06\x4C\x7A\x03\x49\x09\x9F\xF1\x5D\x86\x08\x8A\xB6\x28\x36\xE6\xD3\xE5\xD4\x53\x37\x7B\x21\x8A\x05\x10\x03\x33\x57\x2A\x8A\x57\x80\xEF\x88\x2D\x01\x06\xE9\xC4\x48\xA0\xCD\xD9\x61\x22\x8B\xD7\x51\x7B\xE6\xA2\xDF\x0F\xEB\x36\xFE\x74\xF5\xE6\x97\x87\x9F\xF2\x00\x93\x03\x49\x0D\xA1\xFC\xE7\x16\x09\x0A\x75\x14\x0E\x0C\xFF\xE5\x79\xE8\x73\x42\xE8\x71\x21\x81\xE7\xA0\xCA\x06\x09\xE9\x8A\xE6\x19\x0D\xE8\x20\x03\x83\xEC\x4B\x6E\x55\x2E\xE9\x1B\x02\x04\x2B\xE8\x5E\x20\x84\xE8\x85\x26\xD5\x9F\x60\x85\xEB\x3F\x63\xE8\xFE\x4D\x38\x6E\xC4\x1C\x78\x4E\x32\xC1\x40\x1B\x49\x04\x47\xE8\xB1\x7D\x22\x0D\xBA\xC0\x14\x80\xE6\x39\x65\x7D\xC4\xD2\xCF\x03\x33\x4A\x31\x3E\x0F\x80\xBA\xF7\x46\x31\x93\x1E\x68\xD5\x5C\xE4\xD6\x0E\xBC\x71\xD4\xD9\xBB\xB5\x31\x01\x72\xD1\x10\x0B\xD7\xDB\xD6\x65\xBF\x5C\xE7\xCC\x26\xEB\x72\xB4\x3E\xB5\xD6\x22\x01\x75\xDE\xBD\xBF\x19\x8F\x6B\x6E\xDD\xFF\x65\xE9\x0E\xBC\xFD\x07\x63\xED\x2A\x3E\x0E\x5A\x9E\x71\xC8\x96\x61\xEA\x5F\xB2\x09\x9B\xDC\x16\x1D\xDB\x48\x1B\x7E\x04\xBA\x47\x62\x64\xE0\xAA\x25\xC5\xD2\x7A\xE2\x82\x54\x91\xB9\x44\xD8\x1F\xDA\x40\xEA\xB9\xD1\x1F\xE9\x18\x29\x01\x3B\xD2\x8C\xD8\xA7\xFE\x04\x91\xE0\x08\x0E\xA3\xF9\x63\x93\xEB\x0E\xD0\x7C\x78\x4E\x64\xD5\x59\x1A\xD5\x92\xD6\x06\x4F\x33\xD6\x5C\x1C\xE2\x92\xD4\x39\xE3\x27\xA9\xE9\x67\xBD\xDB\x9D\x4F\x5A\xD3\xAE\xB1\x37\xDF\xD6\x8B\xD6\x67\x01\xD5\xCC\x51\x2F\xCD\x4A\xBB\x49\x0D\xE4\xB9\xB0\x9A\x8E\xD7\xC1\x8D\xE3\xCD\x7E\xE6\xA3\xC0\x45\xEA\xC6\x82\xA9\x96\xBF\x37\xF0\xB1\x3D\x04\x3F\xEB\x81\x23\xE5\xA8\x1F\x38\x65\x8E\x49\xD8\xC9\xCC\x97\x6C\x3C\xC0\xE5\x6E\xE6\x50\xEB\x93\xF1\xE5\xED\x83\x43\xEF\x93\xFF\xD5\xCE\xCE\x77\xEF\x40\xCD\xE4\x54\x57\x5E\xEF\x48\xF4\xD1\xE3\xCD\xF5\x5A\x94\xE9\xD2\x87\xA3\xA0\xB4\x95\xDF\xD0\xEB\xEA\x54\xEE\xA0\x4A\xE6\xAC\xD2\x61\xEA\x92\xD1\xE5\x8F\xE7\x0A\xD5\x9A\xC2\xA0\x2E\xD2\xBD\xA2\xEA\xBD\xE3\xED\x11\x5A\xE4\x96\xF6\x00\x66\xE6\x40\x08\x96\xFE\xCF\x35\xE4\x00\xD7\x93\xD4\xEB\x76\xE6\xB5\xE0\x97\xE0\xEB\xD9\xE8\x42\xE0\x91\xEF\xE7\x0D\xD2\xB7\xEC\x93\xD1\xD0\x2C\xBB\xB9\xE1\x36\xF6\x52\x18\x5E\xC5\xE4\x67\xDD\xE4\x83\xE5\xBB\xEF\x94\xF3\xEB\x88\xE7\x08\xD3\x92\xE0\xE4\xF2\xE9\x63\xE4\x92\xEE\xE4\x91\xE4\xED\xD9\xAF\xD3\x1E\x88\xBE\x52\x02\x43\xE2\x70\x36\x01\x63\xC7\xC2\x62\xA9\x5F\xD0\x0F\xDA\x8B\xD0\x8B\x99\xC4\x11\xD4\x79\x8D\x8B\xD6\xAB\x10\xD8\x46\xDB\xC6\x6A\xD3\x11\xD4\x55\x6D\xD1\x4A\x04\x3D\xB5\xAE\xC3\xD9\x72\xD3\xB8\xED\x97\xF1\xB8\x5A\xB1\xB1\xEC\x1A\xFE\xDD\x2F\xE7\x15\xDD\x47\xC0\xB4\xEC\xA9\x20\xDB\x45\xFA\x35\x81\x4C\xBC\xEE\x94\xEC\x01\x96\xD2\xC7\xEC\x06\x2B\x7A\x9B\xD1\x40\x0D\x49\xDE\xED\xA1\xD2\xD7\xDC\xE2\x99\xAC\xC1\xE9\x7D\xCC\xB4\xF9\xB4\x5E\xEE\x31\xD2\xB2\xB2\xD2\x72\x01\x35\x60\xB7\xD3\xDB\xD9\x63\xB3\x2D\xF1\xB8\xD2\x3E\x0D\x7D\x82\xA4\xC0\x17\x44\xE8\x70\x14\xE9\x74\x02\x27\x04\xE0\xED\xF2\x4B\xE9\x4B\xA1\x93\xEC\x38\xEB\xD8\x53\xA1\x94\xE0\xD0\x94\xE9\x9C\x7D\x93\xDE\xC4\x32\xE4\x4E\x30\x93\xED\x22\x17\xD3\x14\xDB\x84\x78\xB7\xCB\xEE\x16\x1E\x95\xEF\xB8\xC3\x26\xD5\xB1\xB3\x34\xAB\xD3\xD5\xE0\xD3\x19\x07\x72\x6D\xD3\x06\x04\xE9\xE2\xAB\xB4\xEA\x3B\xD7\x63\xD0\x56\xEE\x83\x79\xD7\x2F\xE0\x02\x21\xEA\x40\xD6\x9D\x09\xA9\xDB\xD6\x17\xD5\x60\xD5\x54\xD8\xD6\xDB\xE5\x61\xD4\x53\xDD\xD6\x88\xD7\x67\xD8\x53\xC9\x4D\x75\xD5\x9E\xBE\xBA\xF0\xEE\x93\xD6\xEC\xED\x56\xE8\xD5\xB6\xED\xBA\x54\x2F\xFE\xE6\xDE\x4C\xED\xEF\x56\xC9\xD6\x07\xD4\xEA\xED\x55\xCE\xD6\x7B\xB0\x64\xDF\xBA\xD2\xD6\xE7\x97\xF1\xE0\x58\x16\xD6\x8D\xDF\x5A\xDB\xC8\x9A\xEF\xBB\xEF\xCA\x2E\x59\xC3\x16\x73\xD5\x4E\xD2\xBD\xC2\xEF\xAC\xEE\x58\xD6\x4F\xD8\xEF\xF8\x1B",
"\xEC\xE0\x58\xFE\x6C\x4C\xCB\x5C\xD0\xBE\xEF\xD5\x96\x58\xF4\xED\x07\x10\xD5\xA1\xEC\xE8\xE4\x4E\xD4\x7A\x97\x03\x49\x0D\xBF\xDA\xD5\xA1\xED\xEA\xEB\xC7\xB1\x4D\x0E\xD5\xFA\xE4\x07\xE3\xD5\xEC\xEE\x5F\xDA\x59\xEF\xEF\x87\x6D\x22\xBC\x56\xDD\xD4\x87\xD4\x13\x60\x52\xFE\xEE\x4F\xD5\x07\x74\x52\xFA\xEF\x55\xD6\x0C\x04\x02\x24\x3A\x1B\xF0\x00\xF4\x4E\xCA\xD4\xCB\x80\xF1\xD6\x09\xD6\xEF\xC4\xEF\x68\x55\x59\xE9\xD5\x22\x01\xFC\xE0\x5A\xEE\xE7\xBA\xEC\xFD\xE1\x57\xE4\xEF\x2B\xF2\xF9\xE1\xC0\xD3\xEF\x0B\xD5\xDC\x75\xC0\xFA\xA6\x22\xF1\x6E\x54\xC2\xC9\xF0\x12\xEA\xEE\xEC\xBD\xCE\xF0\xDF\xEC\x04\xFC\xBB\xD2\xF0\xF6\xEE\x96\xEF\xA5\xDC\xB6\x5E\xEB\x66\xB7\x5C\xF8\x00\x62\xE8\x00\x04\xA6\xE7\xD6\xCD\xD5\x6C\x07\xA6\xCE\xBC\xD1\xD7\x6B\xB3\x5D\xF6\xD6\x8D\xB4\x8C\x58\x5D\xCB\xDA\xCC\xD6\x1B\x97\x5E\x9A\xE3\xDF\xD4\x37\xE1\x5E\xF6\x00\xDF\xE2\x40\x01\x8E\xE7\xD7\x22\x01\x7A\xD0\x4C\xF3\xC7\x90\x6B\x73\xB4\x25\x0B\x0A\x28\x9E\x7C\xDF\x7E\x70\xE3\xE8\x51\x2A\xB9\xDD\xA8\x24\xF5\xE2\x7E\xDE\xDD\x96\xEF\xFA\xE0\x5A\x15\x63\xDF\xD8\x77\xEB\x1C\x09\x63\xF1\x00\x84\x03\x49\x05\xC8\xCE\xE7\x1D\x05\x7A\xBF\x63\xD6\xF1\x57\xDA\x89\xD9\x65\xDC\x1B\x5B\xD9\xA4\x63\x70\xEF\xD8\x6F\x2E\x95\xE2\x66\xED\xEF\xC4\xE2\x45\x06\x8C\xCD\x7C\x36\x03\x9F\xDA\xAE\x01\xDA\x6C\xDA\x9B\xD1\x46\xEC\xC9\xD2\xE1\x46\xE9\x37\xEB\xED\x51\x73\x8C\xB8\x8D\xE8\x15\x40\x01\x11\xCB\xE6\x80\xA1\x92\xD8\xA4\xDA\x04\xC6\x76\x97\xD9\x40\x09\x69\xD0\xC1\x12\xB4\x23\xEC\x69\xF8\xC1\xE9\x6D\x24\xA9\x8C\xA1\xDA\x56\xA3\xA8\xD8\xE9\x81\xBA\x71\x7C\xB1\xE4\xE8\x84\xF3\x1F\xA2\xEB\xEE\x6A\xCE\x24\xAB\xE1\x30\xE5\x06\x2E\xE2\xCE\xF3\xAA\x71\x09\xC6\x04\xD3\xF2\xB9\x45\x8B\xD1\x4F\xCE\xF0\xE5\xEB\x32\x67\xB1\xB6\xBF\x85\xB8\x61\xF0\xD8\xD6\xED\x2D\xE2\x93\xD7\xF3\x7E\x55\x36\xF7\xB8\xDF\x5D\x3A\x4D\x2F\xE9\x61\xE1\xF3\xCE\xF0\xFD\x01\x8E\x75\x29\x1C\x79\x9D\x2B\xEA\x76\x02\x27\x04\x3D\xF9\x70\xEB\x29\x6B\xE7\x76\x48\x34\x0E\x8A\xFA\xF2\x8D\xC5\xA2\xAB\x29\xB9\x95\xB5\x0C\x32\x3C\xF3\x6B\x2B\x79\x6A\x16\xD7\x91\x42\x6C\xCF\x75\xE3\x6E\x55\x92\x28\x52\x0C\x3D\x5D\x5E\x7A\x2B\x39\x5C\xCD\xEA\xF3\xE0\xF0\xC1\x5B\xA6\x1E\xDB\x58\xEF\xC8\x58\x2D\x61\xDB\xC0\xB9\x65\x32\x3B\x67\xDB\xB6\x4F\xBF\xD1\x74\xE8\x15\x96\xBC\xE6\xB3\xD2\xF6\x09\x74\xEF\xEB\x43\xB4\x18\xDB\xA0\xBF\x49\xF4\x22\x35\x87\x23\xDC\xA1\x75\x72\xE3\x9A\x36\x00\xCA\xDA\x72\xD3\x9B\x2C\xDC\xD2\xBE\x72\xCA\xBD\xFE\x9B\xCB\xBD\x84\xBA\x77\x71\xA2\xEC\xD5\x72\x93\x9A\x59\xBF\xC1\x9A\x72\xB9\xDC\x2A\x9F\xCE\xD4\x67\xBD\xDC\x51\xDD\x35\x98\xED\x77\x00\x54\xDC\xE2\x48\x38\xFF\x9C\xBA\x65\xD6\xD5\xC5\xED\xBF\x9E\x56\xDA\xB4\x95\xA6\x99\x0D\x9B\xDB\xBB\xF7\x97\xCE\x66\xDD\xE6\xC8\x76\xDB\xCE\x77\xBE\x33\xBB\x76\xE3\xDD\x6D\xDE\xE8\xC4\x04\xCF\xDA\x79\xDD\xA4\xDA\xD1\xC0\xBF\x17\xB1\x08\xC2\x10\x23\xC0\x9A\xD9\xFB\x46\x02\xDC\xDE\xBA\xE2\xE7\xD1\xF9\x69\xDE\xA1\xDF\xE0\xD0\x03\xC8\xD0\xF3\x9E\xE9\xD0\x78\xCB\xDE\x82\xDD\xE3\xDC\x7A\xC8\x84\x3C\xC1\xE8\x7C\xD5\xC0\xDB\xBB\xCF\x3C\x22\x04\xFF\xBC\x22\xAF\x47\x9A\x1E\xEB\x5D\x36\x03\x1A\xCD\x06\xEE\xC2\xF2\x6B\xB9\x60\x95\x95\xC2\x3A\xF1\x1D\xCC\x38\xDF\x93\xBD\xD8\x51\x5B\x7C\xCE\xDF\xD5\x5C\x69\xF6\xCF\x9B\x4C\xA0\xC1\x2E\xC3\x0A\xC9\xA5\xBD\x5F\x52\xA5\x96\xAF\xB0\x17\xE8\x4F\xCE\x0F\xD4\x7A\x06\xE3\x40\x08\x80\xFC\xC4\x34\xE0\x07\x6D\x80\xFA\xDF\xC7\xC3\x1A\xEA\x85\xEF\xE0\x36\xC6\x05\xE3\x0D\xCD\xC5\xB9\xF4\x92\x82\xDA\x6B\xE0\x1E\xE1\x56\xC0\x82\xC4\xE2\x27\xC4\x09\xE3\xDC\xD8\xE0\x79\xC5\x47\xCD\x10\xF2\x76\x21\xC7\x3A\xCD\x82\xFE\xDF\x31\xE3\x45\xCA\x62\x66\xE0\x3D\xC6\x6E\xF2\x02\x3F\x49\xD4\xF7\x23\xEB\xDC\xF5\xC5\x84\xC7\xFE\x9D\x44\xBD\xC2\xB1\xF6\x5B\x05\x03\x3C\x88\x35\x02\xC1\x46\x00\x16\x37\xEF\xF6\x0D\x65\x03\x06\xC4\x70\x00\x0D\x08\x45\x73\xF7\x01\x61\x0D\x0F\xA3\x95\xD7\x89\xE2\x78\xF0\x18\xF6\xA6\x56\xAA\x08\x0C\xE3\x01\xA8\xF8\xF6\x78\x5A\xDF\xDD\xC4\x3C\x00\xFC\xB5\xDF\xFE\xF7\x2E\xE0\x80\xF2\x82\xEE\x4C\x6C\x38\x81\xFB\x67\x47\xF8\x7C\xE2\x08\x01\x02\x0A\xF8\x7B\xE1\x20\xE3\xDE\xC1\xF8\x96\x96\x84\xF9\xDF\xFF\xA8\x3D\x00\x86\xFC\xE0\xD8\xF7\x1F\x55\x14\x0E\xE1\xC6\xF8\x3F\xAA\x0F\x02\xE2\xFE\xF6\x82\xE0\x73\xF2\x02\x32\x38\x27\xF9\xF0\x44\xE1\xCB\xE2\xB6\xB5\x19\xE3",
"\xE2\xF4\xDF\x1E\x57\x11\x04\x05\x09\xC5\x48\xE0\x1C\x0B\xDE\xDA\xDF\xED\xF4\x0D\x04\x0F\x24\x3A\x43\xFA\x7C\xF3\xE1\xFB\xF7\xE2\x51\x86\xF2\x12\xFD\xDF\x50\xAC\x79\xF3\xE0\xD7\xE0\x05\xFA\x8C\xFB\xDF\xEB\xF8\xC9\xF6\x5C\xCD\xE0\xC3\xE2\x4E\xF9\x11\x02\x0E\xD1\xF9\xEA\xF7\x8F\xA7\xE1\xC9\xF9\x37\xFB\x8D\xAE\x0D\xE2\x4F\x5A\xF8\x94\xF7\xE4\xDD\xC4\x21\xF8\x98\xFC\xE2\xE0\xE0\x99\xEA\x2E\xCC\xE4\x1B\xF9\x67\xF9\x85\xFA\xE2\xEA\xF9\x55\xF8\x93\xF2\xE6\xC3\xC6\x30\xFA\x99\xFF\xE1\xDD\xC4\x35\xF9\x7F\xFB\xE6\xFF\xF7\x58\xF9\x80\xFA\xE3\xD6\xE8\xB1\x2F\x65\x72\x87\xC3\xE0\x89\xE2\xC1\x48\x87\xC6\x04\x8B\xFA\x21\x58\x88\xC9\xE1\x28\xE2\x1F\xEB\x11\xE1\xF9\xA1\xC2\x1B\xE6\x88\xCF\xF7\x8F\xFB\x82\xF6\x0D\xFD\xE1\xB6\x3E\x23\xEF\xE7\xD7\xF9\x2E\xFB\x24\xE8\xDE\xC5\xFA\x9F\x80\x0D\x05\x7F\x4C\xE1\x44\xE3\x52\x33\x1F\xB5\xF7\x30\xF4\x9E\x93\xAC\x97\xE2\x6A\x37\xAA\x7A\x89\xC4\x04\x9C\xE2\x76\xC6\x32\x76\xAA\x9F\xE3\x47\x11\x8A\xDB\xCC\x7D\xDC\xCA\x96\xE7\xBC\x56\xA7\xE3\x9C\x93\xAC\x8D\xF3\x91\x0F\xAF\x20\xCD\xC5\xFB\xB1\x05\x74\x77\x12\x09\xAE\xDC\xB8\xB2\xF4\xD8\xA5\xF3\xCE\xFB\x61\xB1\xD4\xC9\xA3\x14\xF5\x25\xFD\x64\xE2\xF3\x79\x2C\x99\xDB\x67\xE6\xD9\x7D\xD8\x29\x89\x8C\xE0\xF2\xB9\xF2\x28\xF7\x7C\xDF\xCD\xA5\xF1\xDA\xED\xE2\x90\xD1\xAA\xF2\x33\x2C\xB2\xDD\x70\xDB\xE0\x36\xB1\xDC\xB2\x00\x65\xF1\x40\x07\xC6\xE3\xE3\xC8\xB6\x35\xDA\xE3\xA5\xCD\xC1\xD1\x1B\xFB\x8E\xEF\xF1\xF0\xD7\x7E\x54\xDD\xBC\xFB\xF1\xE0\x95\xD3\x8F\xF8\xD7\x65\x55\x77\xB0\x34\x7C\xD7\x7D\xF2\x9D\x0A\xAC\xC0\x1F\xCC\xEB\xEF\x92\x03\x01\xEC\x01\x07\xC0\xE1\xAD\xCB\xCF\x01\xD0\xB7\xE1\x94\xFD\xCA\xD7\xE8\xC3\xE6\x93\xFB\x96\xD6\xCE\x6F\x92\xB1\xF9\xE5\xF4\xC7\x45\xEB\x44\xE6\xF2\x22\xFC\xB9\xEA\x68\xCC\xE5\x23\xEC\x4B\xE5\xB2\xDE\xED\x89\xE6\xD7\xE7\x95\xF4\xEB\x22\xD0\x64\xE7\xAF\xC2\xA4\xFA\xCE\x79\x99\xED\xE9\xE6\x03\x83\x6A\xE7\x22\xED\xE6\x33\x01\x37\x07\x12\x3E\xFC\x88\xF3\x1C\x04\x9B\xDF\x0E\x2A\xB8\x01\x72\x9B\xE8\xE7\x64\x53\x84\xE8\x9D\xD2\x8F\xB5\xE5\xEE\xE6\xF1\xD5\xEB\xBD\xCB\x70\xE5\x47\x8B\x8A\xE1\xE6\xD0\xFE\x73\xB2\xD6\x3C\x7F\xF8\xDF\x64\x96\xE7\x4A\xFF\x7A\xE3\x33\xED\xE7\x11\xE5\xC2\xED\x2B\xF8\xE5\xC0\xCA\x71\xEA\xF3\xEE\xCD\xAA\xE7\xE7\x0B\xEA\x4D\xE7\x06\x04\xDB\xF1\x57\xB3\xE6\x57\xFC\x74\xD7\xEF\xDB\xFD\x48\xFE\xA2\xE9\x9D\xD4\xF1\x4E\xFF\x02\xFD\xAD\xCA\xEC\xF2\xE4\x78\xED\x3F\xF0\xFD\x48\x62\xDC\xF4\x30\x8B\x90\xE7\xE5\x22\xF5\xC1\x5D\xFD\x8B\xEB\xD7\xF8\xF7\xEC\xF0\x4F\xFE\xD8\xF2\xFA\x5F\xE7\x84\xF8\x89\xCF\xC9\x59\xE8\x88\xFB\x7D\xE3\x03\x3B\xE7\x06\x04\xE6\xF8\x3E\x7D\xE7\x38\xBB\x7F\xE3\xF7\xD0\x6A\x0A\xEA\x25\x2F\xA2\xF8\xE8\x98\x29\xA4\x65\xA3\xF0\xE8\x32\xEA\xF5\xE1\xA1\xEF\x2D\x76\xFD\x85\xE3\xEA\xD2\xFE\x18\xEA\x85\x06\x9F\xD6\x08\xAB\x7B\x87\xE6\x10\x36\xFE\x9B\xFD\x88\xEA\x37\x86\x46\x9E\xFC\xC1\x88\xA2\xC4\xE8\xA3\xFE\x83\xEC\xA2\xE6\xFE\xC0\xFC\x83\xE4\xFA\xC0\x54\x34\xE9\xF1\xF7\xA3\xC2\xFF\x39\xE9\x8C\xD7\x67\xFB\xE8\x0A\xF1\x03\x5B\xA9\xF7\x0A\x6F\x0D\x90\xEA\xD9\x43\xE9\x1D\x71\x91\xE2\x03\x09\xE9\x03\x05\x92\xE7\x4B\xD0\x08\x92\xEC\x84\x05\xF4\xFB\xE2\x89\xEF\xE5\xE2\x1B\xE0\x00\x8C\xEC\xA3\x0E\xB8\xD8\xE9\x9F\x2A\x11\xFA\xC4\xE5\xD6\xC9\x1E\x6B\xD0\xC5\xFB\xB5\x32\x01\x13\xFF\xC4\xDB\xE9\xC2\xD6\x14\xF1\x54\x86\xB6\xE3\xFE\x88\xDC\xA6\xEE\xE9\xF8\x64\x38\x76\x6E\x69\xB2\x58\xDB\x53\xFF\x7E\xD6\x7A\x75\x61\x73\x3D\x74\x5D\x5B\x4F\x79\xD2\x69\x75\x6F\xFD\x08\x75\x79\x77\x90\x78\xE9\x23\xE0\x62\x70\x6E\xE9\x4A\x05\x14\x3D\x71\x67\x8C\x0E\x24\x44\xE2\x63\xD1\x5C\xA5\x4D\xDC\x3E\x69\xBC\x28\x8D\x6F\x9E\x75\xE3\x60\x01\x95\xAF\x46\xFD\x4E\x6E\xBF\x13\xAA\x5A\x64\x6B\x54\x7C\x57\x65\x2B\x24\x4D\x26\x75\x47\x0C\x54\x75\x0B\x80\x28\x0A\xAA\x7D\xFF\x68\xBD\x23\x2C\xB0\x74\xB0\x6C\xB6\x4E\x9B\x64\xAB\x6B\xF8\x68\x1E\x0D\x7E\x9B\x73\x1B\x01\x40\x73\x20\x03\x90\x7E\xD7\x68\x1E\x6B\x72\xD3\x75\xC6\x7D\x77\x74\xEF\x76\x40\x7A\xF8\x46\xEC\x1C\x7E\x61\x7F\x25\x83\xD8\x78\xF2\x73\x5C\x55\xD8\x5B\xE4\x47\x76\x4D\x68\xC0\x73\x13\x68\x5D\x74\x65\x68\x2A\x6E\xFC\x07\x73\x8E\x73\x92\x73\xBB\x77\x0B\x80\xB2\x61\x03\xA8\xEC\x33\x7E\x40\x61\x95\x76\x81\x5D\x7F\x63\xF1\x7B\xF8\x51\x01\xF0\x73\x4C\x80\x86\x71\x6E\x4E\x27\x7D\xF1\x7B\xFB\x53\x01",
"\xDF\x75\xDC\x66\x2B\x82\x21\x6F\x6E\x65\x7A\x5A\x02\xA6\xC6\x27\x7E\x1D\x77\x94\x7D\x61\x77\xE5\x71\xB2\x68\xDA\x70\xCF\x21\x68\x84\x80\x33\x83\x56\x70\x0D\x8D\x42\x71\xC9\x48\x00\xA6\x3E\x1F\x5A\xB5\x2F\x47\x5E\x60\x20\x03\x03\x02\x82\x04\x45\x80\x04\x76\x69\x75\xC5\x7A\xEF\x77\xF1\x76\x5C\x4B\xEC\x73\x80\xDA\x75\x3A\x81\x27\x86\x97\x44\x05\x90\xD8\x22\xEB\x45\x76\x18\x72\x73\x7E\xC6\x70\x10\x6F\x4B\x28\xF9\x58\xE5\x0B\x73\x1F\x76\x93\x74\xC9\x77\xBE\x53\x95\x62\x04\xB0\x02\xAB\x7E\xB6\x81\x78\x77\x19\x82\x77\x68\xAF\x6E\x04\x93\x1E\x07\x5C\x6D\x81\x27\x83\x1B\x81\x62\x71\x07\x84\x61\x18\xEB\x6E\x80\x0F\x76\x84\x76\x14\x87\xF1\x78\x07\x95\x02\xB5\x97\x2B\x81\xA3\x62\x8D\x73\x1E\x84\x23\x7D\x5C\x41\x04\xAF\x02\xF1\x75\x89\x81\x93\x75\x1C\x6F\x10\x81\x06\x99\x06\xB3\x02\x8B\x81\xBC\x80\x9A\x7E\x1A\x80\xB3\x59\xB5\x7E\xDA\x57\x4B\x03\x02\xD7\x24\x6E\x80\x49\x71\xA5\x78\x48\x61\x08\x3A\x4A\x57\x4F\x64\x76\xDB\x27\xDE\x75\x45\x0D\xB7\x6D\x11\x2B\x7A\x5C\x7F\x02\x02\xEF\x7E\xE5\x70\xFC\x75\xB8\x73\xDC\x67\xF3\x13\x5D\x8A\x77\xF3\x7D\xFA\x7A\x73\x7C\xFE\x6F\x5B\x2E\xED\x7D\x63\x70\x76\xA0\x59\x40\x85\x2C\x75\x4B\x66\x6A\x41\x04\x8B\x6E\x1E\x81\x8B\x6C\xDB\x3A\x54\x5E\xAA\x6B\xB4\x70\xED\x78\x77\xE4\x68\xA9\x3C\x49\x69\xA5\x7D\xF8\x47\xDD\x41\xF0\x36\x27\x2A\x81\x19\x82\x32\x69\x94\x34\xBC\x67\xB9\x30\x00\x8A\x10\x32\x80\xAE\x59\x59\x0D\x06\x83\x5B\x75\x08\xB9\x00\xA1\x7B\xF8\x2A\xB7\x5A\xE7\x71\x74\x7B\xE1\x36\xE0\x5F\xEE\x3B\x45\x1B\x83\x1A\x03\xFF\x76\x20\x0B\x13\x9E\x08\x9F\xF0\x34\x78\x5F\x6A\x8C\x76\x3C\x6D\x75\x78\xC0\x62\x09\xA6\xF0\x3E\x78\x28\x78\x20\x78\xF3\x73\x62\x34\x4E\x6E\xE1\x53\xF0\x30\x78\xFF\x56\xF7\x7E\x71\x6E\xB2\x57\x0E\x82\x08\x29\x03\xDD\x78\xA1\x5A\x21\x59\x3B\x80\x00\x0F\x0E\x86\x6D\x46\x00\xA9\x5B\xF5\x42\x30\x78\x56\x58\xBC\x6D\x4C\x79\x01\x31\xFB\x00\x00\xF3\x7C\xAC\x58\x4B\x82\xBD\x6E\x38\x79\x73\x6E\xF1\x0A\x17\xD2\x5B\x77\x70\xC0\x7D\x8E\x7C\xAB\x4F\xEC\x34\xE3\x79\x6B\x06\x7E\xCF\x24\xC2\x79\x99\x6F\xC5\x6C\xF7\x61\xF1\x6E\x7D\xE1\x6A\x1C\x03\x59\x81\x2D\x83\x55\x0B\x0B\xAB\xF1\x18\x64\xE9\x3E\x76\x71\x5C\x85\x10\x44\xC7\x76\xAF\x52\xE7\x77\x82\x05\x7F\x7B\x73\x5E\x81\xBC\x5C\xB9\x6A\x75\x18\x4B\x6D\x7D\x8A\x63\xE0\x5B\x0D\x03\x30\x82\x09\x48\xE3\x6A\xF1\x77\x60\x37\x80\xEA\x32\x3A\x77\xFD\x2A\x18\x8E\xC7\x52\xE7\x0D\x83\x02\x7F\x3B\x79\x8E\x01\x8F\x79\x17\x98\xC7\x7D\x8E\x14\x83\x79\x6D\xA1\x2F\x71\x73\xE7\x79\x9C\x6E\xB8\x24\x3A\x50\x00\x3D\x6D\xE7\x71\xF2\x45\xE9\x7D\xC2\x25\xFC\x42\xF2\x4E\x16\x99\x75\x4D\x75\x6F\x71\xEF\x7F\x9B\x7E\xF8\x42\xE7\x13\x0B\xBF\x47\x47\x74\xE0\x7E\x64\x68\xF7\x79\xFA\x61\xCC\x47\x7E\x86\x7F\x31\x29\x70\x83\xE9\x7A\xF8\x67\x33\x0B\x05\xC0\x73\x72\x01\x89\x73\x01\x6D\xEA\x73\x9E\x7A\xCE\x7D\x06\xD0\x83\xBF\x82\xE9\x81\xEB\x7D\x3A\x81\x1B\x17\x0E\x86\x07\x98\x7E\x9F\x81\xF2\x27\x1F\x78\xE9\x7C\x2E\x2A\xB0\x69\xF4\x1C\x5E\x0F\x81\xE8\x83\x82\x6E\x76\x29\xC9\x74\x03\x06\x80\x21\x5C\x42\x58\xEB\x4C\xFA\x27\xC4\x5F\xF1\x58\x33\x75\xE2\x47\x7D\x1C\x03\x5F\x14\xA5\x3A\x16\x7D\x98\x14\xC5\x4E\xF3\x58\x79\xD1\x7C\x6D\x79\xA4\x35\xDA\x76\x5A\x37\xF6\x6D\xF3\x6D\x77\xEF\x79\x35\x16\xDA\x2A\x9E\x72\xC4\x4A\x58\x0D\xDD\x78\x79\xFD\x83\x8B\x5E\x7A\x4A\x11\x48\x00\x57\x01\x36\xF4\x0E\x82\x2B\x6F\xA3\x5F\x99\x49\xE9\x58\x68\x41\xE3\x3F\x9B\x45\x51\x78\x7B\x73\x70\xC9\x63\xE6\x54\xD4\x76\xB9\x46\xF5\x67\x22\x48\x7B\x4D\x4E\xCE\x5C\xE7\x66\x2C\x17\x0F\x7F\xF8\x08\x7D\x19\x03\xF6\x7A\x0C\x05\xC8\x76\x10\x1C\x11\x86\x52\x5C\x7C\x39\x84\x14\x73\x9C\x7A\xBC\x2A\xE4\x76\xEE\x6C\xE1\x15\x7D\x14\x71\x3C\x7F\x73\x78\x48\x8E\xE3\x62\x12\xB4\xF9\x1A\x7C\x80\x7C\x17\x7F\xA0\x7A\xCF\x78\xE2\x7B\xF4\x6D\xE9\x54\x7C\x50\x84\x50\x7D\x96\x78\xCE\x7B\xE7\x7A\xC0\x58\xF1\x44\x84\x94\x7D\x5C\x61\xCA\x37\xC9\x7B\x24\x91\xF3\x75\xE0\x2E\x26\x5F\x7C\x30\x87\xA7\x7C\xC4\x7D\xE1\x74\x12\x92\xF9\x56\x84\x69\x7C\x35\x85\x9D\x79\x02\x74\xE2\x6F\xF3\x6F\xFE\x22\x14\xC6\x52\x1F\x7D\xFD\x2D\xBD\x79\xEA\x7D\x67\x2B\xFA\x73\x7B\x47\x59\x1E\x7E\x0D\x04\x47\x46\x03\x11\xC5\x4B\xFB\x18\x7B\x36\x00\xFA\x79\x0D\x00\x8B\x29\x28\x81\xC0\x36\x00\x3F\x54\xCD\x1F\x2B\x71\x97\x7B\x4D\x88\xE3\x71\xA0\x18\x01\x26\x60\xE6\x27",
"\xFB\x43\xA0\x82\xFB\x65\x28\x94\x01\x1D\xBE\x7D\x08\x88\x85\x3D\x2F\xA3\x85\x23\x61\x29\x82\xA7\x14\xF8\x59\x84\x8E\x33\x00\x7F\xA5\x80\x58\x61\x87\x6B\xC2\x64\x4D\x0B\x7D\x03\x03\x46\x7D\x19\x72\x0F\x75\x85\x7D\xF4\x72\x76\x00\x71\x4B\x7C\x3A\x85\xA5\x81\xF2\x2D\xE9\x67\xC4\x74\x0A\xE7\x70\x5E\x71\x5B\x85\x98\x83\x07\x75\x88\x60\x96\x55\xE2\x6A\x1A\xB0\x7C\x06\x11\xC3\x2B\xD6\x78\x2D\x35\xF5\x59\x31\x1E\x71\x36\x2E\x50\x71\x47\x2F\xDC\x3D\xAB\x43\x28\x47\x8C\x0F\x59\xC1\x55\xF3\x60\xDA\x15\x90\x6E\x07\x9D\x8D\x7E\x01\xE4\x26\xC1\x62\xA6\x17\x70\x65\x34\x6D\x34\x3C\xE6\x56\xDC\x0E\x6E\x6C\x83\x46\x50\xDA\x65\x27\x17\x99\x1B\xF5\x27\xFE\x11\x3D\xA7\x7E\xB2\x26\x1D\x07\x24\x03\x2F\x80\xD1\x62\xFE\x0C\x74\xE5\x84\xE3\x62\xBA\x6D\x97\x69\x1C\x7F\xA5\x77\xC1\x6B\x3D\x69\x32\x2D\x63\x26\x10\xA6\x49\x4F\x33\x91\x4B\xE8\x63\x83\xBE\x64\x07\x06\x64\x0B\x8C\x4E\x4A\x60\x23\x30\xD2\x21\x39\x73\x77\x87\x7D\x43\x83\x70\x7E\x30\x91\xD4\x66\x0B\x91\x82\xE8\x85\xC3\x83\x7A\x6A\xAA\x51\x10\x8E\x17\x8A\xFF\x70\x85\xCA\x7E\xB2\x27\x2A\x07\x24\x03\x32\x96\x17\xA0\x0D\x42\x00\xF9\x85\x5D\x6B\xBE\x87\x03\x8D\x2F\x8E\x6A\x43\xAC\x2F\x29\xC5\x7E\x45\x07\x81\x77\x28\x6B\x64\x35\xCF\x37\xE0\x31\x86\xF5\x38\x40\x12\x28\x10\xCC\x66\xC9\x25\x18\x8F\xFF\x07\x86\x88\x7F\xBB\x7F\xCE\x87\x22\x67\x2C\x8C\x40\x2C\x4B\x43\x55\xEF\x82\x36\x0A\xEC\x25\x13\x7D\x6D\x7B\xF1\x1F\xDB\x7D\x75\xE1\x6C\x19\x02\x3A\x21\x21\x03\x35\x88\x9C\x33\xDB\x7A\x5C\xF5\x6C\x4F\x54\xBF\x84\xDD\x6C\x4B\x2E\xB7\x5A\xDB\x22\x5F\x01\x3E\x8C\x7B\xE4\x08\xDC\x68\x6F\x14\xF4\x15\x0D\x83\x02\x55\x86\xD0\x70\xBE\x09\x65\x89\x35\x8B\x2A\x37\xDB\x4A\x0C\xF9\x6C\x14\x81\x44\x02\xA4\x76\x61\x79\xD2\x41\x4E\x03\x6E\x64\x26\x48\x43\xC5\x03\x03\x86\x01\x80\x09\x2C\x0D\xE7\x85\x20\x81\x87\x6F\xD7\x81\xF5\x51\xF0\x34\x1B\x89\xD9\x19\x7A\x8E\x06\x68\x24\xDE\x84\x06\x09\x01\x9B\xD5\x5C\x00\x97\x86\x2B\x86\x89\x81\xA9\x68\x3C\x8C\x71\x7F\xF9\x23\x00\xB2\x82\x72\x86\x34\x01\x7D\x83\x93\x78\xF2\x33\x01\x1E\xF2\x4A\x71\x0B\x0A\x14\x5C\xA1\x6F\xB3\x72\x24\x74\xC6\x60\xAB\x40\x5C\x87\x6D\x6A\x71\x2A\x7B\xD1\x3B\xCA\x76\x13\x22\x05\xD3\x0A\x64\x83\xA9\x08\xA5\x3C\x33\x86\xDC\x54\xF7\x68\xD7\x76\x7D\x6C\x4E\xAC\x78\x47\x39\x31\x83\x17\x8E\xC7\x4C\x06\xF3\x82\xF2\x70\xD5\x81\xE6\x11\x32\x8B\x5F\x7C\xE3\x7C\x05\xC6\x5C\x5B\x44\xCA\x7F\xEB\x51\xF6\x7D\x06\x0D\xB8\x18\xFE\x03\x02\x9A\x7F\xD0\x7E\x7F\x76\x42\x0A\xCD\x73\xE0\x05\xFF\x28\x7F\xC3\x7F\xE4\x7F\x82\x70\x7B\x8D\xFC\x6A\xFD\x50\xFF\x3D\x78\x3D\x74\xEA\x80\x5C\x68\xFE\x41\xF9\x78\x13\x93\xFE\x32\x7F\x1A\x74\xDA\x7E\x0D\x06\xF6\x73\x10\x18\xFD\x52\x0F\xBB\x7F\x24\x74\xEA\x87\x39\x7E\x7A\x8B\x3D\x87\xFE\x44\xFF\x75\x87\xCC\x7F\xD2\x7F\x8C\x73\x6A\x2A\xFC\x76\x1F\x8E\xFF\x72\x4D\xDF\x86\xD6\x7D\xD0\x84\x70\x45\xFD\x61\xAD\x40\xD7\x74\x74\xC3\x6B\xF8\x7C\x56\x87\xB8\x63\x03\x16\xFF\x7F\xE9\x08\x88\xFA\x7F\xC5\x24\xFF\x7D\x25\x84\x64\x77\xE2\x6D\xE9\x59\x78\xD7\x6B\x38\x74\x01\x82\x01\x30\x41\x82\xC6\x6F\x2D\x21\x82\x2A\x82\xA0\x00\x0B\x81\x84\x8A\xDE\x53\x01\x27\x04\xD1\x69\xCD\x1D\x54\x75\xBD\x7D\x1C\x74\x41\x81\xA6\x6F\x04\xED\x5A\x3C\x81\xD0\x77\x3C\x80\x42\x0A\x10\x96\x07\x95\x08\xDC\x18\x77\x76\xF0\x7C\x48\x85\x61\x8C\x15\x0F\x33\x35\x10\x95\x86\x3E\x06\x4A\x3C\x51\x5F\x2C\x7E\x10\x86\xFF\x50\x04\x91\x87\x19\x86\xD0\x81\x95\x6D\x2D\x8C\x31\x86\xFF\x60\x10\xED\x16\xD5\x31\x92\x82\x10\x5A\x1B\x32\x4D\x62\x09\xA1\x05\xFE\x82\x58\x5A\xA9\x3D\x70\x5C\xF1\x5D\x4E\x12\x9D\x24\xB5\x47\x5F\x9D\x77\xB6\x15\xA4\x3D\x1B\x7E\x8D\x64\x6E\x5D\x06\xB6\x87\x69\x78\xDC\x86\xC6\x84\x89\x83\x1A\x8E\xAF\x7D\x0E\xFE\x7D\xF3\x6A\xE0\x85\x6A\x86\x2E\x84\xF0\x7C\x6E\x52\x06\xBD\x6A\x38\x67\xE3\x87\xBA\x79\x8C\x89\x4C\x63\x23\xA1\xD7\x7A\x2F\xB4\x86\xC4\x26\x67\x82\x8D\x8A\x44\x99\xF7\x6D\x11\xB3\x26\xA5\x82\x38\x8B\x1C\x78\x78\x82\x87\x57\xAF\x78\xF1\x78\x82\x92\x82\xE3\x84\x6C\x83\x18\x72\x1B\x80\x0F\x3A\xE9\x6A\x7E\xF9\x82\xF7\x0E\xAA\x5B\x36\x79\x21\x86\xF5\x35\xE2\x6C\x25\xB5\x71\xA4\x84\xEB\x12\x76\x27\xCD\x61\x14\x80\xE1\x3E\x7C\xEC\x7A\x4A\x3C\x8F\x83\x20\x0E\x23\x92\xF1\x66\x09\xDE\x7B\xB7\x6A\x39\x84\xAA\x83\x57\x82\xE0\x7B\xF1\x6E\x09\x93\x85\x15\x7D\x04\x7C\x6F\x7D",
"\x48\x8E\x17\x67\x12\xA2\x09\x9E\x2A\x11\x7D\x5B\x89\x90\x85\x23\x6F\xE5\x72\xED\x3C\x12\x9F\x70\x51\x84\xF2\x79\x9B\x85\x4C\x8D\x25\x8B\xC4\x69\xF9\x46\x89\xC3\x85\x2D\x72\x9B\x7E\xC4\x72\x4C\x8D\x12\xBC\xF9\x5B\x69\x36\x7C\x4A\x85\x1B\x71\x49\x85\xE6\x6C\x26\x95\x09\xF2\x7C\xBB\x89\x68\x88\x70\x79\x65\x33\x25\x90\xED\x64\xFA\x41\x27\x9B\x84\x1C\x84\x1C\x05\x50\x82\x03\x1F\x14\xB5\x11\x21\x85\x8E\x84\x14\x71\xA9\x87\x9B\x83\x4B\x9B\x26\x9C\xE1\x2B\x85\xE5\x86\x9B\x08\x3A\x8D\xFE\x25\x28\x9D\x13\x86\x41\x2B\x7D\x89\x84\x53\x89\x7A\x79\x23\x07\x03\x1C\x11\x77\x00\x06\x85\xD3\x3A\xCC\x7B\x0D\x04\xBE\x76\x03\x18\xA2\x0B\x14\x81\x30\x37\x01\x1F\x56\x81\x0A\x9C\x23\x2A\x93\x13\x97\xF7\x34\x89\x3E\x38\x95\x63\x7D\x45\xA0\x8A\x7D\x67\x28\x9E\x0A\xB6\x6D\x0A\x8B\x3D\x2D\x44\x8D\x23\x63\x51\x82\xAF\x15\x14\xF5\x89\x46\x55\xC1\x61\x46\x8C\x12\x78\x67\x4F\x17\xBB\x78\x71\x85\xC8\x26\x7A\x87\x72\x57\x7A\x87\x44\x96\xB7\x5B\x0D\xF8\x6D\x2E\x87\x71\x7C\xC0\x84\xE8\x1C\x48\x25\xA5\x16\x08\x52\x74\xE6\x2A\x83\x87\xBD\x80\x61\x8F\x5B\x0B\x18\xAC\x14\x8E\x3D\x35\x74\x21\x00\xC8\x83\x41\x72\x04\x06\x98\x25\x0C\x86\x02\x4F\x8B\xDC\x7F\xBD\x80\x65\x85\x71\x78\x18\x81\x0E\x84\x46\x6C\x5A\x9C\x86\x69\x62\x67\x85\x33\x80\xA7\x37\x0C\x8B\x74\x32\x86\x07\x74\xCD\x82\x5D\x05\x57\x3E\x19\x80\x10\xC0\x86\xE4\x2D\x4D\x75\x28\x13\xC9\x29\x4F\x99\x13\xA9\x13\xCB\x87\xE8\x88\x4A\x3E\x3B\x8B\x9B\x10\x4F\x86\x29\x90\x0A\xE7\x4F\xB2\x3B\x53\x85\xAE\x87\xA2\x86\x4F\x9A\x85\x78\x13\xF7\x84\xFA\x88\xB7\x00\x47\x8A\x9D\x87\x50\x8D\x27\xA0\x14\xB6\x30\x0F\x8A\xF1\x2B\x48\x8E\x4B\x8E\x5D\x39\x0B\x14\x14\xE2\x89\x0E\x7D\x31\x7F\xE6\x4E\xB1\x80\x58\x99\x13\xB7\x00\x75\x2F\x07\x8A\x7F\x8A\x13\x23\xD5\x7B\x50\x82\x28\xA7\x13\xEE\x02\x38\x00\x1E\x44\x0E\x07\x47\x47\x12\x0B\x25\x41\x4F\x6C\x52\x01\x30\x1C\x03\x8F\x56\x04\x61\x3C\x2B\x2C\xA8\x14\xBF\x89\x54\x48\x60\x64\x16\x28\xB5\x81\x86\x70\x03\x37\x00\x5A\x44\x3D\x7D\xD0\x8A\xF6\x6B\xB4\x83\x03\x0C\x85\x59\x10\x18\x7B\xB4\x8B\xD3\x8B\x6A\x8A\x52\x84\x50\x90\x2C\x81\xFA\x0F\x7C\x22\x00\xE6\x07\x51\x8E\xD4\x3E\x52\x8B\xF8\x31\x0B\xB3\x00\xF5\x84\x83\x01\x74\x8A\xAA\x80\x36\x01\x02\x35\x14\xDA\x86\x2C\x86\xAE\x84\xE3\x63\x9B\x61\x30\x95\x9C\x3F\x14\x84\x86\xD0\x64\xB4\x89\xF8\x86\xEB\x79\x30\x91\x37\x06\x15\xEA\x83\x2D\x8B\x8F\x87\x4B\x89\x64\x83\x03\x18\x02\x24\x3A\x6E\x8B\x26\x86\xC5\x00\x55\x8D\x03\x88\x44\x97\x2A\xAF\x0C\xF4\x87\xF7\x85\xB0\x89\x8C\x73\xAC\x8C\x64\x74\xA5\x1F\x15\xF9\x8B\x39\x86\xFE\x88\xCF\x83\xBF\x22\x54\x80\x1B\x08\x0C\xEB\x8A\xEA\x05\xDE\x3A\xF2\x7F\xBA\x8E\x36\x97\x29\xB0\x0D\xB9\x8A\x37\x77\xAC\x88\x58\x89\xC0\x8D\x83\x64\x2B\x9E\x15\xB4\x3D\x5A\x8B\x99\x85\x85\x8C\xC9\x6D\x33\x81\x2F\x83\x15\x83\x88\x8A\x7F\xA1\x87\x10\x33\xA3\x86\x50\x92\x2B\x87\x16\xE2\x30\x89\x8B\xD6\x8A\x44\x8E\xB1\x82\xDB\x27\x29\xBB\x15\xBE\x89\xC4\x85\x93\x60\x65\x8E\x9C\x80\xFB\x67\x2D\xA2\x16\xC8\x53\x27\x03\x31\x47\x69\x8B\xCF\x2A\x5A\x96\x12\xAC\x16\x82\x8B\xC6\x8A\x17\x7E\x72\x8D\xB2\x87\xD9\x38\x01\x35\x5F\x23\x8B\x9A\x8A\x84\x3F\xAA\x7C\x2D\x5E\x59\x95\x31\xAE\x05\x39\x00\x3C\x45\x1C\x01\x88\x3B\xC4\x38\xD9\x7C\x4C\x54\x99\x20\x8B\x58\x28\x2B\x8E\x78\x29\x07\x0F\xA3\x5F\x01\x0E\xAF\x42\x8B\xDA\x88\x24\x84\x17\x74\x7F\x2E\xD9\x0B\x1F\x00\x32\x43\x30\xB8\x8B\x53\x88\x94\x8A\xFB\x62\x65\x94\x01\x3C\x46\x09\x02\x6F\x8C\x31\x32\x96\x89\x78\x2C\x65\x9D\x88\x5E\x19\xE2\x29\x3D\x8C\x8B\x88\x8C\x8C\x2E\x61\xE0\x64\x33\x93\x09\x66\x8C\x15\x03\xE5\x8A\x11\x21\xF4\x75\x5D\x8B\x2A\xB7\x0B\xC1\x00\xAB\x3D\xE8\x8B\x40\x03\xBA\x84\x68\x85\xD0\x4C\x18\xA9\x0A\x6F\x86\x8C\x6C\x84\x8F\x1C\x7B\x53\x97\x70\x3D\x14\xB4\x26\xDF\x8A\xAE\x54\x81\x8F\x67\x8F\x61\x89\x2B\xA2\x0F\xC5\x8A\x7C\x49\x3E\x02\xA1\x88\x14\x16\x11\x17\x0F\x9A\x15\xF5\x30\x27\x02\x1A\x21\x7C\x89\x51\x02\xD1\x4F\x26\x5C\x1A\xA4\x8D\x1B\x8D\xC0\x63\x7D\x42\xB7\x8A\x4E\x83\x2D\xAB\xC2\x39\x8C\xC0\x8A\x1E\x8F\x70\x8C\xB7\x7E\x5A\x8F\x31\xBF\xF6\x11\x8B\x83\x63\x21\x8C\x8D\x8E\x7C\x8F\x09\x4B\x33\xAA\x13\xD2\x8C\x32\x01\x38\x8F\x40\x01\xCE\x86\x48\x33\x33\x8F\x19\xA8\x70\x77\x8C\xF1\x29\x9E\x8F\xB5\x81\x63\x93\x95\x7B\x0F\x7F\x8C\x76\x09\x40\x8C\x91\x8D\xD8\x85\x7F\x32",
"\x32\x89\x19\xA2\x51\xAB\x7C\xCE\x50\x7D\x84\xCC\x65\x25\x50\x01\x20\xB8\x65\x8D\x27\x2E\x38\x03\x49\x02\xDD\x86\x83\x3A\xBF\x3B\x59\x75\x8C\x4C\x83\x04\x4E\xEA\x3F\xCB\x8C\x25\x45\xED\x1E\xF5\x5C\x27\x72\x3F\x7A\x8F\x04\x64\xDF\x35\xF0\x36\xAC\x2E\x1B\xD7\x8C\x19\x03\x1C\x03\xF3\x4C\xDC\x8D\x23\x46\x37\xA6\xD9\x68\x8D\x31\x01\xD4\x66\x40\x03\x75\x6A\x23\x54\xC9\x34\x19\xC9\x2C\xB0\x51\xC0\x61\xB6\x65\x3E\x56\x6F\x89\x80\x5A\xA2\x79\x8D\xE5\x8D\x7D\x8C\xDD\x4D\xDF\x85\xC0\x09\x2F\x9B\x0F\xA3\x8D\x05\x75\x86\x2E\xA2\x8E\x24\x13\x53\x9B\x1E\x8F\x1A\xB0\x02\x91\x8D\x89\x83\xCB\x82\x91\x2C\x53\x8A\xCB\x3E\x14\xAE\x15\x9B\x8D\xB3\x8B\xBD\x83\x3A\x84\x5E\x80\x35\x97\x91\x20\x8E\xAC\x8C\x3A\x02\xC0\x25\x46\x7A\x28\x0D\x00\x81\xBB\x54\x8B\x8A\x02\x45\x05\xAB\x78\xA9\x8A\x5E\x8E\x2E\xA1\x0C\xB6\x00\xF0\x8A\x83\x01\xD2\x88\xE8\x86\x19\x13\x2F\xBA\x0B\xB6\x8A\xD9\x8A\x9C\x8B\x76\x88\x66\x83\x61\x9B\x2A\x82\x18\xD7\x02\x7A\x5D\xEF\x78\xD5\x88\xC0\x86\x75\x91\x35\x98\x1D\x9D\x8C\xE9\x47\xE2\x7F\x81\x8F\xEA\x83\x84\x2E\xA3\x0B\x18\xD5\x8A\xF5\x8B\x96\x87\xD4\x8C\x7F\x85\x75\x9A\x30\xA6\xF7\x03\x11\x0F\x5D\xFF\x88\xAC\x8E\xED\x81\x88\x16\x30\xA0\x1D\x85\x8C\x8A\x03\xB1\x8E\xD7\x8B\xC4\x8B\x0F\x66\x36\xB0\x15\xCF\x8C\x94\x3C\x65\x8E\x40\x04\xD9\x84\x67\x8F\x37\x9D\x19\x95\x48\xB2\x3B\x69\x8E\xAF\x8D\xC5\x74\xDE\x7E\x33\xAF\x32\x67\x8C\xFE\x26\x0F\x5D\xB9\x8F\x3E\x88\x6E\x99\x24\x92\x27\x2B\x7D\xEE\x8D\x71\x8C\xCE\x7D\xE1\x87\x6E\x85\x38\x94\x7A\x0A\x8E\x01\x02\x86\x8D\xBD\x8E\xF0\x8F\xF3\x31\x38\xAB\x57\x74\x8D\x19\x8F\xC1\x2A\xC5\x89\xDE\x61\xA8\x5A\x37\x9D\xCE\x7C\x8D\x17\x61\x02\x3F\x7D\x09\x4F\x8A\x7F\x3D\x3C\x88\x93\x35\x00\xA0\x8E\x00\x02\xE8\x8D\xDC\x84\x7A\x91\x37\xA9\x26\x58\x29\xA8\x8F\x82\x8D\xBC\x3D\x72\x64\x77\x58\x38\x82\x1F\xAF\x8F\x1B\x8F\xD8\x8F\xC7\x22\xF2\x8D\x23\x51\x01\x36\x1E\xBE\x44\xCC\x5E\x2A\x8D\xBB\x8D\x4C\x4D\x70\x80\xF1\x75\xA7\x65\x6F\x8B\x8F\x0D\x7C\x72\x89\x08\x0D\x17\x07\x03\x28\x19\xAA\x2C\x12\x30\xFA\x7A\xFE\x2B\xE0\x8B\x79\x9C\x12\x4E\x1F\x87\x8E\xCD\x8E\x83\x26\x69\x21\x21\x0B\x7E\x83\x12\x54\x1F\xAE\x8F\x8C\x8A\x05\x7E\x04\x31\xC8\x84\xDE\x7C\x3E\x9E\x04\x5E\x8F\x91\x8E\x82\x8D\xED\x88\xFD\x88\x4C\x52\x01\x39\x1E\xBB\x8F\x05\x8F\xDE\x8F\xB0\x48\xF8\x8C\xDB\x7A\xBF\x03\x1F\xE3\x6E\xC6\x8E\x03\x90\xF2\x8B\xEA\x4C\x71\x99\x48\x34\xE7\x68\x87\x95\x7E\xDA\x7C\x0E\x06\x1E\x07\x12\x14\x40\xB6\x0B\xD3\x87\x6D\x00\x05\x85\xA3\x89\xF8\x71\xA3\x63\xFE\x5C\xF3\x27\x7F\xFE\x86\xEF\x85\x1A\x11\xFA\x7E\x3D\x3B\xD4\x43\x59\x64\x87\x3B\x54\xCE\x7F\x02\x65\xF7\x79\x93\x5F\xFD\x78\x0F\x9D\x90\x5E\x11\x05\x64\x08\x91\x7F\x86\xA5\x6B\xFD\x54\xD6\x1E\x8D\xE4\x8B\x13\x90\xE1\x6B\xDB\x81\xFA\x60\x71\x77\xE7\x7A\x2F\x28\x00\x52\x1D\x10\x97\x02\x90\x3F\x87\x8C\x19\x20\xFF\x81\x1B\x90\xE3\x7C\x0D\x90\x6B\x83\x83\x90\x41\xBA\x0F\xF7\x87\x53\x8B\x10\x92\xEB\x76\x06\x96\x27\x08\x18\x94\xFF\x18\x57\x66\x8E\xDD\x7C\x9B\x4B\x44\x76\x84\x9A\x40\x8D\x21\x88\x74\x32\x91\xEB\x85\x08\x92\x7B\x81\x85\x8B\x42\xBF\x0F\xD4\x90\x82\x28\x10\x8F\xAC\x60\x48\x78\x5E\x84\x3A\x9B\x0F\xEC\x25\xF1\x85\x8D\x5E\xD2\x84\xE9\x88\x2F\x9D\x24\x83\x1A\xC9\x8A\x38\x8E\x1B\x77\xAA\x3F\xA9\x83\x10\x11\x2A\x89\x21\xCE\x8E\x2A\x86\xA8\x8E\xE4\x86\x5F\x81\x61\x9B\x3A\xB3\x1D\xE2\x8A\x7B\x8E\x9B\x86\x21\x91\xE8\x84\x61\x8F\x3B\x83\x18\xC1\x8A\xAF\x8C\xC5\x00\xCD\x89\xF1\x75\xDE\x75\x3B\xA4\x08\x79\x8F\xE5\x8F\x72\x8E\xED\x8D\x3D\x44\x03\x1F\x3F\x98\xF6\x7F\x8D\x5B\x8C\x88\x8E\xBC\x8C\x00\x96\x26\x55\x38\x84\x1F\xD3\x4E\xA2\x71\x52\x92\xC6\x8C\x01\x9A\x7C\x99\x48\x0C\x1F\x92\x30\x94\x8F\xF4\x8E\xE5\x88\xCD\x18\x79\x84\x12\x5A\x1E\xB3\x8F\x97\x3A\x09\x33\xF3\x8C\xD2\x3D\x7E\x83\x08\x2D\x1F\xE4\x44\xEF\x8F\xD4\x8D\x85\x7A\xFE\x88\x7D\x86\x12\xBF\x1A\xC7\x8B\x92\x8A\xFB\x8C\x60\x0B\x08\x30\xC2\x20\x09\x51\xF6\x0C\x2E\x31\x00\xD8\x26\x18\x34\x69\x20\x70\x8D\x3E\xA4\x1F\xB8\x91\x9F\x40\x5D\x90\xFF\x8A\x15\x6D\x8B\x82\x08\x3F\x22\xBA\x44\xC1\x91\xE3\x8F\x30\x95\x00\x95\x8C\x9D\x25\x87\x23\xAE\x7C\xCA\x90\xFC\x8C\x0F\x94\x52\x03\xFB\x6D\x1E\xB7\x00\x0F\x00\xA4\x1C\x78\x90\x11\x93\x05\x92\x3F\x9C\xF9\x2E\x20\x87\x8D\xF6\x86\x32\x91\x75\x8A\x0A\x92\xBE\x41\x20\xAC\xF2\x08",
"\x86\x3A\x91\xBF\x79\x16\x95\x0D\x02\xA2\x7C\xFD\x75\x23\xAD\x90\x8B\x90\x0E\x93\x83\x72\x1F\x9A\xA2\x66\x43\x90\x21\xA7\x86\xFC\x90\x0F\x8D\xF6\x72\x0D\x97\x85\x8D\x2B\xA7\x0F\xED\x00\xED\x90\xF1\x2C\xFB\x82\x20\x0E\x3E\x94\x14\x05\x24\xF1\x87\x47\x90\x7B\x91\x42\x92\x09\x9E\x84\x8D\xD1\x62\x21\x8E\x92\x1F\x91\xFE\x86\x43\x93\x0A\x9E\x8F\x95\x42\x94\x24\xEC\x90\x7D\x00\x8F\x84\x53\x88\x0E\x91\x32\x92\x43\xA3\x12\xF4\x90\x28\x86\x09\x81\x4D\x4F\xA7\x41\x70\x71\xE5\x61\x5C\x63\x26\x37\x01\x87\x2C\xDB\x11\x18\x5B\x70\x2F\x98\x26\x4C\x6F\x26\xC8\x6F\xEC\x5F\x19\x32\xFB\x2D\x71\x2E\x46\xBD\xC7\x12\x7B\xE8\x11\xF5\x61\x36\x3C\x08\x50\xC0\x23\x08\x00\x70\x00\x4A\xA7\x28\x2C\x45\xA2\x3F\x66\x29\x1E\x71\x4A\x85\x76\x33\x00\xB7\x01\x93\x01\x58\x97\x0D\x62\x3F\x50\xD1\x00\x07\xB1\x41\x68\x29\xBD\x30\xD2\x13\x83\x34\x7F\x34\x5A\x5B\x6C\x5E\x7B\x74\x33\xBE\x2D\x08\x31\x90\x54\x82\x2C\x3C\x81\xF8\x36\x41\x2B\x30\xB3\x52\x47\x4A\x25\x53\xD9\x6C\x49\x73\x00\x24\x39\xE7\x04\xC7\x61\x81\x36\xD8\x3F\x33\x59\xD0\x0E\x8A\x1A\x46\xC7\x38\xAC\x44\x2F\x3A\x69\x38\x34\x42\x1A\x7F\x2E\x56\x46\x23\x46\xA3\x45\x2F\x3F\x4D\x37\xA2\x24\xE0\x51\x8D\x73\x34\xC3\x39\x96\x45\xCD\x43\x63\x48\xCC\x3F\x1A\x5A\x8D\x1A\x93\x55\x46\x91\x47\xCD\x46\x33\x93\x56\x3A\x19\x49\x69\x7C\x63\x53\x22\x6D\x42\x54\x3B\x67\x59\xCD\x34\x01\x2F\x36\x24\x1D\x02\x00\xC1\x93\xB2\x33\x63\x39\x9B\x27\xDB\x74\xB4\x49\x38\xDB\x80\xB4\x74\x2A\x7E\xDE\x25\x07\x53\x5A\x40\xDF\x7D\x30\x19\x4A\xDB\x93\x0D\x50\x9D\x36\x41\x7A\xFF\x39\xC7\x38\x5B\x9D\x03\x7A\x49\x6A\x92\x2A\x9E\x01\x4B\x84\x52\x84\x35\x00\x0E\x4B\x93\x01\x44\x4B\x6D\x55\xB7\x48\x11\xBF\xFA\x7F\x60\x16\x02\xCB\x92\x94\x39\xA3\x46\xAC\x35\x4E\xB3\x94\x4A\x93\x6B\x22\xD5\x91\x73\x94\x35\x9C\xD2\x35\x01\x23\x94\x27\x02\xB1\x73\xC1\x90\x4A\x4F\xD1\x5D\x09\x6C\xBF\x1F\xC1\x12\x36\x5B\x57\x00\x2D\x5F\x38\x6C\x58\x0D\x4B\x4E\xBE\xC7\x7D\x92\xE1\x2F\x1A\x01\x0D\x06\x1F\x07\x12\x1C\x4F\xA4\x25\x88\x64\x1B\x86\xE1\x90\x7A\x28\x8E\x65\xDA\x77\x4D\x9B\xEC\x01\x2C\x13\x35\x8E\x01\x85\x63\x65\x57\x21\x61\x50\x96\x9B\x06\x94\xC9\x2B\xE2\x92\xDA\x77\x40\x9E\xB1\x53\xE8\x14\x68\x60\x93\x7B\x0B\xFB\x92\x57\x94\xF8\x26\x03\x12\x01\x00\x26\x99\x07\xB2\x93\x25\x34\x61\x91\x81\x05\xA6\x58\xD9\x4E\x26\x9A\x2A\xA2\x92\x8E\x44\x69\x94\x31\x97\x98\x8A\x1A\x5C\x26\xC5\x34\x31\x47\x1D\x60\x65\x97\x77\x1F\x9E\x85\xAA\x24\x01\x29\x60\x53\x47\x66\x39\x68\x94\x68\x4A\xA2\x92\x4C\x8A\x6D\x5B\x46\x5A\x2B\xCD\x93\x31\x38\x46\x99\x35\x45\x4D\xA1\x8D\x27\x93\xF5\x93\xF0\x90\x73\x92\x17\x4E\x9C\x87\xB9\x34\x00\x53\x79\x03\x03\x6A\x78\x68\x50\x05\x4B\xD9\x79\xE1\x78\x54\x3C\x79\x4B\x3B\xAD\x63\x68\x78\x0A\x4D\x28\x7A\x84\x6A\x0E\xB2\x35\x82\x61\xBE\x8B\x6A\x7A\x2C\x59\xAB\x3E\x02\x49\xC2\x0D\x46\x36\x00\x1C\x01\xEF\x6B\x20\x0F\x7B\x73\x52\x81\xDF\x55\x94\xF3\x69\x11\x7A\x67\x79\x5A\x50\x13\x88\x39\x56\xA5\x5C\x94\xD1\x80\x2F\x94\x6A\x62\x54\x48\xDA\x7D\x4A\x75\xC4\x63\x94\x5B\x41\xD6\x78\x22\x60\xF7\x6B\x0D\x44\x4F\xA0\x80\x37\x00\x30\x00\x4F\x00\xA9\x1A\x51\x92\x09\x7A\xEC\x72\xC1\x1C\x7B\x57\x95\xEB\x92\x52\x91\x55\x3A\x7A\x3A\x53\xB4\x02\xB5\x94\xAD\x2F\x3D\x96\x50\x53\x83\x2E\xA7\x92\x26\x80\x2A\xB8\x35\x64\x53\x11\x7B\x73\x7A\x63\x3E\xA8\x94\x49\x50\x2A\xC0\x4D\x92\x94\xC9\x67\x38\x2B\x4B\x98\xB5\x49\x2E\x39\x26\xF8\x94\x9A\x95\x40\x63\x15\x43\x10\x6F\xA9\x85\x85\x43\x2A\xFB\x92\x68\x52\x43\x95\x23\x47\x06\x01\x03\x04\x06\x24\x3A\x3E\x95\x8D\x94\x2A\x97\xA3\x96\x4A\x90\x6C\x46\xBE\x77\xEC\x29\x95\x6E\x56\x9E\x52\xA5\x97\x55\x9D\xAA\x9F\x52\x90\xDF\x3D\x16\xAA\x7B\xE9\x6E\x50\x75\xFA\x6B\x9E\x2C\x4A\x7F\x26\xEA\x40\x70\x95\xD6\x76\xB1\x97\x1C\x78\xAC\x99\x83\x4A\x2B\xCC\x6F\x59\x8F\x53\x69\x1E\x66\x13\x60\xA6\x93\x55\xA2\x29\xD2\x95\xBD\x64\x6A\x95\x17\x47\xB5\x75\x58\x44\xE7\x0A\x0E\x74\x00\x92\x80\x77\x94\xA5\x6A\x32\x29\x10\x14\x57\x8D\x80\x72\x95\x51\x60\xEB\x2D\x8E\x15\x91\x82\xE5\x39\x98\x33\x99\x1F\x5A\xE0\x45\x76\x97\x3C\x39\x4A\x36\x11\x11\x57\x83\x2C\xE5\x39\x0B\x5B\xA7\x63\x49\x06\x5E\x91\x57\x58\x57\x92\xB4\x7A\x95\xF4\x56\xF3\x64\x2C\x2E\x5F\x90\x93\x7E\x75\x60\x8B\x23\x4B\x0B\x3E\x7C\x55\xBF\x73\x5F\x44\xE9\x3D\x57\x75\x07\x12\x41\x01\x57\xB5",
"\x8F\xB5\x86\x91\x2A\x50\x29\x5A\x50\x8E\x30\x6D\xC3\x6C\xE7\x0A\x54\x4C\xD6\x66\x58\x97\x2A\x46\xB5\x4B\x51\xBB\x6D\x58\x76\x30\x33\xD0\x5C\x08\x9D\xCA\x5F\xBA\x39\x6D\x54\x03\x4E\x58\xF8\x5A\x31\x60\xE2\x36\x01\x24\xBF\x66\x5F\xFC\x28\xF4\x5E\xC4\x66\x7C\x69\xD0\x36\x43\x7A\x00\x92\x8E\xF1\x4C\x3D\x50\x8D\x6E\xE7\x5B\x21\x80\x7A\x57\x7D\x31\x00\xA8\x50\x81\x02\x2A\x50\xE3\x4E\x32\x2D\x45\x49\x25\xEA\x2C\x03\x91\xAD\x63\x62\x7E\x01\x61\x6C\x75\x45\x68\x36\x49\x0E\x4D\x7A\x18\x58\xB6\x3C\x06\x01\xD5\x7C\x39\x56\xDD\x05\x51\x58\x6F\xB2\x5F\xCD\x71\x34\x8E\x88\x45\x80\x4F\xAD\x5B\x92\x08\x61\x53\x90\xDC\x5B\x01\x65\x76\x75\xA2\x4B\x20\x91\x60\x65\x7B\x55\x91\x05\x60\x15\x71\x3A\x64\x75\x65\x03\xB9\x81\x5B\x77\xAE\x74\xE0\x95\x2A\x74\xE9\x31\x4D\xBA\x38\x0E\x63\x5A\x77\xAA\x71\xD9\x76\xFD\x53\xD3\x43\x4E\xAE\x2A\x85\x94\x8E\x96\x67\x95\xD9\x2E\x6B\x7C\x75\x24\xDB\x58\xCC\x0D\x51\x8D\x97\x01\x95\x05\x6E\x06\x5A\xB9\x9C\x02\x9A\x4D\x14\x97\xA0\x75\x15\x83\x32\x6C\x54\x77\x03\x07\x21\xA9\x04\x83\x89\x2C\x89\x74\x85\x36\x6D\x6D\x90\x13\x94\xF2\x31\x10\xD2\x6A\xBB\x45\x67\x05\xD5\x3B\x5B\x22\xE6\x47\x36\x2B\xFA\x4C\x26\x76\x90\x27\x21\xDB\x81\xA5\x09\x2C\x8B\x2A\x2C\x5D\x4C\x85\xD8\x63\x4E\x73\xAD\x7C\x3B\x6A\xEB\x73\x16\xBC\xFA\x24\x71\x57\x96\xEF\x30\xFC\x50\x6F\x22\xEC\x7B\x16\xAC\xF5\x2F\x79\xBB\x50\x6A\x10\xF0\x58\x07\x02\x0E\x46\x08\x15\x2F\x99\x6F\x25\x50\x5E\x5B\x7D\x6B\xFD\x35\x66\x59\x48\x6F\x7F\x0C\x24\xB4\x67\x2C\x60\xF3\x3C\x0B\x6A\x9B\x97\x3C\x0C\x2B\x9D\x97\xA8\x78\x31\x60\x19\x61\xE4\x06\x06\x69\x9A\x35\xF5\x52\x60\x5A\x6E\x2A\x62\x0A\x50\x9D\x28\x05\x76\x9D\x5D\xA4\x34\x0E\xE4\x96\x08\x97\x37\x2A\x42\x9D\x05\x74\x50\xAA\x2F\xBB\x50\xEC\x97\xB7\x6D\xF6\x3B\x5E\x28\xCB\x72\x54\x5D\x7F\x45\x5F\xE2\x2F\x5A\x78\x00\x07\x96\x73\x69\x6C\xB3\x4E\xBA\x49\x97\xDE\x94\xB8\x94\xF9\x78\xD7\x69\xB2\x95\x42\x4D\xA3\x01\x3E\xC3\x79\x2D\x51\x31\x7C\x1A\x58\xCC\x76\x46\x56\xEF\x4B\x79\x70\x0E\x57\x7A\x07\x64\xFB\x4E\x93\x90\x5E\xA3\x9A\x35\x00\x72\x7B\x80\x00\x5D\x7D\x80\x95\x02\x6B\x1E\x69\x08\xF5\x37\x7A\x7B\xA5\x28\xE8\x6B\xA0\x68\x82\x80\xEC\x65\xDE\x07\x7B\x35\x60\xC2\x7A\xEA\x6E\xB0\x7B\x7F\x4D\xBD\x6E\x69\x27\x35\xFF\x4F\xB9\x57\x4B\x76\xF2\x64\x80\x55\x11\x89\x0F\x96\x04\xC1\x2F\xFB\x73\xB7\x8E\xA8\x0B\x8D\x3D\xCF\x7B\x10\x84\x95\xAB\x92\xDD\x6D\x36\x3D\x06\x0E\xC6\x30\xE3\x21\x28\xDB\x35\x5B\x34\xC3\x93\x99\x36\x45\x99\x98\x91\xE5\x05\x29\xAC\x94\x5B\x99\xC7\x91\x8A\x92\x97\x3B\xA2\x9F\x61\xA8\x57\x50\x46\xAF\x6F\x3C\x62\xD4\x47\x97\x24\x35\x50\x4C\x85\x8D\x31\x94\x9F\x93\x20\x36\x90\x91\x97\x34\xA4\x8B\x4C\xB3\x8B\x54\x39\x4E\x92\xFB\x90\x54\x94\x22\x1B\xA4\x8D\x04\x75\x00\x46\x2F\xC8\x2E\xCC\x78\xA9\x90\x05\x41\x9C\x8F\x50\x91\x2E\xA7\x87\xBC\x7A\xF4\x94\x85\x94\x37\x92\x63\x08\x4D\x8A\x29\x9A\x94\x7C\x98\x51\x39\x0E\x07\xA1\x42\x10\x13\x4E\x83\x26\xEC\x56\xDD\x95\xFC\x2B\x5D\x39\x91\x98\x51\x59\xCD\x1D\x27\xB9\x10\x1C\x4B\x24\x95\x86\x93\x8F\x9A\xCA\x1D\x63\xA2\x82\x36\x00\x30\x01\xD7\x72\xA5\x12\x90\x92\x97\x2B\x4F\x90\x30\x9A\x99\xCB\x32\xA1\x82\xF5\x29\x3E\x91\x53\x40\x65\xB7\xAD\x22\x99\x79\x85\xDC\x6C\x7E\x94\x0B\x36\x03\x13\x01\x2E\xC7\x03\x02\xF0\x62\x06\x94\x42\x74\x8D\x72\xA0\x9C\x58\x41\xEB\x69\x98\x77\x67\xD3\x78\x88\x67\x63\x57\xA1\x8E\x64\xA3\x32\xFC\x92\x1B\x95\xF0\x2E\x0D\x06\x06\x0C\xA8\x86\x08\x15\x33\xD7\x95\x95\x41\x6C\x95\xA9\x31\x93\x99\xA5\x98\xAF\x3B\xC1\x48\x99\x99\x95\xE6\x6C\xAC\x97\xF9\x60\x4C\x21\x53\xA2\x19\x84\x61\x18\x7E\x5B\x96\xB5\x96\x4D\x9D\x87\x3A\x66\xB4\xC1\x5C\x99\x53\x3C\x56\x95\x0D\x41\x1A\x80\xCE\x9F\xCE\x31\x2A\x9F\x61\x9D\x94\xE0\x79\xAD\x93\x2C\x56\x0A\x6C\x57\xA7\x29\xCD\x94\x36\x01\x1C\x00\xB0\x96\x20\x03\xD0\x98\x66\xAC\x86\x6E\x99\x72\x95\x6D\x94\x34\x72\x66\x97\x35\x3F\x66\x96\x2A\x90\x97\xF3\x99\x7B\x99\xB9\x91\xFA\x64\xAB\x88\x57\xB0\x72\x07\x61\xEB\x98\x61\x41\xA9\x93\xF8\x61\xA7\x9D\xEC\x4A\x34\xD3\x73\xF0\x98\x3D\x61\xA5\x90\x5C\x96\x08\x86\xED\x7C\x29\xC3\x52\xE6\x99\x68\x96\x31\x2C\xFA\x69\x9E\x22\x54\xA6\x29\x8A\x41\x4F\x35\x83\x97\xBB\x96\x60\x92\x07\x14\xE7\x28\x7C\x32\x00\xF6\x94\xDB\x7B\x9F\x76\x61\x9C\xE8\x47\xF4\x3C\x56\x75\x47\xCE\x4B\x7A\x98\xC5\x96\x2B",
"\x78\x7A\x01\x58\xB8\x4E\x31\x9A\x35\x9A\x82\x94\x1D\x05\x1A\x38\xD4\x96\x69\xA9\xF4\x54\x88\x6F\x2A\x99\x98\x96\x4F\x89\x98\xAB\x9A\x65\x91\x33\xE9\x60\x7F\x92\x2B\x98\x59\x94\x68\x56\xB2\x8B\x5A\x7C\x2F\xC5\x56\x17\x4D\xFD\x30\xD3\x54\x3D\x99\xAC\x8E\xF7\x25\x2C\xFF\x3A\xBE\x92\x76\x48\x57\x9C\x91\x36\x61\x4A\xFF\x3F\x53\x5B\x81\x60\x9A\xB7\x98\x7D\x33\xAC\x9F\xCA\x9D\x66\x91\xAD\x06\x39\xDB\x11\x7B\x56\xC9\x92\x60\x2C\xB1\x9D\xE8\x43\x30\xB2\x27\x02\x47\x56\x5F\xAE\x40\xCC\x5B\xB2\x98\x59\x92\x84\x33\x00\x73\x8B\x5B\x6D\x99\x59\x79\x4E\x5C\x0C\x68\xBE\xDA\x24\x73\xE1\x80\x20\x60\x98\x5A\x67\x9E\xC7\x27\x43\x7E\x71\x6C\x2E\x3F\x97\x60\x50\xF4\x5A\x7B\x91\x00\x64\x5A\xAB\xD7\x46\x96\xAD\x97\xA4\x94\xFD\x5E\xF9\x41\xD3\x76\x08\x22\xBC\x23\x4D\x34\x01\xA8\x95\x40\x03\x6A\x94\x60\x50\x27\x24\x35\x92\x36\x59\x97\x05\x4D\xEE\x64\xB1\x72\x80\x51\x30\x60\x2D\xF6\x5F\xB4\x58\x1B\x01\xD9\x96\xEC\x47\x75\x64\x7B\x53\xC1\x66\x3D\x6C\x97\xAF\x6D\x68\x9B\x45\x83\xF7\x37\x37\xA4\xDD\x49\x59\x78\x4E\x68\x5A\xDA\x6D\xEE\x5F\x77\x5C\x5B\xAE\xDD\x6E\x7A\x89\x86\x82\x01\xE2\x95\x92\x61\xFF\x73\x6E\xA7\xB4\x35\x00\x61\x76\x00\x03\xD8\x73\x70\x92\x5C\x0B\x5C\x9E\x56\x45\x99\xC2\x2B\xFC\x3D\x3D\x9A\xD1\x6F\xB9\x9C\x6E\x93\x17\x45\x86\xAA\x55\x1D\x3C\xD2\x80\x07\x00\xBC\x8E\x16\xAA\x35\x50\x85\xB8\x55\xE2\x97\x5D\x37\x78\x95\xBF\x25\xC5\x7D\x2B\xD8\x85\xE6\x63\x54\x71\x16\x1D\x95\x7F\xBC\x83\x61\x90\x37\xB3\x08\x07\x53\x02\x9A\xC1\x22\x06\x34\x83\x24\x4A\x8D\x30\x92\x5A\x8B\x67\xEC\x58\xF7\x97\x71\x6B\x82\x5F\x5E\x9A\x48\x76\x97\x5A\x60\xFC\x94\x1D\x2C\x94\x62\xB1\x22\x6F\x93\x28\xAC\x81\xFF\x97\xFF\x3D\x00\x99\x84\x9D\xDF\x9E\x5B\xAF\xF5\x08\x98\x49\x5C\x05\x98\x03\x9A\x96\x7E\xC0\x9B\xE5\x61\x34\x85\x4A\xCD\x5A\x50\x6C\x9F\x5A\xD4\x6E\x8C\x59\xB8\x66\xDA\x52\x51\x83\x72\x0E\x51\x07\x9E\xD0\x5F\xC1\x80\x75\x5C\x38\xF0\x6E\x05\x98\xB9\x6F\xD5\x39\x07\x09\xC2\x80\x00\x2B\x30\x87\x9C\x3D\x9A\x36\x4F\x5D\x78\xA8\x7D\x79\x7F\xBB\x79\x30\xA1\x3F\xAE\x7E\x1B\x9A\xE6\x3A\xB0\x77\xE4\x98\x3F\x7A\x9F\x7C\x51\x32\x94\x20\x98\xEA\x3A\xB1\x74\xDC\x89\xD9\x6E\x7E\x45\x98\x4D\x97\x67\x91\xAE\x92\x8A\x9C\xD2\x32\x5D\x4E\x10\xDB\x9A\x54\x04\xA4\x54\x5B\x9B\xD5\x41\xD6\x99\xE3\x0E\x68\x71\x9A\x61\x1A\xB1\x9A\x25\x3E\xF0\x65\xD7\x93\xF2\x02\x68\x78\x9A\x10\x0C\xCA\x98\x3F\x2A\xF6\x38\x86\x5C\x22\xA6\x42\x2C\x7A\xAA\x4C\x0C\x15\x7D\x45\x2B\x91\xC9\x84\xBE\x35\x00\x75\x7F\x7E\x74\x30\x9C\xE3\x50\xCD\x91\xD5\x0F\x9F\x44\x3A\xFE\x38\xFC\x33\xA6\x54\x27\x99\xF9\x61\x76\x67\x6B\xB9\x31\x8F\x99\x74\x2E\x69\x92\x35\x37\x3D\x46\x2F\x32\x66\x3A\x4B\x2B\x7D\x52\x2D\x87\x43\xEC\x91\xFC\x26\x2F\x3A\x59\x3A\x4B\x42\x40\x36\x85\xFD\x34\x9F\x84\xD2\x9F\x10\x1F\x09\x18\x23\x17\x9D\x3F\x84\x1F\x02\x8D\x85\x19\x99\x23\x8E\x01\x36\x4B\x4B\x0E\x9F\x9C\x57\x8A\xA6\x83\x7F\x3D\x4F\x84\x75\x86\x05\x74\x00\xA7\x9C\x72\x26\x21\x29\x51\x8A\x29\x8C\x75\xAB\x13\xAE\x9D\xA5\x9D\x87\x12\x65\x81\xD6\x9E\x16\x1C\x75\xBB\xC3\x6F\x91\x3B\x32\xC1\x89\xF0\x5E\x5E\x29\xEB\x9C\x2C\xAA\x3A\xC7\x9D\xBE\x9D\x83\x8B\xAB\x9E\xFA\x04\xEC\x84\x28\x8F\x3B\xB9\x8B\xFB\x36\x24\x8E\xAD\x9E\xD4\x99\x80\x08\x75\xBB\x18\xB3\x8D\xBE\x9D\xD1\x8B\xB4\x9D\x9A\x55\xED\x90\x03\x2C\xA5\x77\x43\x39\x01\xFD\x36\xB7\x8B\xDB\x98\xEB\x9D\x76\xBA\x3A\x85\x8F\xE8\x9C\x5F\x9E\x94\x8B\xDC\x93\xEC\x9B\x97\x05\x1E\xAF\x91\x30\x01\x2D\x30\x32\x4F\x1A\x36\x2F\x33\x3F\x1E\x3B\xA3\x8F\xF8\x9C\x78\x84\xBA\x8C\xD9\x9E\xEE\x84\x13\x68\x63\x01\x57\xFB\x37\xF6\x40\xBF\x99\xD8\x9D\xEC\x8A\x5C\x41\xAE\x3E\x9D\xED\x42\x7A\x9E\x55\x11\x20\x05\xEE\x87\x78\xBB\xC3\x31\x00\xFB\x36\xF0\x50\xBB\x9D\xE1\x9A\x23\x57\x76\xA7\x12\xB1\x00\xBE\x9C\x1F\x46\xC4\x98\x57\x44\xF1\x96\x77\x8C\xA7\x66\x53\xFB\x36\x7B\x63\xC6\x9E\xDD\x9B\xEA\x6F\x4F\x66\xA7\x3E\x9D\xE9\x53\x91\x9D\x6F\x5D\xE4\x95\x0C\x7E\x78\x83\x14\xFC\x61\xFB\x37\x21\x73\xCA\x9B\xA9\x1F\xEF\x84\xEE\x41\xE0\x3E\x9D\xFF\x60\x99\x9E\xF7\x59\x5F\x26\xF2\x9E\x79\xBB\xC3\x34\x00\xFB\x36\x54\x7F\xCE\x9D\x9F\x1D\xF3\x8C\xF5\x71\xE1\x3E\x9D\x4C\x70\xA1\x9E\x71\x05\xDC\x96\x87\x22\x58\x89\x35\x88\x96\x16\x02\x49\x9D\x53\x9A\xA9\x9B\xEC\x81\x76\x96\x3A\xEF\x9D\x5B\x9E\xAC\x9C\xA3\x5E\xEA\x96\xD3\x91\x75",
"\x7C\x34\xC0\x9D\xB7\x9C\x4F\x9E\xBD\x99\xEC\x9F\xAE\x9E\x01\x3A\x35\xE3\x9C\x18\x14\x91\x59\x5F\x9C\xDD\x9A\xF6\x80\x6C\xA6\x2C\xEE\x9E\xF7\x44\x93\x94\xBB\x24\x63\x96\x2F\x35\x37\x31\x3A\x82\x46\x3E\x58\xB5\x2D\x10\x5B\xE9\x96\x04\x3E\x76\xAF\x8D\x3E\x58\x20\x38\x47\x4A\xD4\x9B\x5C\x2D\x4D\x48\x59\xA7\x7D\x65\x00\x72\x76\x5A\x6F\xC2\x9F\xD6\x9E\xF7\x8F\x77\xA5\xB9\x0E\x9F\x6B\x18\xE7\x0A\xD4\x38\xCC\x58\xF6\x9F\x09\x0D\x21\x31\x9D\x65\x5D\x5D\x5E\xB1\x00\xAF\x56\xEA\x5D\xF1\x13\x3E\xBF\x02\x75\x9F\xD6\x4B\x90\x3A\xF4\x99\x74\x0D\x0F\xA5\x3E\xDF\x3F\x7D\x9F\x63\x0D\xAC\x9B\xD5\x56\x6F\x4F\x45\xB1\x00\x7A\x9D\x1A\x9F\x6F\x25\xB0\x9E\xDF\x9F\xEE\x86\x3F\xBE\x00\x36\x9F\x02\x9F\xF4\x8C\xC1\x9C\xE7\x95\xF4\x8D\x3E\x87\x39\x3B\x45\xB2\x5C\x9F\x00\x53\x9F\x74\x67\xFA\x94\x03\x15\x3E\xC2\x5D\xB9\x5C\xD2\x65\xEB\x62\xEA\x39\xFC\x88\x2C\x76\x4B\x1F\x9F\x6B\x9F\xD8\x62\x0F\x02\xCE\x98\xA1\x01\xFC\x35\x39\xEC\x9D\x6A\x20\x6F\x9E\x89\x3C\xFB\x95\x32\x0A\xBB\x20\x78\x76\x25\x9B\x1F\x58\x9E\x89\x3C\xD8\x71\x20\x91\x0D\x02\x4C\x21\x89\xCD\x9E\xEC\x9C\x29\x8F\x40\x8C\xFE\x90\x8E\x00\x4F\x21\x89\xF6\x25\xF0\x9E\xBD\x9F\x9A\x7E\x03\x91\x2E\x24\x3E\xC3\x67\xCD\x9F\xD4\x9E\x11\x80\xF7\x5D\xFF\x95\x3B\x2E\x3E\xC3\x67\xB1\x9F\x5D\x13\xEC\x9E\xB5\x4F\x80\x8D\x03\x03\x5F\x4A\x98\x84\x9E\x27\x23\xBF\x9D\x3F\x7D\x00\xAD\x46\xB7\xE7\x0B\x9F\x34\x9E\xE9\x85\x69\x9A\xE7\x81\x38\x3A\x78\x6C\x3B\xF2\x9F\xAB\x50\x2C\x4F\x06\xA0\x78\x2A\xEA\x39\x7F\xAD\x13\x20\x9F\x5F\x3C\x3E\x50\xDA\x2A\xF0\x5C\xEE\x89\x67\x1E\x3B\xDE\x3D\x7C\x50\x0E\x3C\xB6\x3E\x5E\x28\xC4\x11\x75\x9E\x7B\x2D\x76\x20\x02\x6F\x85\xAF\x45\xF9\x9A\xFF\x8E\x7C\x62\xA9\x38\xA0\x6E\x00\xB5\x2C\x9E\x40\xFD\x9D\x00\x31\x75\xA8\x70\x79\x90\x8A\x04\x91\x58\xCF\x8D\xE1\x31\x00\xB4\x58\x13\x40\xD5\x8E\x78\x9E\xA3\x8D\xD5\x8C\x26\x95\x75\x9D\x7C\x8E\x3F\xB2\x9F\x26\x9E\xAD\x8A\x0F\x04\x5B\x8A\xB4\x6C\x0C\x15\x3C\x03\x02\x15\x1F\x92\x7E\x12\x65\xF9\x98\x2F\x3E\x76\x9A\xAA\x5C\xA0\xA8\x81\xCB\x12\xA4\x9C\x52\x56\x2F\x3A\x66\x06\x41\xE4\x85\x92\x68\xF3\x9A\x58\x02\xD0\x09\x63\x0A\x07\xA4\xEC\x5D\x9E\xB7\x9D\xAD\x82\xAE\x26\xDB\x96\xDD\x80\xA5\x71\x41\xD7\x81\x5B\x77\x92\x7B\x81\x3E\x6B\x76\x05\xBF\xB9\x4C\x3E\xF6\xA0\x2A\x7E\x1F\x02\x4C\x97\xD0\x8B\x73\x97\x1E\xB8\x41\x9E\x9F\x6C\x09\x27\xA3\xA1\x8A\x11\xAE\x71\x87\x34\x90\x60\x0E\xA1\x26\xA1\x3B\x9C\xB1\x9C\xA6\x8D\xD3\x46\xFF\x52\x3A\xF3\x76\xCD\x9F\xAF\x9D\x0E\x8D\x87\x81\xA8\x7D\x84\x80\x11\xB0\x5D\xDD\x3F\xB9\x75\xA7\x9E\x09\xA6\xEF\x90\xDB\x7E\x00\x33\x88\x5C\x03\xCD\x9E\xDF\x75\xF9\x9A\xB0\x1E\x76\x91\xEE\x30\xA1\x74\x00\x53\xA0\x57\x06\x0A\xAC\xFB\x9F\xFE\x5C\x05\x5B\x9F\x36\x83\xD0\x75\xD5\x3B\x23\x8C\x03\xA7\x81\xAF\x3B\xBA\x6A\x18\x83\x99\x6A\x56\x5C\x56\x76\x05\xA9\x7F\xB6\x3B\xBA\x6A\xAD\x5F\x0D\x11\x35\x31\xF6\x5F\x08\xB7\x82\x8A\x40\xEF\x9D\xA1\x73\x68\xA0\xF0\x0A\xEA\x34\x0D\xB7\x7E\x91\x42\xF6\x9D\xA1\x73\x27\x89\x32\x6A\xD2\x92\x45\x8C\x77\xA2\x42\xD5\x88\x24\x88\x1F\x02\x38\xA0\xAB\x53\x0C\xA4\xD5\x6B\x42\x95\x1B\xB1\x9C\xE2\x74\x25\xA6\x0D\x93\x55\x8D\x84\x8C\x15\xD5\xA1\x20\xA1\x3F\x93\x3C\xA4\xB9\x8A\xFC\x77\x84\xB7\x43\x99\xA1\xD4\x20\xA2\x9C\x4E\x97\xF7\x93\x74\x2E\xBA\x00\x4F\x53\x4F\xEC\x9C\xDE\x9F\xF5\x49\xEB\x24\x10\xBB\x3C\x8E\x5D\x11\x3D\x0A\x3D\xE1\x9C\xD3\x9E\xDE\x9D\x75\x32\x0A\x9C\xE9\x67\x0C\x74\xA0\x68\x27\x02\x8E\xB2\x55\x0D\xBA\x83\xA3\x4B\x2A\x5D\x1D\x88\x48\x22\x45\xA1\xFF\x7F\x3F\x02\x84\xA3\xB7\x21\xA2\x85\xA1\xC8\x5F\x21\xA3\x23\xAE\xF0\x40\x86\xBC\x11\xEC\xA1\xDD\x3F\x2D\x88\xF8\x9E\x18\xAE\x45\x83\xC7\x6F\x0E\xF7\x0A\x6A\x2F\xE0\x58\x11\xA5\xA7\x31\xEB\x84\x6B\x66\xFD\x1F\x07\xC0\x27\xD6\x71\xF3\x9A\x21\xA1\x1F\x82\xFA\x7F\x44\x9D\x02\x81\x78\x2B\xA1\xAE\x9D\x28\xAB\x0F\xA3\x34\x8A\xD8\x0B\x80\x48\x7E\x7C\xA3\x37\xA3\x93\x88\xF4\x6D\x8A\xBA\x2E\x8A\x6C\x41\xA3\x0F\x6E\x15\xA2\xFF\x95\x14\xAA\xE4\x46\x42\xCE\x6D\x83\x86\x12\x07\xBC\x3D\xED\x19\x10\x04\x8B\x89\x7C\x61\xA2\x4A\x03\xCD\x5D\xF3\x9A\xE9\x62\x10\x17\xB6\x76\x42\xE8\xA2\x20\x02\x6D\x5F\x57\xA7\x2C\xA7\xEE\x51\xB8\x68\x01\x19\xA2\x60\xA3\xBA\xA1\xB4\x69\x22\x06\x05\xB5\x0A\x81\x04\x57\x25\xA0\x9E\xB8\xA0\xF0\x17\xDD\x5E\xEB\x9B\x46\x15\x63\x34\x97",
"\xEC\x9D\xE7\x9E\x21\x2C\x69\x25\x18\xB0\x30\x12\x7D\x75\x25\xC1\x9C\xEC\x9F\x62\xA4\x76\x28\xDE\x89\x29\x02\x4C\x48\x86\xF1\x9F\xA9\xA2\xAC\x52\x3B\x65\x19\xB0\x09\x00\x4F\x48\x86\x00\xA3\x70\x22\x40\xA3\x77\x94\xAB\x42\x61\x86\x0B\x5F\xA0\x02\x03\x30\xA0\x02\x9C\x0C\xA9\x7C\x02\x7F\xAC\x30\xA6\xA3\x49\x0E\x49\x9C\x02\x9D\x0D\xAA\x7D\x0A\x7F\xAC\x30\xF5\x83\x10\x31\x3E\x6F\x50\xA6\xFD\x0F\xEF\x87\x71\x75\x07\xF0\x85\x7D\x6C\x89\xA1\xE1\x9E\xE4\x97\xE2\x46\x00\x49\x2A\x36\x9A\x73\xA3\xAD\x1F\xDD\x06\xA9\x9D\xFC\x83\x4B\x1E\x3B\xC7\xA3\x4A\x9A\x1F\x02\x71\xA3\x39\xAA\xD4\x82\x98\x10\x47\xE2\x9E\x56\xA1\xAF\x9E\xB9\x27\x3A\xAD\xF6\x93\x8E\x9E\x0D\x36\x9A\xC0\x26\xEE\xA0\xA5\x6C\xDD\x86\x10\x04\x8F\x9B\x47\xD4\xA3\x62\x9E\xB8\x44\xC7\x62\xFE\x2B\xA6\x09\x54\x0B\x2A\x4A\x9A\x16\x28\xF1\xA0\x9B\x6A\x5F\x6C\x1E\xA8\x54\x37\x0D\x03\x07\xBF\x02\xC3\x04\xE2\x00\x3E\xAE\x1D\xB3\x1A\x0A\x35\xA2\x5A\xF2\xA2\x26\xA3\xEC\x59\x2F\x03\x96\x12\x9D\x01\x48\xC6\x5F\x16\x5E\x53\x3D\xA2\x10\x6C\x01\xE9\x2B\x90\x8A\x06\x64\x26\xB8\x01\x93\x01\x84\xA4\x79\x2E\x20\xB6\x0C\x15\x52\x07\xA4\x80\x28\xA5\x9B\xA5\x92\x39\xAF\x1D\xAA\x6A\x99\x48\xE2\x9E\x00\x2A\x8B\x7A\x7D\xA6\x6B\x0C\x87\x09\x9A\x15\x48\x84\x92\x7D\x28\x0C\xA6\x35\x2A\x43\xAB\x20\x6A\x91\xA9\x57\x1A\xA4\xE7\x28\x11\xA5\xE0\x02\x57\x02\x87\x18\x33\x4D\xF4\x7A\x06\x0D\xA5\xBB\x07\xA4\x16\x60\x2A\x0B\x07\x09\x3D\x48\x94\xA4\x3A\xA4\x87\x79\xDB\x23\x38\x22\x2A\x7C\x90\xB4\x48\xF9\x8E\x34\x91\x07\x5D\x96\x2E\x48\xAF\x35\x08\x92\xA5\x24\xD5\x34\xA1\x3D\x3A\x17\x8D\xA0\x0D\x08\x42\x33\x92\x83\x49\xF7\x06\x5E\x29\x13\xA6\xFD\x80\xBF\x5B\x24\xBA\x92\xAB\x24\xD1\xA4\xED\xA3\x20\xA6\xDE\x03\xD7\x37\x22\xAC\x97\x27\x48\xA2\x89\xB7\x16\x03\xA7\x9F\x12\x31\x03\x74\x8A\x90\xA2\x49\xE8\x00\x39\xA4\xAF\x07\x8E\xA3\x06\x0F\x23\xA6\x08\x35\x49\xE7\xA3\x72\xA4\x21\xA5\x1C\x48\x4B\xAA\x33\x3E\x92\x8F\x49\xB4\x29\x98\x40\x26\xA6\x81\x8F\x4B\xA6\xBF\x41\x93\xB9\x49\xFA\x06\x55\xA5\x37\xA7\x95\xA4\x77\x48\x71\x3E\x93\x8B\x24\x91\x66\x7D\xA5\x35\xA6\x65\x02\x0A\x90\x26\xA3\x91\xBA\x0A\x13\x15\x64\xA5\x37\xA5\x9C\xA7\x52\xAE\xD0\x64\x9B\x3C\xC8\x02\x02\x3E\x64\x26\xA7\xA4\x13\x51\xA5\x24\xAE\x94\x99\x0F\x90\xA5\x82\xA4\x27\xA5\xEA\x79\xDE\x42\x25\xAF\x93\x89\x48\x83\x8D\x53\xA4\x33\xA7\x9B\xA0\x4D\xA6\xBC\x0A\x93\x87\x4A\xE8\x00\x7A\x76\xCD\x38\x3C\x7D\x83\x32\xCF\x75\x01\x2E\x01\x24\x1D\xBF\xA5\x7B\x7B\xD9\x01\x9F\x70\xD0\x76\xCA\x3D\xF3\x53\x65\xFF\x79\xB3\x05\x40\x7B\x3C\x21\x16\x44\xB7\x07\x4B\x86\x7A\xCC\xA5\x23\x36\x42\x7B\x9B\x7C\xD0\x6F\x93\xB3\x56\x11\x7A\xFB\x87\x6E\x7A\x8B\x6D\x43\x66\xED\x7C\xA5\x32\x48\xD3\x04\x13\x6E\x7C\x79\xC1\x76\x65\x27\x2C\xA4\xE8\x67\x0D\x67\x33\x75\x15\x65\xA7\x40\x7E\x58\xA5\xD0\x7A\x02\x47\xF4\x52\xA5\x39\x52\x32\x39\x8B\xA6\x5A\xA0\xD1\x68\x03\x08\xFF\x69\x79\x17\x6D\x2F\x6F\xD7\x8E\x7E\x3B\xA6\x19\x94\xB7\x4A\xD6\xA3\xB3\xA5\xCC\xA0\xEB\x17\x39\xAA\x28\xBE\x97\x9C\x4A\xFA\x06\xE1\xA3\x59\xA5\x68\xA1\x21\x23\x1A\xB6\x92\x91\x08\xE7\x06\x52\x3E\x0A\x84\xBB\x9D\x16\xAF\xEE\x95\x53\x2F\x42\xBA\xA5\x6B\x14\xB4\x2E\x3C\x7D\xDF\x9C\x1B\xB6\x77\x96\x4C\x8F\xA6\x48\x07\x78\x7B\x9A\x16\x60\x21\x2C\xA6\x08\x25\x4C\xA0\x5F\xE2\xA4\x2E\x35\xB9\xA4\x5D\xA7\x2E\xBA\x02\x69\x4B\x86\x36\x02\x7B\x66\xA7\x27\x37\x59\xAE\x2E\xB1\x96\x95\xE4\x53\xA5\x91\x35\x29\xA7\xB5\xA6\x5E\xA7\x4E\x3C\xC5\x79\x4B\x90\x64\xDF\xA5\x1F\x59\xD2\x26\x62\xA3\x2E\xA2\x01\x2B\x4C\x97\x2A\x34\xA6\xA1\x73\xCB\xA0\x81\x61\x33\xA6\x97\x88\x0D\x50\xA5\xEB\xA4\x6E\x54\xCE\xA5\x5A\xA7\x2B\xBB\x99\xB7\x4B\xDA\xA5\xAC\x7E\x6E\xA5\x83\x86\x5B\xA5\x1F\xA8\x1A\x20\x4C\xD3\x04\x22\xA7\xB3\x04\xD9\x26\x9E\x76\x10\x04\x9B\xA8\x4C\xC3\xA5\x45\xA7\xA3\xA6\xB3\xA5\x5D\xAA\x34\xA5\x96\x8C\x4D\xB6\xA6\x48\xA6\xB6\xA5\xD4\x7E\x66\xA0\xB1\x24\x18\x4B\xF4\x11\xA5\x55\xA7\x7A\xA7\xD5\xA4\x41\x87\xA9\x31\x91\x9D\x4D\xE8\x14\x36\xA4\x49\xA5\x1B\x00\x60\xA4\x22\xAF\x90\x82\x4C\xB7\x17\x04\xA7\xC2\xA6\x85\xA6\x60\xAD\x24\xB6\x0C\x09\x4C\x8A\xA7\xCD\x87\x85\xA7\x62\x25\x61\xA2\x38\xB1\x82\xA6\x7C\x74\x07\x22\x5A\x8E\x78\xDD\x9C\x15\xAF\xD1\x6B\x1B\xA2\x0D\x9F\x15\xEC\x25\x70\x6D\x02\xA4\x85\x11\xEB\x87\xB7\x41\xF2\x6F\x0C\x78\x5A\x06\x81",
"\x13\xA0\x1E\xA0\xF6\x9B\xD3\x56\x4E\x82\x40\x94\x86\x8B\x0D\x7B\x84\x01\x83\x3A\xAA\x8F\x73\x3E\xAE\xA7\x86\x87\x7D\x6C\xBE\x0E\x2F\xA0\x00\x09\x07\xB8\x0D\xCD\x9F\xD2\x90\x6F\x9E\xC2\x69\x77\xAC\x81\x0F\x5B\x09\x47\xF8\x86\xF6\x25\x32\xA2\xC7\xA5\x6F\x8E\x06\x1E\x01\x07\x4F\xCC\xA7\x63\xA3\x93\x02\x59\xA2\xDF\x65\x3C\xA0\x1B\xBF\x31\x55\xA1\x6C\xA3\x80\x02\x5B\xA5\x62\xA0\x3D\xAF\x77\x4F\x4F\xF5\x86\xCA\x6D\xDF\x10\x5E\xA6\xE8\x6D\x3D\xB7\x9E\xB6\x4B\x3C\xA7\x80\xA3\xE5\xA4\xF8\xA2\xE8\x60\xF0\x49\xEF\x06\x65\x6B\x3B\x1F\x9D\xA2\x93\xD8\x24\x06\x0A\x30\x26\x08\x35\x4F\xDC\x3E\x6C\x27\x88\x27\xC4\x21\xE3\x11\x9A\x37\xCA\x2C\x65\x44\x98\x23\x12\x03\x2C\x4F\x95\x79\xA1\x54\x56\xEF\x03\x95\x6D\x3E\x44\x9D\x9B\x75\xB0\x53\x88\x9B\xCC\x80\xBA\x27\x2B\x02\xA8\xF2\xA6\xDA\x27\x51\x96\xE2\x2D\xE6\x83\xFB\x1C\x5C\x5C\x26\x6D\x29\xA3\x98\x4F\x9C\xA6\x9E\xD4\x93\x01\x39\x34\xD7\x09\x3B\x9A\xA9\x99\xBE\x90\x96\x20\xD4\x8D\x3D\xBF\xAA\x0F\x28\xFF\x95\xE5\x0F\xC5\x97\xED\x9D\xD5\x19\x57\x70\x3D\xA5\x06\xAB\x3C\x8F\x95\x69\x00\x64\x97\xF7\x82\x58\x7F\x0B\xA6\x71\xA3\x32\x84\x57\x0B\xAB\x4A\x0C\xFA\x43\x6C\x8B\xA3\x05\x9B\x15\x99\xE7\x91\x62\x9F\x65\x96\xD8\x91\x59\x87\x2D\xEB\x2B\xBF\x6C\xAE\x97\xEE\x60\xCC\x58\xB1\x90\x04\xAF\x3E\xF0\x0E\xA7\x4A\x55\x3F\x0C\x06\xAD\x42\x10\x10\x2B\x47\x80\x0F\x40\x75\x4B\x7B\x3F\xAC\x45\x02\x46\xE5\x9D\x2B\x46\x1D\x1B\x40\xA2\x4A\xE9\x9F\xD4\x72\x0E\x06\x3A\x68\x54\x5F\x1E\xA7\x02\x0C\x8F\xEA\x9F\xEB\x62\xB2\x45\x55\x35\x5F\x98\x38\x2F\x50\x9B\x4A\xD7\x61\x23\x80\x51\x52\x78\x48\x7E\x55\x36\xCA\x5F\x97\x9A\x1C\x01\x66\x9D\xC4\x3B\xD9\x96\xEA\x5D\x36\xDD\x6E\xEE\x5E\xD0\x9B\x56\x7B\xFE\x51\xCB\x4D\xDF\x75\x3F\xC6\x7D\x3B\x3D\x50\x89\x0D\x04\x40\x89\x13\x26\x10\x91\xFB\x08\x84\xED\x9F\x33\x4B\x3F\x86\x67\xAE\xCD\x7A\x97\xAB\x08\x0E\x84\xD1\x7D\xF3\x49\x01\xA1\x42\x00\x04\x91\x10\x22\x5F\x10\x7E\x00\x00\x89\x7C\x4D\x72\x13\x87\xB0\x6A\x02\xB0\x01\xE8\x83\x7D\x7E\x50\x82\xC3\x73\x5B\x7C\x09\x90\xFA\x4C\x03\x93\x76\x63\x2B\x53\x80\xBB\x86\xE4\x74\xF2\x70\x06\x92\x34\x9B\x68\xCF\x4A\x39\xA0\x2E\x80\x10\xA5\x95\x6D\xF9\x7A\x52\xDE\x81\x2A\x7F\x5D\x80\x6D\x9A\x1C\x8E\x0B\x9F\x54\x29\x19\xE9\x7B\x86\x04\x1F\x90\xED\x7A\x02\x32\x8F\x90\x12\x02\x26\xAA\x90\x9A\x46\x2E\x90\x0B\x97\x0E\x67\x8F\x9B\x47\x8B\x21\x8C\x92\x0A\x93\xE1\x7D\xB6\xA1\xA9\x81\x91\x81\x3B\xA3\x20\xE0\x87\x4B\x2B\xE9\x7C\x4C\x92\x88\x20\x4D\xBD\x42\x88\x21\xDF\x90\xA7\xA5\x24\x90\xF7\x87\x09\x9C\x92\x9F\xA6\x82\x10\xB8\x90\x94\x91\x80\x92\xB2\x64\xEB\x53\x74\x3E\x7A\x71\x00\x3B\x9B\x53\x7A\xC5\x64\x67\x9A\x75\x9E\x75\x7A\xEA\x46\xC0\x6C\x5E\x71\x97\xB1\x6C\x58\x7E\x6E\x97\xD6\x6C\x66\x79\x2D\xF7\x96\x9F\x66\xE7\x9A\x5A\x7C\xFD\x20\x04\xA5\x3C\x48\xAB\x12\x30\x32\x77\x4C\x54\xCD\x74\xF1\x40\xE5\x51\x8C\x47\x2B\xE2\x68\xD3\x45\x9D\x77\xE3\x6E\x8C\x68\x51\xB1\x53\x46\xD1\x58\x45\x62\xA1\xC0\x72\x2A\x87\x0A\x8A\x68\x62\xB1\x53\xD1\x61\x7A\x91\x9A\xDA\x60\x6C\x60\x51\x59\x45\x76\xDA\x6B\x0B\xF0\x12\xCE\x4E\x24\xA1\xA9\x8D\x5F\x7B\x04\xB7\x69\xAA\x1A\x86\x02\x37\xAA\x3A\x92\xD0\x8E\x86\xAA\x8B\x78\x3B\xB9\x1C\x8E\x91\x79\x28\x34\xA3\x2C\xAD\x1B\x5D\xFD\x34\x54\x75\x00\x61\x85\x00\x01\x87\x59\x48\xAA\xA2\x5F\x74\x98\x2E\x83\x22\x93\x8D\xC0\x9B\x8A\x83\x4B\xAF\x62\x9F\x07\xB0\xF9\x42\x2E\xBC\xA9\xC2\x0B\x93\x2D\x76\x9B\xBB\x98\x55\xAF\x69\x57\x2E\xA2\x69\x86\x98\x45\x99\x97\x95\x7F\x9C\x0A\x8A\xA5\x7A\x52\xAF\xA5\xBA\x97\xE6\x8A\xC9\x39\x5E\x86\x03\x03\x39\xBE\x27\x25\x8E\x93\xA0\xB4\x8E\x20\x91\x89\x85\x88\x8C\x39\x96\x1A\xAE\x8E\x98\x8C\x98\x8C\x24\x92\xE6\x86\x60\x8A\x43\xB6\x1C\xDA\x2B\x3C\x88\x3A\x02\x0F\x89\x96\x6B\x10\x80\xD8\x53\x0C\xCA\x74\xA7\xA0\xD7\x66\x5C\xAE\xA9\xA4\x57\xA7\xC7\x41\x37\xA1\x3D\x70\x76\x20\x00\x2E\xA5\x1E\x80\x21\x0D\xB8\x38\x03\x81\x02\xFA\x81\xC8\x75\x3F\x82\xFC\x73\x49\xA5\xFF\x49\x56\xD3\x74\x99\x77\xF5\x7D\x8B\x05\x2F\x8D\xB9\x77\xE0\x78\x04\xCC\xA1\x11\x8A\x76\x6B\x0D\x6B\x26\x8F\x13\x82\xDE\x41\x05\xD9\x36\x71\x3E\xA2\x83\xFA\x76\x28\x8C\xA3\x7A\xFB\x48\xEF\x3E\x36\x4A\x82\xE2\x81\xF3\x75\x29\x81\xC1\x70\xAB\x4F\x05\x97\x16\x73\x6A\x0B\x29\xF0\x77\x7C\x45\x14\x84\x21\x87\x05\xDC\x75\xB7\xAB\xC3\x36\x0A\x7F\x7F\x53",
"\xBF\x7D\xAD\xB6\xEF\x42\xAB\xE7\x77\xF3\x47\x57\x6D\xB8\xA9\xF0\x69\x43\x88\x05\xC9\x77\xDD\x76\xDC\x74\xE3\x7E\xB6\xAC\x59\x62\xDF\x51\xCD\x50\x82\xF5\x64\x19\x79\x6B\xAF\x7C\x46\xC0\x72\x53\x94\x57\xFA\x88\xE0\xA9\xE2\x83\x4C\x6C\x7B\x7B\x5C\xA4\xAC\x48\x57\xDD\xAB\x21\x17\x81\x6B\x6F\xAE\x78\x01\x5C\xBA\x86\xBC\x9E\x38\x27\xD4\xA1\x19\x01\x67\x73\x20\x0F\x99\x77\xCC\x40\x1F\x22\x73\x35\x4C\x06\xAA\x80\x2A\x33\x7D\x7C\x46\xA6\x8B\x42\xA7\x86\x79\x91\xA6\x89\x0D\x04\x0F\x92\x10\x1E\x43\x89\x15\xA7\x8E\x65\x59\xC6\xAA\xB9\x3A\xC2\x8C\x75\x94\x3B\xA2\x18\x8A\x91\x6C\x8F\x0A\xAC\x22\x90\xA8\xA7\x49\xB7\x3B\x91\x22\x93\xA5\x6A\x90\x04\x8F\x25\x96\x53\x60\x7D\x59\xBA\x09\x78\x59\x2E\x94\x3C\x07\x3F\x40\x06\xC1\x36\x2E\x30\xF0\x13\x30\xD4\x2E\x7F\x68\x2A\x42\xEB\x76\xEC\x22\x5A\x43\x89\x91\xF1\x7F\x07\x49\x79\xA9\x81\x6A\x69\x07\x0F\xE5\x8D\x00\x61\x44\xD3\x78\xD6\x83\x96\x83\x01\x4F\xFF\x78\x41\x82\x00\x94\x67\x72\x74\xDA\x6B\xAF\x83\x6E\x5D\x7D\x77\x13\xA5\x2B\x3E\x11\xCD\x69\x31\x31\x40\x8A\x79\x68\x8D\x8F\x19\x8B\x5B\x95\x04\xFA\x7D\xA4\x83\x37\x8A\x79\x2F\xDF\x70\x17\x81\x1E\xB4\x11\x8F\x89\xC4\x87\x3D\x7A\xEB\x75\xBA\xA1\x18\x67\x8A\xB3\x01\x48\x73\x6A\x7E\x1B\x00\x6E\x87\x6C\x29\x1B\x82\xCF\x71\xFD\x5E\x83\x39\x52\xC2\x7C\x78\x81\xBD\x5A\x77\x80\xFB\x50\xEC\x41\x73\x77\x80\x9E\x72\x05\x2B\xDD\x03\xF4\x7D\x08\x12\xCC\x3E\x83\x74\xAC\xBF\xA9\xD3\x7B\xBB\xAA\x5E\xA3\x05\x95\xC4\x44\x73\xFD\x30\x3E\xAF\x9B\xAD\x39\x8F\x78\x40\xB4\x87\xFE\x70\xA9\x77\x7F\x20\xAC\xA1\xAB\xB7\xA6\x07\x9E\x04\xA9\x52\x9E\x65\xEB\x82\xF9\x81\x20\x79\xC7\x64\x03\x07\xE4\x46\x04\x1E\xAD\x5D\xA3\x29\x6E\x67\x99\xC2\x5D\xC8\x72\xB3\x64\x5A\xDA\x6C\x2A\x6C\x2E\x6C\xF3\xA4\x92\x7B\x35\xB6\xDE\x57\xF2\x24\x9B\xAE\x7C\xE9\x62\x7A\x9C\x3A\x66\x03\x0D\x6F\xAE\xD3\x36\x7D\x2E\x26\x5C\x7D\xB4\x82\xBE\x95\x17\x8A\x7F\x76\x37\xA3\x96\x6C\x33\x9C\x2C\xDD\x53\xBF\x90\x1B\xA7\x82\x71\x4F\xC0\x9C\x64\x27\x19\x03\xF8\x4E\x20\x0B\x6C\xB8\x5E\xBD\x9A\x1B\x6F\x09\xA8\x7C\x35\x0C\x9C\x1D\x5C\xD7\x74\x61\xBB\x20\xCA\x9C\x10\x2A\x26\x9E\xE2\x68\xC9\x9B\x7A\x7D\x61\xBD\x9F\x52\x9C\xFF\x50\x1F\x62\x95\x9C\x88\x9F\xD8\x7C\x36\x4E\x5B\xD8\x4C\x4B\x50\x13\x9E\x63\x9E\x97\x75\xF6\x2B\x71\x81\xF3\x2D\x9C\x21\x81\x17\x9E\xA0\x59\x89\xA1\xD2\x3A\x60\x89\xF3\x62\x50\x89\x5C\x73\xAC\x09\x61\xC4\x6A\xB6\x92\x5F\x9D\x2F\x8D\x9C\xB3\x67\x16\x53\x1B\xAF\x76\x61\x83\x53\x70\x97\x38\xF9\x94\x64\xAA\xD5\x85\x86\x9F\x24\x52\x5A\x5B\x1C\x9C\xFB\x0B\x5A\x38\x01\xCF\x84\xB8\x79\xC8\x9D\x8C\x6C\x0C\x05\xDA\x76\x66\x71\x6C\x34\x59\xB9\x7B\x37\x9B\x41\x8C\xB4\x6A\xFB\x46\xA9\xFD\xA3\x33\x00\x78\xA0\xFF\x27\x20\xA4\x9B\x24\x47\x83\x02\xE6\xA2\x26\xA6\x4D\x9D\x6D\x24\x1F\xA3\x64\x46\x4A\xBA\x05\xF8\xA3\xC2\x06\x51\x03\x3F\xA2\xF6\x91\x8F\xA8\x47\xED\x9E\x3C\xAA\x7C\x35\xD0\xA6\x3D\xAE\x5A\x16\x69\xA8\x55\x88\x3E\xA2\xA4\x87\x7B\xA6\xA0\x6F\x0D\x29\xB4\x01\x1F\x4A\x81\x02\xA1\xA4\x2B\xA7\x9E\xA4\x77\x48\x37\xA7\x92\x93\x4A\xD7\xA9\xA8\xA4\x53\xA5\xF7\x84\x55\xAF\x72\xA4\xBA\xBA\x0D\x12\xAB\x18\xA7\xB3\x05\xD8\xA0\x69\x04\xE9\x24\x9B\x83\x04\x66\xA6\x82\x1D\x94\xA5\x0F\x32\x6D\xA3\x33\xB2\x9B\x89\x4B\xFB\x79\x30\xA6\xB8\xA7\xDA\xA5\x65\xA7\x1C\x91\x9A\x89\xF4\x71\xA5\x47\x6C\x9D\xA6\xDE\xA5\x67\xA8\x2F\xB5\xA4\x80\x4D\xFF\xA6\x90\x46\xC6\xA4\x83\xA3\xC7\x37\x26\xB0\x5A\xA7\x04\x53\x96\x27\xA5\x0B\xA7\xCD\xAB\x5B\x42\xA8\x00\x91\xB9\x4C\x83\xAF\xC6\x4B\xC2\xAF\xBB\x91\x44\xA8\x77\xA7\x91\x8D\x51\xB0\xA7\x90\x75\x3C\x75\xBF\x71\xF2\xA3\x4B\x60\x74\x89\x04\x4B\x6B\xAE\xA7\xC2\x76\x6B\x20\xAF\x23\x02\x8A\x43\xBB\x07\x14\x75\x89\xAD\xCC\xAF\x6D\x2D\x51\x76\x20\x1C\xBC\xA5\x00\x89\x55\x6A\x91\x27\x00\xE9\xAD\x5E\x6C\x04\x2E\x96\x27\x0B\x01\x9C\x39\x4A\x08\x0C\x36\x17\x59\x0F\xDB\x09\x78\x24\x05\x0F\x42\xB3\xAF\x53\x0A\x6C\x1D\x9A\x96\x7B\xAC\x0A\x36\x08\xB9\xAF\x19\x12\xD9\x18\x28\x04\xD4\x15\xEB\x07\x25\xB6\x00\x40\xAF\xDB\x10\xD9\x1B\xDD\x6E\xE2\x1E\x7B\xA7\x76\x88\x5F\x90\x0C\xB2\x1A\x52\x00\xF1\xAC\x2C\x03\x6B\x8F\xBE\x91\x0C\x32\x1B\x59\x6A\xE6\xAE\x4C\x00\xDD\x96\x7D\xA3\x0E\x32\x36\x28\x01\xD3\xAE\x39\x16\xFE\x88\x06\x0D\x7D\xAA\x0A\x32\x36\x2A\x01\xE1\xAF\xED\xAF\x3E\x64\xFC\xA9\x80\x14\xBD\xA7",
"\x04\x2C\x01\xE9\xAE\x92\x03\x70\x55\xFC\xA0\x12\x12\x6D\x2E\x02\x71\xAF\x23\x02\xF3\x50\xFD\xAE\x93\x70\x00\x10\x05\x38\x5F\xA2\x02\x01\x71\xFD\xAE\x6C\x1A\x16\x0F\x7F\xBF\x07\x31\xE1\x02\xB0\x81\x77\x02\xB0\xD9\x9A\xA9\x9A\x20\x2A\xA1\xBE\x24\x32\x1B\xB6\x01\x02\xB0\x0B\xAB\x67\x92\xD4\x1B\x17\x72\x36\x38\x01\x05\xB0\x1F\x58\xC6\x0C\x5E\x02\xDB\x1A\x05\x05\x60\x98\x9F\x6C\x19\x04\x10\x98\x5A\xB6\x1C\x0B\x12\xC0\xA2\xBA\x29\x1B\xD6\x0E\x63\x06\x6C\x1E\x17\x05\x80\xB6\x7D\x88\x60\x89\x02\xC0\x01\x0F\xB0\xF2\x99\x36\x6B\x74\x0A\xC1\xB6\xB1\x05\xB0\xE4\x9F\x29\x05\x55\x1B\xB4\x9F\xA9\x12\x6D\x03\x34\xBD\xAF\x32\x03\x43\xAA\xFB\x98\x80\x18\xED\x73\x3C\x32\x36\x46\x01\x26\xB1\xB0\x73\xF2\x08\x5F\x23\x0E\x88\x2B\x32\x36\x48\x01\x19\xB1\x23\x9A\x03\xA0\x0C\x1D\x92\x84\x11\x32\x36\x4A\x01\x05\xB1\x0D\xA1\x0D\xB1\xE9\x02\xDB\x0C\x06\x05\x60\xFC\x50\xF3\x0F\xE7\x9B\x85\x02\xB6\x1E\x0C\x18\xC1\x88\xC6\x45\x12\x80\x13\x41\x6B\xDB\x12\xB6\x10\x0D\x09\xC2\xAB\x55\xDA\x8A\x16\x19\x9A\xA8\x87\xAA\xB6\x12\x0D\x05\xC0\x82\x55\xF3\x59\x3E\x12\x79\x11\x69\x62\xB6\x14\x0D\x05\xC0\x95\x55\xA1\x68\x63\x13\x3E\xA0\xF9\x58\x00\x06\x0D\x19\xC2\x95\x42\xD5\x8B\xE9\x19\x1A\x76\x6C\x18\x1B\x0A\x80\xA1\xAC\xAF\x19\x62\x18\xE6\x7E\xD9\x1A\x36\x05\x00\xB8\x0B\xBC\x61\x23\x56\xF8\x0D\xB2\x1A\x6E\x02\x19\xB5\xB4\xA4\xAB\x72\x46\xA5\xF0\x18\xB1\x24\x5C\x19\xB0\x36\x59\xF6\x5A\xCD\x07\xCD\x60\x62\x89\x02\xE0\x01\x46\xB2\x22\x44\x78\x7E\x89\xBC\xE1\x6B\x61\xA7\x02\xE2\x00\x43\xB0\x3D\xA7\x64\x89\x88\xA5\xFE\x72\x36\x64\x01\x2D\xB1\x82\xA1\xD6\x2B\x0B\xBB\x76\x12\x6D\x26\x03\x7E\xB0\x07\x88\x25\xAE\xC3\x5B\x7C\xAC\x12\xA8\x34\x06\x61\xA7\x02\xE8\x01\x4D\xB2\x65\x82\x1C\x70\x13\xA5\x5C\x28\x57\xAF\xB1\x09\x02\x75\x01\x2E\xB3\xF3\x8B\x6E\x15\x37\x2F\x5A\xBD\xB0\x03\x3A\x59\xB2\xA9\x38\x2B\xA2\x70\x13\xB1\x58\x63\x89\x02\xEE\x01\x02\xB1\x72\xA0\xE2\x6B\x17\xA8\x03\x33\x1F\x74\x07\xB2\x1A\x78\x02\x28\xB2\x31\x6C\xCF\x06\x82\x2E\x5F\x89\x02\xF2\x00\x6D\xB3\xA0\x8B\x58\x5B\x74\x03\x56\x72\x36\x2B\x89\x02\x02\x1A\x19\x87\x99\xE9\x0C\x8B\xAE\x48\x32\x36\x76\x01\xD3\xB0\x6C\x93\x32\x74\x31\x05\x6F\x18\xB3\x5F\x63\x86\x02\xF8\x01\x02\xB1\xC8\xAD\xEC\x98\x41\x0D\x95\x9D\x48\xE2\x9E\xB2\x1A\x7D\x02\x3C\xB2\x77\x93\x25\xAD\x42\x0E\x64\x87\xA6\x3C\x4B\x2D\x12\x75\x1F\x45\x19\x75\xA8\x1A\x33\x29\x75\x14\xB2\x1B\x03\x03\x46\xB4\x2C\x0A\x77\xAA\x0C\x16\x64\xD5\xAE\x60\x06\xD9\x1B\x02\x03\x24\xBE\xCC\x0E\x1A\x95\xE6\x65\x1F\xF4\x0F\x53\xB0\x5F\x0C\x25\xBB\xEF\x10\xBC\xBB\xE9\x70\x1D\x7B\x74\xD9\x1B\x03\x04\x26\xB5\xAC\x13\x00\x8C\x4F\xE7\xB1\x32\xB3\xE0\x04\x4F\xB3\x24\x0F\x3D\xA7\x1C\xA5\x63\xC0\xB2\xC7\xB1\xDD\x0B\x50\xB2\x24\x02\x0A\x13\x07\x3C\x36\x3B\x1D\x00\x03\x8D\x1D\xED\xAB\x2A\xB4\x95\xB5\xCA\x96\x65\xD7\xB2\x58\xB3\xAC\xB2\x56\xB3\x2B\xBC\x95\xAF\xCA\xB8\x36\x2F\x21\xFE\x1B\xAE\xB2\x58\xB4\x2A\xBF\x0F\x10\xCA\xA3\x01\x63\x10\x63\xB3\xDD\x19\x59\xB0\xB7\x1D\x06\x03\x73\x19\x65\xE6\x1B\xBB\x1C\xD9\x19\x0C\x18\x73\x12\xDB\x0E\x9F\xAF\x63\xB5\xAF\x05\x13\x00\xA9\xF0\xAF\x59\x1F\x7A\xB9\x45\x48\x5C\x41\xAF\x6B\xB2\xAF\xB3\x30\x49\x2D\xB7\xDE\x10\xCA\xA6\x37\x18\x11\xB2\x1B\x5D\x1F\x27\x00\x36\x9F\x10\x23\x08\x0B\x66\xDB\xB2\x76\xB3\xE4\x14\x61\xB6\x9E\x4A\xE5\x92\xAF\x13\x66\x97\xB3\x98\xB3\xCC\xB0\x59\xB0\x2A\xB2\x68\x1C\x51\x1A\x66\x9F\xB3\xA0\xB3\xC9\xB1\x60\xB0\xB8\x1C\x3B\xA4\x2E\x15\x65\xBB\x1D\x21\x15\x52\x0D\x55\xB1\x32\xB0\x98\xBC\xCC\xB2\xB0\x21\xB3\xB0\xB3\xD8\xB2\x6C\xB3\x36\xB4\x98\xA3\xCD\x89\x3C\x3B\x1D\x4B\x07\xAE\xB2\x6D\xB1\x1F\xB6\xDE\x0B\x34\x09\x66\xA7\x02\xAD\x00\xC6\xB0\xCE\x7B\x20\x01\x9C\xBB\xCA\x8F\x84\x69\x1B\x5D\xB3\xC0\x54\xD6\x18\xB7\x19\xDE\x0D\x36\x15\x65\xE6\x1B\x3C\x15\xC7\xB2\x56\xB7\x21\x41\x97\xAD\xCC\x82\x1B\x78\x14\xB4\x2A\xD9\x1B\x43\x47\x1F\x09\xDE\x0B\x33\x0F\x67\x82\x24\x8E\xB3\xEA\xB1\xED\xAC\x3A\xB4\x95\xA4\x8C\x05\x25\x5A\xB3\x89\x60\xEE\xB0\x17\x1F\x2D\xB0\x9E\xA2\x08\x12\x67\xD9\xB2\xE4\xB3\xA9\xB3\xCF\x11\x3B\xBD\x00\x35\xCC\x9A\x58\x6A\xB3\x3D\x3A\xF6\xB0\xE7\x51\x3C\xB6\x9C\xA9\x84\x62\x67\xD8\x91\xAF\x0C\xEC\xB2\xAC\x08\x3D\xB0\xC5\x90\xA3\x38\x67\x81\xA2\xFA\xB3\xE5\x84\x7F\xB3\x3A\xBE\x9F\xB4\xCA\xAA\x3D\x1C\x30\x04",
"\xB5\xAA\x9B\x7D\xB1\xBD\x10\x4C\x1F\xCE\xBB\x67\xEE\xB3\xFF\xB3\xDD\x19\x7C\xB5\xF6\xA8\xC4\x13\x20\x51\x68\xF6\xB3\x0E\x2D\x03\xB6\x7A\x61\x41\xB3\xC0\x46\x08\x2F\x67\xD8\xB2\x1B\xB5\xDF\x1A\x43\x18\xFA\xA5\x9F\xAF\x4A\x8B\x5F\x22\xB4\x06\x53\xAD\xB0\x74\xB7\x24\x07\xA2\xB7\xCA\xA9\x68\xBB\x1B\x2B\xB5\xEB\xAD\x8B\xB2\x8F\x9F\xA2\xA9\x6F\x1D\x23\x16\xB4\x0A\xB4\x0C\xB5\x7F\xB5\x40\xB9\x41\x39\xD0\x8E\x41\x46\x20\x00\x35\x0F\xB6\x8B\xB2\x00\x34\x9B\xAD\xD2\xB5\x66\xD0\xB2\x21\x14\xB3\xA1\x56\xB0\x98\x01\xA2\x1E\xCC\x94\x65\xAC\xB3\x30\x19\x93\x03\x3C\x06\x48\xB3\xDB\x0D\x8C\x91\x0C\x21\x14\xC1\x00\x2E\xB6\x6C\x1E\xF6\x91\xA2\x0B\x05\x22\x69\xD6\xB3\x32\x0E\xDA\x8C\x0C\x01\x44\x19\x0A\x07\xD3\x83\x66\x9F\x8B\x01\x8F\x10\x17\x29\x06\x4D\xB2\xC1\x57\x79\xB8\x00\x21\x14\xA5\x00\x3A\xB7\x85\x77\xE6\x97\x03\x01\x51\x23\x02\x7A\xB4\xA4\x7D\x9B\x9E\x0D\x01\x44\x11\x0A\x00\xD4\xB0\xFE\x37\x9E\x35\x01\x10\x15\x2D\x06\x50\xB4\x6C\x97\x79\xB4\x00\x21\x14\xB3\x00\x46\xB5\x00\x71\x44\x1F\x92\x58\xCA\xA6\xA7\x21\x14\xAF\x00\x49\xB7\xC5\x9D\x2A\xBD\x84\x06\x11\x6C\x68\xEF\xB4\x4E\x8C\xD2\x3A\x6A\xB6\x2D\xB3\xE5\x0E\x2F\x30\x01\x69\x19\xAD\x3B\xF5\x26\x72\xB0\x2A\xB8\x89\x12\xD2\x98\x65\xD4\xB4\xED\xB3\xAB\xB0\x96\xB0\xC2\x01\xA2\x1B\xD2\x9B\x65\xDE\xB4\xC3\x02\x30\xB4\xA3\xB4\x4C\xB4\x32\x9B\xD5\xA3\x5F\xEC\xB4\x9A\xB5\x1E\x7D\x0E\x02\x4E\xB1\xAC\xA7\x25\xB7\x69\xB4\x30\xC5\xB4\x3E\xB6\x9F\xB1\x59\xB0\xA7\xAB\x27\x84\x6A\xCC\xB5\xA1\xB4\x1F\x7E\xA2\xB0\x5A\xB4\x6C\x85\xC3\x50\x6A\xD4\xB5\x81\x8B\xA6\x60\xA5\xB0\x5B\xB9\x27\x92\x01\x18\x6A\xDC\xB5\xB9\x90\x4E\xB4\x1B\x0E\x53\xBA\xA3\xA0\xD5\x95\x6B\xB3\x32\xA3\xB5\x18\x26\xC4\x18\x00\x0C\x13\x09\x67\x1B\x0E\x2A\x44\xAA\xB5\xF5\xAF\x54\xB3\x37\xB1\x10\x1F\x07\x02\x20\x6E\x24\x53\xB5\x4F\x1D\x89\xB1\x2B\xB3\xAB\xBF\xD2\x9A\x69\x8C\xB5\xB8\xB4\xA5\x02\xAE\xB3\x2B\xBC\xAB\xA9\x08\x26\x69\x84\xB6\xBF\xB5\x93\x01\x9B\xB3\x2B\xB8\xEE\x84\xD6\x8C\x6C\xFB\x61\xC7\xB5\x84\x01\x9E\xB7\x61\xBD\xE3\x7D\xD3\xA7\x04\x7F\xB4\x14\xB6\xE3\xAF\xB3\xB1\x63\xB8\xA8\xB3\xD6\x9C\x6C\xCD\xB5\x8F\xB5\x6D\x3C\xB8\xB7\x13\x43\x03\x1B\xD6\x9F\x6C\xD1\xB5\xDE\xB5\x93\x01\xA6\xB7\x64\xB7\xAE\xB5\x12\x61\x28\x45\xB3\x5A\xB3\xC0\x55\x55\xB0\x5F\x22\xD9\x35\x98\x77\x65\x9E\x41\x20\xB4\x38\x2B\x6D\xB0\xB7\x16\xF9\x44\x2D\x22\x6B\xE6\xB5\x56\xB5\xA9\xB1\xBF\xB1\x57\xBF\xAF\xB7\xD5\xB1\x2E\xE3\x46\x03\x03\x30\xB4\xC2\xB1\x13\x9D\x7C\x85\xD3\xBE\x6A\xCC\xB6\xFA\x2E\x60\xB4\xCB\xB1\x5B\xB0\x07\x03\xD6\xA7\x04\x73\xB4\x53\xB7\x3C\x85\xC4\xB2\xF7\x33\xB2\xAD\x2D\x8B\x6B\xD9\xB6\x97\x3B\x41\xB7\x49\x05\x50\xB0\xB6\xBF\x04\x49\x6A\xA7\x02\x8B\xB5\xB2\xB6\xB5\xB2\x64\xBA\xB6\xB9\x88\x66\x6C\xB1\xB6\xD8\x6F\x6F\xB5\xDB\xB6\x65\xB0\x9C\xBD\xDA\xB3\x64\x55\xB2\xD2\x91\xB4\x92\x1A\x2D\x2F\x3B\x97\xB9\xCF\x8B\x69\x96\xB3\xF4\xB5\xF3\x18\xEF\xA0\x35\xA7\x95\xA5\x31\x15\x69\xDC\xB2\x43\xB6\x81\xB5\xD1\xB2\x2B\xB1\xB0\xA0\x09\x03\x6C\xDA\xB2\x05\xB6\xA8\x8B\xD3\xB2\x20\xB5\x6F\x92\xDA\xB0\x6D\xC2\xB5\x0E\xB7\xCB\xB6\xB1\xB0\x4F\xB6\xB7\xA4\x28\x9F\x6D\x9A\xB7\x82\xB5\x8D\xB4\xE8\xB5\x59\xB7\xB6\xA9\x08\x29\x6D\xA3\xB7\xD1\xB5\x90\xB5\x42\x01\x52\xB3\xB7\xBC\x87\x6F\x6D\xD9\xB2\x97\xB4\x95\xB5\xE7\xB5\x47\x4F\xB2\xB3\xDD\x8B\x40\x01\xB7\x81\x0D\xE4\x0D\x56\xB6\x70\xB1\xAB\xB6\xCA\x89\x6E\x8E\xB7\x8B\xB7\xAC\xB1\xE3\xB6\x0D\x0F\xB8\xB9\xCA\x91\x6E\xFD\x90\x93\xB7\x00\xB5\x2E\x93\x4D\xBA\xB0\xB3\xDD\x96\x6D\x89\x02\x58\xB6\xD4\xB5\xCB\xB6\xDC\x9C\xB9\xAD\xDD\x96\x6C\x89\x02\x18\xB6\xE9\xB4\xD5\xB2\x6C\xB9\x10\x04\xDB\x9A\x6F\xF9\x84\xA5\xB6\x83\x03\xE9\xB0\x76\xB7\xF4\x97\xD6\xAD\x6E\xA5\xB6\x27\x03\x4A\xB7\x55\xB1\x76\xB9\x10\x0B\xD9\x9F\x6F\xB9\x91\xB5\xB7\xD6\xB7\x02\x26\x2A\xB8\xBB\xB7\x80\x25\x45\xDC\xB2\xB0\xB5\x0B\xB6\xAC\xB4\x74\x23\x40\xB5\xD5\x80\x6C\xC7\xB6\x0E\x91\x93\x02\xD2\xB0\x72\xBA\x7F\x91\x01\x0E\x6D\xCB\xB6\x94\xB7\x72\x8E\xE5\xB4\x7C\xB8\xB9\xB7\xDA\xB3\x6E\xDB\xB6\xE2\x3F\xD9\xB7\xF5\xB6\x20\x09\xBD\xAC\xE0\x9A\x6C\xE3\xB6\xB3\xB7\xF0\xB7\x40\x03\x7C\xB6\xA9\xA5\xDF\xAC\x6D\xEF\xB7\x24\xB7\xD7\xB5\x07\xBD\xC7\x79\xB2\xAD\xDF\xB3\x6E\xF6\xB7\x53\xB3\x4E\xB6\x20\x72\x2E\xBB\x7E\xA9\xD7\xAB\x6B\xCA\x1C\x02\x02\x9E\x03\xF2",
"\x1E\xD2\x2B\xAA\xB8\x6D\x35\xAE\x08\x1A\x5B\xB3\x26\x0B\xE1\xB0\x32\xBC\xBF\xB1\xA0\xBE\x6B\x89\x02\xB6\xB4\xC6\xB4\x00\xB9\x4B\xB9\x10\x03\xE0\x86\x6F\x85\xB8\x07\xB8\x02\xB8\xD4\xB4\x79\xB9\x10\x0B\xD8\xA0\x70\xF4\x8C\x99\xB6\x0B\xBA\x9D\xB5\x7A\xBF\xC4\xA2\x2C\x9F\x6E\xD2\xB8\xCD\xB4\xEE\xB6\x41\x06\x7B\xB8\xC5\xB1\xD6\x9A\x70\x82\x02\x1C\xB9\xF5\xB6\x07\xBB\x75\xB3\xBB\xA8\xDF\x89\x04\x6A\xB7\x56\xB2\xF6\xB6\x41\x06\x7D\xBD\xC5\xB3\xDE\x86\x70\xF5\xB6\xF2\xB6\x17\xBB\x9E\xB4\xD4\x78\xB9\x15\x91\x3B\x0E\x0F\x42\x55\xB2\x9D\x15\x51\x37\x66\xB4\x99\xBF\xDB\xB7\x67\xD0\xB2\x2B\x64\xEC\x07\x56\xB1\x7F\xB1\xA4\xBB\xDF\xBB\x24\xBE\xB8\x44\xB6\x20\xBB\xFF\xB0\x9B\x53\x22\x60\x00\x06\x71\xD8\xB2\xC7\xB7\x06\xAD\xF2\xB7\x3A\xBB\xBC\xAB\xE0\xA3\x70\xEA\x8C\x51\xB9\x4B\xBB\x14\xB8\x59\xB6\xBD\xB7\xE2\x9A\x72\xD9\xB8\xA2\xB7\x36\xB8\xD5\xB7\x8B\xB1\x10\x01\xE3\xA9\x71\xE3\xB8\x3A\x4F\x32\xBA\x08\xBA\x8C\xB4\xC2\xB2\xDB\x95\x71\xF4\xB6\x09\x02\x98\xB6\x28\xB9\x4F\x83\xBF\xB3\xCA\xAA\x41\x30\x28\x78\x09\xBE\xB5\x60\x39\x67\xB9\x41\x38\xDD\xB7\x54\xB8\xB8\x5A\xB2\x1D\xB9\xEF\xB3\x35\xBD\xC3\xB1\xBD\xBF\x70\x86\x02\x41\xB8\xE1\xB7\x10\xBC\x56\xB2\xC0\xB3\xE4\xA9\x69\xB9\x91\x6F\xB8\x83\xB6\x33\xB9\x13\x1A\xA6\xB6\xE4\xAC\x72\x98\xB9\x0E\xB9\xD6\xB4\x04\xB8\x18\x42\xC1\xBE\xE4\x97\x73\xA1\xB7\x18\xB9\xD6\xB4\x29\xB8\x00\x06\xCA\xB5\xCA\xB1\xE1\x66\xB7\xAF\xB8\xD7\xB5\xFA\xB3\x76\xB5\xC2\xAB\xE3\xA7\x70\xF1\xB7\xE9\xB8\x18\x02\x1C\xB9\x50\xB4\xC7\xAB\x3C\x1B\x60\xDD\x13\x78\xB8\xAA\xB2\x1E\xBB\x2A\x3A\xDE\x35\xBF\xBB\x68\x90\x9D\x2F\xB4\xA8\xB0\x0F\x21\xA2\x19\x95\xA2\xE6\xBA\x6F\xBE\xB7\xC5\xB9\xBF\xB0\x11\xB8\x99\xBB\xC8\xAC\xC7\x88\x6D\x82\x02\x8F\xB9\xAB\xB1\x24\xB9\x20\x07\xB0\xAA\xE2\x89\x70\x85\x8E\xD6\xB9\x53\xB9\x03\xB8\x7A\xBF\xC0\xB4\xE2\xB3\x72\x97\x3B\x13\xB9\x81\x01\x05\xBF\x93\xB1\xAD\xBA\xE2\x83\x04\x5C\xB8\x24\xBB\xE9\xB7\x38\xBD\x9C\xBE\xA0\xA8\xE5\xA4\x9D\x2A\xB9\xEB\xB9\xD6\xB5\x3B\xBB\x20\x0C\xC6\xA9\xE9\x94\x6D\xD1\xB9\x06\x02\x59\xBA\x4D\xBC\x96\xB3\xCF\xA7\xD4\xB5\x73\xA8\x12\x53\x25\x0A\x21\x3E\xBB\x2A\xBB\xCF\xAD\xCC\x3A\x5E\xFF\xB9\xCF\x98\x01\x30\xEE\xB3\x4A\x69\x48\x7C\xCA\xBC\x6E\x87\xBA\xC4\xB9\x43\xBA\x31\xB9\x91\xBC\xD0\xA6\xDA\x8C\x72\x8F\xBA\x01\x03\x88\xBA\x55\xB3\xA2\xB0\x00\x15\xE8\x87\x71\xCB\xB8\x19\xBA\x73\xB9\xDF\x89\x93\xBF\xCD\xAD\xD6\x9B\x73\x8F\x52\xDD\xB9\x8B\xB7\xEC\xB6\xA4\xB2\x10\x08\xE9\xA5\x75\xDE\xB8\x1E\xB7\x74\xBA\xEA\xB1\x95\xB7\xBE\xAB\xE5\x9A\x74\xA7\x89\x33\xBA\x81\x01\x4D\xBF\xAD\xBE\xC6\xB0\xE7\x9F\x74\x9F\x41\xB7\xB6\xA8\xB0\x15\x21\x21\x06\xF9\x55\xCA\x8F\x75\x85\xB9\x08\xBA\xA9\xBA\x42\xBC\x99\xBA\xC8\xB6\xEA\x8E\x74\x81\xB8\x45\xB9\x69\xBA\x7D\x08\x1C\x99\xC4\xBF\xEA\x97\x74\xD1\xB6\xCD\xB7\xD6\xB7\xF3\xB6\x20\x01\xBD\xBF\xEB\xA7\x16\x9E\xBA\x3B\xBA\x90\xBA\x37\xBF\xAE\xB0\xCE\xBD\xDE\x99\x70\xF1\xBA\x9E\xBB\x44\x70\x3A\xB9\xB5\xBA\xAD\xB1\xE9\xA9\x73\xF9\xBA\x01\x03\xBD\xB8\x69\xBD\x59\xB8\xD3\xA4\xCE\xB6\x6E\xB8\xB7\x5E\x20\x6B\x26\x53\xBA\x5F\xB5\xBD\x5C\xE1\x8A\x76\xBF\x92\x8C\xBB\xAA\xBA\x10\xBF\xAA\xB0\xD9\xA6\x08\x1A\x75\xD5\xB2\x5C\xBA\xAF\xB8\x24\xB9\x61\xBD\xC4\xAE\xDE\xA4\x75\xB3\xBB\xD1\xB5\xB3\xBA\x13\x61\xAD\xB8\xBD\xAB\xEB\xA1\x72\xA1\xBB\x66\xB6\xD4\xB8\x76\xBB\x6D\xB4\xC6\xB5\xEB\xAE\x76\xAC\xBB\x02\x54\x57\xB8\x78\xBD\xB6\xB2\x10\x1A\xE9\xBC\x75\xD4\xB6\xB5\xB8\xDC\xB5\x21\x21\x21\x09\xF7\x03\xD2\xB5\x69\xBD\xBB\x5A\xB3\xDF\xB4\xF1\xB1\x78\xB8\x95\xA3\xDE\x85\x6F\xCB\xBB\x50\xB6\xF2\xB8\x45\xBA\xB2\xB5\xCD\xB9\xEC\xA9\x73\x9B\xBB\x03\x03\xCE\xBB\x76\xB8\xB4\x80\xDA\xA7\xEF\x96\x16\xA3\xBB\x62\xBA\x41\x87\x75\xBE\xC0\xB7\xD9\x2B\xE9\xB3\x6E\xF3\xBA\x2F\xBA\xEF\xBB\x19\xBC\x9D\xB2\xDE\xA3\xF0\x95\x89\x38\xB7\x91\x21\x78\x24\xFE\xB4\xB7\xB1\xA3\x08\xDC\x89\x74\xC0\xBB\xC7\xB9\x81\x01\x32\xBD\xBE\xBB\xCC\xA1\xF1\x90\x74\xFC\xBB\xD0\xB9\xCA\xB8\x7E\xBF\xB2\xBC\xC4\xA6\x08\x0E\x71\xE0\xBB\x00\xBC\x81\x02\x80\xBC\xC1\xBF\x09\x52\xEE\x93\x6C\xE9\xB9\x21\xBA\x81\x03\x48\xBC\xC6\xB8\x4E\x8B\xF0\x90\x77\xAA\xBA\xDA\xBA\x1E\xBE\x6A\xBF\x83\xB0\xDE\xA6\xE3\xA4\x80\x14\xBC\xB2\xB7\xD6\xB6\x7E\xB8\x00\x06\xDE\xBF\xF1\xA8\x77\xA1\x14\x35\xB4\xAB\xB3\x76\xB0\x2A\xB9\x09",
"\x36\xB6\x7B\x76\xC0\xB6\x1E\xBD\xDF\xB9\x3F\xBB\xBE\xBD\xD8\xA3\xEE\x8F\x76\x8B\xBA\x49\xB6\x14\xBD\x36\x93\xC9\xBA\xDC\xB2\xE8\x8C\x77\xAE\xBC\xCE\xBB\x6C\xB9\x3A\xBE\xC6\xB4\xDD\xB4\xE0\x96\x77\xE1\xB9\xE9\xB8\x07\xBD\xEB\xB0\xC2\xB2\x88\x50\xE9\x93\x78\xB2\xBA\x15\xBC\x21\xBC\x2C\xB9\xA7\xB7\xDB\xB0\xCA\xAA\x58\xE1\x0C\x57\xBD\xF7\xB9\x87\xBE\xB7\xBF\x2C\x3E\xCB\xA0\x78\xD4\xBA\x22\xBD\x86\xBA\x50\x1F\xBE\x27\xDF\xA6\xF3\xB9\x77\xAA\xBC\x8E\xBC\x16\xBD\x58\xBD\xA5\xBB\xD1\xBC\xEC\x9D\x74\x9C\xB9\x38\xBC\x04\xBC\xA5\xBF\x82\xB6\xDA\xA2\xE7\x81\x79\xCE\xBC\x79\x84\x3A\xBF\x2D\x5E\xCE\xB7\xE4\xB8\xF3\x89\x79\xE9\xB9\x4B\xBD\x26\xBD\x82\xBF\x94\x80\x03\x18\xDD\xA0\x65\xC1\x1D\x83\xB8\x0E\xBD\x8F\x11\xCB\xB5\xE8\xA4\x60\x93\x75\x8A\xB7\x5D\xBC\x65\xB8\x71\xB8\xCC\xB7\xE2\xA8\xE0\x8A\x6F\xE3\xBC\x90\xBD\xAD\xBB\x99\xBB\x20\x0F\xE2\xB6\xF0\x95\x6D\xCF\xBB\xAB\xBD\x4D\xBA\xC4\xB5\xCD\xB2\xD2\xAF\xF3\x9D\x7A\xF1\xBC\x9F\xBD\x64\xBC\xC8\xB3\xB5\xB6\xEC\xA6\xF2\xB0\xA4\x48\xBC\x26\xB8\x25\xBE\x5F\xBE\xD8\xBD\xE2\xAB\xD0\xB0\x67\x89\x61\xF5\xB4\xA8\xB3\x7E\xAA\x20\x0C\xF4\x1B\xCA\x87\x76\xFB\xB5\x58\xB2\xF9\xBA\xFF\xB6\xB1\xBB\xE8\xAD\xE4\x87\x77\xD4\xB2\xC9\xBA\x31\xBD\xC3\x8B\xD2\xB3\x95\xAD\xD8\xAA\x79\xE0\xBB\x6C\xBD\x4E\xBA\x5A\xBD\x75\xBC\xD6\xA1\x08\x2E\x75\xA0\xBD\x0D\xBD\x68\xBF\xA6\xBE\x51\xB4\xED\xBA\xF3\xAA\x73\xF7\xBC\xAF\xBB\x3C\xBC\xC0\xB9\x1B\x9B\xED\xA6\xF8\xAD\x7A\xD0\xB2\x45\x00\x66\x6D\xA0\xBB\x8E\xB3\xE8\xB1\xEF\x9F\x78\xDB\xBC\xEB\xBC\x2F\xBD\xBB\xB8\xAB\xBE\xC8\xB2\xF7\xA6\x1F\xC1\xBD\xC8\xBB\x61\xBE\x40\x05\xD8\xB6\xF0\xB1\xF1\x81\x04\x33\xBC\x0B\xBF\xCF\xB8\xA6\xB8\xBC\xB9\xE3\xA1\x08\x3B\x78\xA9\xBE\xC5\x9C\x1F\xBE\xB4\xB8\xAE\xB8\xB6\xAF\xF0\x85\x7C\xB0\xBE\xAD\xBA\x84\xBC\x78\xB8\xB6\xB0\x00\x12\xED\xB3\x7C\xFD\xBA\x70\xB9\x78\xBA\x68\xB6\x2C\xB8\x96\xAF\xD5\xB2\x7A\xC1\xB6\xB5\xAE\x75\xBC\x7D\xBF\x2A\xB6\xDF\xAD\xE6\xBE\x7A\x94\xB9\xC0\xBD\x5E\xB7\xD3\xBF\x99\xB9\x8D\x9D\xF6\xA3\x7C\xE9\xBC\x1C\xBA\x6D\xB9\x81\xB8\xE7\xB6\x5B\x9A\xF4\xB5\x7B\xFB\x61\xFD\xBC\x00\x03\xBF\xBF\xE7\xB3\xCA\xA2\xF8\x9F\x7D\xBD\x7C\xA2\xBD\xB0\x5C\xA9\xBF\xDA\xB6\xEA\xB9\xF6\xA8\x7A\x8D\xBE\x5C\xBE\xAB\xBD\x40\x01\xCA\xB5\x95\xA3\xEA\x85\x66\xB8\x1B\x19\xB2\x01\x11\x55\xB6\xA0\xB8\xD8\xB1\xEA\xB5\x7A\xB6\x4A\xB8\xBC\xE1\xBA\xAE\xBF\xCB\xB1\xDC\xA1\xF3\x93\x7D\xD4\xB9\x29\xBC\xA9\xBE\x45\xBF\xD7\xB3\xEF\xBE\xEF\xB0\x78\xC8\xBD\x03\xBE\xB3\xBB\xD6\xBC\xEC\xB7\xE0\xBB\xF7\xA9\x73\xE1\xBE\x63\xBF\xC8\xBC\xCD\xBE\x74\xB6\xF3\xA4\xF2\x95\x7B\xF6\xBA\x94\xBF\xCB\x38\xCF\xBE\xE7\xBA\xF9\xA0\xFA\xB1\x72\xB6\xB7\x62\xB5\x84\x12\x92\xB4\x47\xBC\xA4\xB4\xCA\xA3\x25\x04\x33\x1D\x08\x3E\xBB\x72\x94\x97\xBB\x3E\x38\xDD\xAA\x32\x83\x10\x5C\xB2\xBE\xBC\xBA\xBE\x90\xBF\xF7\xBD\xDF\x8B\x7D\xD6\xB2\x4D\xBF\xC8\xBB\xE1\xBB\xB2\xBF\xF1\xAA\xFC\x96\x76\x8C\xBF\x95\xB6\xC7\xBE\xB1\xBE\xE4\xB0\x00\x08\xF9\xA1\x7E\xB5\xBC\x93\xBF\xD2\xBC\xD5\xB5\xE5\xB0\x00\x0F\xF9\x8F\x7F\xBD\xBC\x70\xBC\xF0\xBA\x9C\xBA\xAE\xB7\xF3\xB7\xFE\xAE\x6D\xDF\xBB\xC6\xBD\xD1\xBF\x3B\xB9\xE8\xB0\xDE\xB0\x01\x29\x7E\xD3\x14\xAB\xBE\x80\xB9\xEB\xBB\x2A\xBA\xCD\x09\x4B\xA5\x65\x3A\xB9\x38\xB6\x3F\xB9\x88\xB0\x2A\xB4\xC9\x81\x25\x39\x70\xC7\xBE\xB4\xBD\xBE\xB2\xAD\xBB\xB1\xB6\xE2\xA1\x08\x23\x78\xCC\xBE\x25\xBC\x44\xBD\xAF\xBB\xF1\xB0\xF5\xB4\xEC\x86\x7F\xAB\xBC\xC8\xBE\x05\xBA\xF2\xBD\xE4\xB0\xF9\xA7\xFB\x9B\x6E\xAB\xBE\xC6\xBC\xEA\xBE\xF5\xBA\xFA\xBE\x56\x92\xF9\x94\x80\x81\xBE\x35\xBF\x39\xBD\xF7\xBF\x02\xC1\xC2\xA0\xFF\x86\x7C\xE2\xBF\xDA\xBC\xF2\xBC\xB7\xBA\x4C\xB3\x97\xAB\x3C\x29\x7F\xC9\xBA\x96\xB3\x2B\xB7\xB3\x14\x56\x65\x9B\x5C\xBF\x93\x79\xB8\x1B\x19\x80\xBD\xBC\x55\xB2\xF7\xB0\xDF\xBC\xD7\x97\x7C\xEF\xA7\xC0\xB7\x5C\xBC\x89\xBB\xD7\xB5\xF8\xA3\x00\xC7\x7F\x85\xC0\xC5\xBE\x69\xBB\xF0\xBD\xBF\xBD\xDC\xBA\xEC\x8D\x80\xB5\xAF\xB3\x8D\xE8\xBE\x03\xC2\x59\xB6\xF9\xA0\xEF\x98\x7E\xA7\xBB\x19\xC0\xEE\xBE\xE7\xBE\xE0\xB6\xED\xA2\x08\x28\x71\xDE\xBF\x4B\x54\x85\xBC\x16\xC4\x76\xB2\x02\xCE\xF8\xA4\x80\x9F\x1D\x74\xB2\xA4\xB9\x2E\x9A\xC3\x29\xC7\xB4\x58\x10\x52\x6F\x32\xE5\xB5\x5D\xBA\xFC\xBE\x40\xB0\x95\xA4\x7F\x72\x80\xD3\xB2\x34\xC1\x8A\xBE\x0D\xC2\xCB\xB8\x03\xDC\xF2\x82\x7E",
"\xBB\xC0\x84\xBF\xFE\xBD\xC7\xBB\x08\xC9\xF8\xA2\x02\xC4\x80\xD4\xBE\x8D\xBF\x22\xC3\x7F\xBF\x08\xCF\xDB\x09\x02\xD0\x80\x86\xBE\x12\xC0\x67\xBF\x16\xB8\x0A\xCC\xF9\xBA\x00\xD3\x81\xDC\xBE\x55\xC1\x80\x03\x15\xC4\x03\xC9\xA1\x5A\x02\xD4\x82\xDC\x44\x70\xBF\x2D\xC2\xF9\xBC\x03\xC1\x06\xDE\xDB\xAC\x7E\xA9\xC0\x70\xC1\x63\x0C\xF1\x42\xF6\xBA\xA4\x94\xFD\x91\x51\x38\xB7\x6D\xB2\x75\xB5\x56\xB7\xEA\x0B\xC3\xB6\xF8\xB4\x81\x8D\xB9\xFF\xBE\xE0\xBD\x00\xC1\xF0\xB6\xF8\xBF\x03\xC8\x7E\xD1\xBE\x7E\xC1\x1F\xC0\x20\xC1\xF9\xB2\x08\xCF\xFC\xB7\x7B\xC6\xBD\xF9\xBD\x4C\xBD\x13\xC6\xD8\xBF\x04\xDE\xF4\x91\x81\xE0\xBB\x69\xBE\xD6\xB5\x3A\xB9\x12\xC0\x00\x13\x04\xCB\x81\xCD\xB5\x20\xC1\xB7\xBD\x17\xC1\xEE\xB0\xE5\xAC\xD4\xB7\x68\xB7\x1B\x25\xC0\x94\x11\x5D\xB7\x06\xC4\x0A\xD2\x6D\x39\x65\x9E\x26\xF0\xBF\xCC\x04\x37\xC7\xA8\xBE\xA4\xA5\x07\xDB\x66\xF8\xBE\x27\x02\xC2\x1F\x56\xB5\xD8\x14\x95\xAA\xFD\xBC\x65\xE2\xC1\x86\xBD\x2D\xBF\x6D\x18\x77\xB1\xA5\xB9\xFD\xB2\x7A\xA6\xB3\xF0\xBC\x5D\xB1\x86\x09\x44\x1D\x0C\x0C\xD4\x9B\x40\x99\xBE\x83\xBF\x8D\xBD\x71\xBD\x16\xCA\x0B\xD7\x05\xC6\x80\xB9\xC1\x08\xC0\x20\xC2\x02\xC5\x17\xCB\xFC\xA4\x04\xFB\x36\x06\xC1\xCB\xBC\x7D\xBD\x75\xBC\xDF\xB6\x01\xCF\x06\xDB\x7E\xE2\xB7\x9D\xBF\xEE\xBB\x32\xC0\xF4\xB7\x09\xD9\x02\xE7\x7A\xE3\xBB\x3F\xB7\xDB\x14\xB9\xB6\xFB\xA2\xEB\xA8\xEF\xBD\x74\x80\x00\xE1\x1F\x53\xB6\x0C\x59\x55\xB1\x45\x35\xE1\xBC\x36\x2D\xB5\xF6\xC0\x73\xB4\x3E\xC2\x3E\xBA\x0F\xC6\x0C\x3C\x83\xFE\xC1\x4C\x97\xB5\x0C\x40\xC0\x0F\xC2\x10\xDC\xF5\x99\x75\x9E\xBE\x55\x44\x32\xBC\x50\xC0\xA3\xBB\x00\xDC\xFA\x8C\x7F\xCE\xBF\x1D\xC2\xEA\xB7\x21\xC4\xEB\xB9\x08\xD4\x08\xD9\x7F\xC6\xBD\xDB\xBE\x64\xC3\x06\xC6\x22\xC3\xBD\xAC\x06\xCE\x83\xC8\xC0\x71\xB7\x8F\xC2\xB1\xB8\x85\xB5\x7B\xAA\xE1\xA0\xE0\x2C\xB8\x3D\x7C\x79\xB8\x55\xB1\x25\xCE\xAE\xAA\xEE\x2D\x84\xF2\xB5\xB5\xAE\xDC\xB7\xBD\xB1\x26\xC2\xE8\xA3\x7A\x85\x84\x93\xBB\x4E\x2F\x9B\xC3\x56\xB7\x1F\xCF\xFB\xB5\xCA\x81\x7F\xC6\xBB\x43\xC2\x09\x30\xC8\xB9\x1F\xC0\xD6\xA5\x0A\xDB\x81\xC7\xC2\x97\xBD\x88\xC2\x30\xC3\x22\xC7\xF9\xB5\x08\xD8\x85\xBD\x7C\x51\xC2\x63\xBD\x32\xC3\xED\xB6\x05\xD8\xF6\xAE\x73\xA1\xC0\xA7\xBE\xF9\xB7\xCC\xB0\x94\x14\x31\x74\xEC\x21\x83\xB3\xBF\x6B\xC1\x0C\x2B\xCE\xB4\xB7\x1D\xB3\xAC\x0B\xD4\x7C\xEE\xC2\x09\xC2\x40\xC1\x5C\xC7\x24\x0D\x0F\xD3\x0B\xF9\x84\x8E\x12\x3B\xC2\x00\xC0\x0F\xC2\x0F\xCF\xEE\xB4\x09\xCF\x7A\x87\xC0\x91\xBD\x04\xC0\x51\xC4\x21\xCC\x00\xDF\x05\xC6\x7C\xC1\xC1\x2C\xBE\xAF\xBF\x61\xC4\xD3\xBB\x08\xC6\x06\xCD\x82\xD2\xC0\x1A\xC3\x22\xBC\x47\xC4\x2A\xC4\xB5\xB1\x06\xE3\x77\x99\xC1\x49\xC3\x5A\xB9\xED\xA9\x6F\xBA\x97\x3B\xDB\xAC\x25\x9F\xB5\x6A\xC1\x4F\xC0\x19\xC7\x1F\x06\xDE\x1F\x07\x25\x66\xDC\xB2\xA9\x24\xEB\x0F\x5B\xC7\xC0\x39\x75\x32\x0B\xDA\x65\x9B\xA0\xD6\xC2\xBF\x07\x86\xBA\x26\xCC\x95\xA5\xB1\xBB\x83\xA4\xC3\x38\xC2\x0D\x86\x4E\xC5\x2E\xC4\x95\xB7\x0B\xC4\x84\xA1\xC3\x06\xC3\x20\xC2\xE4\xB4\x0F\xC5\xF5\xB4\xF7\xBB\x86\xB7\x9E\x80\xC2\xAD\xBF\x52\xC3\x0B\xCD\x14\xC5\x0C\xCF\x85\x86\xBE\x89\xC2\x83\xBF\x62\xC2\xC2\xB5\xEA\xA9\xF8\x9A\x85\x86\xBE\xA9\xBD\x3E\xBC\x6E\x19\x7B\xAB\xAC\x58\xCC\xB8\x6E\x82\x0D\xB3\x0F\x90\xC3\x67\xC3\x26\xC5\x7B\xA6\x0F\xF6\x84\xE8\xC3\xA6\xC2\xF5\xC0\x6A\xC4\x3D\xC3\x95\xAE\x0F\xFE\x80\xF0\xC3\xC4\xBF\xA0\xC3\x5E\xC6\x35\xC2\xE9\xBE\x0B\xC9\x85\xF9\xC3\x6B\xBC\x25\xC3\x7D\xC5\x59\xBD\x1F\xCE\x02\xC6\x86\x85\xC1\xFB\x61\x00\xC4\xD7\xBB\x40\xCB\x11\xDE\x00\xDC\x7D\xC6\xC3\x5B\xC2\xE4\xC0\x71\xC4\x96\xB7\x95\xB5\xDF\x92\x4F\x9E\xC3\xF4\xB9\x99\x9E\x2D\xC0\x2E\xCD\x1D\xD8\x10\xDF\x87\xA7\xC3\x70\x0F\xD4\xC2\x2C\xC3\x35\xC2\x00\xDF\x09\xF4\x87\x87\xC2\xF3\xC3\x21\xC4\x11\xC0\xCD\xB6\x04\xD6\x0D\xDC\x7D\xB8\xC3\x11\xC0\xDD\xC0\x8C\xC2\xC1\xBF\x1F\xDC\xFA\xB2\x88\xDB\xC0\x34\xC4\xE1\xC2\x8D\xC3\x0B\xC8\x23\xC8\x10\xD2\x88\x98\x19\x23\xC2\xF3\xAD\x49\xC4\xA7\xB3\x16\xC3\x73\x32\x70\xB8\x22\x34\xB9\xF5\xAC\xEE\xB7\x86\xB2\xC8\xBA\xCA\xAC\x82\xDA\xC3\x20\xC4\xEE\xC3\x79\xC1\x21\x05\x1A\xC7\x12\xDA\x88\xC9\xC4\x1C\xC5\xDA\xAE\x87\xC6\x49\xC2\x25\xDD\x03\xD1\x89\xDB\xC3\x95\xB8\x13\xC7\x8E\xC7\xB2\x38\x22\xD8\xF7\xAA\x88\xDB\xC4\xA7\x89\x16\xC4\x31\xC7\x45\xCF\x10\xD1\x11\xE6\x7D\xAB\xC4\xA9\xB7",
"\xA9\xC0\xA6\xC5\x2A\xC3\x1C\xDB\x14\xC5\x87\x96\xC1\x8B\xC4\x86\xBF\x34\xC2\x13\xC7\x12\xD9\x06\xF9\x08\x76\xB8\xAD\x68\x22\xB7\xFA\x25\x0C\xC5\xD9\x1B\xE3\xA4\x83\xD1\xC3\xEA\xBE\xF9\x28\xEE\xB1\x90\xB6\xFF\xA1\xE6\xB7\x83\xE5\xC3\x35\xC3\x35\x02\x77\xC1\x2B\xB4\x17\xDA\x01\xEA\x86\xF9\xC0\x4D\xC5\x3D\xC1\xA1\xC0\x17\xC7\x28\xD9\x13\xC9\x8A\xB4\xC3\x46\xC2\x87\xC0\x36\xC0\x62\xBF\x28\xD5\x14\xD5\x6C\xDA\xC4\xCE\xC4\xDE\xC3\x49\xBC\x11\xC8\x11\xCE\x04\xC1\x87\x9F\xBF\x63\xC5\xA4\xC1\x99\xC4\xEB\xB9\x20\xD2\x0C\xD4\x65\xB7\xB9\xB4\x33\x57\xC5\xFC\xBA\x3A\xC3\xFF\xB8\x6D\x3F\x72\xF5\xC4\xAB\xC1\x5B\xC7\x93\xC3\x34\xCC\x27\xC9\x0F\xE6\x7A\x46\x98\xBE\xC5\x25\xC4\xB0\xC4\x16\xCF\x21\xD1\x0D\xCA\x84\xCD\xB6\xB0\xC2\x61\xBD\x5F\xC0\x59\xCF\x17\xCA\x16\xF3\x36\x10\xC2\x5C\xB6\x89\xC2\x9B\xBE\x29\xCF\xEC\xBA\xFE\x97\x8A\x90\xC5\x04\xBF\x47\xC3\x16\xC6\x2A\xCE\x18\xD4\xE9\xA3\x7F\x91\xC3\xF1\xB9\x52\xC4\x18\xC6\x9E\xB3\x86\x13\xA0\x3F\xB0\x60\xBD\xFA\xB8\x8A\x16\xAB\xC7\x32\xC5\x0A\xD9\x0C\xF5\x7E\x82\xBA\xDA\x0F\x74\xC4\x79\xC3\x5D\xC5\x24\xCD\x17\xD9\x88\xEF\xC5\x49\x0E\x25\xC6\x5D\xC3\x16\xC9\x03\xD8\x0B\xCF\x89\xF2\xC3\xC8\xB7\x97\xC7\x42\xC4\x4A\xC3\x08\xD6\x12\xDB\x81\xD8\xC4\x88\xC0\x68\xC7\xB2\xC4\x4B\xC5\x30\xD0\x0A\xC7\x8C\xD1\xC5\x09\xC7\x6B\xC4\x15\xC5\x53\xC8\x30\xD0\x06\xE0\x8A\x9E\xC5\xB4\x8E\x1D\xC4\xD2\xC4\x70\x52\x31\xC3\x26\x58\x2E\x41\xBA\x93\x32\xBB\xBF\x6F\x1D\xA8\xB7\x3D\x24\x05\xEF\x80\xBC\x1B\x4C\xBA\x77\x83\x78\xC5\x2D\xC4\x21\xDF\x6D\x16\x88\xBA\xC5\x46\xC4\x5E\xC4\x92\xC7\x42\x0A\x32\xCD\x0F\xEC\x8C\xF6\xC0\xEF\xC2\x7B\xC7\x2E\xC2\x44\xC9\x2F\xC1\xF9\xBB\x8B\xB4\xC6\xBE\xC1\xAC\xBD\x8A\xC3\x3F\xC9\x14\xD2\x14\xC6\x7C\xC5\xC1\xD0\xBD\x63\xC2\x62\xC2\x53\xC5\x34\xD1\xD6\x8C\x8C\xED\xBE\x8F\xC2\x69\xC0\xC4\xC5\xFC\xB7\xF7\xBC\x6D\x03\x76\xF7\x19\x5B\xC7\x09\xC4\xAE\xC6\x21\xA5\x32\xC6\x08\x3D\x89\xE2\xC6\x7F\xC4\xB2\xC5\xA0\xC7\xB7\x13\x28\xC2\x16\xC8\x8A\xC4\xC5\x31\xC7\x61\xC5\x20\xC0\x6E\xCD\x10\xD6\x19\xC9\x85\xB8\xC6\x4C\xC2\x9D\xC7\xBF\xC0\xEC\xB4\x29\xDB\x19\xE7\x12\xDF\xC4\x49\xC3\x30\xC4\xB6\xC2\xE7\xB1\xFE\xA7\x1A\xFD\x8D\xA6\xBF\x7C\xBC\xF9\xB4\x6E\xBF\x24\x0C\x3B\xA7\x13\xFE\x74\xC2\xC4\x97\xC7\xA3\x2F\xAE\xC0\x2B\xBD\x2B\xD7\x03\xFF\x8A\xBD\xC2\x3D\xC0\x42\xC5\xEE\xC0\x66\xC2\xC9\xB2\x19\xF3\x86\x9C\xC7\xB5\xC2\xB9\xC6\xA3\xC4\x6E\xC1\x2A\xDE\xDA\x83\x83\xF7\xC6\xA5\xC7\xD1\xC4\x62\xC7\x67\xC6\x3A\xC1\x1A\xF4\x75\xB5\xC4\xAC\xC7\x0F\xC2\xEB\xC0\x68\xC4\xDB\xAA\x1A\xEF\x8E\xE8\xBB\xF9\xB0\xA8\xB3\x7A\xBE\x20\x0D\xDE\xBA\xCA\xA7\x7B\xA4\x9E\x9A\xC6\x76\xC6\xE3\xC6\x5D\xC3\x68\x90\x17\xFE\x8E\xF2\xC5\xC0\xC6\xD6\xC1\x5E\xC2\x28\xC6\x3C\xD8\xEC\xBC\x8B\xA7\xC4\xFE\xC4\xB0\xC3\x03\xC2\x30\xC9\x1B\xCF\x1E\xDC\x7D\xF8\xC6\x06\xC6\xBD\xC6\x80\xC4\x6F\xCC\x3D\xDE\x1B\xC4\x8D\x85\xC8\xD3\xB7\x6D\xC7\x16\xC1\x06\x08\xE1\xAA\x89\xB7\x7F\xA3\xC6\xE9\xC7\xC6\xC7\x40\x07\x71\xCC\x3B\xC3\x1B\xCC\x06\x65\xC6\x1D\xC5\xB3\xC5\xA3\xBA\x5F\xC7\xD9\xB4\x1F\xDA\x8E\xBC\xC1\xC8\xC7\x64\xC6\xE7\xC5\x79\xC4\xE0\xAC\x1E\xCB\x8D\x9F\x41\x76\xC7\xFF\xC5\xF4\xC2\x7F\xCD\xB1\xA2\x20\xF3\x88\x84\xC8\xD5\xC7\x66\xB7\xDF\xC6\x40\xCE\xF6\xA7\x0E\xE3\x8A\xC9\xC3\xD5\xC0\xF7\xBA\x29\xC4\xB0\x04\xE5\xA7\x09\x0C\x88\xB6\xC7\x8D\xB4\xF4\xC5\xEE\xC2\x7D\xC3\x41\xCC\x1F\xFA\x2E\xEE\xC7\x89\xBC\x76\xBE\x65\x76\xDD\xB3\x3F\xC3\x11\xD5\x88\xA2\xBE\x01\x02\x92\xBE\x08\xCA\x79\xC0\x0C\xCD\x16\xF1\x90\xD1\xB5\x29\xC9\x2D\xC0\x00\xCE\x67\xCE\x42\xC0\x13\xF0\x90\xD2\xC7\xA7\x89\x19\xCB\xCE\xBB\x7B\xC7\x45\xD0\x1D\xF6\x76\xB2\xC7\x7E\xBD\x49\x0D\xAC\xB8\x82\xC3\x44\xD2\x20\xC2\x04\x14\xC8\x57\xB3\xDE\xC5\x12\xCA\xE3\xBB\x44\xDC\xF8\xAD\x86\xCF\xC8\xAF\xC2\x84\xC2\xDA\xC1\x3E\xC3\x33\xC4\xF6\x98\x7D\x96\xBD\xFA\xC2\xFE\xC5\x96\xC6\x7F\xCA\x45\xCB\x21\xEB\x89\x98\xC0\xBF\xC2\xA9\xC2\xC2\xC1\x29\xC2\x46\xCD\x1D\xC7\x88\xDC\xC5\xDE\xC6\x04\xC8\x7A\xBE\xD5\xB8\x13\x25\xE8\xAA\x8B\x91\xC8\x7B\xC5\xF5\xC7\xC9\xC5\x7D\xC9\x32\xD3\x1C\xFB\x36\x15\xC7\x77\xC8\xAF\xC4\x12\xBD\x6D\xCC\x17\xC5\x11\xF7\x8F\xA4\xC8\x71\xB5\x11\xCB\x09\xCA\xE5\xB2\x48\xD9\x19\xC4\x92\xC9\xC2\x5B\xC8\x00\xC4\xF5\xC0\x8C\xC6\x3D\xD1\xF0\x98\x8F\x85\xC4\x63\xC9\x47\xCB\x02\xC9",
"\x92\xC5\x46\xCF\xF2\xB4\x68\xD6\xC1\x18\xC6\xDC\xB7\xB8\xB9\x20\x05\xEE\xBA\xCA\x84\x72\x93\x9E\x98\xC9\x0B\xC6\xC9\xC6\x4F\xC8\x32\xCB\x0F\xF1\x8B\xAB\xC6\x4C\xC4\x7A\xC6\xF0\xC6\x58\xC8\x39\xC5\x1E\xDF\x90\xFD\xC8\x57\xBF\x2A\xC4\x15\xCF\x36\xC6\x45\xD4\x25\xEC\x88\xA2\xC7\x2C\xC8\x50\xB9\x97\xC3\x0B\xC8\x3A\xC8\x25\xF5\xF7\x5F\xC8\xE1\xC8\x03\xC9\xB6\xC6\x9C\xCA\x40\xC9\x0A\xDD\x8B\xF1\xB9\xB8\xB7\x88\xBC\xD1\x69\x71\xC1\x24\xC0\x0D\xFB\x91\xC4\xC4\x99\xC9\x22\xCB\x26\xCF\x88\xCD\x49\xCF\x26\xE6\x8D\xD1\xC9\x2D\xC7\xB4\xC4\x07\xCA\x36\xCA\x17\xC4\x25\xE4\x88\x84\xCA\x72\xBE\x00\x02\x14\xCD\x5F\xCA\x4A\xDF\x1E\xDA\x6D\xDD\xC9\xE9\xC9\xE9\xB5\x16\xC8\x96\xC6\x48\xC6\xD7\xA5\x7D\xDD\xC8\xA9\xC6\x74\xCB\x21\xCD\x03\xC9\x3D\xD7\x11\xE4\x91\xDE\xC9\xD1\xB5\x77\xC9\xF9\xBC\x3A\xC8\xDB\x07\x1B\x82\x04\x55\x92\x58\xB3\xEC\xC1\x35\x5D\x8D\xC9\x4F\xCF\x23\xC6\x91\xC0\xAE\x02\x06\x93\xC9\x40\x02\x39\xC9\x52\xD7\x24\xEC\x94\xCA\xC9\x9A\xC8\x66\xC8\x27\xCD\x8E\x10\x95\xA9\x27\x6F\x49\x58\xC3\x36\xCA\x6A\xCB\xD1\x2E\xB0\xB7\x61\x0A\xF2\x1C\x61\x89\x10\x3B\xCB\xD5\x18\x54\xB5\x1F\x29\x10\x09\x7D\x32\x68\xC1\xCA\xF7\xC8\x3D\xC6\x61\x04\x55\xC3\xC0\x8A\x11\x2C\x9B\x47\xCA\x4B\x1B\xA4\xC8\x2C\x10\x2A\xB7\x10\x29\x08\x38\x3E\x6B\xC1\x50\xCB\x81\xC9\x01\xC6\xE9\x28\xBB\xB4\xA2\x81\x04\x44\x1F\x60\xCA\x36\xCA\x50\xCC\xAC\xC0\x95\xB8\xF4\x03\x04\x4F\x1F\x69\xCA\xAE\xC7\xE2\xC2\x20\xBC\x56\xD8\x6D\x3A\x0D\x80\x00\xDB\x1F\xA7\xCA\x5A\xC9\xAA\xC2\xDD\x8E\x23\xC1\x04\x70\xC8\x56\xB3\x0D\xA1\xE1\xC0\xB8\x1C\x13\x2A\x26\x40\x95\xFB\xCA\x62\xCA\xD1\xC2\x5F\xC8\x00\x00\x58\xD5\xCA\x82\x96\x83\xCB\x09\x1F\x8A\x42\x40\x03\xFC\x11\x57\xCA\x1C\xE4\x8C\x99\x0C\xB8\xB6\xDF\x8A\xE8\x54\x44\xB5\x4F\xDD\x1A\xFB\x36\x5F\xC6\xBB\xC7\x38\xCA\x05\xCE\x22\x00\x59\xD9\xC7\xB3\x15\xC8\x57\x59\xB2\xD4\xB0\x9E\xC4\xAF\xC8\x2D\x2E\xBA\x33\x6B\xC4\xBE\xE9\x14\x4B\xC8\x62\xCE\x6D\xC4\x57\xCB\x2C\xCD\x96\xD4\xB2\x72\xC8\x81\x01\x2C\xC0\x9A\xC3\x2F\xC1\x28\xF5\x8B\x89\xCB\x7C\xC8\x7C\xC6\x1E\xC8\xB8\xC1\x22\xC7\x1E\xFE\x91\xDA\xC9\x80\xC9\xB9\xC5\x2B\xC9\x74\xCF\x4A\xC6\x27\xF1\x92\xDE\xC4\xB3\xC9\x88\xC8\xD5\xB2\x75\xC3\x34\xCB\x27\xEB\x92\xBC\x54\x1F\xCA\xE9\xC9\xD2\xC7\x86\xC6\x4E\xC9\x28\xF4\x7D\xD4\xB2\x57\xC6\xE0\x18\x99\x60\x00\x04\x27\xD7\xCA\xAA\x94\x96\x83\x37\xCA\xB0\xC7\x32\xC8\x72\xCD\x4C\xDE\xC7\xB8\x6E\x8C\xA9\x5C\xC2\xAC\xB1\x7A\x19\x44\x1E\x59\xD7\x6D\x20\x96\xE1\xC6\x15\xC9\xC8\xC4\x63\x02\x4C\xB9\xF3\x10\x03\x1E\x0F\x32\x1B\xC5\xAC\xF7\xC8\x54\xB1\xEF\xBC\x95\xB7\x13\xEB\x94\xEB\xCA\xB6\xCB\x97\xCA\x28\x57\xE4\x38\x41\xC2\x14\xDA\x90\xCE\xBE\xD7\xC8\xE1\xC9\xB1\xC4\xB5\xCB\x39\xC7\x2E\xF5\x8C\xDB\xC9\x57\xC4\x88\xCB\x46\xCE\x79\xC4\x18\xCE\x11\xE3\x93\xC9\xC2\xE5\xC9\xEB\xC9\x12\x72\xA3\xC6\x51\xD9\x13\x8D\x92\xDA\xC7\xBA\xC8\x77\xC8\x2F\xC8\xA4\xC3\xBD\xBB\x04\xD3\x65\xEE\xC1\x9E\xC1\x58\xC4\x19\xC6\xF5\xB8\x41\x10\xFD\xB8\xAC\x24\xC2\x31\xCC\x14\xC3\x1F\xB8\xB7\x17\xFB\xAF\x03\xF5\x5E\x86\xCC\xE8\xCA\x04\xCD\x4B\xCF\xAF\xCA\x60\xC6\x2A\x0C\x98\x9E\xC9\xB7\x1A\x50\xC9\x13\xCE\xA0\xC8\x47\xC6\x25\xE1\x90\x8C\xCA\x18\xCD\x9B\xC6\x86\xCD\xC4\xC2\xDA\xAD\x2E\xE2\x98\xCE\xB5\x1F\xCC\x73\xC9\x88\xCE\xA1\xC6\xE8\x64\x31\xED\x85\xD4\xB6\x27\xCC\x8F\xC9\x8A\xCE\x9C\xC2\x52\xC3\x01\xED\x83\xE8\xBF\x62\xC0\xF1\x92\x66\xC4\x2A\xBD\xFE\xBA\xCB\x2F\x7F\xC9\xAF\x69\xCC\x53\x98\x0F\xC8\xB7\x15\xFF\xB8\xFD\x9B\x65\xC0\xCC\xC8\xC9\xF4\xC9\x68\xC9\xB0\xC3\x5A\xC7\x3C\x08\x99\xDD\xB4\x0F\xCC\xE1\xBD\x84\xCD\xA0\xC3\x5C\xD4\x2D\xC8\x94\xF6\xC3\x5C\xCD\x62\x8D\xFE\xC3\xC3\xC5\x42\xCB\x2E\xFC\x87\xE0\xC9\x8C\xCD\x8C\x03\x73\xCC\x9C\xC1\x5D\xD1\x34\xE7\x93\x8B\xC9\xE6\xC9\x30\xCC\x99\xC1\xBB\xC6\x69\xC5\x33\xDE\x81\x9C\xC1\x26\xC1\x38\xCD\x8B\x2E\xEF\xBA\xFF\xAC\x01\xD1\x6F\x27\xC0\x63\xC1\x72\xC4\x6F\x19\x06\xC5\x60\xC1\x2B\xC6\x9A\xE3\xCA\x09\xCD\x7D\xC8\x4C\xCD\x9F\xCF\x3E\xDC\x2D\xF1\x8F\xC1\xC5\xA1\xC9\xCF\xCB\x28\xCD\xD0\xC5\x4A\xC7\x34\xCA\x8A\xD7\xCC\x8D\xC5\x2A\xCA\x09\xC9\xD1\xCC\x61\xC3\x18\xFE\x87\xBD\xC6\xB2\xC8\x8C\xCA\x39\xCC\xBA\xC0\x09\xC7\x20\xFD\x92\xDD\xB5\x9C\xCC\x2A\xCE\xA8\xC3\x70\xC6\x66\xC1\x15\xDD\x82\xB0\xC5\x3A\xCC\x07\x2C\x55\xC8\x17\x50\x30\x0E",
"\xCB\x30\x6B\x70\xCC\x39\xCD\x54\xCC\x1B\xC0\xB7\x1E\x06\xCD\x35\xF3\x96\xBD\xCD\xB0\xCD\x21\xCC\x63\xCD\xC8\xC9\xE3\x34\x35\xF3\x91\x81\xC2\x75\xC9\x81\xC3\x6F\xCF\xD5\xCB\x36\xD2\x30\xD9\x8E\xC3\xC7\xD8\xC9\x28\xCB\x1F\xC9\xC0\xB1\x18\xC1\x18\xC3\x86\xC6\xCD\x1E\xCC\x64\xCC\x74\xCA\xD9\xC7\x65\xCC\x36\xCB\x8C\xCE\xCD\x2C\xCD\x4F\xC7\x98\xCF\xCA\xCE\x69\xD1\xFB\x9F\x81\xCE\xC6\xA1\xCD\x70\xCE\x9A\xCB\x55\xC3\x03\xC2\x05\xC2\x3E\x56\xC6\xE9\xB2\xA8\xB1\x2A\xC7\x85\xB9\xEE\xAE\x35\xE8\x9B\x8A\xCB\xEA\xCD\xDB\xCB\x54\xB1\xB7\xCE\xFF\xAA\xF4\xB1\x9B\xBE\xC2\x96\xC6\xA1\xC8\xF1\xC3\xBF\xB5\x3F\xC9\x28\xCB\x94\xF8\xC7\x0D\xCA\x49\xCB\x43\xCB\xD8\xC2\x73\xD5\x32\xDD\x98\x93\xC5\x59\xCD\x2B\xCF\x96\xCD\xE6\xC5\xEA\x7E\x32\xDF\x86\xE0\xCC\x08\xCE\xED\xCA\xE8\xB9\xDA\xCF\x65\xDB\x2E\xD4\x9B\x8E\xBE\x39\xC8\x06\xB6\xAA\xC1\x8A\x2F\x70\xD2\x60\x57\x9B\xFA\xBF\xFA\xBE\xC0\xBE\x3F\xB9\x14\xC1\x92\x1D\x98\x28\x35\xE9\xC0\x50\xCE\x78\xC3\xFE\xBF\xD0\xBA\x26\xDC\xCA\xB8\x6E\xDB\x82\xB4\xC4\x73\xC2\xD8\xCB\xEC\xC5\x5A\xD5\xD7\x82\x1A\x67\xC5\x64\xCF\xB4\xCE\x66\xB7\xEB\xC7\x12\x03\xE8\x9A\x65\x8C\xB5\xA5\x98\xF5\x63\xFD\x30\xEB\xCD\xC7\xA4\x17\xFA\x6C\xEA\xCE\x78\xCF\xF0\xC4\x6E\x1A\x00\x19\x35\xD6\xCA\xB0\x9D\xCD\x10\x0B\x30\x8C\xCF\xD2\xCC\x22\x09\x77\xC5\x3C\xF3\x36\x38\xB7\x96\x5F\xD6\xAE\x56\xB6\xBC\x17\x12\xC9\x09\xF1\x30\x78\x92\x78\x00\xA9\xC7\x6E\x1D\xDE\x0B\x67\x9D\x3A\xD8\x9B\xE2\xCD\x6B\xCC\xC3\xCE\xE6\xCA\x2B\xBE\x23\xC9\x08\x07\x8E\xEB\xCE\x50\xB2\xC5\xCF\x40\x01\xB7\xBB\x78\xDC\xCA\x96\x30\x55\x30\xCB\x42\x1C\xCF\xE5\xCB\xE2\xC1\x45\x27\x09\xC0\x25\x38\x08\x26\x1D\xD6\x02\xE4\xCB\xF3\xCA\x76\xD8\xDD\xA8\x41\x09\x02\xB7\xCF\xB7\xCC\x3D\xCF\x8E\x1D\x6D\xD2\x4F\x1C\x8C\xB3\xCF\xB4\xCF\xB1\xCC\xEE\xB2\xB1\x33\x10\x13\x83\x01\x9F\xC7\xCF\x9C\xCE\xA8\xB2\xF1\xCE\x20\x04\x7C\xD5\x29\xDB\x65\xDA\x19\xA0\x37\x16\xC0\xAA\xCC\xF5\xC4\x11\x07\x09\xE9\x33\x0A\x44\xE4\x3A\x8C\x0C\x34\x33\x0D\x00\x7C\xC8\x3E\xDE\x9F\x99\xB3\xB8\xB7\x5D\x1F\xF8\xC5\x36\xBC\xDF\x06\x6F\x15\x79\xB5\xAF\xBB\x1C\xD9\xBB\x61\xB3\xE1\xC4\x6C\xD3\xC9\x08\x67\xDC\xB2\xC3\x52\x92\xC9\x83\x3C\x2A\xBB\xEB\x0A\x60\xAB\x9F\x89\x02\x0A\x98\x4D\xC0\x7F\xCF\x21\x21\x82\x22\x3A\xD9\x23\xF2\xCF\x6E\x52\xFA\xCF\x49\x03\x0E\x04\xAA\xB4\xFA\x83\x04\x04\xD0\xF2\xB6\x31\xB5\x8E\xB2\xF5\xCF\x73\xD4\xE5\x80\xA0\x9E\x53\x02\xD1\xFB\xB6\x2A\xC0\xEA\xB3\x10\x0E\xD5\x9F\x9A\xD3\xB2\x30\x1B\xE1\x3A\xFF\xCF\x1B\x3F\x7D\xC2\x3B\xE1\x9F\x98\x08\x4F\xB4\xDC\x19\x6F\xB1\x02\xD1\x3B\xDC\x38\xC6\xA0\xE5\xBB\xC0\xC9\xC1\xCD\x19\x07\xFD\xC2\x3B\xD8\x71\x0D\x67\x87\xCB\x88\xBB\xEF\xCB\x54\xB7\x1A\xC3\xDB\x13\xCF\x83\x68\xA2\xCD\x74\x2E\x18\xB4\x4C\xB4\xB3\xC2\x07\xC2\xD2\x8A\x9D\x92\xB4\x0E\x2C\x31\xB6\x79\xB7\x2D\x13\x7D\xD2\x33\xF1\x04\x69\x1B\x9A\x12\x20\xB7\xEE\xB8\x00\x02\x83\xC3\xCF\x8D\x68\x87\xCA\x50\xBF\x4C\x29\x11\xD5\xC5\x2A\x83\xDD\x18\xE6\x97\xBD\xB7\x4D\xD1\xDF\x18\x0D\xD3\x4C\xBF\x10\x32\x42\xF8\xA0\xBD\xB4\xED\x08\x1E\xD3\xAC\xB9\x21\x09\x85\xDA\xD0\x8F\xA1\xA7\xC8\x3E\x63\x29\xD1\x0E\xD4\x42\xB0\x83\xCB\x42\xE5\xA1\xB7\x1B\x5B\xD1\xDE\xB6\x2B\x10\xC6\x2A\x86\xC0\x43\xFB\x22\x62\xD0\xD1\xB3\x14\xD0\x10\xD0\x8E\x2A\x80\xCC\x4F\x3F\x9E\xE9\xB3\xE9\x1B\xAB\x0E\x12\xD5\x06\xCE\x83\xDF\xF6\xAA\xA0\xFD\xD0\x4B\x1B\x24\xB7\x17\xD2\xA9\xBE\xA3\xAD\x43\xC4\xA2\xF3\xBE\x7A\xD1\x1D\xC9\x19\x00\x11\xDD\xCF\x0A\x44\xD2\x9C\xC6\xD0\x1D\xD0\xB2\xCC\x3D\xC7\x47\xCB\x46\xCD\x0B\xD1\x88\xE0\xCB\x89\x61\x06\xCC\xE5\xC1\xD0\xCE\x32\xC3\x34\xDE\x90\xF8\xCD\xC6\xCB\x6C\xCB\x85\xC9\xB9\xCB\x3C\xCE\x34\xF5\x8D\x90\xCD\xD2\xCC\xEC\xBE\xC0\xCC\xD2\xC4\x70\xCD\x3F\xE3\x98\x98\xCD\x57\xCC\x4D\xCE\xB6\xC4\xE8\xCD\x80\xC1\xD7\x94\x65\xDE\xC2\x80\x7D\x0D\xD0\xBA\xB5\x4D\xCA\xAE\xAD\xD7\xAB\x84\x9B\x44\x19\x28\x97\xC0\x70\x18\x26\xCD\x89\xDF\x0C\xDF\xA2\xB3\xD0\xA1\xD1\x3F\xCE\x4A\xB4\x14\xD2\x50\xD4\x37\xC1\x97\x84\xCD\x13\xCC\xE2\xCB\x94\xC6\xC2\xC1\x37\xCC\x45\xC2\x9B\xAE\xD1\xE6\xC9\x89\xCA\x73\xCD\xA2\xC5\x74\xC8\x24\xD5\x8B\xC0\xC3\xD7\xC6\x31\xC5\x47\xCB\xD3\xCC\x7E\xDC\x39\xFA\x88\x40\xC8\xC2\x09\x15\xBA\xA5\xCA\x2C\xC3\x95\xA4\x0B\xF2\xB0\x6F\xB5\x2B\x44\x99\xB5\x5A\xC0\x2A\xBB\x16\xCD\x46\xF5\x93\xCF",
"\xD1\x4E\xD0\x15\xD2\x28\xD7\x93\xC4\x8D\xD3\x37\xDF\x9C\xD7\xD1\xA7\xD0\x95\xCD\xBE\xCA\xA1\xCB\x6F\xD2\xF1\xBD\x9B\x91\xB8\x02\xC7\x66\xBC\xC1\xC5\x37\xC9\x37\xC9\x24\xFB\x8D\xB8\xD1\xB6\xD1\x83\xBC\x2E\xCE\x91\xC5\x43\xD9\x11\xDC\x97\xD7\xCC\x34\xCB\xDD\x18\xCD\xB5\x32\xC2\xAE\x22\x3C\xFB\xA1\x99\xCF\x65\xCF\xF3\x19\x67\xC6\x1F\xD7\x3B\xD4\x3D\x1C\x65\x8F\x42\x03\xD3\x24\xCD\x41\xD3\x9A\xC4\x61\xCB\x39\xDD\x75\xF9\xC2\x2E\xCF\x86\xD3\xC9\xBF\x21\xDC\xCD\xB1\x48\xFA\x78\x8A\xC1\xD3\xC4\xDF\xC3\x39\xD2\x91\xC2\x34\xCD\x36\xD6\x97\x99\xD2\xED\xC8\x32\xCF\x8A\xCA\x18\xD4\xDA\x38\xDB\xAB\xF4\x7A\xB6\x1A\x38\x93\xD2\x24\xD1\x25\xD1\x1E\xC9\x08\x04\x6E\xD6\xB2\xE7\xC7\xD2\x0F\x4B\xD1\x1A\xDE\x4F\xD9\x20\xC0\x94\xE8\xC6\x06\xD2\x28\xD1\xBD\xC8\x1B\xD7\x6F\xCA\x48\xE9\xA2\xFA\xCD\xC8\xCA\x7E\xCD\x20\xCE\xDF\xCD\x3F\xD7\x39\xD0\x8F\xB9\xCE\x19\xD3\x9D\xCF\xB3\xCD\xCB\xC8\x91\xCE\x47\xDF\x7F\xEB\xD1\xBB\xD1\x76\xD3\x5C\xD3\xDA\xC5\x82\xC4\x1C\xCF\x88\xBA\xB7\x58\xB3\xAC\xD2\x4B\xD2\x87\xCE\x31\xC7\x0B\xDD\xA5\x8E\xCC\x5F\xD3\x0D\xCA\x35\xD5\xB8\xC4\x96\xD6\x26\xE8\xA2\xF6\xC7\x4F\xCC\x98\xCD\x94\xCF\x73\xC3\x65\xC5\x47\xE8\x90\xB0\xD1\x96\xD2\x59\xD0\x45\xD1\x80\xC6\x91\xC3\x20\xF5\xA5\xFB\xD2\x3C\x63\xA0\xCE\xA5\xC9\x29\xDC\x70\xCB\x4A\xF3\xA3\xBD\xC4\x50\xB3\xF8\xC9\x40\x06\x02\xD6\x95\xA7\x26\xCE\x1E\x5B\xD2\x02\xD2\x69\xD2\xFB\x0F\xD6\xC2\x4D\xC9\x39\xF5\xA4\xEC\xC6\xBC\xCC\xB1\xD3\x35\xD1\x27\xD9\x96\xCE\x48\xEB\xA5\x90\xD2\xFF\xCC\x89\xD3\xB1\xCB\x33\xDC\x45\xDD\x4C\xEF\x90\x9F\xD3\x09\xCE\x13\xCE\x68\xD1\x16\xD8\x5D\xDA\x4B\xC9\xA7\xBE\xD1\x29\xB9\x71\xB6\x3C\xD4\x39\xD2\xAA\xA4\x46\xEB\x6B\xEF\xC4\x61\xB3\x4D\x15\x35\x1A\x19\xD9\xF0\x05\x2F\xF6\x99\xB6\xC5\xE6\xB4\x80\xD2\x16\xD4\x2B\xD5\x6B\xDF\x27\xFD\x96\xE0\xD2\x34\xD2\x6D\xD2\xA1\xC5\x2C\xD7\x9B\xC7\x4B\xCC\xA4\xBD\xD3\x3B\xD3\xDF\xD1\x4F\xD1\x38\xDF\x93\xD3\x48\xC1\xA5\x95\xD2\x43\xD3\x8B\xD1\x51\xD7\xE0\xC7\x94\xD6\x4B\xDE\x84\x9D\xD2\x08\xC4\xD3\xD0\x75\xD0\xB3\x3D\x34\xCE\x3A\xD4\x8C\xE9\x15\xB1\x2D\xEE\xCC\xC5\x14\xDB\xCB\x31\xC0\x37\xEB\x9E\xC6\xD0\xB3\xC5\x90\xC6\xD1\xB9\x3C\xD0\x9B\xC7\x49\xF1\x6B\x87\xD3\xA3\xD1\xC4\xD0\x84\xCF\x31\xD9\x90\xCD\x4F\xD0\xA6\xDC\xD1\x9D\xC7\xC9\xD2\x39\xC8\x74\xCF\x68\xD6\x32\xD9\xA4\x93\xCD\x20\xCD\x4A\xCF\x80\xD6\xE0\xCC\x48\xCB\x4E\xD9\xA6\xCD\xD3\x00\xD4\x48\xCB\x47\xD1\x23\xD1\x92\xD7\x6D\x20\x8B\xB1\x28\xE2\xC5\xBA\xCE\x8C\xCA\xD5\xC0\xDC\x08\x3B\xDF\xA7\xB2\xCB\x9E\xD1\x0A\xD6\x24\xD1\x26\xD0\x68\xDA\x50\xC2\x9A\x9C\xD4\x4E\xC8\x51\xCB\xDB\xC0\x44\xD9\x3C\xDE\x46\xDC\x93\xB4\xCE\xA0\xD2\x2B\xBA\x89\xD6\x3F\xD8\x65\xD3\x45\xE9\xA8\xB5\xD1\x54\xD4\x16\xD5\xA6\xCE\x45\xDD\x8B\xDF\x04\x64\xA6\x99\xD2\x0D\xCE\x52\xC4\xA8\xC8\x25\x17\xCF\xB9\x11\x0A\xA8\x95\x1B\x0C\xD4\x7E\xB9\x1D\xC5\x0E\xDA\xD4\xA0\x19\xC4\x74\xD8\xB2\x71\xC1\xC1\xD3\x0F\xD3\x48\xD2\x9B\xD2\x4E\x34\xA6\xBE\xCB\xE9\xD3\xC5\xD0\xED\x8D\x43\xDA\x9E\xD5\x0F\xFF\x9A\x99\xD2\xC1\xCD\x27\xD4\x38\xD7\xCA\xC2\x8E\xD7\x32\xE8\xA8\xDA\xCC\x2A\xD5\x17\xD7\x2D\xD3\x3F\xDD\xA2\xDD\x4F\xD1\xA9\xFF\xD3\x81\xC6\x1B\xCB\xD1\xC9\xEE\xB5\xA0\xD7\xD0\x4F\x8D\x9F\x1D\x92\x32\xAA\x03\x99\xD3\x80\x99\xA6\xC6\xEA\xBF\xA1\xAA\xD0\x4B\xBB\x93\x03\x56\x84\xA8\xC4\xA1\xC4\x4C\xF6\x9D\xC9\xD1\x75\xD4\x34\x1F\x9D\xD0\x3D\xD6\x9B\xDD\x53\xD0\x89\xEC\xD3\xAE\xD4\x10\xC8\x93\xD3\x8A\xCE\xA4\xD9\x30\xD0\xA9\xCF\xD3\x97\xD3\x29\xD7\xA3\xD5\x4A\xD4\x9C\xC9\x36\xC6\xA7\xDE\xC8\xC8\xD2\xA6\xD2\x46\xD4\xED\xB4\x43\xD1\x54\xDE\xA4\x93\xD5\x9A\xC0\xAA\xD3\xE7\xC8\x75\x23\xF1\xBF\x47\xC2\xA9\x85\xD3\x14\x02\x22\xD7\x34\xD6\x48\xD5\x8A\xC8\x52\xCC\x99\xCA\xD4\x4E\xCD\x59\xD4\x94\xCD\x56\xD2\x65\xD7\x55\xC2\xAB\x85\xD5\x27\xD4\x72\xD1\x97\xD2\xC6\x79\xA8\xC3\x57\xC3\x79\x8C\xD5\x5B\xD4\x47\xD4\xAE\xD5\x12\xCE\x9C\xC2\x56\xE1\xA9\xC9\xC3\xB3\xC6\xDD\xBA\xB9\xBA\xD6\xB2\x9E\xC6\x43\xF1\xA6\x98\xD4\x04\xD2\x6A\xD5\x35\xD7\x20\xDC\x98\xDC\x53\xFA\xA9\xC7\xC5\x91\xD2\x73\xC9\xA0\xD6\x56\xD3\xA8\xD9\x48\xE0\xAB\xD4\xD4\x87\xD4\x9D\xCD\xB9\xD5\x9E\xC3\x5D\xDE\x39\xCC\xAC\xCA\xD3\xEA\xD4\x61\xD7\x97\xD4\x4A\xDF\xAE\xDD\x2E\xFA\x9D\xBC\x1B\xE3\xCE\x81\x01\xF9\xC6\x10\xD1\xA4\xC6\x55\xFB\xA8\xF0\x28\xD2\xD5\xD9",
"\xD3\xC9\xC9\x78\xCD\xAA\xDF\x57\xD5\x93\xAC\xCE\x83\xCC\xDE\xD3\x2A\xD2\x2D\xDA\x5C\xCC\x4B\xC3\x92\xEE\xD2\x2A\xC8\xB8\xD0\x95\xD2\x2E\xDB\xAE\xC7\x57\xE9\xA3\xAB\xC7\x1B\xD2\x14\xCD\x8C\xD3\x81\xCD\x40\xDA\xF0\xAC\xA4\xC1\xC8\x5A\xD2\x8F\xD5\xB6\xC8\x64\xD9\xAA\xC2\x6A\x2B\xAA\x8A\xD3\xFC\xD5\x3D\xD5\x92\xD2\xD7\xCB\xA4\xCA\x45\xDD\xA3\xAC\xD6\xAD\xD0\x97\xD6\x2B\xC8\x66\xD5\x48\xD2\x59\xFB\xAA\xB4\xD6\xC2\xD4\x2D\xD5\x2E\xD4\x4B\xDF\xB0\xC3\x3A\xED\xAB\x9D\xCD\x02\xD4\x45\xD4\x66\x39\xE9\xCC\xB1\xD2\x44\xF8\x6E\xE7\xCF\x4B\x6F\x66\xD5\x4B\xD5\x5E\xD0\x87\xC4\x4F\xEF\x9B\xBC\xC2\x23\xD6\xF9\xC5\xFD\xC6\x5F\xD9\xB4\xC0\x58\xDA\xAB\x92\xD3\xDC\xD4\xCA\xD2\xB7\xD6\xD2\xC7\xB0\xDB\x55\xC9\xAC\xF1\xD2\x0B\xD7\x96\xD1\xC3\xD1\x58\xD6\x69\xDA\x45\xEC\x93\xBC\xD1\x5D\xD6\xBE\xD3\x19\xC8\x9E\xC9\x46\xC9\x08\x02\x1A\x24\xD5\x1D\xD7\x39\xD4\xB4\xD7\x46\x68\xAF\xD2\x49\xFA\xAB\xE1\xD2\x4D\xCC\x82\xC8\xDD\xD2\x37\xDC\x98\xCA\x59\xCF\xAD\xBE\xD3\x2D\xD6\xE0\xD1\x5B\xD0\xE0\xC8\x73\xD6\x52\xC8\xAA\xD8\xD4\xBB\xD4\xAD\xD5\x46\xD6\x70\xD7\x65\xD3\x58\xFB\xAA\x95\xD6\x20\xD2\x4A\xC9\x76\xD6\x98\xC4\xAF\xCF\x56\xE7\xAA\x97\xD4\xE5\xD2\xAF\xD3\x79\xD0\x69\xDC\xB9\xCA\x5A\xD7\xAB\xCC\xD6\xD9\xD4\xA7\xD5\x88\xD1\x6F\xD3\xA2\xD5\x4C\xE6\xAB\x9E\xB7\xBA\xD5\x9A\xD6\xA4\xCA\x5C\xD9\xB8\xC4\x57\xE8\xAE\xCA\xD7\x97\xCC\x74\xD7\xD6\xD1\x62\xD3\x9A\xC8\x5C\xC2\xAE\xC6\xCE\x7D\xD2\x6E\xBC\xD9\xD0\x45\xB1\x4C\xC2\xF7\xA7\x04\x45\xC9\xBB\xB7\xDA\xD6\xD0\xD0\xF3\xC8\xBB\xCF\x5B\xFF\x8E\xF1\xD6\xB8\xCD\x25\xCD\x6E\xD1\x73\xD7\x2F\xDF\x50\xC2\xAF\xCD\xD4\x50\xD7\x6F\xD2\xD4\xD4\xB9\xC4\xB5\xD4\x28\xD6\xAD\xD0\xD7\x58\xD6\x4B\xCE\xEA\xD4\x4A\xDC\xBA\xC8\x4A\xD6\xAF\xC0\xD6\x66\xC8\x14\xD0\x1A\xC8\xB7\x12\x4F\xC5\xDD\x6A\xAD\x80\xD8\x6C\xD7\xD9\x18\x4C\xD5\x68\xD1\xFD\x07\x5A\xDB\xA8\xE6\xD2\x8D\xD2\x94\xD7\x63\xD6\x73\xD3\xBC\xD1\x5F\xC2\xAA\xF3\xD7\x25\xD5\xFA\xD7\x38\xD7\x7E\xD2\xAC\xD9\x5F\xEB\xA8\x8E\xD6\xD7\xD7\xCB\x39\xFF\xD4\x4A\xDE\xBA\xD0\x5E\xF0\xAE\xB4\xD4\x43\xBE\xDC\x1B\x59\xB1\xB6\xC3\xA1\xD1\x5C\xE5\xAD\x93\xD7\x21\xD6\x3B\xD4\xFA\xD5\x36\xD9\x6B\xD6\x2F\xFB\x9A\xD9\xD1\x26\xD7\x0A\xCF\xFB\xD4\x56\xD6\xC1\xC4\x58\xD8\xB0\xAF\xD1\xC9\xD6\x61\xD7\xDF\xD3\x66\xD1\xB8\xC0\x60\xC3\xAE\xD2\xD7\xAB\xD6\xAE\xD5\x08\xDE\x4B\xDF\xBF\xC3\x4E\x61\xAD\xC7\xD7\x63\xD7\x5F\xCB\xF8\xD4\xFA\xC1\x25\x37\x58\xC0\x37\x04\xCC\x0F\xC8\x17\xD8\xF7\xD7\x5E\xD9\xBB\xC8\x4C\xFB\xAE\x8F\xD8\x1E\xD5\xCD\xD4\xFB\xD3\x2C\xD4\xC1\xD0\x5F\xE0\xAE\xD1\xD6\xA2\xD7\x97\xD4\xE9\xD7\x2D\xD6\xBA\xCA\x58\xCF\xAF\xD9\xD6\x20\xD8\x23\xD8\xC4\xD0\x2F\xD7\xB8\xDF\x5A\xC3\xA8\xA7\xD8\x54\xD4\x17\xCD\xED\xA8\xC6\xCF\xA0\xC3\x35\xF4\x98\xF6\x12\x36\xCC\xB3\x28\x9B\xD2\x56\xC0\x95\xBD\x31\xC0\x89\xEB\xD6\xB6\xD7\x8F\xD4\xAA\xD5\x72\xD5\xA4\xDF\x62\xC7\xA9\x90\xD8\x62\xD8\x6C\xD6\xAF\xCF\x94\xC0\x6C\xCB\x34\xC3\xA8\xA4\xD4\x40\xD8\x0D\xDA\xA1\xD4\x79\xDB\xC4\xCE\x5E\xFF\xAA\x99\xCA\x84\xD7\x01\xD7\x08\xDB\x57\xD5\xC2\xCE\x57\xCF\xB1\xCD\xD7\x33\x33\xF3\xBD\x2C\x1E\xB5\x03\xC8\xD3\x31\xEC\x7F\xD1\x16\x6E\xCD\xAA\x15\x8E\xD0\x33\xC7\xBB\xC7\x05\xF4\x7F\x92\xD4\x57\xB3\x38\xD5\x02\xDD\x95\xDE\x60\x31\x61\xEA\xAA\xB3\xD8\x78\xD5\x92\xD5\xDD\xD7\x64\xD7\x93\xCD\x39\xC8\x9A\xD4\xD4\x03\xD7\x6E\xD5\xC1\xD4\x4A\xDD\xB7\xD0\x5E\xC3\xB1\xD7\xD6\x45\xD9\x73\xB9\x28\xDA\x6C\xD3\xCA\xD0\x5E\xE5\xB2\xE0\xD6\x33\xD5\x3C\xD9\xD3\xCE\x52\xD1\x71\xDD\x63\xF4\x5D\x24\xCD\x5A\xCE\x53\xCE\x4F\x44\x97\xD3\x6E\xCB\x35\xF8\xB2\xD6\xB2\xBA\xD9\x44\xDB\xD0\xD3\x91\xDD\xC5\xD9\x50\xCE\xB2\xD5\xD5\x90\xD9\xA5\xD6\x0D\xDD\x69\xD8\x96\xCB\x59\xE7\xB1\xF2\xD7\x69\xD9\xA9\xD7\x1A\xD9\x66\xDD\xC6\xC0\x5C\xEF\xB1\xFA\xD7\x71\xD9\x49\xB4\xF5\xD3\x40\xD7\xCD\xD7\x63\xE7\xB2\x9D\xD9\xA9\xD9\x31\xD5\x8E\x04\x9C\xD8\x92\xD3\x1A\xE6\x81\xDE\xCD\x52\xD3\xC9\xD4\xEE\xB5\xDC\xC9\xC5\xCE\x46\xEA\xB3\xE4\xD7\x86\xD3\x76\xD9\xBE\xD7\x9D\xDB\xAF\xDD\x5D\xEB\xA7\x8E\xD3\x10\xD9\x32\xD8\x0F\xDF\x9E\xD7\xC1\xD9\x67\xF4\xAF\xFB\xD9\x55\xD7\x7E\xD8\x11\xDF\x9F\xDF\xC1\xD3\x66\xD0\xB1\xD5\xD9\x12\xD7\x26\xDB\xC5\x9F\xA0\xD2\xC7\xC4\x5C\x5B\xB3\xBF\xBA\x0B\xDB\x45\xD0\x28\xC0\x2F\xB6\x71\xD1\x22\x2F\x85\x0C\xDA\x1F\xC6\xB6\xB1\x01\xD6\x2A",
"\xB8\x67\xCF\x4D\xD3\xB1\xC6\xD0\xBE\xD8\xA3\xD4\x30\xDC\x55\xD5\xC3\xD5\x41\xF7\xB0\xB0\xD5\x39\xD8\x59\xD7\x0E\xDB\x5B\xDD\xC3\xCA\x66\xFF\xB0\xE1\xD1\x98\xD2\x28\xDB\x33\xD8\x7F\xD1\xCD\xCE\xE9\xB5\x79\x84\xC4\xC4\xD5\x5C\xCB\xCE\xD2\xC5\xC9\xCD\xDB\x55\xDE\x97\x91\xD1\x93\xD7\x9B\xD8\xEC\x7F\xE9\xCA\x75\xD1\x3A\xC3\x50\xFB\xBE\x2A\x12\xAB\xCC\x29\xC2\xBE\xB0\xDC\x10\xD2\x9C\xA2\xB4\xD7\xE6\xB4\x9F\xB4\x28\xD4\x8B\xD6\xBE\xD0\x1F\xCB\xB5\xBC\xD7\x63\xD8\x84\xD2\x3C\xDE\xA9\xD4\xCF\xCF\x4F\xF6\xB3\xF1\xD3\xA1\xD7\xF9\xD3\xE8\xD2\x38\xD1\x70\xDD\x55\xC3\x9C\x9F\xD9\xCB\xCD\x80\xDA\x52\x62\x89\xD5\xD3\xCC\x62\xF6\xB1\xE2\xD6\xAA\xD3\xDB\x18\x30\xD7\xCA\x72\xAC\xD4\x47\xF5\x5E\xF6\xD1\x68\x7E\x00\x00\x4B\xC1\x5A\xD2\x27\xCC\xD5\xB7\xB5\xF9\xB5\x79\xDB\x8B\xD8\x15\xD9\xA9\xDD\xC0\xDF\x6B\xE0\xB1\xB1\xD5\xB8\xD2\x1C\xDB\x30\xDA\x87\xD5\xCF\xDF\x5C\xC8\xB6\xE8\xD8\x8A\xDA\x35\xD8\x63\xDD\x74\xDE\xD8\xD4\x45\xD0\xB6\x85\xCE\x92\xDB\x1E\x7C\x4C\xDD\x7A\xD7\xD9\xD0\x62\xD9\xB6\xB3\x1B\x9B\xDA\x52\xC1\xE0\x55\xF1\xCE\x26\xCA\x09\xE1\xB6\xF8\xD1\xE5\xD7\x66\xB5\x8D\xD0\xB7\x1C\x8F\xC7\x09\x38\x6B\xAD\xD8\x9F\xC2\xBD\xD8\x34\xD4\xAF\xDA\x5B\xC6\x39\xF0\x64\x8C\xBD\xAF\xDB\xA8\xD9\x6C\xD8\xAA\xD3\xDB\xD2\x6A\xF5\xB6\x95\xD8\x24\xDA\x1F\xDA\x49\xD9\x83\xD8\xD2\xD6\x5F\xEA\xB4\xD0\xD9\x2C\xDA\xB1\xD7\xFE\xD3\x57\xD3\xDC\xC4\x68\xF2\xB4\xBD\x7C\x78\xD8\xB3\xDB\x64\xC1\xFA\x0B\xCA\x0A\x24\x17\x58\x25\xD2\xB3\xD8\x2B\xD2\x22\xDC\xE2\xC1\xEE\xBC\xD9\xAB\xF4\x28\xDB\x6D\xC2\xED\xD9\x40\xD6\x42\xD9\xD1\xDD\x6B\xF6\x9A\xAE\xDB\x8F\xD9\x30\xDB\x60\xDC\x0B\xD5\xD8\xCF\x39\xC2\xAC\x96\xD9\x62\xD6\x4C\xD8\x56\xD9\x88\xD6\x69\xDB\x6A\xDD\xB0\xDD\xDA\x68\xBF\xE0\xD9\x18\xCC\xB2\xDA\xC6\xAE\x18\xD0\x86\xD9\xD7\x0E\xBE\xA7\xD2\x53\x09\x7B\x0D\x1C\xD1\x4A\xC1\xB8\xF8\xB8\xB8\xB7\xC1\xB7\x01\xD9\x44\x1A\xE0\xC3\x4F\xDC\xB7\xA5\xCE\x4A\xC9\xEF\xD8\x13\xCB\x6E\xD3\xE1\xC8\xD3\xBB\xA6\xC7\xD9\xBB\xD5\x64\xDA\xDE\xD3\x99\xDB\xAB\xCD\x66\xC2\xB1\x9C\xD9\x95\xDA\x4F\xD9\x7E\xD6\x33\xD8\xC4\xDC\x5F\xE4\xB8\xD9\xC2\x63\xDA\xA5\xD1\x59\xD8\x7A\xD1\xD8\xB8\x6D\x10\x88\xB3\xDC\x07\xDD\x2D\xD8\x83\xDC\xB4\xDC\xC8\xD3\x56\xDC\xB4\x98\xD7\x92\xD9\xF6\xD5\x24\xD8\x78\xD3\xC9\xC1\x58\xD5\xB2\xB1\xCE\xBB\xD4\x0D\xDC\xA1\xD1\xAB\xD8\xCA\xCB\x5E\xDC\xB0\x96\xCD\x1E\xD8\xF9\xDA\x88\xDF\xE6\x95\xDF\xC2\x5B\xC5\xB4\x98\xDB\x34\xDA\x7D\xD1\x55\xB5\xF3\xC6\x10\x0C\x4D\xC0\x91\xB4\xDC\xAA\xDA\xA4\xD8\x03\xDB\x07\xD0\xE1\xD0\x67\xD2\xB8\xBF\xD7\xF3\xD9\xE0\xD7\x79\xDE\x8C\xD7\xDB\xD8\x67\xF9\xB6\xFA\xD9\xBB\xDA\x36\xD9\x6F\xDF\x4A\xDF\xDB\xD9\x48\xF3\xB7\xD0\xD7\x75\xDC\x28\xDB\x9D\xDE\xB8\xD0\x8F\xC2\x69\x13\xA7\xE2\xD6\x9E\xDB\xDF\x19\x4A\xC3\x86\xBB\x9D\xC5\x6D\xF6\x70\xE7\xD9\x70\xDB\xD4\xDB\x51\xDD\xC5\x2C\xDA\xC4\x74\xFA\xB8\xF6\xC8\xEA\xD6\xD9\xDA\x47\xDE\x4F\xD4\xC9\xC0\x54\xD8\xB8\xD0\xD8\x6A\xDC\x83\xD4\x9B\xD8\xA1\xDE\xE6\xCF\x6F\xDC\xB5\xF1\xDB\x50\xD9\x4B\xDE\xB0\xD1\xD3\xDD\xE6\xC1\xEF\x85\xB7\xC5\xDD\xF9\xDA\x2A\xDD\xA5\xD0\xA7\xD9\xA1\x08\x50\xF7\x71\x98\xC6\x44\xBA\x8D\xC6\x9A\xD1\xA2\xD5\xCB\xD3\x33\xFC\x36\x61\xCE\x3E\xCD\xDF\x1A\x6B\xD6\x50\x1B\xEA\xD4\xBB\x2D\xBA\x99\x20\x5F\xDD\x3C\xD5\x79\xDB\xBC\xD0\xD2\xDE\x50\xE2\xB4\xD4\xDA\xE9\xDA\xAB\xDB\x7A\xD9\x93\xDD\xDE\xDB\x60\xFE\xBA\x9F\xDC\xC0\xDD\x62\xDE\xB0\xDD\x70\xDF\xE4\xCD\xE5\x87\xBB\xBC\xDD\x5C\xC0\x64\xD5\x72\xC0\x72\xD2\x1A\xB8\xE5\x94\xBB\x83\xDC\xB6\xD8\x73\xC4\xAA\xDD\xE2\xCA\xEA\xD2\x5C\xD5\xBB\x94\xD7\x1A\xDA\xCB\xD5\xB8\xDA\x98\xD3\xEB\xCF\x55\xE5\xBB\xB0\xDB\xEE\xD2\x0B\xDF\x99\xDA\x44\xD7\x65\xD9\x75\xCC\xB3\xBB\xDD\x49\xDD\x98\xBF\x9B\xDB\x40\xD1\xE7\xC1\x76\xF3\xB9\xB2\xC8\xF5\xDC\xBC\xBB\x7D\xDF\xE3\x99\xE7\xCD\xE1\x8A\xB4\xCD\xDD\x51\x18\x8B\xC7\xA6\xD4\xDB\xCD\xA9\xD5\x1A\xEF\xB8\x99\xCE\xB8\x1A\xB7\xCC\x30\xB8\x48\xD9\xDD\xC1\x74\xEC\xBA\x83\xDD\xE0\xDC\x07\xD9\x84\xD8\xE2\xD1\xC1\xC5\x66\xE9\xAC\xC0\xDC\xD0\xD6\x21\xDD\xF1\xD3\x6F\xD3\xA0\xC6\x72\xDD\xB8\xC8\xDC\x36\x84\x10\xDF\x29\x8B\xDE\xD2\xCA\xC1\x79\xF7\x3C\x9B\xDD\xC8\xDD\x92\xDD\x58\xC3\xD9\xDB\xD6\xCB\x3C\x10\x8D\x9A\xD5\xD0\xDD\x1F\xCE\xB4\xDE\x53\xDE\xA0\xC3\x17\xC0\xBC\xD6\xDD\xC0\x1B\xBE\xCF\xA8\xD7\x5B\xC2\xEB\xB5\x71",
"\xF6\xAB\xDB\xDC\x08\xDE\x07\xDE\x79\xD2\xE7\xD6\xE8\xDC\x79\xE3\xB9\x89\xDD\x65\xDD\xBB\xD7\x85\xD8\xCD\xD0\xBD\xD6\x78\xC5\xB9\x98\xDE\x9A\x84\xA4\xDE\xA5\xC1\xDE\xD8\xEF\xCC\x7A\xD4\xB3\xCE\xDE\x46\xC7\x7B\xDD\xC6\xDB\xCF\xBB\xB8\xDE\x4B\xC2\x76\xAA\x09\x58\xDD\x15\xDD\xB7\xDB\xF9\x2F\xED\xCA\x32\xFC\xB8\x88\xDD\x84\xDA\x45\xDE\x61\xDE\xB6\xDD\xFC\xBC\x49\xE8\x75\xBE\xD2\x2E\xBE\xA0\xD1\x5B\xBC\x5A\xCB\xC1\xB9\x08\xF7\xAC\xD5\xCB\x74\xD9\xD6\xD7\xC8\xDF\xE6\x99\xEC\xDD\x6C\xF1\xAB\x86\x02\xB5\xC6\xB2\xDD\xC1\xDF\x85\xD7\xF0\xCD\x7C\xF3\xA4\x8C\xDE\x81\xDB\x7E\xD5\x8F\xDB\x38\xBD\xBE\xC7\x77\xF8\xAD\xD5\xDA\x43\xDD\xAB\xDB\x9A\xDC\xC3\xD3\xA0\xDE\x70\xF0\xB9\xCA\xDE\xB5\xC9\xAF\xDB\x2D\xC9\xAC\xDC\x91\xC6\x56\xC1\xA8\xD3\xDC\x9D\xDA\x2B\xD9\xC2\x19\x63\xD1\x10\x1B\x58\xDA\xB9\xB5\xDE\x8B\xDE\x01\x32\xEB\xDF\x72\xD2\xEE\xCD\x78\xF6\xA4\xE5\xBC\x3C\xDE\xDB\xDF\xDC\xDC\xE2\xD9\x91\xD6\x7B\xD0\xAF\xC6\xDE\xBD\xDE\xBD\xDF\xF4\xC4\xEF\xD3\xF8\xD1\x5E\xDF\xBE\xC6\xD2\xA1\xDE\xFF\xD6\xE0\xD9\xFE\xC0\x95\xB9\xF0\x86\x04\x45\x6D\x7F\xDD\x2C\xDE\x8D\xB6\x6D\xDD\xDD\xD9\x71\xE0\xBB\xE0\xDB\x3B\xDE\xF1\xDA\xBD\xCF\xE1\xDA\xFF\xCE\x5F\xCB\xBA\xA3\xDA\x8D\xDD\x92\xDB\xA3\xDF\xA4\xD1\xE9\xDC\x67\xD3\xBA\xA7\xD7\x95\xDD\x2C\xD7\xC7\xDA\x9D\xC9\xFE\xC4\x61\xE3\xBE\xDD\xC7\xC8\xDF\x79\xD3\xF6\xD3\xFE\xD0\xAA\xDD\x21\xD6\x79\xF3\xD5\xAB\xDF\xE7\xDC\x0C\xD8\xE7\xDE\xF8\xC6\x45\xF3\xBE\x80\xB4\xB5\xDE\xA0\xDE\xB0\xD2\xE8\xD5\xF1\xC6\x5E\xC5\xBB\xE0\xDF\x62\xD6\xDF\xDC\xC7\xD8\xF8\xD3\xED\xAE\x69\xC5\xBB\xC4\xDD\xF8\xDC\xA8\xDC\xBE\xDD\xF4\xD3\x8F\xD8\xDD\xBF\x79\xF3\x0C\x89\xDF\xB9\x09\xF4\xDA\xBE\x23\xFD\xCB\x78\xCD\xB5\x94\xDC\x1D\xC9\x0F\xE3\xAF\xB9\xEE\xD3\xD5\xD7\x7D\xE9\xBB\xB9\xDF\xEB\xDD\x0D\xDE\x26\xD9\x5C\xDB\xF1\xC2\x5B\xDD\xBC\xF2\xDD\x0B\xE0\x4E\xC7\x40\xDE\xCE\xDF\x00\xE1\x29\xD2\xBD\xAC\xBD\xB2\xD6\x58\xBC\x5E\xD9\xC1\xD6\xF3\xDE\x76\xDC\xC0\xAF\xDF\x3F\xE0\x1F\xDE\xEC\xD8\xF2\xD0\x04\xE4\x82\xFF\xBF\xE8\xDD\x01\xE0\xF5\xDB\x00\xE4\xBD\xD5\x00\xE9\x69\xC7\xC0\xEE\xD8\x09\xE1\xD4\xD5\x14\xE0\xE8\xC3\x05\xFA\x74\xD5\xC1\x81\xD8\x01\x02\x55\xBC\x0E\xCA\x8A\xD6\xF0\xDF\x7A\xD5\xB1\xC2\xC9\xDF\xD7\x1C\xE2\x61\x0B\x07\xEA\x61\x3D\x81\xEC\xBD\x9D\xDA\xB1\xDE\xDF\xD7\xFA\xD1\xCC\xD4\xC6\xC2\x81\xD6\x9A\xA4\xE0\xDD\xDE\x13\xE0\xBE\xD8\x05\xEA\xD5\xC2\x7F\xE7\x8E\xAC\xE0\x99\xC4\x17\xE0\xBE\xD8\x06\xE5\xFE\xD2\x81\xE5\xBF\xB4\xE0\x03\xD5\x87\xBC\x01\xDA\xE2\xB8\x01\xFC\x82\xC4\xC2\xBD\xD9\x5F\xE0\xEA\xDC\xEC\xDC\x11\xE2\xD8\xC4\x83\xE2\xC1\xDB\xD1\x45\xE1\xED\xDC\xF1\xD5\x04\xE4\xF4\xC2\x5B\xD4\xC2\xC5\xDD\x2A\xE0\x27\xE0\x26\xE3\x7A\xBE\xF7\xCF\x69\xC0\xBE\xA8\xB6\x77\xE1\x9B\xBB\x15\xE7\xE6\x93\xDD\xC9\x3E\xEA\xB0\xC5\xBE\x57\xB3\x6D\xDF\xE7\x17\x14\xE4\xB4\xDD\x72\xE2\xAC\xAF\xDD\xF2\xCD\xEA\xDD\x22\xE7\xA3\xD2\xC1\xC1\x69\xCE\xC2\x83\xD4\x90\xE0\x2A\xD6\xF7\xDF\x5B\xD8\xF7\xC4\x1D\xCD\xC1\xD0\xD8\x4F\xE1\xBE\xDF\x1C\xE3\x8E\xD9\xB3\xC2\x33\xD1\xB9\xA5\xD3\x11\xE1\x50\xE3\x04\xE2\xCA\xB9\xF5\xD8\xDD\x98\xB1\xE0\xD3\xA6\xE1\x3E\xE3\x3A\xD9\xBA\xD8\xE3\xD4\x23\xD0\xC3\xA8\xCE\x61\xE0\xDA\xDF\x58\xD7\xED\xD1\xF9\xC6\x83\xD3\xBE\xE8\xDB\x69\xE0\x75\xDF\x1A\xE4\xDD\xDD\x06\xEE\x6F\xEF\xC1\xFE\xD9\x71\xE0\xE8\xD5\x2F\xE7\x05\xEF\x0B\xE9\x20\xC1\xC3\xD8\xD7\x85\xDF\x6A\xCF\x1E\xD8\xCD\xC7\x89\xDE\x63\xD3\x65\xAF\xBF\x74\x47\xD8\xBF\xCB\xDD\x02\xEC\x63\xC3\x78\xD4\x9D\xF1\xE1\xAC\xDE\x3F\xE2\x21\xE5\xD0\xD8\x08\xEC\x85\xE3\xC1\x8B\xE1\x64\xDD\x10\xE3\x9F\xD0\x99\xD7\xEB\xC5\x76\xDB\xC3\xFC\xD6\xDD\xE0\x9E\xC7\x41\xE3\xA5\xD9\x10\xF0\x63\xDA\xC2\xE5\xDF\x9C\xE1\x12\xDE\x5E\xBF\x61\xC8\xE2\xCE\x38\xE7\x99\xAB\xD9\x8B\x02\xA0\xD9\x14\x2D\x2A\xBD\x66\xD8\xE0\x14\x2D\x0B\x03\xFF\xDD\x79\xE1\xC0\xDC\xB7\x15\x67\xD9\x76\xD3\x9E\xE5\xDE\x5D\xE0\xC6\xDD\x2A\xE6\x07\xE1\xEB\xC4\x6F\xD6\xBF\x8B\xD2\x12\xDE\x5B\xDC\xDD\xDA\x58\xDF\x12\xE5\x7A\xF1\xC4\xD2\xC5\x9B\xDE\xA1\xD1\xE7\xDE\x5A\xC7\xFE\xDC\x4F\xCD\xC0\xA4\xD9\x0F\xE2\xF8\xB5\x3A\xE0\xD4\xDA\xD6\xC4\x36\xAC\xB5\xB4\xD9\x7E\xE0\x70\xDB\x80\x0C\x26\x1C\x99\x23\x67\xFA\xB4\xBB\xCC\xE6\xD9\x37\xD5\x2E\xD8\x2A\xEC\x0C\xEC\x67\xEA\xBD\xBA\xD7\x87\xE0\x30\xDD\x4A\xE3\x1F\xE2\x04\xF4\x40\xEA\xC4\xB5\xDD",
"\x2C\xE3\xAD\xE2\xA5\xCD\x2B\xE6\x0B\xFF\x8A\xE5\x76\xB3\xE2\xF0\xDB\x9A\xE0\x40\xDF\x26\xE2\xD0\xC7\x8B\xD6\xB3\xE9\xE2\x8A\xD6\x01\xD9\x3C\xBD\x2D\xE2\xA4\x02\x8A\xC4\x9E\x99\xC6\x95\x1B\x33\xC3\xB7\xC8\x3A\xCE\xF5\xCA\x8A\xE0\xBD\x89\x1E\x14\xDA\x78\xE0\xF4\xDA\x1E\xE8\xD1\xDC\x72\xC9\xBC\x8D\xD9\x81\xE2\x69\xE2\x49\xE2\x11\xE2\xEB\xD3\x86\xF4\xBA\xE6\xDC\x5A\xE2\xEE\xDE\x36\xE2\x12\xE5\xFE\xD7\x85\xF8\xBB\xB9\xE1\xE0\xE1\x5D\xE3\x11\xDD\x2C\xED\xA8\xD6\x8C\xF1\xB4\xEB\xDF\x33\xDB\xB5\xE0\x14\xDA\x8F\xD9\x68\xCF\x8B\xC2\xB8\xA6\xE3\x55\xD9\x8F\xE2\x7A\x63\x14\xCB\x11\xE8\x7B\xE8\x82\xC3\xDA\xDB\xCD\x7A\xCA\xD9\xDD\x6D\xD7\xE3\xC0\x00\x3B\x96\xEB\xDE\x24\xE2\xC1\xE0\xDC\xDA\xCC\xD5\x18\xE7\x41\xCD\xC2\xAB\xE2\x41\xDD\x96\xE0\xBE\xDC\x31\xE0\xC5\xDE\x8D\xE5\xBF\xC0\xE3\xC5\xDD\x70\xE1\xF9\xDB\x21\xEB\x09\xED\x88\xCA\x9C\xE7\xE1\x60\xD5\x61\xE2\x74\xDB\x1D\xE5\xF7\xA7\x43\xCD\xC7\xDD\xD9\x59\xCF\xB9\xE1\x3C\xC3\x4D\xD4\xF0\xCC\x61\x22\x24\x60\xC1\x5D\xDF\xB6\xDA\xD6\xCA\xEA\xCC\x7F\xBB\xCA\xBF\xA5\x89\x02\xAF\xBD\x4C\xD0\x6C\xB6\x1D\xE7\x12\x18\x85\x15\x96\x8F\x1C\x3F\xE3\x28\x19\xC4\x0A\xB6\x10\x04\xB2\x90\xE5\x83\x94\xE4\xFF\x44\x47\xD1\x4B\xD3\xEC\xDB\xDD\xC8\x7B\xEA\xB2\x9A\xE4\xAC\xD9\xF5\xB3\xEF\x63\x91\x3D\xD5\x0E\x10\xD0\x65\x96\x5F\xC3\xC8\xBF\xCC\x32\xE2\x81\xDD\x00\x28\x4C\x96\x12\x4B\x0E\x75\x99\x8B\xC6\x0A\xD2\xF9\xD9\x8F\xA2\x34\x31\xC8\xA7\xB3\x33\xE5\x22\xD2\x8D\xE1\x0F\x0B\x74\x0A\x4C\xBA\xC8\xE8\xDE\x1E\xE4\xD4\xD0\x6E\x1D\x1E\xC5\xD1\xD5\x27\xD7\xA5\xFD\xE3\xDD\xE3\x5B\x00\x5A\xDE\x3E\x9C\xF6\x92\x1C\xCE\xC3\xB2\xD8\xF7\xE0\x92\xD5\x3E\xE0\x04\xE4\x18\xEE\x85\xFA\xC3\xBF\xDC\xE8\xE3\xA0\xDE\x7A\xE5\xFC\xDC\x1E\xE7\x81\xCE\xC6\xE2\xC9\xEF\xDD\xDF\xDC\xF9\xDA\x9A\xDD\xE4\xD4\x6F\xF6\xC7\xD0\xCD\xC8\xE2\xFC\xD9\xA7\xDC\xA5\x1F\xE9\xCB\x8E\xCC\xB7\xC5\xD1\xCE\xDA\xAB\x67\xFB\x00\x19\xD4\x0F\xED\x31\xF8\x6E\xCC\xD1\xAA\xE2\x27\xE5\x54\xE2\xFA\xD2\x96\x93\x92\xCF\x32\xD5\xE4\x17\xC9\xA9\xE1\x6C\xE3\x15\xE3\x18\xED\x85\xE8\xC4\xE3\xE3\xE7\xE2\xC4\xE1\x7A\xE2\x31\xE7\xC9\xDC\x8D\xDB\x14\xE7\xE4\x25\xBA\x4B\xE1\x0B\xCA\x32\xED\xD2\xCD\x93\xD8\xBA\xEF\xE4\x5E\xD6\xFC\xE0\xC5\xD3\x4E\xE0\x00\x09\x13\xD3\x9D\xA0\xDD\x77\xE5\xEB\xD1\x9E\xE7\x56\x77\xAF\x10\xD7\x8D\xB8\xD2\xDB\xAF\xCB\xBD\xCE\x75\xDF\x90\xD0\xC0\xCF\x92\xFB\xB5\xE8\xDE\x21\x14\x29\xE7\xAA\xD8\x51\xE6\x11\x03\x89\xD9\xC9\xF2\xD6\x1E\xE0\x2F\xE4\x97\xE0\x4C\xE2\x29\xE2\x93\xD4\xCA\x99\xDC\x96\xE5\x63\x9C\xA6\xE3\x7A\xB0\x1F\xF8\x77\xF2\xC7\xEC\xE4\xC4\xE3\x74\xD6\x71\xE4\xB8\xD2\x2A\xEF\x5D\xFA\xC7\xD1\xB5\xC5\xE0\xC0\xD1\xD0\xD3\x9B\x14\x92\xC6\x65\x09\xC8\xF0\xE2\xD0\xE3\xCD\xC0\x70\x1B\x25\xD1\x28\xED\x49\xF6\xCA\xA5\xE4\x74\xD5\x84\x02\xAE\xE4\x35\xE3\xDE\x5C\x69\xBE\xCA\xF7\xDF\x3B\xDD\x60\xE7\xA3\xE5\x1F\xE7\x18\xF8\x8D\xC9\xC6\xBA\xE3\x69\xDD\x64\xE7\xB3\xC4\xF7\xD9\x02\xFA\x94\xE4\x6E\xC2\xE3\xA1\xBD\x71\xE2\x08\xD8\x54\xE6\xD9\xD5\x96\xE6\xB0\xD7\xE5\x2D\xCC\x15\xDE\x0E\xE5\x62\x1D\xE2\xCB\x4B\x89\xC5\xAD\xE3\x51\x25\x18\xDE\x78\xC7\x67\xD1\xA2\x07\x97\xCB\xB8\xE9\xE5\x06\x03\x75\xE5\x48\xE1\x43\x9C\x2B\xFE\x33\xD7\xC9\xBF\xD9\xBF\xE5\xF4\xD7\xE3\xDB\x5E\xE5\x06\xF5\x97\xF2\xBD\x93\xDE\xB3\xE1\x48\xE1\x2D\xE5\x3D\xEB\x2C\xFB\xDE\xBE\xCB\x97\xC2\x63\xE2\x74\xD2\x2D\xCA\x1D\xD5\x0E\xEC\x47\xC6\xCC\xA6\xD9\xCA\xE3\x62\xDE\x28\xE4\xB7\x1C\x20\xCE\x8A\xF7\x36\x70\xCE\xDA\x19\x8F\x5B\xC3\xE4\x8A\xDF\x20\xE2\x58\x14\xCC\x93\xE6\xEC\xE4\x41\xDE\xBA\xE6\x50\xEC\x31\xEE\x97\xCA\xCA\xE1\xE3\xB2\xE3\x46\xE7\x49\xE5\x36\xE3\x1B\xF6\x5B\xF1\xC2\xA8\xE6\xB8\xDF\xA1\xDC\x91\xDF\xFB\xDD\x32\xF5\x00\xDF\xC3\xF1\xE3\x00\xE6\xBA\xD2\xA7\xE3\xD8\xD4\x30\xEC\x57\xF7\xCC\xD8\xD9\xFA\xDC\x8B\xD4\xFD\xB1\x35\xD7\xDA\xD0\x53\xF2\x7A\x96\xE6\x36\xDC\x5C\xE5\xA1\xE3\x57\xEE\x34\xFF\x98\xCA\xB5\xA1\xE6\x34\xD9\xAA\xE0\xFF\xDB\xDC\xD1\xF1\xDA\x49\xD5\xBE\xF2\xD3\x97\xDE\xFA\xD1\xE6\xDE\x3E\xD1\x16\xF8\x4F\xF1\xCC\xC4\xD2\xD1\xE5\xE9\xD7\xB4\xE6\xBE\xD1\x27\xFF\x78\xA4\xCA\xA6\xE5\xFC\xAF\xE5\xDA\x75\xD0\x86\xB6\xAA\xA4\x75\xDE\xCC\xD8\xE0\x50\xB2\xEF\xD2\xCF\xE3\xB6\x15\xD4\xC1\x08\x30\xCD\xE7\xDE\x18\xE7\x81\x02\xC6\xE2\x03\xE4\x25\xF5\x9B\xEF\xC6\xDE\xDC\x8B\xE5\x2D\xE7",
"\x10\xE4\x3C\xE2\x2C\xEB\x9D\xD1\xCA\xF6\xE5\x93\xE4\x7C\xE5\xDD\xDA\x5F\xE1\x29\xDD\x9A\xE1\x6D\xAF\xE6\x40\xBD\x35\xE6\x57\xDB\xD4\xB0\xD6\xCD\x0C\xC0\x8E\xA6\xDC\x82\xC7\x9E\xE2\x98\xD6\xDA\xC7\xA0\xD1\x62\x09\xA8\xD9\xDE\x0E\xDB\x56\xC7\xB4\xDD\x3A\xE6\xB6\xC0\xE4\x9E\xC4\xBC\xDA\xE6\xB5\xCF\xE4\x77\xE2\x6E\xEB\x34\xF4\x9B\xE2\x50\xBD\xE5\x4F\xE6\xBC\xE5\x30\xDA\x75\xE6\x18\xFD\x92\xE4\xCC\xAF\xE1\x56\xE7\x33\xE2\x11\xE1\x20\xE8\x04\xE3\x88\xCA\xC1\xED\xDD\x9B\xD9\xAF\xE6\xB3\xE1\x6C\xED\x73\xD4\x8C\xD3\xB6\xF5\xE0\xC5\xDC\x4F\xE2\x13\xD9\x67\xE8\xEF\xD9\x96\xF7\x39\xFD\xDD\xE1\xC5\x4F\xD6\x75\xE0\x2A\xBE\xA3\xDB\x9C\xC0\x98\xEF\xE6\x83\xE4\x1E\xE3\xDC\xE1\x69\xE1\xD5\x97\x7A\xAF\x2B\xEF\xE5\xFF\x04\xFC\xDD\xDB\xDD\xFF\xDC\x0F\xE5\x99\xEF\xCE\xA7\xE6\xB9\xE3\x94\xE7\x6E\xE3\x65\xE6\x26\xFC\x97\xD5\xC2\xEA\xE7\xE5\xDF\x67\xE7\xEE\xE2\xED\xBD\x3B\xF2\x04\xCD\x8C\xBB\xE2\x27\xDD\x88\xE2\xC3\xBC\xEA\xDE\x16\xE5\x9E\xD0\x2E\x5B\x19\xF8\xB8\xE4\xE7\x6E\x1C\x6A\xC4\x95\x2C\x9E\xD2\xB4\xEE\xD4\x1A\x1A\x3B\xC4\x00\xED\x2F\xED\x27\xE3\x9D\xD4\xC0\xA1\x42\x1D\xE6\x04\xE9\x9E\x80\x1F\xEA\x37\xF5\x86\xE6\xBB\xD7\xE1\x62\xD7\x6C\xE1\xBE\xE4\x82\xE3\x09\xF6\x9D\xDF\x82\x4D\xE5\x19\xE8\xF6\xE4\x77\xB9\x71\xE9\xC4\xD0\x9F\xF1\xC0\x98\xE3\x3A\x44\x84\xE6\x49\xC7\xE4\xD7\xF5\xC7\x92\xD3\xA5\xA0\xE3\x03\x99\x06\xD4\x69\xE2\x47\xD0\x1D\xE1\x55\xF9\x4A\x3B\xCF\xB5\xE5\x00\xE9\x21\xE3\x80\xEB\x31\xFA\x88\xA6\xCE\xFF\xE2\x5E\xD9\xD4\xE5\x0F\xEE\xE7\xD3\xC1\xC0\xA2\xD0\xB1\xC2\xE8\xB3\xE6\x22\xE9\x6F\xE6\x88\xEA\x99\xD7\x4F\xDC\xA6\xCB\xDC\xC7\xD3\xB1\xE4\xBD\xDE\x89\xED\x09\xF0\xA2\xD8\x82\xF4\xE7\xE5\xDF\x2A\xDE\xE1\xC0\xF1\xD7\x34\xF6\x4A\xE2\xD1\xA8\xE1\xD5\xE6\x02\xE9\x0E\xE9\x7B\xE0\x2F\xF0\x75\xE3\xCC\xD4\xE6\x52\xE6\x58\xE2\xF8\xE2\x16\xE9\x35\xF4\x85\xDB\xCD\xDC\xE1\x16\xE8\x5C\xE0\xEE\xE7\xA2\xCC\x29\xF2\x73\xEE\xCF\xC2\xDB\x65\xE6\x18\xD6\xF1\xDA\x46\xD9\x36\xF1\x5D\xD0\x65\xA4\xCF\xE8\x80\x30\xE9\xC5\xE7\x90\xED\x0C\xF9\x98\xCC\xCD\xE6\xE8\xD7\xE7\xCB\xE4\x1A\xEE\x9D\xDA\x46\xEF\xA4\xD6\xC5\xB6\xE3\xB4\xDB\x7F\xE0\xA3\xDF\x6F\xE9\xD8\xC1\x9C\xCB\xB6\xF5\xD3\xC3\xD2\x3B\xE9\x71\xD0\x8F\xE0\xAC\xDA\xA3\xCD\xBD\xFC\xE8\x3A\xE3\xD8\xB8\x4F\xE2\x84\xE1\xF7\xBC\x91\xF5\x6B\xCC\xDF\x00\x00\xE7\xDD\xE1\xB3\x86\xE4\x40\xFE\x82\xC9\xD2\xE5\xE8\xED\xE5\x58\xEA\x0E\xEF\xB2\x3C\x43\xF6\xA5\xFB\xCD\xD7\xE2\x7D\xE6\xF8\xD0\x2F\xE8\xB7\xDE\x4B\xFA\x6D\xC0\xD3\x8D\xDB\xC2\xE8\x5F\xD4\x31\xE8\x94\xD6\x4C\xFF\x7B\xC8\xD3\xD0\xDC\xA3\xE8\x9E\xD5\xFB\xDE\x81\xC5\x2E\xE1\xA3\xF4\xD0\xAF\xE5\x01\x02\x1B\xE8\x3B\xE0\xA6\x97\x46\xF5\x7F\xF6\xC3\x8D\xE9\xD1\xE0\x46\xE4\xA4\xE6\x51\xE0\x49\xE3\xA8\xDD\xAE\xEE\xE8\xC5\xDC\x38\xE8\x57\xE4\x76\xEC\x04\xCB\x82\xC8\xAC\x9B\xE9\xE0\xB6\x25\xEA\xCD\xD3\x66\xE8\xB3\xC4\x7E\xFA\xAC\xF1\xE9\x64\xDB\x52\xE8\x8D\xD4\x3F\xE7\x2B\xED\x9E\xF8\x36\x68\xD6\x6D\xA2\x55\xE8\xD2\xE0\x9B\xEA\x34\xEE\xA5\xD6\xCF\x86\xE8\x56\xE5\xD3\xE7\x33\xE0\xA0\xED\x4D\xF2\x97\xC5\xD4\xF4\xE5\x0F\xE9\xAB\xE5\x04\xED\x92\xEA\x32\xF7\xA4\xF0\xC4\x99\xE9\xBF\xE2\x88\xEA\x39\xD7\x70\xEA\x9F\xCC\xA2\xCE\xB9\xEF\xE9\xF6\xDD\xB3\xE6\x41\xD8\x90\xEC\x9D\xD9\xC7\xB7\xC0\x83\x0D\x22\xEA\x43\xEB\x3D\xEE\x35\xE2\x3A\xEF\xA5\xD9\xD3\xA8\xEA\x89\xE4\xBB\xE5\x6B\xDA\x7B\xEC\xD4\xCB\xA3\xD8\xBF\xFD\xDF\xDA\xDE\xAC\xE7\x11\xE2\x6B\xEA\xFB\xDA\x75\xF8\xD4\xEF\xE3\x3A\xEB\xEC\xBA\xEE\xE1\xC4\xDF\x49\xE3\x71\xC0\xD5\xA2\xDE\x8D\xE6\xD2\xDE\x14\xEE\x01\xD0\x95\xB1\x90\xC4\x37\x34\xE5\xAB\xE9\xA5\xE9\xDA\xDA\x20\x0A\x4F\xF0\x92\xF8\xD0\xFD\xE9\xF5\xE0\x78\xCC\x55\xE8\xB0\xD5\x35\xE4\x66\xD7\xD5\xFC\xE6\xFE\xDE\x5D\xE8\x00\xE3\x9C\xEE\xE8\xC5\xA7\xD0\xBA\xE7\xE9\xBC\xDB\x74\xEB\x63\xDB\x9D\xE1\xD9\xC5\xAB\xF4\xB9\xA1\xE9\x90\xD4\xE0\xE6\xA4\xD2\x78\xEB\x07\xE4\x43\xCE\xD5\x98\xD1\x54\xD3\x18\xE4\xF8\xD0\xBB\xD2\x28\xF2\xAB\xF9\xCA\x97\xEB\x05\xE8\x9B\x9B\x36\xEF\x13\x4D\x52\xF6\x56\xDF\xCF\xDF\xE4\x07\xEB\x30\xE7\x08\xE3\x4C\xE0\x30\xC9\x82\xFB\xBE\x8E\xEA\x7E\xD7\xB0\xEA\x92\xDC\xA7\xEC\xE4\xDE\xA9\xEE\xC9\xE7\xEA\x4F\xDE\x3F\xE8\xE1\xDA\x33\xE3\x52\xD0\xF8\xA4\xC2\xDB\xE0\x9F\xC2\xE9\xE4\x8D\xE1\x4A\xE0\x5A\xEB\xA4\xD2\xD5\xAE\xDD\x2C\xEA\x2D\xE6\x55\xE8\x27\xD8",
"\x50\xF8\x77\xCA\xD4\x8B\xE3\x0C\xEB\x6F\xCB\x57\xE9\xEF\xD8\x41\xE9\x7A\xE3\xD5\xCB\xDE\x02\xE6\x8E\xC9\xCD\xE1\x2F\xD2\x54\xF8\x73\xC4\xD5\xE8\xC2\x69\xB2\xDC\xB7\x0A\xD9\x8A\x14\xF3\xDD\xAC\xD5\xD3\xD2\xE2\xD7\xE8\xD2\xE7\xA1\xE0\xAF\xEE\x1D\xFE\x6E\xC9\xD7\xC0\xE5\xA6\xEB\x97\xEA\x03\xEC\x58\xE0\x3B\xE6\x96\xF2\xCE\x8B\xEA\x72\xE9\x4B\xE7\x74\xEE\x1B\xE9\x26\xEB\x81\xD7\xD7\xC1\xDF\xBC\xE7\xE1\xDE\xEF\xE5\x58\xD2\x59\xE7\x56\xD4\xD6\xDD\xCB\x1C\xEA\x74\xE7\xE4\xD2\x5C\xE9\xF0\x0F\x87\xE2\x8C\xED\xC2\xC2\xEA\xCF\xE3\x5C\xE9\x9F\xE5\x5C\xEC\xAF\xDF\xC7\x80\xE3\x50\xE6\x81\xE8\x4C\xEC\xA0\xE7\x4B\xFD\xAB\xF9\xD2\xD9\xE2\xF7\xE4\x09\xEB\x10\xEE\xA6\xEE\x15\xFB\xAF\xF2\xC4\x8A\xEB\xBE\xDA\xC6\xE8\x70\xDE\xB1\xE0\xF2\xD8\xAD\xC1\xBE\xDD\xEB\xC6\xDB\xB5\xEA\x4D\xD9\x43\xE7\x42\xFB\x90\xF7\xC5\xDA\xCD\x7F\xD8\x6A\x11\x20\xDB\x68\xE0\xA1\xC5\x64\xCF\xCF\xC9\xE7\x10\xEC\x56\xEA\x5F\xE4\xAE\xE5\x61\xFA\xA6\xCC\xD2\x89\xE8\xF1\xE5\xF8\xE9\x87\xE9\x92\xE1\x3E\xE2\xAC\xE8\xC1\x84\xEB\x02\xE0\xC3\xE8\x01\xE0\xB1\xE2\xE9\xC8\xB1\xD4\xBA\xAA\xEC\x96\xDD\xEC\xE9\x68\xD6\xC5\xE0\x0C\xE9\xAB\xD0\xC0\x9A\xEA\xDA\xD8\x1A\xED\x61\x1A\x8A\x11\x14\xF7\xB1\xF7\x9D\xAF\xD9\x11\x1A\xF7\xBE\x2C\xDA\x7F\xEE\x51\xEC\x8A\xFF\xD8\xAB\xE8\xD4\xE8\x92\xEB\xCD\xD9\xBD\xE7\x43\xE2\x59\x46\xD7\xAA\xEA\x58\xE5\xF7\xEA\xC8\xE6\xA5\xEB\x64\xE6\xA8\xD2\xD2\xCE\xEC\xE3\xE6\x28\xEE\x1A\xE2\xCA\xEC\x06\xF4\xB2\xC6\xC0\xD6\xEC\x08\xE0\x2C\xEE\x02\xE4\xC5\xEC\x00\xFB\xAE\xF5\xB1\xB0\xEC\x51\xDF\xEF\xE9\x58\xC4\x33\xED\xA2\x1A\x06\xE6\xD9\x8D\xDA\xBB\x1A\x69\x1A\x38\xDF\xA7\xD7\x69\xE1\x6A\xF9\xC5\xB1\xE8\x0F\xED\xE0\xEA\x90\xED\x86\xE5\x64\xF0\xAA\xD8\xCF\xC7\xEB\x39\xDF\x0C\xEC\xF7\xE6\x3C\xEC\x61\xFF\xA6\xF8\xD2\xE6\xDB\x80\xEC\x4A\xEB\x56\xEE\x92\xED\x55\xF7\x78\xE6\xD8\xE0\xE2\xFE\xBC\xCE\xDC\x18\xBE\xF3\xD4\x51\xE0\x7D\xCE\xDA\xA2\xDF\x5E\xEC\x2B\xE2\xA4\xEC\xD5\xB4\x69\xFE\x4F\x00\xC8\xDC\xE8\x10\xE7\xEC\xE3\x15\x08\x3F\x13\xBB\x08\x03\xCC\xA0\xC8\xED\x44\xE7\x36\xC3\x9B\xEF\xB6\x1D\x39\xE0\x00\x11\xD8\x9D\xED\xF8\xE8\x00\x01\x5D\xED\xA3\xED\x1F\x77\xB3\xF3\xD2\x9B\xDA\xB5\xE8\x3E\xEE\xAB\xEE\xC3\xE0\x6B\xE0\xB1\xF1\xCE\xA2\xEC\x71\xE8\x12\xED\x63\xE7\xD6\xEF\x18\xE8\xB4\xF0\xC1\x8A\xED\x72\xE0\x46\xEE\x14\xE3\x71\xE4\x05\xE1\xB6\xF8\xC1\xCC\xBC\xA8\xBF\x93\xDE\x84\xE9\xD5\xDC\xC2\x14\x8E\xEC\xD9\xAF\xE8\x42\xDB\x09\xD0\xEF\xBA\xD4\xEE\x59\xE4\xA3\xEA\xD7\xCD\xE6\x46\xEC\x54\xED\x07\xE2\xC9\xE3\x6E\xEC\xB2\xF7\xC6\x90\xE8\x21\xEC\x9A\xEB\x04\xEA\xDD\xEC\x32\xEC\xB7\xE8\xC9\x90\xE3\xBF\xDD\x4E\xEA\xC7\xDA\xDE\xE4\x07\xF4\xB7\xF6\xC1\xF6\xED\xC2\xE1\x61\xEC\x31\xE1\xC1\xE7\x31\xE9\x6B\xFA\xDB\xEF\xC1\x02\xE5\xAD\xCE\x3C\xC5\x40\xEA\x1E\x67\x90\xD7\x9D\xCF\xED\x29\xEE\xB7\xD8\x22\xBE\xF2\xCB\x36\xF2\x95\xC9\x04\x4C\xCA\xA5\xCE\x73\xB5\xEA\xDA\xC1\xE7\xF0\xDC\xB7\xEA\xC7\x35\xB6\x8D\x08\x0E\xB3\x86\xCA\xE8\xE2\x98\xA0\x6E\x02\x1A\x5D\xCA\xBA\xCE\x9D\xEF\xA8\xEB\x28\xE4\x95\xD7\x6E\xFC\x09\x5C\xB2\xF3\xCA\xDA\xC7\xD2\xED\xFA\xC2\x66\xFD\x34\x2C\x2F\x18\x0E\x48\x66\x32\x02\x0F\x5C\xDF\xDC\x30\xB9\x99\x76\x91\x1B\xD0\x38\x06\xA8\xB0\x6B\xD5\x80\xD9\x95\xB1\xBA\xF2\xAB\xE7\xEB\x02\x30\xD7\xCF\x94\x13\x4E\x15\x45\x42\x44\x1B\xDD\xAA\xDF\x01\xA2\xAF\xEF\xE3\x40\xEC\xEE\x49\x10\xCA\x92\xD3\xCE\x10\x50\xEE\x59\xBF\xCE\xED\xE4\xE7\xF0\xCA\xBB\xC0\xC5\xC4\x55\xD6\x0E\x37\x4B\xDB\xEE\x96\xBD\x4E\x12\xBB\xC4\xDD\x99\xD3\x61\xEE\xDC\x1A\x3A\xC6\x20\x04\x76\xF2\x2F\xFA\xDD\xD3\xEE\x28\xDF\xDF\x19\x42\x13\xF9\x1A\x28\x03\xBC\xF5\x5E\xEA\x20\x86\xEF\x47\x08\xDD\xEE\x39\x00\x95\xB4\x94\x03\x04\x0D\xEF\x57\xB2\xB3\xEC\xEA\xD8\xF2\xEE\x77\xE8\x91\xCB\x06\x18\x0E\x3E\x66\xCB\xEF\x6F\x18\xF3\xE5\x2C\x73\xBB\xC3\xDD\xF5\xEE\xB8\x1A\x94\xCB\xD3\xEB\x2B\xB2\x7A\xE9\xA5\xF2\xD5\xA5\xEF\x35\xEC\xD7\x0B\x94\x20\x1C\x1A\x7A\xFB\x6D\x2C\xDE\xA4\x65\x3A\x67\xCD\xED\x4C\x00\x2A\xBE\x54\xCC\xBC\xF9\xDD\xCA\xEE\xB7\xEF\xAA\xEE\xA9\x0C\x7D\x13\xA7\x15\x1C\x78\xC4\x53\x04\xBD\xEE\x1B\xD5\xE1\xED\xF5\xE7\x78\xE3\x57\xC9\xDE\xBC\x1B\x5F\xCA\xE3\xEC\xED\xEF\xF1\xE9\x7C\xEF\x31\xEB\xDD\x8F\x22\xC4\x47\xE8\xEF\x6C\x1F\xF7\xE4\x9C\x75\xBE\xCD\xAF\xD7\xEF\xC0\x1A\xB4\xCA\xF6\xEA\x2B\xB5\x7B\xF6\x0A\xA4",
"\xDE\xCA\xEF\xA7\x0C\x8C\x0F\xAF\x62\xFC\xE2\xDB\x04\xBF\xD3\xFD\x66\xEF\x9D\xD8\xF4\xED\xC2\x18\xAE\xCB\x7E\xE5\xBB\xDC\xDF\xE8\xEE\xF2\x2A\xDC\xEF\x98\xE9\xE2\x08\x71\x09\x96\x74\xDF\xE1\xD0\x5D\xEE\xEA\xEE\xE6\xEF\xF5\xEC\x79\xF8\x6D\x39\x95\x86\x02\x3E\xCA\x20\xE4\xF2\xE8\x00\xFE\xCA\xC7\x07\xFC\x36\x6E\xDF\x68\x86\xAE\xB2\x6A\xCF\xEC\xE2\x67\xFF\x66\xF3\x66\xA0\xE4\xFD\xEE\xC7\xEF\x04\xF5\x03\xFB\x7C\x27\x91\xF9\xDE\xE5\xEC\xB1\xD0\xFC\xEF\x70\xE9\xB0\x31\xC8\xCA\xC1\xC7\xE0\xE2\xB2\x45\xE7\xB7\x49\x92\xE3\x06\xF5\xD7\xD6\x72\xE7\x04\x6E\xCA\x58\xB2\xB8\xCE\x49\xA2\xA2\x1D\x4A\x0E\xEA\x11\x0C\x3C\xEC\x16\xE2\x1A\xF3\x84\xE6\x35\xB5\x7E\x22\xC2\xC2\xE1\xB1\xF0\x50\x14\x23\xF2\x12\xF6\x08\xF0\x82\xF3\x79\xF9\xE0\xD2\xB2\x13\xE3\xBF\xEF\xBE\xEF\xF0\xC6\xD7\xD2\x40\xEC\xDF\xB2\xBD\x7E\xDD\x7D\xDF\x2F\xD2\x3A\xDF\x15\xD3\x47\xE9\xCA\x94\xE7\xEC\xB5\x55\xE6\x96\x0C\x6D\x1C\x27\xF9\xB6\xD3\x92\xA6\xDB\x56\xF0\xFF\xEE\xB9\xB1\x0B\xFA\x36\xF1\x4E\xEC\x2E\x10\xE7\x9D\xDB\x2F\xF1\xA9\xB1\x0C\xF5\x16\xCE\x95\xCC\xD5\xB0\xE5\xFB\xD0\x9B\xEE\x41\x06\xE9\xE6\x95\xAD\xBF\xEB\xA6\xF0\xCF\xEB\xAE\x19\xEC\x60\xBB\xBF\xD6\x34\xFC\x96\xFE\xB7\xBC\x48\xE3\x34\x17\xC1\x3B\xE7\x45\xE2\xFF\xDD\xC3\xD8\xE1\x80\xF1\x61\xC2\x41\xF0\x07\xD4\x2A\xBC\x1C\xC6\x8A\xCE\x87\xC0\xF0\xDF\xD8\x89\xE6\x52\xE9\xE7\xED\x16\xCC\xC3\xE0\xA4\x92\xF1\x77\xB6\x24\xF3\xB6\xE2\x0C\xDC\x24\xF1\xE7\xA0\xE2\xCD\xD2\x35\xEE\xDE\x19\x66\xDE\x13\xFF\xDB\x1E\xC3\xC0\x00\x2C\xF1\x79\xD9\xC7\xE5\x9D\xE2\x67\xE2\x87\xF7\x6E\x31\x70\xF0\x00\x96\xE7\xA2\xE9\xBD\xB2\x73\xEC\x95\xA5\x35\x25\xE2\xE5\xBF\xA7\xF0\x02\xD7\xC9\xD8\x55\xCC\x06\x0B\x79\xF1\x68\xD9\xE8\xCB\xE7\x7F\xEF\xC1\xD9\x42\xDA\x17\xEE\xC4\xEB\xE1\x90\xF1\xAC\xBD\x60\xF2\xFD\xE0\x41\xBC\x30\xBE\x77\xEE\xD0\xCB\xF1\xFC\xE7\x69\xEF\x6C\x1E\x17\xFD\x36\xE8\x3A\xE2\xDC\xD2\xDB\x24\xE8\x21\x15\x99\xD6\x8A\xEB\x60\xF8\xA2\xED\xBC\xAD\xE8\xCA\xF0\x3F\xE0\xEE\xB2\xE6\xD8\x2E\xD8\xCA\x9C\xE3\xE9\xF0\xDA\xD7\x6F\xF0\xB6\xE1\x1C\xF5\x69\xF9\x11\x15\xD1\xC6\xF1\xCB\xEC\xE5\xE4\xD7\xDB\x8B\xE0\x2E\xF0\x98\xDE\xD1\x86\x02\x24\xE5\xCF\xDB\x23\xF2\x7E\xB2\x8D\xEA\x56\xC4\xD2\x9C\xF1\x9F\xC2\x58\xF2\x59\xDA\x1A\xF7\xFA\xD6\xBD\xC8\xE4\xF5\xC9\x0A\xF2\x2A\xDD\x41\xF5\xC0\xD8\xB1\xC7\x09\x37\xDD\x92\xF0\x9D\xF0\x68\xF0\x31\xE5\x67\xDF\xFE\xC7\xBE\xD9\xE4\x84\xF2\xF2\xF1\x16\xCC\xC9\xE9\x6E\xED\x66\xE0\x6E\x20\xD4\xDA\xA7\x22\xE4\x00\xD9\x44\xF5\xB3\xDC\x90\xED\x5C\xFA\x18\x29\xF2\xBF\xF1\x78\xF0\x98\xEE\xAC\xD9\x05\xEB\x5E\x1E\xE4\x89\xF2\x1A\xF3\xFD\xE1\x48\xF6\x97\xC6\x59\xF2\xAB\xD4\xE4\xC0\x1B\x9A\xEA\x98\xF1\x37\xF4\x1A\xCB\x93\xEC\xAB\xE3\xC2\xF3\xC9\x7A\xCB\x8F\xF2\x29\xF5\x28\xF4\xB8\x49\x61\xFC\x36\x63\xEB\x27\xE8\x35\xF2\x52\xF0\x18\xFC\x94\xE0\xEC\xA3\xE4\xA0\xE7\xE5\xF1\x9F\xF1\x83\xEA\x1B\xF2\xDB\x0F\xC7\xFD\xB9\xB9\xF2\xD8\xE4\x69\xF2\x09\xF3\x00\xF9\x22\xF5\x88\xDE\xE0\x97\xE2\x35\xCD\x8C\xE3\x8D\xCC\xE6\xE0\x6D\xFD\xB1\xDD\xC4\xCD\xF1\x55\xB2\xAF\xF1\x05\xD0\x2C\xF2\x92\xF5\xCA\xDF\x63\x63\xF2\x56\xEE\xC3\x1B\x14\xF0\xCD\xE1\x43\xEA\xB3\xC8\xC5\xD7\xF1\xEA\xF1\x5B\xD8\x5C\xF2\xF9\xE1\x93\xFE\xC6\xF3\xE4\xD4\xDC\xC5\xEC\x19\x1B\xB1\xED\x1F\xF4\xC5\xD2\x8B\xDE\x23\x74\xE2\x3E\x28\xE9\xCC\xB6\xEF\x34\xE9\x8F\xAC\x35\xDB\x65\xF2\xF2\x02\x03\x95\xF2\x04\xE6\x2E\xF9\xD0\xC4\x9E\xD6\xDA\xE6\xF2\xCB\x2E\x65\xEC\xD6\x0C\xD9\xE1\x49\x20\xCC\xDD\xD1\xD2\xED\x83\xF2\xEF\xEF\x33\xF0\x24\xF7\x98\xFD\x6C\xC9\xE6\xCE\xE3\xF8\xF1\xB8\xCD\x54\x96\xDF\xEF\x2D\xEF\x8E\xFE\xE3\x9A\xCE\xD8\xE2\x0E\xC3\x5C\xF4\x35\xF7\x60\xFF\xC4\xFC\xC1\xA4\xF0\x02\x31\xD7\xF3\x62\xF7\x31\xFF\x0A\xC1\x70\xDE\x83\xF1\xDA\x96\x3F\x97\xEC\x5B\xF1\xE6\xEB\x20\xEF\x6B\xD9\x65\xEA\xC2\x27\x02\x9C\xEC\x29\xF6\x22\xF4\x97\xE0\x1F\xEC\xDC\xD1\x92\x40\xEF\x69\x4B\x02\xF1\x05\xFB\x9D\xF5\xC1\xFC\x36\x47\xEE\x1A\xF0\x59\xBF\x45\xF2\x0B\xF8\xBB\xBC\xC3\xE0\xDE\xCE\xF1\x6D\xC3\xF1\xF1\x77\xCA\x00\xF9\x97\xE4\xB3\xD1\xDE\xE3\xEC\x59\xEF\x17\xF0\x35\xF3\x72\xA9\x79\xFD\x09\x02\xDF\xB8\xB7\x63\xEF\x9B\xF1\x3D\xCA\x3D\xF0\x92\xCC\xCF\xCB\xDF\x86\x1B\x6C\xEE\xA9\x66\xDB\xE8\x89\x5C\x75\xF4\xCF\xCA\xE0\xF6\xF3\x0C\xF1\xE1\xEC\x6E\x1F\xEE\xE7\x9E\xF5\xCA\xAE\xE2\xFC\xF3\x34",
"\xD4\xFF\xF3\xA9\x08\x47\xEC\xD9\x52\xCF\xE2\x46\xA2\xA3\xF5\xF3\xE8\xE0\xE2\xE8\xF6\xEC\xDB\x0B\xBC\xDF\xDE\xFA\xF3\x2D\xD2\x08\xF5\x1E\xDA\x42\xFC\xBE\x14\xBC\xE7\xDA\xB0\x58\x2A\xF1\xFA\xEF\xF4\xE8\xF8\xEF\x75\xE9\xD0\xF8\x6E\x9E\xEF\x45\x10\x10\xF4\x00\xDA\x44\xF6\xD6\xC4\xD1\xC6\x36\x28\xEF\x95\xEE\x02\xF4\xDC\xE8\x43\xF7\xA0\xFA\xD0\xD6\xDF\x9C\xF4\xC0\x1A\xD9\xEC\xDE\xEB\xFB\xE6\xAE\xB4\xD1\xCA\xBB\xF0\xEF\xEC\x17\xDD\xED\x64\xF6\x42\xFC\x30\xBC\xD1\xEC\xE8\xAE\xEF\xDC\xF3\x06\xF0\x6F\x1D\xF8\xEF\xA1\xE4\xD2\xE9\xE7\xD5\xF3\x6C\xC4\xD5\xF2\xE9\xED\x0C\x0D\x7C\xF6\x1C\x4C\xE9\x93\xA7\x4E\xF5\xF2\xED\x77\xF7\x47\xF2\xA5\xE0\x6E\x19\xDF\xD5\xF4\x57\xF1\x22\xF4\x96\xF4\x69\xC8\xA4\xE0\xD0\xE0\xDF\x82\x1F\x5F\xF4\xD4\x21\xDC\xED\x47\xF7\x9F\xF0\xCA\xAA\xDF\xE8\xF4\x52\xF3\xCF\xC2\x91\xF1\x0E\xFD\xA6\xEE\xCF\xF2\xDF\xDD\x47\x71\xF4\xFB\xEE\x20\x48\x41\xF1\xA5\xEA\xD0\xFC\x36\x7C\xEF\x78\xF4\x11\xF3\x95\xF1\x8E\xBD\xA7\xE4\xC0\xE3\x21\x06\xF0\x3A\xF4\xC2\xEF\x9D\x99\x43\xF5\xA7\xEE\xC0\xE7\x04\x11\xF0\x24\xD0\x3D\xF7\x9A\xF3\x10\xF9\x8A\xE0\x6E\x18\xE0\xB4\x12\xE1\xF2\x35\xF6\xB7\xC2\x36\xBD\x84\xF1\xD1\xD6\xE9\x9A\xF5\x09\xD1\x46\xF5\x59\xF3\x43\xF4\xA8\xFC\xBB\xCA\x29\xAD\xF0\x63\xF5\xF3\xED\xAC\xF7\x32\xB8\xBB\xBB\xAC\xDB\x2A\x4B\xF0\x43\xF0\xEA\xDB\xDF\xA9\x54\xF6\x3E\xD7\x30\x19\x78\x58\xCA\xC3\xE4\x7C\xCA\x61\x07\x1F\x08\xEA\x06\x6F\x33\x45\x53\xB2\xBB\x1C\xC0\xC8\x0B\xD7\xF2\xEE\xAB\xF9\x30\x36\x60\xA8\xEB\x52\xCB\x35\x00\x26\x12\xE4\xC8\x4B\xEE\xBA\x0B\xEB\xEC\xCB\x5A\xCA\x1E\x06\x79\x1F\xE8\xA3\xDB\x1B\x75\x1A\x02\x24\x1D\x27\xC2\x15\xF7\x9D\x9C\xC6\xAD\x8B\xA0\x9F\xED\x96\xD9\x2E\x98\x11\x6F\xF7\x65\xCE\x30\x02\xA6\xAA\x6D\x30\x1D\x7F\xE7\x38\x9C\x20\x9E\xCF\xE9\x2A\x9E\xD8\x76\xBD\x6F\xEB\x8B\xD4\xC7\xF1\x45\x5F\x03\xD4\xB3\x19\xA9\xE6\xE3\x64\x3A\x57\xF5\xBE\xEF\x66\xF6\x61\x07\x59\xF1\xAC\xF1\xD6\xD8\x22\x15\x01\xF2\xBC\xA7\x2C\x25\xD6\x08\x27\x6F\x92\x6D\x3C\xA1\x7B\xF5\x2C\x1B\x7E\xF5\x40\x04\x12\x0F\xAF\xE7\x60\xC2\x06\x3F\xF5\xE5\xF4\x68\xF5\x5F\xC9\xC3\x08\x89\x14\xD8\xEB\xEB\xEB\x00\xED\xF4\xC2\x10\xB0\xF6\x08\x29\xAD\xF2\x0F\x26\x37\x49\x22\xC8\xF5\x93\x02\x24\x05\x62\xF5\x0A\xE2\x8D\xA4\xEB\xFE\xB1\xE6\xF5\xA3\x2C\x26\x13\x65\xFF\xB1\xE1\xD9\xD5\xB3\x1D\x27\xA8\xE6\xCB\x70\x98\x58\x62\xFE\xD3\x12\xD8\xC0\x00\x1D\x00\x2C\xF7\x5E\xF7\xB8\xF0\x63\xF0\xB3\xFA\xD8\xE7\xEB\x9C\xF6\x3E\xC9\x84\xF5\xD6\x2A\x4C\xBA\x06\x35\xB9\x77\xEB\xD9\xCA\xFC\xC9\x3A\x1A\x79\x1E\xB7\x8F\x9B\xAB\x81\x01\xED\xE1\xD7\x43\xF6\x67\xF7\xC8\xF5\x7B\xE6\x10\xCE\xBA\x18\x22\x0D\x00\x4A\xF7\x0C\x0E\xCD\xF6\x32\x88\xB3\xEA\x91\xFC\x41\x63\x5B\xCB\x0E\x9E\xF5\xEE\x8D\x6A\xF6\x10\x10\x07\x15\x92\x81\xD3\x02\xF6\xAD\x2F\xD3\xF5\x60\xFB\xB1\xE6\x0C\x18\x22\x6E\xF6\x35\xF6\x6E\xEF\x72\x93\xD5\x69\x91\xA3\xCD\xF1\xEB\xA4\x9C\x98\x03\xA9\xF6\xCF\xF3\x1C\x0F\xB6\xF3\xA6\xD9\xED\x83\xF6\x5B\xF6\x56\xEE\xB0\xF2\x5A\xF7\x12\x04\xDC\xF9\xED\xD3\xB2\xEE\xF5\x31\xB2\xD9\xF7\x1F\x28\xB6\xFE\x75\x7C\xEC\x82\x8F\x3F\xE7\x93\x01\x36\x05\x70\xF8\x95\xD1\xDB\xC4\xEC\xAE\xE7\x5D\xF6\x74\xF6\xE6\xF3\xAE\xCC\xF8\xAA\xD8\xD4\x65\x91\xF7\x8C\x03\x9C\xF7\x77\xD9\xF6\x5C\xB3\xF2\x2C\xD9\xEE\x89\x02\x82\x76\x2D\xE0\xD6\xF1\x20\xAF\xB2\xF3\xDB\xE0\xEE\x8B\xF7\x98\x11\xD8\xF5\x7A\xCB\x6C\xF8\x4C\xC5\xDB\xF9\xD9\x89\xE8\xD5\x9E\x9E\xF5\x37\x97\x75\xF4\x5E\x7C\xDC\xC5\xE8\xF2\xF4\xB5\xF6\xC9\xF6\xD1\xF2\x66\xF6\x46\x8F\xDC\xE9\xD1\xD1\x1F\xCC\x9B\xDF\x12\xC3\xF6\xFE\x5C\xB3\xE9\x8C\x29\xEC\x89\x02\x94\x00\xE3\xF7\x8E\xF4\x61\xA9\xBC\xE9\xDD\xF1\xEC\xDE\xF6\x27\x03\xEC\xF6\xF3\xF7\xB7\x12\xCC\x1A\xB9\x49\xEE\xA2\x51\x25\xF7\xC0\xF7\x49\x07\xB2\xAD\xAD\xE7\x09\x01\x02\x5A\xF7\x92\xF4\xDA\xF4\xD1\xF6\x76\xFC\xB5\xF8\xDD\xEE\xEF\xA4\xF7\xE9\xCC\x76\xF7\xE9\xF2\x64\xF9\xB1\xE1\x32\xC2\x89\xF2\x59\x3C\xF6\xF3\x18\xDB\xF3\x20\x05\x58\xC4\xAF\xF0\xED\x87\xF7\x72\xF6\xE5\xF4\xDD\xF7\x68\xF6\xB7\xE7\x09\x05\xF0\xBB\xF7\xFB\xF7\x9B\xF7\xF9\xF4\xAE\xD4\x95\xB8\x97\x20\x4E\x41\x2E\x01\xDC\xF9\xB8\xCF\xF2\x28\x94\xBC\xE3\x08\x1E\xA7\x80\xF6\xD2\xEE\x04\xFB\xE7\xF5\x7E\xF6\xB0\xE7\x09\x1E\xA7\xB9\xD8\xA6\xF6\xC8\xF4\xFF\xF5\x68\xF6\x05\x30\xBC\x8F\x51\xDA\xF5\x27\x8D\xDF\x1B\xAE",
"\x18\xB5\xCF\x56\xED\xD9\xDC\xEF\xF3\xF7\x0A\xF9\xDB\xF5\x09\xFF\x78\x58\xBF\xE0\x39\xFA\xEF\xC2\xB6\xCF\x14\x12\x85\xCB\x5C\x85\xF4\xB2\xF1\xDA\xEB\x36\x26\x1C\x32\xF9\x19\xE5\xB8\xF0\x01\xF3\x39\xBD\xDE\xE4\x96\xDF\xF7\xA2\xF6\x16\xD8\x85\xC9\x85\xF5\x7B\xA8\xDD\xCF\xF1\xAE\xAF\xCD\xF3\x99\xEF\xA9\xE7\xB7\x16\xC1\xE8\x56\x0C\x95\x46\x26\x19\xF9\x71\xC0\xC7\xC0\x57\xF4\xC6\xE6\x3C\xE5\xEA\x91\x7E\xBC\xF5\x01\x1E\xAA\xF0\x05\xFE\xBF\xE3\x7A\xB9\x39\xA5\x06\x21\xD0\xDE\x18\x69\x0E\x7A\xF5\xC6\xFF\x90\xD5\xE1\xDF\xF2\x85\xE8\x83\x03\x99\xF1\xBF\xCD\x5E\xC0\x14\xCA\xDC\xE0\xE0\xCB\xEA\x63\xDA\x6A\xEF\x11\xEC\x5A\xEC\x16\xF9\xD7\xCA\xE5\x16\xEF\x4C\xE5\x75\xEB\xEF\xDA\x71\xF0\x82\xDC\xDC\xE4\xE1\x16\xEA\x73\xE0\x46\xEC\xCC\xC2\x8B\xFD\xC2\xE1\xC2\xB5\xF1\x28\xC3\x5B\xF0\xAA\xB5\x0C\xF7\x87\xF8\x96\xFF\xC9\xC3\xF2\xF1\xDE\xAF\xC8\x57\xB4\xE4\xCD\x5E\xF6\x7F\xC8\xD9\x8E\xE9\xE2\xEC\x1F\xE9\xF6\xDD\xB9\xE5\xFE\xCF\xAE\xD5\xCA\x87\xF9\xFB\xE4\xD8\xEA\x33\xDA\xB6\xEA\xDE\x72\xA8\xCB\xAA\xB6\xEB\x9F\xE4\x2E\xEE\x43\xE0\xE4\xE4\x7B\x95\xE4\xC1\xA3\xDE\xF0\x93\xE7\x39\xF2\x31\xD7\xB9\xD6\x16\xDD\xE4\xC9\xCC\xF9\xF0\xBC\x1B\x7E\xD0\x70\xED\x9E\xCB\xC7\xE2\x2D\xFA\x97\xA7\xF4\xDF\xEC\x85\xDD\xB8\xEC\xE1\xEA\xCA\xF8\xAA\xEC\xF2\xF6\xBD\xF7\xEA\xE8\xE8\x2C\xFD\x76\xE9\xC8\xEC\x96\xF4\xF2\xB9\x84\xB6\xF8\xF3\xDD\xAF\xE8\xFD\xDF\x6B\xEA\x7F\xD0\xDA\xB3\xE0\x13\xF3\xA9\xB3\x48\xD7\x10\xF2\x4D\x5E\x96\xFC\xE3\xB6\xF3\x8D\xF2\xDC\xB7\x1C\xF9\x8D\xFC\x59\xFC\x3D\xE9\x79\x24\x3D\xE7\xF7\xC7\xC8\xE2\xCD\x11\xF1\xCA\xFA\xE3\xE3\xF2\xFD\xCC\xA3\xEA\x05\xE9\x49\xE6\xE1\xEE\xF0\xD5\xE6\xC0\xD6\xD9\xEA\x33\xEB\x59\xED\x4D\xED\xD6\xE7\xF7\xDD\xE6\xEE\xCC\x8B\xF9\xE3\xDF\x46\xFA\x38\xE7\x91\xF3\x30\xFA\xE5\xF7\xC7\x93\xF9\xE8\xE1\xD6\xF3\x69\xD4\x12\xFF\x94\xCD\x98\xEB\x51\x18\xF1\xA1\xF2\x4D\xF0\xB3\xAA\x10\xE2\x10\x0D\xE6\xFC\x99\xCF\xF9\xB2\xE8\x7F\xEA\x5E\xEA\xCF\xE9\x37\xFE\xA6\xC6\xF4\xE0\xE9\x81\xEA\x73\xEE\x7D\xE8\xDD\xE8\x5F\xF4\xB8\xD5\xD0\xB2\xF9\x47\xDC\x88\xFB\x25\xE7\xBF\xED\x02\xED\xA7\xFE\xC2\x96\xFA\x70\xE5\x73\xFB\x27\xE5\x20\xF2\x8A\xF2\x53\xF3\xEE\x9F\xC3\x26\xFA\xC7\xC8\x40\xFF\xC8\xEB\x43\xEA\xAE\xEE\xF4\xEC\xE8\xD6\xE1\x41\xF8\x36\xE5\x90\xF9\x5B\x91\xAE\xD8\x91\xF4\xE8\x1A\xDF\xFE\xEA\x2E\xE4\xA7\xF9\x09\xFE\xE9\xCC\xC4\xC0\xFA\xA1\xE4\x8C\xF9\x7E\xE4\x33\xF8\x8A\xFB\x73\xEC\xCD\xF0\xF1\xC9\xE0\x59\xBD\x52\xF8\xB7\xCB\xD4\xFF\xE3\xEA\xC2\xAB\xED\xB7\xC0\xCD\xD5\x79\xE1\xAE\xF6\x32\xF2\xA9\xD1\xDC\x8A\xFA\x13\xEE\x86\xF8\xD7\xE6\xA1\xFE\x35\xFA\xEA\xC1\xC7\xDC\xFA\xBC\xE0\x2D\xEF\x5D\xD5\x9C\xFE\x00\xFC\xE5\xD0\xA7\xDD\xC2\x5C\xF1\x5F\xFB\x25\xF9\x98\xF6\x8B\xF5\x9C\xF0\x89\xA5\xDD\x61\xC3\x39\xC4\x57\xF7\xD8\x08\xD4\xFF\xE7\xE8\xF4\x81\xFA\x49\xED\x78\xD9\xEB\xE4\x84\xFD\x64\xF2\xE9\xEB\xD6\xC7\xE5\xB8\xDC\xAB\xFA\x44\xC8\xAB\xFD\xEB\xD8\xB8\xF0\xBB\x92\xFA\xF3\xE2\xC1\xF9\xCE\xBC\xB0\xF8\x16\xE6\xEC\xD9\xC6\xF9\xE0\xB6\xB6\x7A\xF2\xB1\xEC\x4C\xD3\x86\x07\x9E\xFB\xC8\xE6\xF1\xC7\xF0\x2D\xE8\xDD\xCC\x31\xFE\x96\xF7\x76\xD3\xF6\xAC\x17\x95\xFA\x59\xCF\x82\xC8\x89\xCA\xD2\xF0\x5B\xFB\xD5\xE1\xDB\x80\xEB\x06\xE9\xCC\xF5\xDC\xEE\x37\xE8\x0A\xDC\xD5\xAE\xEB\x5E\xEA\x9C\xFB\xD1\xDA\xA7\xFB\x29\xF0\xB7\xCA\xC4\xAA\xFB\xC3\xD5\x01\xEE\x58\xDA\xAC\xF4\xB1\xC9\xE7\xCC\xEB\xF7\x9C\xD6\xF1\x74\xF3\x69\xF2\xE0\xD9\x9A\xF0\x9E\xED\x85\xEB\xFA\x23\xCF\xB6\xF8\x9E\xE8\x64\xEC\xD2\xFB\x9E\xC1\xF2\xBF\xDE\x52\xFB\x20\xE8\x55\xFB\x7F\xCA\xD7\xF8\xA4\xD2\xF7\xE1\xDF\xD4\xFB\x7F\xE4\x60\xFB\x38\xE3\xCE\xE6\x8B\xEC\xF6\x97\xE3\xAE\xFB\x28\xE8\x59\xFA\x18\xFE\x99\xE7\x15\xD5\x8C\xA9\xE8\xB7\xFB\x68\xDE\x3E\xF6\xE5\xD2\xDE\xF7\xCD\xF1\xBC\xBF\xFB\x2C\x19\xE0\xFA\x4E\xCE\x88\xFE\xC7\xEB\xEF\xF7\xCD\xED\xFB\x55\xEB\xA7\xFB\x5F\xE8\xA6\xF8\xD0\xF7\xEB\xE4\xCF\xCF\xFB\xE6\xE7\xD7\xE8\xFA\xE4\x09\xEE\xD7\xE0\x9B\xFB\xF7\x81\xE6\x14\xFA\xED\xE9\x24\xFE\x66\xEC\xDD\xF6\x96\xC3\xF8\xA1\xDD\x3C\xCF\x4B\xD7\x30\x49\x53\xD4\x8E\xFD\xB9\xF8\xF6\xF9\xF1\x2A\x07\x64\xF1\x6D\xF1\xBC\xC9\xF0\x02\x7B\xE4\xF4\x81\x02\xE8\xFB\xDA\xAC\x29\xFF\xC2\xEF\xBC\xE7\xEE\xF9\xBF\xC9\xFB\x73\xFA\x7C\x9F\x35\xFB\xAC\xB0\xDA\xEE\x89\xE2\xF6\xD3\xBF\xA4\xFA\x5E\xD6\xBB\xE8\x21\xE6\xDD",
"\xF6\x89\xDE\xF5\xF5\xE3\x60\xFB\x82\xE5\x8B\xFF\x60\xEF\xE2\xE6\xC8\xC4\x76\xBF\xFC\x00\x01\x20\xFE\x8A\xB2\xBD\xF1\xCD\xF0\x8D\xEA\xDA\xEF\xFB\x6D\xE9\xF8\xFB\x1B\xEB\xBE\xFA\xEC\xB5\xEF\xF7\xD4\xF7\xFB\xFD\xE5\xFC\xF8\xCC\xE3\xD7\xE4\x16\xFD\xEF\xC5\xC7\xFF\xFB\xC7\xE2\xA1\xFB\xFC\xE2\xA3\xF1\x0A\xED\xC8\xEE\xDF\xB6\xF8\x2D\xD2\x31\xFC\x8E\xB4\xCC\xF5\xDC\xE7\x5F\xC6\xF9\x8B\xE8\x48\xFD\xCD\xFA\xE2\xF7\xCF\xEE\xD9\xE4\xE4\xCD\xF9\xEB\xE3\x4F\xFD\xCA\xBC\x9C\xFF\x82\xE5\xE2\xEB\x9F\xE7\xF8\xE2\xE6\xB8\xF8\xB2\xE5\x96\xFE\x6C\xEB\xE5\xF8\x99\xFC\xF9\xA0\xDD\xCE\xE9\xF3\x18\x34\xEB\x4F\xFF\xCF\xA1\x51\x02\xFA\xB7\x1B\x43\xFC\xF7\xEB\x29\xF9\xA0\xE0\xD7\xF1\xF7\x82\xF2\xC5\xE5\x9F\xFB\x6C\xFB\x2B\xFE\xA6\xF5\x44\xFC\xEB\xF7\xCE\xF2\xFC\xB9\xE6\xD4\xF8\xB4\xE6\xCE\xF2\x2D\xF8\xF3\xD4\xCB\x9D\xFD\x9D\xCC\x8E\xF3\x36\x49\xA9\xEE\xCF\xE2\xEE\xC6\x99\xC4\xFB\x79\xEA\xE3\xF8\x86\xFC\xAF\xE4\xD0\xF7\x7E\xCC\xD7\xEA\xFC\x09\xEA\x36\xFE\xE4\xBB\x9B\xFD\x50\xE3\xF1\xCF\xD4\xB8\xFD\x9C\xE9\x2A\xFF\x64\xE7\xCA\xF8\x13\xF0\xAC\xC6\xBB\xFA\xFC\xC9\xE3\x4F\xFF\x72\xE7\x2A\xF3\x3D\xE5\xC9\xC9\x3C\x27\xF2\x3F\xF6\x30\xFF\xA9\xFB\xB6\x19\xEA\xE6\xE5\xCD\xF5\xF0\xEB\x9A\xFB\xD3\xEB\x02\xFF\xC3\xED\xDC\xF6\x7C\xD3\x77\x98\xDF\xD5\xBE\xCD\xDD\xAE\xEA\x2C\xE4\xE7\xF2\x99\xC2\xBF\xB4\xE6\x2B\xFC\xEE\xE8\xB0\xFB\xA8\xE2\xEE\xFA\x99\xF6\xC0\xEA\xC8\x42\xF7\xF3\xFA\x65\xFD\x8F\xF9\x52\xE5\xF3\xEA\xEE\xCB\xFD\xC8\xFA\x98\xFA\x72\xFB\x79\xFC\xDC\xE2\xA7\xCE\xF7\xB4\xED\xD0\xFA\x5B\xEF\xA4\xFA\x93\xE8\xED\xF1\xA8\xD7\xFA\xED\xE7\xDC\xFD\xCA\xE2\xAF\xFC\x71\xE0\xEE\xF8\x6F\xED\xE4\xDF\xB2\xF0\xF6\xC4\xFA\xB9\xB3\xDD\xF2\xDB\x0D\xF7\xFF\xD3\xAB\xFD\xA5\xEB\x78\xFE\x7C\xEB\xB9\xF8\x15\xF5\xF7\xC0\xCE\xF7\xFD\x82\xE7\x7C\xFC\xE1\xE3\xDF\xF6\x38\xFD\xF7\xC8\xCE\xBC\xFD\x8A\xE7\x91\xFD\xBD\xED\xE4\xF4\xF2\xCF\xF1\xE4\xFB\xAB\xF0\x57\xE8\x40\xE1\x42\x06\x56\xFD\xB9\xEB\xF9\xCB\xFC\xE9\xF7\x29\xFB\x64\xFE\xA1\xF8\xE2\xF7\xE4\xF2\xF8\xC9\xF9\xD0\xC8\xB1\xEC\xAD\xEB\x87\xF8\xE3\xF1\xE2\xF1\xEE\xD6\xFB\xB1\xEB\x1D\xFF\x9D\xEA\xCF\xFD\xA7\xE0\xF4\xED\xA2\xDE\xDC\xF1\xE7\xBA\xEB\x7C\xDD\x6F\xF4\x46\xD1\x4F\xDF\xAD\xC7\xF5\xCC\xF9\x4F\xFE\x0A\xFD\xC3\xFD\xD0\xFE\xD7\xC7\xF4\xC3\xF4\xFE\xEC\xD4\xE0\xA8\xFB\x0F\xE8\xDA\xFE\x5C\xF2\xF6\xD1\x77\x91\xFD\x36\xCF\xAF\xFF\x2C\xF9\xEC\xF2\x56\xFA\xF5\xDB\xD0\xCA\xC1\x00\xFE\xED\xF9\xF1\xDD\xC0\xE7\xFC\xC5\xF8\xF5\xCF\xCE\xF2\xC0\x1A\xA8\xF3\x98\xE8\xC1\xD2\xE1\xF8\xD6\xF2\xFD\xD1\xEA\x16\xFD\xA9\xE8\xD5\xF8\xD1\xF6\xF5\xEA\xF4\xF4\xF5\xB1\xEA\x93\xE8\xAD\xFE\xA0\xEA\x20\xE4\x68\xE4\x88\xC6\xDA\xEE\xE0\x53\xFC\x9A\xE2\xB6\xFD\x53\xE9\xE9\xFB\xA3\xE7\xFD\xCF\xE8\x01\xFD\x3F\xEA\xE3\xF9\x90\xE7\xF4\xFB\xCB\xD4\xA5\x8E\xEC\x6E\xE6\xA7\xFE\xB1\xFD\xDD\xCE\x4C\xD9\xFC\xC8\xD7\xB0\xFE\x4E\xFB\x54\xFA\xDE\xFB\x95\xFC\xF7\xED\xE5\xFE\xFD\xD3\xB7\x65\xE5\x5A\xFF\xC6\xF9\xA7\xE4\xF8\xF3\xAD\xE3\xFD\xB5\xEB\x65\xFF\x9F\xEB\xEB\xFD\x8F\xE1\xFB\xFB\xAD\xF0\xF6\xA9\xF5\x5A\xF5\x13\xF2\x8F\xF5\x2D\xF1\x84\xFF\x6D\x18\xC4\x85\x65\x1A\xE3\x06\xFD\xB4\xEF\x2D\xF0\x6A\xF9\xFD\xCA\xFC\xBB\xFF\xCE\x6C\x77\xCC\xDD\xFF\xC1\xD6\xF7\xE2\x8F\xDB\xD8\xD3\xE6\x7D\xED\xF7\xFC\xA3\xFE\xE6\xFD\x4B\xF8\xF9\xFF\xD2\x83\xE7\xC1\xE9\xC2\xE7\x1D\xEC\xB6\xE9\x47\xED\xFD\xC7\xD3\xD3\xFF\xC9\x74\x3D\x5F\xCB\x74\xBC\x75\x12\x71\x92\x77\x14\x71\xDE\x6C\xA1\x79\x6C\x66\xB0\x6C\x46\x71\x6F\x66\xEF\x7C\x3C\x7E\xF9\x58\x4D\x71\x70\x75\x27\x01\x2C\x7F\x48\x65\x97\x7F\xD0\x7C\xEB\x7F\xE0\x71\xED\x7F\x51\x73\x78\x7F\x7E\x75\xCF\x7E\xB0\x7E\x8E\x7E\xB2\x7E\xC8\x72\xD4\x7E\xD2\x75\xCB\x7F\x60\x75\xCD\x7F\xB5\x7C\x1F\x7F\x4B\x74\xD1\x7F\xB7\x75\x00\x80\xF0\x74\x8C\x7F\xA4\x74\x6B\x7F\x61\x76\x05\x7E\xDB\x7F\xBC\x7D\xDD\x7F\x99\x76\x2B\x60\x75\x71\x9C\x76\xA0\x79\x6D\x6A\x30\x60\x10\x7E\x23\x5A\x70\x7F\xE8\x7F\xA3\x28\xBD\x7F\x0E\x7F\x2B\x75\xC0\x7F\xF0\x7E\x87\x6E\xF2\x7E\x3A\x7C\x9D\x7D\xF4\x7F\xE4\x74\xF6\x7F\xE6\x74\xF8\x7F\xE8\x74\xFA\x7F\xC3\x74\xFC\x7F\xC5\x74\xFE\x7F\xEE\x74\x2D\x80\x41\x75\x03\x7F\xDE\x75\xB3\x7F\x81\x2B\xC2\x79\x9F\x79\x08\x80\xEB\x5F\x5A\x6F\xA1\x71\x10\x6D\xA6\x79\x0E\x7E\xBC\x0D\xA9\x71\xE5\x75\x81\x7E\x71\x7F\xB3\x66\x43\x80\x18\x80\x18\x76\x1A",
"\x80\x1A\x76\xF3\x75\xF0\x7F\x0D\x77\x1C\x80\xF4\x7E\x16\x7F\xF6\x7E\x37\x5E\xF7\x7F\x3A\x7F\xF9\x7F\x3C\x7F\xFB\x7F\xCF\x7F\xFD\x7F\x2B\x80\xB9\x7C\x58\x80\x68\x75\x44\x7F\x6A\x75\x2F\x7E\x5E\x80\x39\x6D\x3B\x80\x3B\x6D\xE4\x7B\x3D\x6D\xA7\x66\x93\x79\x86\x7A\xC0\x0D\x1B\x67\x60\x78\xA1\x76\x40\x80\x13\x7E\x6C\x80\x1B\x62\x6E\x7D\x54\x71\x1A\x7E\x1E\x80\xF5\x75\xB1\x7E\x34\x7D\xDA\x7C\xB4\x7E\x73\x74\xB6\x7E\x47\x74\xDF\x7C\xD2\x5A\x29\x80\x13\x75\xFF\x7E\x15\x75\x8A\x7F\x17\x75\x2F\x80\xBB\x64\x46\x7F\xBF\x79\x07\x77\x10\x73\x88\x80\x34\x80\xC4\x79\xBD\x5F\x5A\x7C\x0D\x72\x94\x7D\xF4\x7A\x72\x6D\x61\x7C\xC5\x79\xF0\x5F\x9B\x68\x68\x7D\xAD\x69\xB2\x5E\x77\x7A\x7C\x7C\x50\x7F\x98\x7D\xA8\x7C\xD4\x7C\xC3\x7F\xD6\x7C\xC5\x7F\xD8\x7C\x9F\x80\xB3\x7E\x6E\x7E\x25\x76\x25\x80\xD4\x75\x95\x7E\x49\x74\xA7\x80\xB7\x7C\x81\x80\x9A\x7E\x83\x80\xB9\x75\xD5\x7F\x3D\x22\xBE\x7C\x9C\x6D\xC0\x7C\xF5\x68\xCD\x6D\x9B\x7C\x1C\x22\xC6\x7C\x67\x78\xB8\x0D\x80\x72\x94\x7F\xF5\x64\xC3\x80\xCE\x7C\x0C\x7F\x98\x7F\x44\x80\xBF\x7B\xEF\x7E\x7B\x76\xC8\x80\x1B\x7E\xAF\x76\x35\x7F\x77\x80\x37\x7F\x79\x80\x4F\x80\x7B\x80\x51\x80\x7D\x80\x53\x80\x7F\x80\x55\x80\xD7\x80\xAE\x7F\x42\x7F\x1F\x77\x85\x80\xB4\x5D\xDD\x80\xCA\x6D\x26\x6F\xE0\x80\x78\x72\x75\x78\xF9\x68\xE0\x75\x6A\x59\xD5\x6D\x6D\x12\xC4\x7E\x03\x01\xEA\x80\x27\x7D\xEC\x80\x17\x80\x52\x7F\x75\x7F\x9B\x7F\x77\x7F\xF2\x7F\x79\x7F\xF3\x80\xE4\x76\xF5\x80\x87\x6D\xA3\x7F\xE5\x73\xA5\x7F\xE7\x73\x05\x71\xEE\x6E\xA6\x7D\x6A\x72\x86\x7F\x64\x75\x21\x7F\xEF\x73\xD9\x80\x2F\x76\x5A\x80\x31\x76\x5D\x7E\x15\x7C\x94\x61\xEC\x7C\x36\x5B\x65\x80\x8D\x79\xA1\x7E\xFF\x00\xE4\x72\xE8\x80\x2D\x69\x13\x81\x4A\x7D\x97\x7D\x4C\x7D\xDC\x74\xC1\x7F\xF2\x80\x9C\x80\x10\x77\xE7\x76\x12\x77\x23\x76\xCF\x80\xEB\x76\xD1\x80\xFC\x75\x27\x81\xFE\x75\x29\x81\xD8\x75\x29\x7E\x5B\x76\x2D\x81\x5D\x76\x04\x81\xC2\x76\x5C\x80\x0D\x81\xBF\x0D\x95\x78\x53\x0B\x97\x78\x36\x81\x98\x68\x22\x7D\x60\x50\x60\x7E\x3D\x81\x6C\x7D\x3F\x81\x99\x80\xD3\x7C\x32\x7F\xF1\x7F\x72\x80\xF3\x7F\xF6\x80\xF5\x7F\xF8\x80\x87\x75\x50\x80\x89\x75\x52\x80\xEA\x74\x54\x80\xEC\x74\x56\x80\x3F\x7D\x53\x81\xBB\x7C\x55\x81\xF7\x76\x7A\x70\x16\x6B\x45\x7D\xBB\x6C\x4C\x7C\x00\x6C\x62\x81\xE9\x7D\x64\x81\xBE\x7F\xA9\x76\x70\x80\xAD\x7E\x4F\x6D\x74\x80\x1B\x81\x0F\x77\x76\x7D\x46\x81\x78\x7D\x48\x81\x19\x7F\x0D\x7D\x4B\x81\x27\x76\x71\x81\x8B\x75\x73\x81\x8D\x75\x2B\x81\xA0\x74\x9B\x7E\xA2\x74\xAD\x80\x19\x75\x31\x80\xFA\x6D\x9D\x7A\x09\x0F\xAB\x78\x11\x81\x02\x01\x81\x81\x42\x7E\x84\x7E\x17\x81\xEC\x7F\x19\x81\xEE\x7F\x69\x81\x1C\x81\x44\x81\x8C\x81\x33\x7D\x47\x81\xE9\x76\x49\x81\x15\x77\x92\x81\xB8\x76\x62\x5F\xBA\x76\xA5\x5C\xBC\x76\xA9\x80\xBE\x76\x01\x7F\x8F\x76\x2F\x81\xC8\x6E\x06\x81\x01\x6E\x92\x73\x09\x81\xAA\x72\xB9\x78\xA6\x6E\xBC\x0D\xBC\x78\x4D\x72\x3C\x81\x6B\x80\xC3\x7D\xEA\x7F\xA8\x81\x19\x80\xAA\x81\x1B\x80\x8A\x81\x05\x7D\xC9\x80\x07\x7D\x4B\x7E\x95\x5E\xB1\x81\x35\x7D\xB3\x81\x37\x7D\x82\x7F\x39\x7D\xD3\x80\xD6\x75\x4F\x81\x00\x76\x1C\x74\x02\x76\x1E\x74\xBF\x73\x20\x74\xC1\x73\xCC\x74\xC3\x73\x27\x64\x75\x5C\xB5\x7D\xCF\x6E\x09\x7E\x62\x80\xC8\x78\xFB\x78\xBB\x7D\xF0\x7C\xBD\x7D\xC0\x0D\xD8\x6E\xA3\x81\x67\x65\xCC\x81\xC7\x7E\xCE\x81\xA5\x7C\x2F\x7F\xF0\x80\x2D\x7D\xC2\x7F\x1D\x81\xCD\x7E\x1F\x81\x94\x6F\x17\x7F\x0B\x7D\x90\x81\x7B\x7D\xB5\x81\xED\x76\x94\x81\x29\x76\x96\x81\x2B\x76\x98\x81\x66\x75\x77\x81\x17\x7D\x9C\x81\x52\x6E\x57\x81\x61\x61\xC7\x7B\x80\x01\xE1\x7D\x3B\x7E\x30\x6F\xBC\x0D\xFD\x73\x12\x80\x09\x01\xA5\x81\x63\x7E\x83\x81\xEE\x80\xEC\x7D\x46\x80\xF1\x80\x67\x81\x89\x81\xAC\x81\x8B\x81\xA1\x7F\x09\x7D\x5B\x7F\x07\x82\x5D\x7F\x1A\x7F\xDD\x81\xD3\x7D\xDF\x81\x8C\x7C\xAB\x7F\x9E\x74\x10\x82\x8F\x75\x9A\x81\x91\x75\xE7\x81\x93\x75\xE9\x81\xC9\x61\xB2\x7D\x8A\x79\xB4\x7D\xE9\x0A\x2A\x6F\x2A\x74\xD4\x76\x5B\x6F\x0C\x7E\x1B\x82\x1C\x71\xBC\x0D\xEC\x78\xB5\x62\x69\x80\x80\x81\xFA\x81\xBC\x7F\x98\x80\x84\x81\x0B\x77\x28\x82\x2F\x7D\xF4\x80\xE1\x74\x20\x81\x06\x82\x79\x7D\x08\x82\xF6\x7D\x32\x82\xF8\x7D\x34\x82\x11\x7D\x36\x82\x1B\x77\x38\x82\x2D\x76\x12\x82\x41\x7D\xBF\x81\xE8\x7C\x2F\x7E\x40\x82\x32\x7E\x12\x2C\x34\x7E\xB1\x79\x2C",
"\x74\x2B\x77\x8A\x80\x78\x71\x61\x6F\xA2\x6A\x61\x81\x50\x82\xE9\x7F\x6D\x80\xCF\x81\x6F\x80\xD1\x81\x71\x80\x34\x7F\xFB\x6F\x56\x82\x1E\x81\x58\x82\x05\x82\x78\x80\xCC\x5E\xA7\x7F\x06\x71\xA9\x7F\x91\x71\x62\x82\x8E\x7C\x64\x82\x8D\x76\xBD\x81\xC0\x76\x79\x81\x21\x77\x16\x82\xAC\x5E\x5E\x7E\x88\x63\x80\x7E\x4F\x82\x41\x80\x47\x66\x65\x81\x67\x7E\x9B\x80\xAF\x7E\x9D\x80\x20\x80\xCD\x80\x22\x80\xA1\x80\xFA\x75\x0A\x82\x17\x77\x88\x82\x19\x77\x8A\x82\x13\x7D\x8C\x82\xF3\x76\x02\x81\x68\x7F\xDB\x80\xA0\x70\xA0\x6E\x7E\x7E\x7F\x51\x76\x82\x98\x82\xC8\x7E\xFD\x81\x2B\x7D\x26\x82\x00\x82\x43\x81\x9D\x82\x45\x81\xB0\x81\x8E\x81\xB2\x81\x5C\x82\x6F\x7E\x5E\x82\x71\x7E\x60\x82\x3B\x7D\xE1\x81\x3D\x7D\x75\x81\x5F\x7D\x66\x82\x61\x7D\x14\x82\x19\x7D\x9E\x81\x54\x6E\x38\x81\xA3\x7E\x89\x6C\x21\x0A\x21\x82\x83\x7E\x23\x82\x6E\x80\x45\x7E\x7C\x82\x87\x81\x79\x64\x33\x7F\x14\x7F\x04\x82\x00\x71\x21\x81\x20\x7E\x23\x81\x22\x7E\x25\x81\xE9\x73\xC4\x82\xD5\x7D\x0E\x82\x59\x76\x51\x81\x83\x7D\x8E\x82\xE6\x7C\x68\x82\x9F\x70\xC2\x7E\x37\x2C\xF8\x81\x00\x00\xD4\x82\xA8\x7E\xA7\x81\xB6\x82\xCA\x7E\xB8\x82\xEE\x7D\x9C\x82\xF0\x7D\x1F\x80\x53\x7D\x8F\x7E\x64\x72\x80\x7F\xB9\x6A\xA4\x82\x8A\x7C\xE6\x82\xFA\x7D\xC6\x82\x5D\x7D\xC8\x82\x58\x7E\xCA\x82\x5A\x7E\xCC\x82\x63\x7D\x92\x82\x23\x77\xB0\x80\x75\x76\x00\x77\xBC\x0D\xE8\x7E\x3F\x64\xDB\x7B\xCB\x81\xB4\x82\xFC\x81\x44\x7E\xB4\x74\x9B\x82\x01\x82\xAE\x81\x2C\x82\x1E\x7E\xE0\x82\x5C\x7F\xE2\x82\x5E\x7F\xE4\x82\x24\x7E\x4D\x81\x5B\x7D\x07\x83\x81\x7D\xEA\x82\xAB\x7D\xEC\x82\x85\x7D\x90\x82\x10\x71\x04\x80\x0E\x5F\x07\x7F\x8E\x6B\xB3\x82\x96\x80\xCD\x81\x79\x82\xF7\x82\x53\x7F\xF9\x82\x19\x7E\x1E\x83\xBB\x82\xAF\x81\x9E\x80\xD9\x81\xA0\x80\xDB\x81\xCA\x7F\xC2\x82\x94\x7E\x28\x83\x7F\x7D\x2A\x83\xFC\x7D\xBB\x81\xE4\x7C\x2E\x83\xAD\x7D\x30\x83\x6A\x71\x0F\x83\xD2\x6D\x35\x79\x35\x7C\xCB\x7C\x18\x83\x37\x83\xFB\x81\x39\x83\x1B\x83\xE0\x76\x1D\x83\xBA\x82\xFC\x82\x9E\x82\xFE\x82\x21\x80\xA1\x7D\x23\x80\x57\x7D\xA3\x80\x75\x74\x0C\x82\x57\x76\xE8\x82\x8B\x76\xAA\x82\x1D\x77\xAC\x82\xB0\x7F\x50\x83\xAF\x7D\xF8\x76\xBC\x79\xDE\x5E\xB1\x80\x37\x81\x4A\x7F\x06\x01\x4C\x7F\xC7\x7B\xD3\x82\x77\x82\x42\x80\x52\x82\x24\x82\x17\x7E\x3C\x83\xCC\x7E\x75\x80\xCE\x7E\x3F\x83\x20\x83\x8D\x81\x2E\x82\x5B\x82\x30\x82\x91\x81\x46\x83\x1C\x7F\x05\x83\x73\x7E\xB9\x81\x75\x7E\x4C\x83\xFE\x7D\x4E\x83\x00\x7E\x70\x83\x02\x7E\x52\x83\x9E\x7C\xBE\x75\x48\x79\x09\x7F\x9F\x61\xF4\x82\xEC\x7E\xF6\x82\x5B\x83\xD2\x7C\x5D\x83\x55\x82\xD5\x81\x1C\x7E\xD7\x81\xD8\x5C\x62\x83\x4E\x7E\x64\x83\xA3\x7D\x66\x83\x59\x7D\x48\x83\x26\x7E\x4A\x83\x28\x7E\x6C\x83\x90\x7C\xAB\x80\x92\x7C\x0D\x83\xDD\x7D\x31\x81\xE1\x75\xB0\x65\x06\x7C\x69\x7D\xE6\x5A\x9E\x83\x2D\x7F\xA0\x83\xAA\x7E\xFF\x81\xFA\x82\x3E\x83\x5F\x83\xBC\x82\x41\x83\xBE\x82\xDA\x81\xC0\x82\xD0\x80\x8C\x83\xCC\x7F\x8E\x83\xB9\x7E\xA8\x82\xA9\x7D\x2C\x83\xD9\x7D\xE5\x81\x04\x76\x3C\x82\x06\x76\x3E\x82\x08\x76\x11\x83\xFB\x74\x48\x72\x38\x81\xB8\x7F\x7B\x71\xBE\x83\x7C\x83\x99\x82\x53\x82\x80\x7C\xFB\x82\x69\x7E\xFD\x82\xF2\x7D\xFF\x82\xAD\x75\x8A\x83\x09\x82\xCD\x83\x26\x80\xCF\x83\xD9\x7E\x6A\x83\xF1\x76\xB3\x83\x15\x7D\x0B\x83\x9C\x7E\xB7\x83\x2E\x7E\x98\x83\x2D\x66\x78\x79\xFF\x79\xEE\x79\xB6\x7F\xDE\x7F\x69\x79\xE0\x7F\x6B\x79\x5B\x7C\xDC\x7F\x39\x68\x3E\x76\xE5\x7D\x8C\x80\xE1\x83\x19\x83\x5A\x83\xC2\x83\x41\x81\x47\x80\x6E\x6F\x57\x7F\x15\x6E\x4C\x80\x85\x75\x4E\x80\x6E\x81\xFA\x80\x70\x81\xFC\x80\x72\x81\xFE\x80\x74\x81\x00\x81\xFF\x7F\x6E\x83\xD4\x7F\x96\x83\xB2\x7F\xCE\x82\xAE\x79\x6B\x7C\xB4\x80\xB1\x79\x45\x71\x53\x0B\x0D\x80\xF3\x81\x0F\x80\xF5\x5A\x11\x80\xCA\x81\x97\x82\x58\x83\x51\x82\x15\x7E\x7F\x83\x9A\x7F\x81\x83\x11\x7F\x57\x82\x3D\x6F\x02\x82\x83\x83\xDE\x82\xBB\x74\x5A\x82\x8F\x81\xEC\x83\x5D\x82\x26\x83\xD7\x7E\xF0\x83\x1E\x7F\xB1\x83\x98\x7E\x1D\x84\x57\x80\x1F\x84\x01\x80\xA4\x5F\x15\x82\x23\x84\xF3\x68\xB3\x80\xFF\x83\x37\x80\xCE\x12\x9B\x76\x20\x7D\x3C\x80\x9F\x76\x4E\x78\xE0\x83\x6D\x61\xBF\x83\x15\x80\x97\x80\x33\x84\xD7\x82\x1C\x83\x86\x81\x68\x7E\x51\x7D\xE8\x83\x6B\x7E\xEA\x83\x86\x7C\xA2\x82\x88\x7C\x03\x83\xDE\x7C\x27\x80\xE0\x7C\xD5\x80\xE2\x7C\x92",
"\x83\x77\x7E\x94\x83\x79\x7E\xEE\x82\x7B\x7E\x4E\x84\xA1\x70\x50\x84\x8F\x80\xA2\x79\x29\x03\xA2\x71\x55\x84\x84\x6C\xE4\x66\x3E\x80\x51\x49\x9D\x83\xE2\x83\xB5\x82\xA1\x83\x66\x7E\x61\x84\xE6\x83\x63\x84\x60\x83\xE9\x83\xA9\x83\x90\x7E\xAB\x83\x50\x7E\xAD\x83\xA5\x7D\xA6\x82\xA7\x7D\xD1\x83\xBB\x7E\x70\x84\xBD\x7E\x72\x84\xBF\x7E\xF8\x83\x5C\x7E\xFA\x83\xE8\x5D\x78\x84\x72\x82\x38\x76\xD2\x71\xB3\x79\x17\x67\x5D\x81\x54\x68\xB8\x79\x02\x77\x44\x6D\xC2\x80\x83\x84\x1A\x83\x0D\x84\xA4\x75\x42\x81\xA4\x83\x3A\x84\xD3\x81\x15\x7F\x59\x82\x84\x82\xF8\x7E\x13\x60\x26\x81\x92\x84\x28\x81\x94\x84\x87\x7F\x8C\x61\xD5\x83\xDB\x7D\x9A\x84\x9E\x7E\x76\x84\xA0\x6E\xB5\x7F\x8F\x80\x9E\x84\xB5\x5E\x32\x77\xB7\x5E\x04\x84\xB7\x0D\xDF\x60\xCA\x79\xC9\x84\xB5\x80\xC7\x84\xFC\x5F\x0C\x68\xBF\x80\x78\x7C\x56\x83\x00\x6C\x88\x7A\xC4\x80\x16\x80\x51\x7F\x3A\x83\x18\x81\x36\x84\x55\x7F\x38\x84\x13\x7F\xF3\x7E\xB2\x84\x83\x82\xF7\x80\x85\x82\x6F\x81\x55\x76\x68\x83\x89\x76\xF2\x83\xD7\x7D\xD3\x83\x39\x71\x2E\x80\xD7\x83\x66\x62\x5B\x78\x6F\x78\xB3\x78\xF5\x73\x98\x7C\x28\x0D\x62\x78\x6F\x08\x64\x78\xE3\x80\x13\x76\x7E\x72\x68\x78\xD3\x84\x3B\x81\xD5\x84\xAA\x84\x0C\x84\xEE\x7E\x0E\x84\x27\x82\x48\x80\xDC\x82\xE0\x84\x3C\x84\x83\x75\x3E\x84\xBF\x82\x40\x84\xC1\x82\x42\x84\x60\x7F\x44\x84\x62\x7F\x90\x83\xFE\x7E\x01\x76\x89\x7F\xBD\x84\x8B\x7F\xEE\x84\xDC\x62\xC1\x81\x1C\x63\xC3\x81\x02\x79\x0A\x81\xF7\x68\xC5\x7C\xFA\x84\xD6\x79\xBF\x0D\xD0\x79\x10\x81\x79\x7C\x6F\x65\x00\x85\x7E\x83\x5F\x84\x5C\x83\x87\x84\xC5\x83\xE7\x83\x8A\x84\x65\x84\x8C\x84\x00\x83\x8E\x84\x92\x7E\xEE\x83\xD2\x80\xAF\x83\x96\x7E\x46\x84\x20\x7F\x09\x83\xDD\x7E\x3A\x82\xDF\x7E\x74\x84\xE1\x7E\xC1\x84\xCB\x71\x84\x78\xB0\x03\x7D\x04\xDD\x72\x89\x78\xFB\x76\xF2\x7C\x27\x01\x74\x7C\xA9\x65\x5C\x59\xD2\x48\xCF\x1E\xDF\x03\xD1\x1E\xBA\x26\x44\x7C\x47\x5A\xD8\x84\x5A\x79\xF9\x58\x3A\x81\xF5\x7C\xFF\x84\x0B\x84\x29\x85\x7A\x82\xD8\x82\xDC\x84\x9C\x7F\xDE\x84\x11\x84\x92\x6F\x8D\x7E\x61\x83\xA0\x82\x63\x83\x68\x84\xB1\x7C\x35\x85\x4C\x81\xB8\x84\x4E\x81\xBA\x84\x2A\x81\x3B\x85\x22\x7F\x98\x84\x24\x7F\x3F\x85\x26\x7F\xB9\x83\xCB\x61\x1D\x7D\x96\x78\x2E\x6E\xE2\x7F\x5E\x81\x50\x59\x32\x6E\x96\x82\x21\x0A\xD6\x84\xEB\x80\xC5\x80\x40\x81\xAD\x84\x0F\x84\x0C\x74\x62\x85\xFE\x70\x64\x85\x8B\x84\x66\x85\xAA\x83\x68\x85\xDC\x7C\x6A\x84\x0F\x7D\x10\x85\x85\x7F\x6E\x85\x50\x81\xF4\x83\x2A\x7E\xB5\x83\x2C\x7E\xBF\x84\x68\x73\x41\x85\x3A\x73\x54\x69\x57\x6E\x7F\x85\x27\x01\x81\x85\x14\x81\x83\x85\x9A\x82\x2C\x85\x5E\x83\x2E\x85\xC7\x83\x9F\x82\x42\x83\xCE\x80\xCB\x83\x4A\x81\x6A\x85\x93\x81\x19\x84\x95\x81\x1B\x84\x97\x81\x70\x85\x2C\x81\x4A\x84\xED\x84\xCA\x74\x21\x74\x32\x83\xCD\x74\xA0\x81\xF9\x58\xA2\x81\x26\x85\x02\x01\xA2\x85\x3E\x81\x15\x81\xD9\x84\x85\x84\x0F\x7F\x5F\x85\x1A\x81\x2A\x82\xD4\x81\xB0\x84\xCA\x85\xE1\x84\xDF\x82\x0A\x85\xCA\x83\x0C\x85\xCC\x83\x0E\x85\x83\x7F\x92\x85\xCE\x7F\x12\x85\x3F\x7F\x96\x84\x41\x7F\x72\x85\x43\x7F\x74\x85\x8E\x73\xF0\x84\x22\x61\xF2\x84\x81\x74\xF4\x84\xB7\x78\xC6\x81\x91\x7D\x99\x73\x80\x84\x7C\x4C\x9F\x61\xC2\x85\x63\x81\xC4\x85\xC6\x80\xAC\x7E\x62\x84\x7B\x7F\x64\x84\xD1\x7E\x66\x84\x55\x7D\x33\x85\x81\x7F\xD4\x85\xDE\x81\x37\x85\xD4\x80\x39\x85\x2A\x80\xDA\x85\x66\x7F\xB7\x85\x59\x80\x9A\x85\x04\x7F\x9C\x85\xF3\x84\xC3\x78\xED\x81\xA9\x62\xDD\x83\x0A\x7E\xF1\x81\x48\x82\x0E\x80\x1C\x82\xF6\x81\xE9\x85\x2B\x0D\x6D\x61\xEC\x85\x82\x81\xEE\x85\x84\x85\x02\x7D\xAB\x81\x7E\x82\x39\x84\x1F\x83\x59\x7F\x2D\x82\x22\x83\x2F\x82\x24\x83\x31\x82\xF9\x85\x33\x82\xFB\x85\xE0\x81\x94\x85\xE2\x81\x88\x7F\xAA\x80\x16\x85\xAC\x80\x18\x85\xAE\x80\x9C\x84\x3C\x62\x17\x83\x72\x7A\x1A\x82\x0E\x86\x4A\x82\x3D\x6A\x11\x86\x71\x6A\x14\x86\xA6\x81\xD6\x82\x5D\x85\x60\x84\xD9\x82\xF1\x85\xC4\x7F\xF3\x85\x7D\x7F\xF5\x85\xF4\x7D\xAD\x85\xB4\x81\xAF\x85\xB6\x81\x99\x5F\xE8\x84\xB3\x85\x0F\x82\xB5\x85\x99\x81\xF6\x83\x9B\x81\x2D\x86\x9D\x81\xD9\x83\xFD\x79\x07\x86\x43\x82\x08\x7E\x0A\x86\xF0\x81\xE7\x78\x71\x82\x60\x80\x7E\x84\x4B\x82\x37\x86\xB2\x5E\x39\x86\x22\x82\x16\x86\xA5\x85\x3E\x86\x88\x84\xF2\x85\x2F\x85\xF4\x85\x31\x85\xEB\x83\x21\x86\x8B\x83\x23\x86\x5F\x82\x25",
"\x86\x35\x82\xE9\x84\x56\x7E\x4D\x86\x11\x82\x01\x86\x84\x80\xDE\x85\x86\x80\x2F\x86\x6C\x7A\x33\x80\xF7\x78\x45\x82\x9C\x73\x47\x82\xE8\x78\x49\x82\xFB\x73\xB8\x0D\x3E\x7E\xA0\x85\x09\x01\x61\x86\xD5\x82\x63\x86\xE4\x83\x6F\x7D\x3F\x86\xCA\x80\x41\x86\xC6\x7F\x43\x86\x6D\x7E\x45\x86\xDC\x81\x6E\x86\xC3\x82\x70\x86\x61\x82\x72\x86\xDB\x7E\x74\x86\x39\x82\x4F\x86\x3B\x82\xB9\x85\xE8\x81\xBB\x85\xC9\x6A\xB8\x5B\xCB\x6A\xCD\x2E\x60\x7E\x88\x86\xF5\x82\x3B\x86\xDA\x84\xA9\x81\xC8\x85\x19\x86\xDD\x82\x7F\x82\xA5\x83\x38\x84\x1D\x7E\x87\x83\x1F\x86\x89\x83\x6C\x86\xED\x83\x95\x86\x47\x83\x6C\x85\x29\x83\x27\x86\xC7\x82\x48\x84\x76\x81\x76\x86\xDA\x80\x21\x84\xD6\x7F\x72\x83\x8C\x6B\xB8\x0D\xA8\x74\x7F\x7E\x9C\x83\xF5\x64\xA7\x86\x9F\x83\xA9\x86\xC6\x85\x45\x80\xC3\x83\x3D\x83\xA7\x85\x89\x84\xA9\x85\x65\x85\xAB\x85\xA1\x82\x44\x83\xA2\x80\x90\x85\x7D\x7D\x97\x86\xC5\x82\xBC\x86\x08\x83\xBE\x86\xC9\x82\xC0\x86\x2E\x81\x03\x86\x5B\x80\x05\x86\x81\x74\xD0\x82\xD4\x79\x1E\x6B\x80\x85\x28\x85\x5E\x84\x3C\x86\x2B\x85\x65\x86\x2D\x85\xD3\x86\x40\x83\xAA\x85\xC9\x83\x43\x83\x93\x86\x45\x83\xB8\x86\x8D\x83\xDC\x86\xE7\x82\x4B\x86\xE9\x82\x96\x85\x52\x81\xE2\x86\x54\x81\x78\x86\xB4\x5D\xF0\x82\xC6\x2E\xF2\x82\xCB\x86\xC0\x83\xCD\x86\xAC\x84\x18\x86\xD2\x81\xCD\x85\xE4\x6E\x80\x82\x03\x82\x82\x82\xCF\x85\xB4\x84\x39\x7F\xB6\x84\xE5\x82\xFB\x86\x06\x83\xDE\x86\x2B\x83\xFF\x86\xEB\x82\x98\x85\x02\x7F\xE4\x86\x30\x81\x7A\x86\x56\x79\xDB\x83\x76\x75\xE6\x7E\xF9\x58\x15\x83\xA6\x86\xEC\x86\x73\x7F\xEE\x86\xA2\x83\xA6\x85\xAF\x84\x1C\x86\x8A\x85\x30\x85\x8C\x85\x8D\x84\x8E\x85\xD5\x7E\xF9\x86\xCE\x83\x18\x87\x8F\x83\xE4\x5C\xBA\x81\x14\x85\x2A\x86\xCD\x60\x1F\x74\x9F\x86\x3D\x82\xA1\x86\xF0\x6A\x2E\x79\x4E\x06\x29\x87\x5B\x85\xED\x86\xAA\x86\xD0\x81\xAC\x86\x0D\x87\x1A\x86\xDF\x84\x4A\x80\x2B\x82\x1D\x86\x21\x83\xD0\x85\xF6\x86\xD2\x85\xAE\x85\x37\x87\xEF\x83\x39\x87\xD0\x83\x99\x86\xAC\x7F\xE0\x86\x0A\x83\x01\x87\x78\x81\x03\x87\x56\x81\xE6\x86\xBA\x78\xE7\x0D\x6E\x75\xD1\x0D\x07\x87\x2A\x87\xED\x80\x2A\x85\x2D\x87\xF0\x86\xD2\x86\x67\x86\xD4\x86\x8B\x85\xD6\x86\x67\x85\xD8\x86\xA3\x82\x47\x86\x0B\x82\xB1\x85\x0D\x82\xFD\x86\x6B\x83\x9B\x86\x65\x82\x60\x87\x13\x82\x51\x86\x4D\x84\x53\x86\x1B\x75\x24\x87\x7A\x7B\x71\x71\x99\x75\x81\x70\x86\x86\x06\x01\x08\x87\x5C\x84\x38\x83\x5C\x85\x4A\x87\x7B\x82\x4C\x87\x7D\x82\xAE\x86\x1B\x86\x85\x83\x52\x87\xB3\x86\x54\x87\xAC\x85\x56\x87\x46\x86\x58\x87\x36\x85\xBA\x86\x49\x83\x1A\x87\x4B\x83\x3D\x87\xBC\x81\x1E\x87\xBE\x81\x20\x87\x91\x76\x22\x87\xDF\x18\x6D\x7F\x9B\x83\x6F\x7F\x2D\x69\x8C\x87\x50\x7B\x5D\x84\x2B\x87\x90\x87\x5E\x85\xD0\x86\x82\x83\xB1\x84\x0F\x87\xB0\x86\x81\x82\x31\x7D\x13\x84\x51\x76\x15\x84\x53\x76\xE5\x84\x87\x76\xE7\x84\xEF\x76\x5C\x87\x37\x82\x7D\x87\x8D\x82\xA5\x87\x8F\x82\x62\x87\x7A\x81\xB6\x5B\x90\x7F\x09\x0F\x92\x7F\xED\x79\xFE\x84\xEB\x86\x48\x87\xB2\x87\xCE\x86\xEF\x80\x03\x85\xB9\x82\x2F\x87\x96\x87\x31\x87\x69\x86\x33\x87\x32\x85\x35\x87\x24\x80\x77\x87\xA5\x82\xC2\x87\x54\x7E\xC4\x87\x63\x82\xC6\x87\xAB\x82\xDC\x85\x03\x81\xCA\x87\x91\x82\x64\x87\x81\x78\x85\x87\x3C\x77\x87\x87\x56\x85\xF5\x5A\xDF\x83\xE8\x6C\x60\x86\x6A\x87\x16\x81\xB3\x87\x3D\x86\x92\x87\xDA\x82\x41\x70\x9E\x7F\x4A\x7E\xCB\x80\x4C\x7E\x6A\x86\x67\x84\x75\x87\x69\x84\xE1\x87\x04\x83\x5A\x87\xF1\x83\x7B\x87\xF3\x83\xE7\x87\x6D\x83\xE9\x87\xAD\x82\xC2\x86\x6A\x7F\x83\x87\x32\x80\x51\x78\x5B\x7A\x51\x84\xB7\x0D\xDF\x7F\xF1\x0B\x82\x6C\x8F\x80\xB6\x5F\x5F\x86\xE6\x5A\xAF\x87\xFD\x0C\xA4\x85\x8B\x86\x9A\x80\xF1\x86\x70\x87\xF3\x86\xD5\x86\xF5\x86\x9A\x87\xB6\x86\x41\x84\x86\x82\xB7\x84\xE3\x87\xAA\x7F\xE5\x87\x8B\x82\x0C\x88\xB4\x83\x2B\x86\xB6\x83\x81\x87\xCD\x82\x12\x88\x66\x6D\xFC\x83\xA7\x06\x16\x88\xB3\x0D\x28\x84\x25\x14\x6B\x76\x82\x86\x26\x87\x2D\x84\x1D\x88\x13\x86\xF7\x87\xC5\x85\x0B\x87\x99\x7D\x05\x85\x68\x81\x1A\x86\xB2\x86\xBD\x82\x88\x83\x3F\x84\x2A\x88\x0D\x85\x2C\x88\x17\x87\x9F\x87\xB0\x83\xA1\x87\xB2\x83\x32\x88\xF5\x83\x7F\x87\x67\x82\xA7\x87\x69\x82\xA9\x87\x9D\x79\xEB\x81\xC3\x79\xB1\x79\x9A\x76\x39\x80\x7D\x84\x73\x82\x09\x0F\x96\x79\xF5\x74\xD2\x87\x31\x84\x78\x82\x8F\x87\xD5\x87\x25",
"\x82\xB5\x87\x37\x84\xBA\x87\x4F\x87\x9C\x7D\x51\x87\xDB\x87\x42\x86\x02\x88\xF6\x85\xDF\x87\x65\x83\xDA\x86\xB7\x7E\xD6\x85\x28\x80\xFD\x85\xA8\x80\xA3\x87\x4D\x83\xC8\x87\xED\x82\x5D\x88\x43\x7D\x87\x80\x27\x77\x9F\x84\x67\x76\x59\x86\xC7\x78\x7C\x84\xA4\x84\x06\x84\x7F\x84\x08\x84\x4F\x71\x1E\x88\x46\x88\xEF\x85\x31\x7F\x4A\x88\x29\x82\x4C\x88\xA7\x83\xF8\x61\xC7\x7F\x54\x5B\xC9\x7F\xD9\x86\x06\x88\x6B\x84\x7F\x88\x6D\x84\x81\x88\xD6\x80\xFF\x85\xD2\x7F\x5B\x88\xCB\x82\x36\x88\x0E\x83\xED\x87\x93\x76\x8A\x88\x5C\x86\x15\x78\x09\x84\xFD\x76\xA3\x84\x7B\x85\xA5\x84\x01\x77\x26\x68\xA8\x84\x95\x88\xD3\x87\x6B\x87\x2C\x87\x86\x84\x6E\x87\xD9\x87\xC6\x83\x26\x88\x72\x87\x28\x88\xD7\x86\xF7\x86\xA1\x88\x9D\x87\x6B\x85\x2E\x88\x89\x82\x30\x88\xA9\x82\x59\x88\x97\x85\x34\x88\x99\x85\xAC\x88\xB8\x83\x5F\x88\xA4\x1D\xC3\x84\x8B\x88\x45\x5A\xB0\x88\x01\x72\xB5\x80\x0C\x72\xF3\x7A\x7C\x4C\x2E\x77\x73\x6D\x62\x7C\xB5\x79\x0E\x72\x44\x78\xB0\x2A\x75\x7C\x1D\x68\x45\x7D\x08\x12\xE7\x88\xC7\x67\x5F\x81\x42\x64\x4F\x78\xE6\x5A\x34\x7C\x82\x85\x55\x85\xEB\x88\x2E\x72\x36\x78\x60\x2D\xF4\x88\xC8\x67\x45\x7D\x48\x55\xF8\x88\xFC\x88\x76\x7C\xE8\x60\x09\x01\xCF\x87\x32\x72\xE2\x0D\x54\x59\x48\x0C\x16\x29\xB4\x80\x01\x66\xF4\x7B\x0C\x76\xF9\x58\x85\x79\xC1\x80\xE6\x5A\xC7\x6D\x37\x7E\x7E\x7B\x2A\x77\xFE\x4D\xD4\x87\x48\x88\xC7\x80\xC1\x88\xA8\x85\xC3\x88\x32\x87\x73\x87\x8D\x85\x04\x88\x69\x85\xC9\x88\xB0\x85\xB7\x81\xFC\x7E\xD8\x85\x64\x7F\xA8\x88\x2C\x80\xAA\x88\x0C\x83\xD3\x88\xAF\x6B\x1A\x85\xB5\x79\x1C\x85\xA2\x6E\xE1\x80\xC7\x68\xF9\x84\x65\x87\xFF\x00\xE7\x80\x59\x85\x21\x0A\x0F\x89\x0B\x86\xDC\x66\x8B\x2E\x97\x88\xAE\x84\x99\x88\x10\x87\x3B\x84\x12\x87\x3D\x84\x14\x87\x7A\x80\x16\x87\x27\x83\x55\x88\x38\x85\x57\x88\x47\x84\x25\x89\x82\x80\x27\x89\xF7\x83\x29\x89\x26\x6C\x2B\x89\xEF\x7C\x2D\x89\xBB\x0D\xA0\x6D\x7A\x72\xD0\x0A\x20\x85\x7A\x6E\x0E\x81\x7A\x78\x03\x01\x7C\x78\xFD\x7C\x03\x01\x37\x89\x8D\x88\x38\x7E\x3A\x89\x17\x86\x49\x88\x10\x84\xFE\x87\x58\x7F\x77\x88\x90\x86\x79\x88\x44\x86\x9B\x87\x94\x86\x53\x88\x45\x89\xCB\x88\xA7\x82\xCD\x88\xD2\x83\x1C\x87\x2D\x83\x85\x88\x2F\x83\xEB\x87\x31\x83\xD7\x7F\x42\x5F\x32\x81\xFC\x6D\x86\x78\xA2\x0C\x35\x81\xB6\x88\x99\x78\x50\x59\xA4\x05\xDC\x7A\x18\x79\x59\x59\x0D\x58\xEB\x4B\x6A\x07\x53\x85\x38\x7E\x39\x89\xC5\x2F\xF2\x87\x2A\x69\xFC\x7C\xE0\x85\x9F\x61\x5F\x89\x40\x76\x8D\x89\x05\x4C\x3B\x89\x86\x85\x89\x7E\x49\x80\x75\x88\x76\x80\xB3\x84\xE3\x84\xB5\x84\xFA\x7E\x21\x89\x3D\x7F\x23\x89\xD0\x7F\x4A\x89\xD8\x80\x4C\x89\x50\x86\x41\x87\xD8\x83\x43\x87\x6D\x78\x77\x85\x8A\x6F\x0C\x73\x79\x85\x0E\x73\x90\x88\x21\x7D\x7D\x85\x23\x75\x07\x7C\x6D\x61\x94\x89\x70\x76\x7F\x7B\x6D\x3D\x14\x89\x02\x85\x85\x85\x04\x85\x65\x89\x9B\x89\x8B\x7E\x4B\x80\x6B\x81\x4D\x80\x6D\x81\xBF\x87\x17\x84\xE6\x84\x79\x87\x69\x83\x0A\x88\xEA\x84\x74\x89\xD4\x83\x3F\x87\xE6\x81\xAA\x89\x8D\x7F\xAE\x88\x93\x82\x7D\x81\x60\x7E\xB9\x89\x46\x82\xBB\x89\x26\x4C\x49\x87\x6F\x88\x80\x83\x71\x88\xDD\x84\x73\x88\x88\x85\x75\x7D\x86\x83\x4E\x88\xB4\x86\x50\x88\xBE\x87\x85\x76\xC0\x87\xA8\x7F\x70\x89\x93\x84\x72\x89\x95\x84\x83\x88\x93\x83\x76\x89\x4F\x83\x78\x89\x51\x83\xD5\x89\xC4\x70\x4A\x72\xAA\x78\xA0\x7C\x92\x89\xF5\x64\xD9\x89\x7F\x86\xDB\x89\x13\x89\xBD\x88\xF9\x87\xEF\x86\xFB\x87\x8D\x86\xD6\x81\x00\x88\xD8\x81\xC5\x88\x74\x87\xC7\x88\x76\x87\x1F\x89\x48\x86\xB8\x81\x3B\x87\x91\x83\xF1\x89\x71\x84\xF3\x89\x95\x83\xF5\x89\xD9\x48\x50\x89\xF3\x81\x52\x89\xB7\x0D\xA3\x6E\x8F\x7D\xD9\x84\xE5\x80\xC8\x81\x44\x88\x93\x89\xE6\x66\x03\x4C\x62\x89\x64\x86\x05\x8A\x66\x86\x40\x86\x68\x86\x78\x88\xDD\x87\x6B\x86\xE9\x89\xA6\x7F\xEB\x89\x87\x82\xED\x89\xB9\x84\xEF\x89\xBB\x84\x1D\x74\xD1\x89\xD6\x83\xD3\x89\x30\x80\x38\x88\x47\x7A\x33\x80\xC4\x78\x6F\x82\x80\x86\x5B\x86\xA5\x71\x66\x80\x10\x86\x93\x88\x9A\x6D\xB2\x5E\xFE\x89\xF0\x7A\x25\x8A\xC5\x2F\x98\x89\xC0\x89\x87\x85\x66\x89\x12\x84\xC5\x89\x14\x84\xC7\x89\xEA\x89\xC9\x89\xC1\x87\xCB\x89\x4A\x86\xA4\x89\x80\x80\xA6\x89\x01\x81\x0E\x88\x6F\x83\x17\x8A\x97\x83\xF7\x89\x78\x78\xF1\x7B\xF8\x73\x38\x6A\x81\x89\x01\x5D\xE4\x7D\xE5\x7F\x59\x84\x23\x8A\x77\x66\xFB\x58\x01\x85\xFE",
"\x81\xD7\x87\xC4\x83\x6F\x87\x2A\x8A\x71\x87\x1A\x89\x0A\x8A\x1C\x89\x0C\x8A\x05\x88\x0E\x8A\x78\x87\xA2\x89\x7E\x80\x5A\x8A\xFF\x80\x5C\x8A\x1E\x84\x5E\x8A\x20\x84\x60\x8A\x22\x84\x3C\x8A\x7C\x7A\x3E\x8A\x07\x7E\x66\x6A\x7E\x86\x4A\x8A\x5A\x86\x04\x72\xD8\x88\x9E\x76\xC0\x0D\x4C\x82\x3F\x6A\xE6\x7F\x6C\x8A\x32\x74\x00\x8A\x84\x84\x15\x89\xF0\x85\x29\x8A\x8E\x86\x2B\x8A\x69\x89\x2D\x8A\x03\x88\x79\x8A\x1E\x89\x6E\x89\x43\x84\x08\x88\x45\x84\x48\x89\x3A\x85\x5E\x87\x3C\x85\x9D\x86\x3E\x85\x87\x88\x75\x84\x87\x8A\xDF\x80\x61\x88\x40\x5D\x98\x6A\x42\x5D\x8C\x8A\xF8\x7A\x38\x7E\xBA\x7D\x30\x77\xF4\x81\xB7\x88\x58\x63\x75\x82\x8A\x87\x5E\x89\x24\x8A\x96\x89\x40\x4E\x4D\x8A\xD8\x87\x3D\x89\xB9\x87\x11\x87\xBB\x87\x52\x8A\xBD\x87\x54\x8A\x30\x8A\x56\x8A\xEC\x89\x58\x8A\xC3\x87\xCD\x89\x73\x86\xAA\x8A\x71\x85\x15\x8A\x73\x84\xAE\x8A\x40\x85\xB0\x8A\xA1\x70\x94\x82\x03\x01\x85\x5D\x31\x86\x36\x89\xC1\x8A\xF9\x7A\x4C\x8A\x63\x89\x16\x89\xC6\x8A\xCC\x85\x9B\x88\x08\x8A\xA8\x83\xA0\x8A\x7A\x88\x1D\x89\x8F\x85\xA2\x88\x91\x85\xA6\x8A\x11\x85\x11\x8A\x13\x85\xE3\x81\x15\x85\x38\x8A\xBE\x84\x4E\x89\xC0\x84\xDA\x8A\xB0\x82\xA7\x74\x52\x77\xBF\x8A\x02\x01\x49\x8A\xB7\x8A\x11\x89\x26\x8A\x22\x88\x66\x81\xE6\x8A\x30\x87\xBC\x87\x83\x76\x2F\x8A\x24\x81\xA4\x8A\x0F\x85\xF1\x8A\x93\x85\x35\x8A\x6F\x85\xD4\x8A\xB6\x85\x83\x8A\x4B\x84\x03\x80\x7A\x89\x84\x63\x8F\x89\xFF\x00\xD1\x82\xEA\x86\x27\x01\x01\x8B\x68\x6A\xE2\x8A\x97\x89\xE4\x8A\x9B\x8A\x24\x88\x74\x8A\x19\x89\xDC\x87\x1B\x89\x34\x87\xED\x8A\x36\x87\x0D\x8B\xD5\x85\x0F\x8B\xD7\x85\xF3\x8A\xD9\x85\x13\x8A\x97\x84\xD6\x8A\x99\x84\xF9\x8A\xC1\x7E\xF3\x74\x3E\x6B\xD4\x84\xE0\x8A\x6D\x8A\x98\x8A\xAB\x84\xBE\x89\x0C\x87\x93\x87\x07\x85\xAF\x86\xE7\x8A\x94\x87\x4D\x88\xC8\x83\x4F\x88\x0B\x85\x51\x88\xD3\x85\x2D\x8B\xFA\x85\x46\x89\xFC\x85\xA8\x8A\xFE\x85\x33\x8B\xDB\x85\x35\x8B\x73\x85\xD8\x8A\x75\x85\xD5\x88\x51\x6C\x3D\x79\x14\x78\x3C\x6A\xE7\x7E\x3E\x64\xD8\x89\xE1\x8A\x61\x89\xE3\x8A\x27\x8A\xE0\x89\x60\x85\xE2\x89\x50\x8A\x63\x85\x09\x8B\xA4\x7F\x0B\x8B\xE3\x82\x4D\x8B\x24\x86\x4F\x8B\x26\x86\x11\x8B\x95\x85\xCF\x88\x00\x87\x15\x8B\xB8\x85\x02\x80\xBA\x85\x18\x8B\xDC\x5E\x34\x83\x2F\x79\xFF\x8A\x01\x01\x1F\x8B\x9C\x6A\x21\x8B\xC3\x8A\x23\x8B\x98\x88\xC1\x89\x06\x85\x50\x87\x9D\x89\xE2\x84\x6C\x81\xE4\x84\xCE\x8A\x32\x8A\xD0\x8A\xE4\x87\xD2\x8A\x9A\x86\x13\x8B\x4E\x86\xA8\x89\x9E\x86\x78\x8B\xA0\x86\x7A\x8B\x33\x83\x6D\x75\x29\x7F\xDA\x6E\x48\x8A\x61\x8B\x03\x8B\x63\x8B\x05\x8B\xA3\x83\x07\x8B\xDA\x87\x6A\x8B\x22\x81\x6C\x8B\x25\x83\x6E\x8B\x6F\x86\x70\x8B\x71\x86\x91\x8B\x5D\x87\x81\x8A\x49\x84\x76\x8B\x02\x86\x37\x8B\x04\x86\xFB\x8A\xE3\x7E\xEF\x87\xAE\x7A\xE1\x72\x88\x87\x4B\x7F\x60\x8B\x3D\x8B\x4B\x8A\x22\x8B\x64\x8B\x71\x8A\xD1\x86\x17\x89\xF2\x86\xE5\x89\x48\x8B\xE7\x89\x4A\x8B\xA8\x8B\x22\x86\xAA\x8B\x96\x86\xAC\x8B\x98\x86\xAE\x8B\xC5\x87\x93\x8B\x75\x86\xB2\x8B\x77\x86\x57\x8B\x45\x7F\x59\x8B\x3B\x73\xC0\x0D\xE7\x79\x45\x37\xAD\x87\x00\x6C\x80\x8B\x2C\x6F\x82\x8B\x80\x7B\x47\x88\x40\x8B\x64\x89\x4F\x8A\xC2\x89\x9F\x7F\xF4\x75\x75\x8A\x28\x8B\x77\x8A\x2A\x8B\xA2\x8A\xEE\x8A\x7B\x8A\xE2\x87\x8F\x8B\x2F\x88\xD0\x8B\xE6\x87\xD2\x8B\x9C\x86\x95\x8B\xAD\x8A\xB4\x8B\xE5\x86\xB6\x8B\x9D\x85\x71\x7C\x91\x7F\x41\x72\xFC\x89\x2D\x69\xDF\x8B\xC7\x78\xC2\x8A\xE2\x8B\xC4\x8A\x72\x8A\xC4\x8B\x25\x88\xC6\x8B\xF4\x86\x49\x8B\xD1\x85\x4B\x8B\x57\x87\xCC\x8B\xB9\x86\x33\x8A\x6D\x85\x72\x8B\x28\x86\xBC\x84\xF7\x8A\x17\x85\x3A\x8A\x2E\x86\x62\x8A\x61\x79\xB8\x8B\x24\x79\x59\x79\xB7\x7F\x22\x8A\xFD\x89\x9F\x8B\x29\x03\x04\x8B\x34\x84\xBF\x7F\x65\x8B\xC9\x85\x4E\x87\xE3\x89\xA0\x7F\x97\x87\xE6\x89\x99\x87\xC6\x88\x6C\x89\xF8\x86\x11\x8C\xFA\x86\xCE\x8B\xDD\x86\x15\x8C\xBD\x86\xB0\x8B\xBF\x86\xD4\x8B\xC1\x86\x85\x8A\xC3\x86\x7B\x81\x20\x69\x3A\x88\xEC\x0B\x3C\x88\xB2\x0D\x18\x88\x77\x14\x66\x88\x5D\x8B\xF9\x58\x86\x6C\x2F\x84\x3C\x8B\x97\x8A\xBF\x8B\x83\x8B\xC1\x8B\xBF\x89\xC5\x8A\x86\x8B\x4B\x88\x46\x8B\x9C\x88\xCD\x5A\xAE\x7C\x31\x8C\x0F\x8C\x9C\x87\x34\x8C\x38\x87\x36\x8C\xFC\x86\x7F\x8A\x1C\x84\x3A\x8C\xE1\x86\x3C\x8C\xE3\x86\xFA\x8B\x21\x87\x1C\x8C\xFB\x83\x25\x84\x44\x8C\xE7\x6C\x27\x02\x7E\x79\x1A",
"\x88\x90\x8A\x4B\x71\xC0\x0D\x2E\x84\x6A\x88\x1E\x8B\x24\x8C\xB0\x57\x06\x8C\x84\x8B\x3C\x89\x54\x8C\x9A\x88\x56\x8C\xE9\x8A\x9D\x88\x91\x86\xD3\x7E\x7B\x88\xAC\x83\x7D\x88\xA4\x80\x6C\x84\xA6\x80\xA6\x88\x6F\x84\x53\x8B\x00\x86\x65\x8C\x02\x87\xD6\x8B\x79\x86\x69\x8C\x9D\x84\xDA\x88\x05\x84\x09\x80\x40\x7C\x53\x84\x65\x88\xB3\x89\x56\x84\xC0\x0D\x69\x88\x4E\x82\x4D\x8C\x94\x80\x62\x8B\xC0\x8B\xA2\x8B\x2E\x87\xA4\x8B\xC2\x88\x0B\x8C\x27\x88\x0D\x8C\x55\x87\x5B\x8C\x6D\x89\x31\x8A\x2D\x88\xF2\x8B\xCC\x88\xF4\x8B\x31\x88\xF6\x8B\x7E\x87\x8D\x8C\x61\x87\x8F\x8C\x5F\x76\x91\x8C\xB4\x5C\xC5\x84\x43\x8A\x37\x81\x38\x89\x8E\x88\x64\x80\x67\x8A\x9A\x8C\xA8\x71\x22\x8C\x02\x8C\x77\x8C\x03\x72\x99\x8A\xE4\x8B\xE5\x8A\x7C\x8C\x3E\x89\xB7\x87\x40\x89\x09\x85\x42\x89\xF9\x80\x44\x89\xA5\x8A\x5F\x8C\x19\x87\x38\x8C\xDF\x86\x63\x8C\x5F\x87\xB4\x8C\x80\x87\x1A\x8C\x52\x86\xAC\x89\x41\x8C\x93\x8C\x35\x80\x67\x79\xE6\x7D\xD3\x71\xB5\x88\x41\x88\x13\x83\x91\x80\xB9\x79\xBD\x8C\xC4\x8C\xBE\x8B\x05\x8C\xBC\x89\x02\x8A\xDE\x89\x35\x84\x29\x8C\xAD\x86\x43\x8B\x95\x87\xA5\x8C\x2E\x8C\xC7\x8B\x30\x8C\x0B\x8A\x32\x8C\xC8\x88\x5D\x8C\x59\x87\xD3\x8C\x3A\x87\x2C\x5D\xB4\x85\xB2\x8C\xC7\x87\xD1\x88\x1F\x87\x67\x8C\xA8\x87\xB8\x8C\x84\x2B\xD7\x88\xB1\x88\x41\x68\xDF\x8C\xCE\x84\x59\x7C\xC8\x84\xB8\x80\x77\x68\xBA\x80\xC9\x79\xE1\x88\xBD\x80\xE3\x88\xB1\x72\x72\x7C\x27\x01\x1C\x7C\xCD\x87\xF9\x58\xD7\x61\x17\x72\x2D\x69\x27\x7C\x54\x59\xAC\x4F\xFD\x7B\xFD\x88\xF9\x88\x50\x59\x16\x72\x06\x01\xE3\x65\x4A\x78\xD2\x84\xBB\x79\x3B\x8B\xA9\x46\x90\x77\x07\x8C\xC3\x8B\xA4\x8C\x18\x89\xA6\x8C\xC4\x88\xA8\x8C\x29\x88\xCA\x8B\x6D\x86\xFC\x8C\x9E\x87\x13\x8C\xBB\x86\xD5\x8C\x1B\x87\x74\x8B\x1D\x87\x04\x8D\xA6\x87\x06\x8D\x33\x70\x19\x8A\xBA\x8A\x1B\x8A\xB3\x0D\x54\x89\xAC\x72\xA2\x6D\x9C\x7C\x21\x85\x46\x79\x2F\x61\xFB\x89\x6E\x78\x6D\x61\x3E\x6A\x25\x87\x1B\x70\x51\x8C\x41\x8B\xFC\x87\x72\x7D\x68\x8B\x89\x85\xA6\x8B\xE1\x82\x39\x8D\xB7\x86\x3B\x8D\xCA\x88\xAE\x8C\x71\x89\xB0\x8C\xCE\x88\x02\x8D\xE8\x87\x55\x8B\xDD\x85\xB6\x8C\x21\x65\x47\x8D\xCB\x79\xE3\x85\x8C\x7D\x99\x7C\xA6\x5A\x0B\x81\x7D\x72\x22\x85\x59\x89\xC9\x7C\xB3\x72\xC0\x85\x01\x01\x55\x8D\x86\x87\xD0\x71\x31\x8D\xB6\x87\x0E\x87\x44\x8B\x08\x8B\xCA\x8A\x0A\x8B\xCC\x8A\x0C\x8B\xAC\x8C\x54\x88\x3D\x8D\xA0\x87\x3F\x8D\xA2\x87\xF5\x8A\x3E\x87\x57\x61\x86\x88\x45\x8D\x88\x88\xD8\x8B\x43\x85\x46\x6D\x7E\x89\xFF\x6D\xEE\x7C\x2B\x84\x8B\x78\x06\x6E\xAF\x89\xD1\x87\x2F\x8D\x05\x77\x58\x8D\xE5\x8B\x9A\x89\x87\x8B\x9C\x89\xCE\x85\x41\x89\x9F\x89\x15\x87\xA1\x89\x49\x86\xD1\x8A\x61\x8C\x01\x8D\xD7\x8C\xAB\x8A\xF8\x8B\xF2\x73\xD9\x8A\xDD\x8C\x28\x6C\x1C\x7D\xAF\x89\x50\x69\xB2\x89\xC0\x8C\x80\x5B\xB5\x89\x9B\x78\xDD\x8B\x21\x0A\x7C\x8D\xF0\x87\x7E\x8D\x7A\x8C\x99\x89\x9D\x7F\xE7\x8B\xFF\x87\x8F\x86\xCC\x80\x29\x8B\xDE\x87\x2B\x8B\xE0\x87\xF0\x8B\x07\x88\xFE\x8C\x5B\x87\x66\x8D\x73\x89\x41\x8D\x75\x89\x43\x8D\xC9\x87\x6C\x8D\xCB\x87\x92\x61\xD7\x89\x7E\x8B\x00\x00\xC0\x8D\xB9\x8B\x10\x73\x7F\x8D\x72\x88\xC8\x8A\x74\x88\xC3\x89\x76\x88\x5E\x8D\x23\x83\x60\x8D\x2B\x88\x88\x8D\x6F\x89\x64\x8D\xEE\x89\xD2\x8D\xF0\x89\x8E\x8D\xA4\x87\xD6\x8D\x91\x8D\xDB\x8C\x82\x87\xB4\x8D\x79\x6C\xB5\x7A\x11\x86\x70\x67\x6A\x10\xBD\x49\x9A\x8D\xEF\x81\xC8\x7C\xC0\x0D\xBF\x85\x2E\x8D\x09\x01\xDE\x8D\x1F\x8C\xAD\x6F\xC3\x8D\x4E\x8A\xA3\x8D\x55\x8C\xF3\x8C\x47\x8B\x0C\x8C\xC8\x8B\x0E\x8C\xE9\x8D\x52\x88\xEB\x8D\xD2\x8C\x8A\x8D\x56\x88\x8C\x8D\x58\x88\x68\x8D\x0D\x88\x6A\x8D\xEA\x87\xD8\x8D\x37\x5D\x6E\x8D\xCD\x84\x49\x8D\xB2\x0D\x1D\x8A\xB3\x6B\x71\x62\xE7\x85\xA7\x6E\x46\x8A\xB3\x0D\x71\x6A\x05\x8E\x58\x79\x07\x8E\xA1\x8D\xC9\x8C\xE6\x8B\xA4\x8D\xE5\x8D\x89\x8B\x13\x87\xA8\x8D\x43\x89\xAA\x8D\x10\x8A\x00\x8D\x4C\x86\x19\x8E\x33\x88\x18\x8C\x2C\x86\xF5\x8D\x37\x88\xF7\x8D\x35\x7A\x55\x86\xC6\x73\xEE\x81\x58\x86\x95\x89\xB9\x7D\x3A\x7E\x34\x86\x83\x86\xBE\x7D\x28\x8E\x3A\x59\xB2\x5E\x2B\x8E\xE5\x7E\x57\x8D\xA2\x8C\xC0\x88\x33\x8D\xC5\x8B\xF6\x8C\x0E\x8E\xF8\x8C\x78\x8A\xFA\x8C\x0D\x8A\x62\x8D\x20\x89\xAB\x8D\x90\x8B\xAD\x8D\x3A\x8E\xAF\x8D\xD5\x8A\xF3\x8D\x77\x89\x1D\x8E\x79\x89\xC4\x86\x19\x8B\x64\x8A\xD5\x78\xF9\x73\xE5\x8C\xD8\x78\x69",
"\x8A\x58\x84\xF5\x87\xE6\x5A\x50\x8E\x48\x7F\x52\x8E\x27\x8C\x85\x81\x54\x8E\xCA\x8C\xC7\x8A\x3F\x89\xC9\x8A\x9E\x89\x8B\x8B\xA0\x89\x3B\x7F\x7D\x8A\xFD\x80\x61\x8E\xFE\x86\xD4\x8D\xD0\x89\x90\x8D\x66\x8E\x92\x8D\xAF\x8A\x41\x8E\x3D\x8A\xB2\x8A\x06\x7E\x56\x86\x8B\x8A\xFF\x8D\xBA\x89\x0C\x86\x81\x86\x4A\x8E\x42\x88\xE7\x0D\x93\x8A\xFE\x73\xB9\x80\x2D\x69\x74\x8E\x12\x76\xE1\x8D\xE1\x89\xE3\x8D\x2C\x8C\xE9\x8B\x27\x8B\x2C\x8A\xCA\x8D\x2E\x8A\x86\x8D\x6D\x8B\x13\x8E\x0E\x8B\xD0\x8D\x09\x88\x84\x8E\x7C\x87\x3B\x8E\x5A\x88\xD9\x8C\x5C\x88\x8A\x8E\xB3\x8D\x99\x8B\x94\x6A\x54\x74\xB4\x8A\x51\x63\xB6\x8A\x20\x8B\xB8\x8A\x49\x8E\xFE\x8D\x4B\x8E\x74\x82\x5F\x74\xDC\x8D\x9D\x8E\x8F\x80\x9F\x8E\x66\x8B\xA1\x8E\x5C\x8D\xE4\x89\x57\x8E\xA7\x8C\x0F\x8E\xA9\x8C\x11\x8E\x4C\x8B\xAA\x8E\x2E\x8B\xAC\x8E\xA7\x8A\x17\x8E\x49\x89\x8B\x8C\xA9\x88\xB2\x8E\xAB\x88\x3F\x8E\xAD\x88\xFC\x8B\x8F\x7F\xA3\x86\x07\x79\xBE\x8D\x9F\x8D\x5C\x8B\xAD\x74\x77\x8E\x54\x82\x55\x8E\x0A\x8C\xCB\x8E\x36\x8D\xCD\x8E\x38\x8D\xA8\x8E\xA9\x8B\xD1\x8E\x4E\x8B\x15\x8E\x47\x89\xD5\x8E\xA9\x8A\x63\x8E\x14\x8B\x1B\x8E\x0F\x88\x3E\x8C\x11\x88\x8C\x8E\xA6\x6F\xFD\x8A\x1C\x78\xB7\x89\x9F\x61\xC4\x8E\x71\x8C\xC6\x7C\xEF\x8C\x28\x8C\xC2\x8B\x80\x8D\x2B\x8C\xC9\x8E\x2D\x8C\x68\x89\xC9\x8D\xEC\x8B\xCB\x8D\xEE\x8B\x2C\x8B\xEF\x8E\x6F\x8B\xF1\x8E\x50\x8B\xF3\x8E\x52\x8B\xF1\x8D\x84\x88\x65\x8E\xF4\x89\x67\x8E\xF6\x89\xDD\x8E\xE7\x86\x1A\x8B\x1C\x8B\x7D\x70\xBF\x8D\x30\x8D\x08\x8E\x53\x8C\x30\x8E\x0B\x8E\x88\x8B\xA6\x8D\xCE\x8C\x35\x8E\xD0\x8C\x37\x8E\x22\x89\x31\x8B\x24\x89\xD7\x8E\x26\x89\xD9\x8E\x28\x89\xDB\x8E\x14\x6B\x05\x87\xC6\x36\xF2\x82\x01\x8F\x0B\x8D\xE4\x8E\x6C\x87\xBF\x88\x28\x8A\x25\x8B\x9D\x8A\xEA\x8B\xA5\x8E\x0D\x8F\xA7\x8E\x8C\x8B\xD1\x8C\xAB\x8E\x13\x8F\x71\x8B\xEF\x8D\x36\x8A\xE4\x81\x3D\x8E\x35\x88\x35\x8F\xF9\x83\x08\x8D\x23\x87\x5B\x8B\xC0\x79\x5D\x86\x26\x79\x5F\x8B\xC3\x8E\x23\x8F\x2E\x8E\x24\x8B\x73\x8A\x41\x8F\xA4\x8E\x9F\x8A\xA6\x8E\xA1\x8A\x5B\x8E\x7A\x8A\x5D\x8E\x0F\x8A\x2E\x8F\x39\x8E\x85\x8E\xB0\x8E\xD0\x88\x4E\x8F\xD2\x88\x50\x8F\x9B\x84\x52\x8F\xAA\x87\x45\x87\x80\x5E\x59\x8F\xA0\x8D\x53\x8E\x3F\x8F\x5D\x8F\x07\x8A\xC8\x8D\x01\x88\xEB\x8A\x6B\x89\xAA\x8C\x33\x8C\x11\x8F\xAB\x8B\x49\x8F\xAD\x8B\xAE\x8E\x0B\x88\x6A\x8F\x75\x8B\xF7\x8E\x5F\x8A\x1B\x8F\x71\x83\x40\x8C\x6C\x7F\x9B\x8B\xB3\x6B\x9E\x8D\x04\x8E\x5A\x8F\x76\x8F\xF1\x8C\x4D\x87\x94\x87\xE4\x8D\xE8\x8B\xA9\x75\x7A\x8F\x09\x8A\x37\x8D\x5A\x8C\xCF\x8E\x10\x8C\x80\x8F\xCD\x8B\x82\x8F\xCF\x8B\x84\x8F\xCE\x89\x86\x8E\xEC\x84\xB3\x8B\x6E\x8F\xFA\x8A\xFB\x8E\x9B\x79\x54\x8F\x75\x83\x98\x75\x77\x83\x03\x01\x79\x83\xDF\x8A\xE2\x8E\x55\x8F\x63\x74\x5B\x8F\x85\x8B\x26\x8F\x7D\x8C\x0C\x8E\x57\x8C\xD1\x5A\x59\x8C\xF9\x8C\x7E\x8F\xFB\x8C\xA0\x8F\x12\x8C\xED\x8D\x34\x8A\x4B\x8F\x12\x8B\xF5\x8E\x94\x8B\x33\x8F\x4D\x89\xA9\x8F\x9B\x85\x1D\x8F\x32\x89\xDB\x8B\x60\x7E\x3A\x8F\xBB\x8C\x25\x75\xE5\x8E\xE5\x83\x40\x8F\x79\x8F\x9E\x8A\x0C\x8F\x9C\x8F\xBF\x8F\x9E\x8F\x5C\x8C\xC2\x8F\x35\x8C\xA2\x8F\x37\x8C\xC6\x8F\x73\x8B\x86\x8F\x42\x8D\x6C\x8F\x05\x8D\xCC\x8F\xB5\x8B\xAB\x8F\xDB\x8A\xFE\x8B\xCE\x87\x00\x8C\x53\x8D\x00\x8F\x92\x8F\xD5\x8F\x8C\x86\x9C\x8A\xD8\x8F\x42\x8F\x60\x8F\x44\x8F\x62\x8F\xC0\x8F\x5C\x8E\xDF\x8F\x5E\x8C\xE1\x8F\x60\x8C\x2F\x8F\xA5\x89\x31\x8F\x4B\x89\xCA\x8F\xA9\x89\x97\x8B\x42\x87\xB6\x8E\x9A\x60\x0A\x8D\xD3\x8F\x41\x78\x67\x7C\x94\x8A\x6B\x8A\xF5\x64\xD2\x8F\x94\x8C\x84\x72\xB7\x8F\x7B\x8C\xB9\x8F\xCB\x8C\x81\x8D\x7D\x8E\x8A\x8B\xC6\x89\x46\x8F\x2D\x8F\xA3\x89\x01\x90\x5B\x8A\x03\x90\xA7\x89\x05\x90\x96\x8B\x4C\x84\x40\x8E\x09\x90\xC9\x61\x42\x8C\x7A\x79\x79\x84\x39\x76\xE5\x0B\x3B\x76\x99\x8C\x56\x8F\x09\x0F\x4B\x8C\x75\x8C\x91\x8F\x75\x8F\xF3\x8F\x23\x88\x78\x8F\xA6\x83\x7F\x8C\x58\x8C\x9E\x88\x33\x67\x83\x8C\x8F\x84\x85\x8C\x67\x83\xC4\x8F\x14\x8C\xE3\x8F\x16\x8C\x37\x8A\x88\x8E\x1A\x8F\xB4\x8E\x58\x8B\x70\x8F\x60\x88\x06\x80\x52\x78\x2C\x90\x7C\x79\xC0\x5C\x6F\x8C\x48\x8C\xE5\x6C\x73\x8C\xC3\x8C\x00\x6C\x12\x90\xE0\x8C\xE8\x75\x93\x8F\x06\x8F\xE2\x8D\x7C\x8E\x97\x8F\xC7\x8D\xD9\x8F\x7B\x8F\x61\x8F\xEC\x8A\x0F\x8F\xCD\x8D\x65\x8F\x7C\x8A\x5F\x8E\xF3\x8B\xA4\x8F\xD3\x8A\xC8\x8F\xD3\x8B\x88",
"\x8F\x84\x8A\x8A\x8F\x61\x8A\xCE\x8F\xEB\x57\xBA\x8C\x13\x90\x8B\x80\x52\x84\xB5\x5E\x54\x84\x30\x90\x67\x88\x95\x79\x57\x90\x22\x8F\x36\x90\x3D\x8F\xC7\x85\x94\x8F\x42\x8B\x28\x8F\xB8\x87\x45\x8B\xBB\x8F\x3B\x90\xBD\x8F\x3D\x90\x45\x46\x01\x83\xC5\x66\xCE\x8D\xA3\x88\x2F\x8B\x80\x88\x51\x8B\x82\x88\x17\x8F\xF2\x89\x19\x8F\x16\x8A\x72\x90\x86\x8A\xEB\x8F\x6C\x71\x0D\x8D\x40\x8A\x63\x80\xF9\x09\xCE\x76\x6F\x8D\x2C\x84\xE7\x0D\x68\x80\x95\x8A\x11\x90\xF2\x8F\x82\x90\xCF\x86\x5D\x90\xA0\x8E\x5F\x90\xA2\x8E\x99\x8F\x62\x90\x9B\x8F\xEB\x8E\x9D\x8F\xED\x8E\xCB\x8B\xFD\x8F\xFD\x8C\xFF\x8F\xD4\x8C\x45\x90\x39\x8C\x22\x90\x5D\x8A\x70\x90\x16\x8B\x79\x8B\x69\x8E\x05\x80\x31\x7E\x62\x88\xBB\x8E\x11\x7E\xA2\x84\x3E\x6D\x54\x90\xBD\x5C\xA6\x84\xB9\x88\xA2\x79\x80\x90\xE3\x8E\x43\x76\xBE\x88\x83\x90\xAC\x90\xC7\x8E\xAE\x90\x09\x8F\xA3\x8E\x35\x8D\x76\x8A\xDB\x8F\x5A\x8E\xFB\x8F\x64\x8F\xB7\x90\x3C\x8D\x43\x90\x3E\x8D\xBB\x90\xD6\x8C\xBD\x90\x82\x8A\xBF\x90\x77\x8B\x26\x90\xDC\x8E\x9C\x90\xB7\x8B\xAD\x8F\x12\x83\x07\x6F\x76\x90\xCC\x79\x29\x77\xDD\x88\xD7\x79\xDF\x88\xBB\x80\x1C\x63\x14\x7C\x25\x8D\xF9\x89\x57\x6C\xFA\x8D\x50\x78\x4E\x90\x15\x88\x50\x90\xF9\x90\xC6\x70\xBC\x0D\xF4\x87\x86\x89\x18\x72\xD9\x7F\x64\x79\x6C\x7C\x0C\x90\xE1\x8C\x45\x77\x09\x0F\x0C\x89\x5D\x89\x02\x01\xA2\x67\xAE\x8F\x73\x76\x5C\x90\x52\x8C\x08\x8C\xE7\x8E\x26\x8B\xD9\x90\xEB\x8B\xDB\x90\xED\x8B\x63\x8F\xA3\x8A\xDF\x90\x63\x8D\x82\x8E\x1A\x84\x6C\x90\x92\x8B\x6E\x90\xF7\x8B\x24\x90\xF9\x8B\xE9\x8F\x98\x6D\x1F\x8E\x91\x73\x08\x81\x1D\x85\xAA\x72\xE2\x80\xD1\x90\xFB\x84\xE6\x80\x52\x8D\x2A\x7F\x6D\x61\x11\x91\xEE\x90\x22\x71\x24\x8F\x16\x91\x7A\x8E\x88\x90\x86\x90\xCD\x8C\x4F\x76\x59\x8E\x1C\x91\xDD\x90\x1E\x91\x8D\x8B\xAD\x8C\x21\x91\xB2\x85\x23\x91\xAF\x8B\xE5\x90\xB1\x8B\xE7\x90\xA8\x8F\x07\x90\x5B\x61\x2B\x91\x88\x8A\x2E\x91\x60\x78\xC3\x7C\x55\x89\xD0\x6D\x66\x78\x30\x86\x23\x85\x0F\x81\x7B\x78\xF2\x82\x37\x91\xDC\x83\xA1\x73\xAA\x90\xD6\x87\x15\x91\x32\x8D\x3C\x91\x83\x8D\x7E\x8E\x1C\x90\x80\x8E\x7C\x80\x47\x91\x7A\x87\x49\x91\xD1\x8B\x25\x91\xB3\x8C\x4D\x91\xD5\x8B\x4A\x90\xD7\x8B\x4C\x90\x65\x7D\xB5\x57\xEB\x7C\x7F\x89\x96\x61\x6E\x8E\xF1\x87\x54\x69\x58\x85\xBD\x83\x36\x91\xA9\x90\xD2\x90\xAB\x90\x63\x91\x07\x8F\x96\x8F\xAF\x90\x6A\x81\x67\x91\x53\x8A\x1D\x90\x81\x8E\x6A\x90\xAF\x8C\x6D\x91\xF5\x8B\x6F\x91\x03\x8D\xE7\x8F\x44\x8D\x29\x91\x68\x8C\x74\x90\x17\x82\xB6\x8D\x0B\x73\xB8\x8D\x1F\x7D\x7C\x90\xDA\x66\xED\x88\x9E\x73\x60\x7E\x5E\x91\x56\x8D\x2D\x8E\x14\x91\x59\x8D\x06\x8A\x3A\x90\x9A\x8F\xEA\x8A\x64\x90\x7D\x8F\xDD\x8F\xAB\x8C\x45\x91\x89\x8D\xE1\x90\x8B\x8D\xE3\x90\x40\x8D\xE5\x8F\xD5\x8D\x93\x91\xD7\x8D\x73\x91\x90\x8C\x97\x91\xD6\x89\xE5\x88\x44\x85\xDC\x8D\xA2\x91\x7D\x8D\xE0\x8D\x3A\x91\x64\x91\x17\x90\x7B\x8E\xCC\x8C\x1A\x90\x34\x8E\x7F\x8E\xA9\x8D\x8C\x91\x38\x8E\x3C\x87\x96\x90\x14\x8A\x98\x90\xD7\x8A\xB9\x91\xB7\x8C\xBB\x91\xF8\x89\xBD\x85\xF5\x5A\x02\x8E\x90\x8F\x06\x01\xC0\x91\xC1\x8D\xC2\x91\x15\x90\xC4\x8D\x61\x85\xD7\x90\xB0\x90\xF7\x8F\xDA\x8F\xB3\x90\xDC\x8F\xB5\x90\x3A\x8D\x1F\x91\x5E\x8E\xCD\x91\x12\x8A\xCF\x91\x34\x8B\xD1\x91\x36\x8B\x95\x91\xC0\x81\x01\x8C\x12\x86\x70\x78\xB1\x8A\x2E\x89\x78\x72\xE6\x85\x98\x73\x27\x8E\x6A\x8A\x72\x8E\x80\x91\x81\x90\x82\x91\x62\x91\xA6\x91\xF5\x8F\xA8\x91\xB1\x90\xAA\x91\xF9\x8F\x65\x90\x1D\x91\xEF\x8B\x68\x90\xF1\x8B\x6B\x91\xCC\x89\x8F\x91\xB1\x8C\x91\x91\x69\x8D\xF0\x91\x56\x8B\xD3\x91\x63\x87\xD5\x91\xE0\x78\x43\x8E\x27\x74\xB6\x7D\x46\x8E\x93\x8E\x8E\x8A\xCA\x90\x91\x8A\x09\x0F\xF7\x81\x7A\x8D\x00\x00\xDC\x91\xDF\x8D\xAB\x6D\xC3\x91\x85\x91\xF3\x8C\x60\x90\x67\x89\xE7\x8D\x20\x86\xAD\x91\x7F\x8F\xAF\x91\xEC\x8D\x0E\x92\x59\x8A\x20\x90\x80\x8A\x4B\x91\x3B\x8C\x71\x91\x3D\x8C\x9A\x90\x3F\x8C\xCC\x87\x31\x86\x19\x82\x6D\x8E\x96\x8E\xE6\x8C\x09\x0F\x1E\x82\x4C\x8C\xAE\x0D\x81\x91\x03\x8A\x6D\x87\x77\x8F\x09\x8C\x18\x91\xE9\x8E\xDA\x90\xE6\x91\xDC\x90\x30\x92\xC1\x8F\x32\x92\x14\x8E\xB1\x91\x16\x8E\xB3\x91\x8D\x8D\x29\x86\xF2\x8D\xB7\x91\xF4\x8D\x4F\x91\xD4\x89\x18\x92\xF3\x78\x1A\x92\x63\x76\x44\x82\x92\x8E\xDA\x89\x94\x8E\x42\x8A\x77\x90\x7D\x90\xF5\x5A\x99\x8E\x1F\x82\xDB\x91\x48\x92\x04",
"\x8F\x78\x8E\x4B\x92\x17\x91\x5E\x8F\x19\x91\x43\x8F\x1B\x91\x0E\x8F\x0A\x92\x10\x8F\x54\x92\x48\x8F\x56\x92\xF2\x8E\x58\x92\x18\x8E\x12\x92\x1A\x8E\x14\x92\x6B\x8D\x16\x92\xD9\x8D\x11\x63\xB8\x8E\x33\x7E\xB5\x8A\x65\x92\xFF\x89\x67\x92\x8F\x8A\x3B\x8F\xCB\x90\x84\x86\xBE\x8A\xC9\x86\x2D\x69\x26\x92\x06\x8E\x39\x91\xDF\x91\x09\x8E\xC5\x8D\x31\x8E\x98\x8F\x88\x91\x1B\x90\x8A\x91\x69\x91\xFB\x80\x34\x92\xAC\x8D\x36\x92\x62\x8C\x38\x92\x64\x8C\x3A\x92\x66\x8C\xF2\x91\x5E\x88\x75\x91\x98\x1D\xDC\x8A\xCC\x6A\xBF\x91\x6F\x92\x9A\x8A\xB8\x8F\x0A\x8E\xBA\x8F\x3E\x91\xC8\x91\xA7\x8D\xCA\x91\x36\x8E\xCC\x91\x67\x8F\xCE\x91\x5A\x92\x18\x8F\x5C\x92\x89\x8E\xAA\x92\x93\x8D\xAC\x92\xD9\x8B\x09\x0F\xC7\x86\xB2\x82\xB0\x92\x00\x92\x49\x92\x3E\x8F\x84\x90\x5A\x8D\xAC\x73\xC6\x8D\x2D\x92\x84\x8D\x6B\x8B\xE8\x91\x61\x8D\xEA\x91\x66\x8F\x1F\x90\x68\x8F\xAF\x8E\x81\x92\x3C\x8E\x48\x90\x99\x90\x85\x92\xEC\x87\x60\x92\xC7\x7C\x54\x69\x20\x8F\x21\x71\x21\x0A\x95\x92\x2C\x8E\x97\x92\xA5\x91\xA2\x8D\x9A\x92\x27\x8F\xA5\x8D\x08\x85\x40\x91\xCF\x8C\x16\x84\x47\x8F\xD2\x8E\xB9\x90\xFF\x8C\xBD\x92\x17\x8C\xDD\x92\xD2\x91\xC2\x92\xEC\x6F\xB8\x0D\x9F\x7A\x06\x87\x24\x92\xE7\x92\x51\x8E\xA4\x91\x37\x90\x06\x8B\x65\x91\xA5\x8B\xD2\x92\xA7\x8B\xD4\x92\xEA\x8D\x7B\x92\xF4\x92\x7D\x92\x14\x8F\x7F\x92\xD6\x8E\xEE\x91\x54\x8B\x83\x92\x1C\x8E\xDF\x92\x68\x8E\x8C\x8F\x79\x6C\x0B\x90\x69\x92\x49\x8C\xF5\x5A\x28\x87\xC9\x92\xD0\x90\x7D\x72\x70\x92\xE6\x8E\x06\x93\xF5\x8C\x0B\x8F\x63\x90\x08\x92\xAC\x91\x0A\x93\x12\x8E\x0C\x93\xF0\x8E\x0E\x93\x4A\x8F\x10\x92\x67\x8D\xDB\x92\xB1\x8E\xA8\x92\x8E\x8C\x16\x93\x1C\x8F\xEB\x90\x06\x7F\x72\x8F\x38\x70\x1F\x93\xB5\x8F\x88\x74\xEA\x92\x2F\x8E\xB4\x92\x18\x90\xE8\x8A\xA9\x91\x80\x8C\x6A\x89\x92\x86\x79\x92\x67\x90\xD6\x92\x69\x90\xEC\x91\xF4\x8A\xBE\x92\x97\x90\xC0\x92\x49\x90\xFB\x92\xB5\x8E\xC2\x90\x9A\x8B\x28\x7F\x8F\x8F\x35\x89\x47\x92\xCA\x92\x22\x93\xD6\x8F\x39\x90\xB1\x86\xBC\x8F\xD3\x5B\xBE\x8F\x51\x92\x2A\x93\xD0\x8E\x2C\x93\x12\x8F\x2E\x93\x83\x8F\xA4\x92\xAE\x8D\xA6\x92\xD8\x8C\x34\x93\xB5\x8C\x36\x93\x8B\x8F\xB6\x5B\x1A\x93\x5A\x90\xAD\x5F\xB0\x8F\xE4\x5E\xA1\x91\xB1\x92\xC8\x8C\x5C\x8F\x4C\x92\x74\x92\x4E\x92\x1A\x91\x50\x92\x42\x91\x52\x92\xFC\x8F\x65\x93\x81\x8F\x67\x93\xA3\x8F\x69\x93\x62\x8E\x6B\x93\xB0\x8D\x27\x91\xB2\x8D\x4B\x90\xE1\x92\x20\x8A\xDA\x8B\x6E\x7F\xFF\x8E\xF5\x64\x01\x93\x75\x8E\x03\x93\x61\x91\x70\x88\xD4\x90\x2A\x8C\x86\x91\xE2\x91\x9D\x92\xC9\x91\x68\x91\xCB\x91\x6A\x91\x8D\x91\x65\x8D\x30\x93\xD3\x8D\xB5\x91\x87\x8E\x40\x87\x5E\x92\x3B\x8A\x38\x93\x8F\x7F\xED\x8F\xF9\x58\x01\x89\x4B\x7C\xC0\x7D\x93\x93\x78\x93\x70\x8A\x84\x91\x5E\x90\xC7\x91\x2C\x92\x51\x8A\x89\x91\xCB\x8A\x8B\x91\xA1\x93\x4C\x93\x32\x8B\x12\x93\x8C\x8C\x6D\x93\xDA\x8C\xA9\x93\x1B\x8C\x8E\x93\xB4\x5C\x72\x93\xBB\x8A\xE1\x8C\x0E\x90\x9A\x8E\x12\x8D\x94\x92\xB3\x93\xB7\x82\xCD\x92\xA7\x91\x5E\x93\x8A\x90\x60\x93\x8C\x90\xD0\x5F\xF7\x85\x02\x83\xEF\x8A\xDB\x86\xD3\x8E\xF2\x8A\xD9\x92\x85\x8F\x32\x93\x6B\x8F\xF9\x92\xF1\x91\xC4\x93\xDC\x8C\x28\x90\xDD\x65\x2A\x90\xFE\x83\x00\x91\x00\x84\x80\x6C\x6A\x79\x70\x8C\x8F\x92\x21\x92\x4A\x8C\x7F\x90\x59\x93\x20\x93\xD9\x76\x5B\x93\xF4\x8F\xD7\x8F\x05\x92\xE4\x91\x27\x93\x77\x92\x45\x8F\xA0\x92\x18\x84\xA2\x92\x60\x8E\x87\x93\x69\x8F\xE0\x93\x87\x8F\x14\x93\xF8\x8E\x3C\x92\xFA\x8E\xE6\x93\xDE\x8C\x07\x91\xED\x79\x36\x76\x02\x8F\xB4\x80\xB2\x0D\x3E\x88\x64\x19\x40\x88\x42\x92\x6F\x8E\x6E\x76\x4D\x8E\x9B\x8E\x00\x6C\x94\x93\x9E\x8E\x29\x92\xB6\x93\x19\x90\xB8\x93\x69\x8B\x08\x93\x5F\x8D\x63\x93\x9F\x8F\x83\x93\xA1\x8F\x85\x93\xE2\x8F\xA4\x93\xF0\x8D\x4E\x93\xD0\x91\x50\x93\xDE\x92\x52\x93\x8D\x93\xAB\x93\x81\x74\xF0\x90\xC9\x93\x95\x8C\x49\x5F\x38\x80\x91\x79\x8E\x80\x0F\x94\xB8\x5B\x9C\x8C\xA7\x90\xCE\x93\x5A\x93\xB2\x92\x16\x90\x41\x93\xC6\x91\x19\x90\x0D\x8E\xCC\x8E\x41\x91\x78\x92\x43\x91\x0B\x92\x4A\x93\x0D\x92\xA2\x93\xEE\x8D\x2A\x94\x4C\x8F\xF6\x8A\xE2\x93\x15\x92\x30\x94\x74\x91\xC6\x93\x33\x76\x33\x80\x6C\x8C\xBC\x8E\x11\x89\x8F\x88\xBA\x8D\x6A\x92\xA5\x90\xF2\x93\x09\x01\x1B\x94\xC5\x8E\x1D\x94\xAD\x90\xB7\x93\x87\x91\xC4\x89\xBA\x93\x85\x8D\xBC\x93\xA1\x92\x4E\x94\xC5\x8F\x50",
"\x94\xC7\x8F\x89\x93\x64\x8E\x2E\x94\xFA\x92\xE4\x93\xF6\x8D\x0A\x94\x34\x6A\x34\x94\xB1\x79\xF5\x06\xB4\x79\x15\x94\x81\x79\xB8\x88\x93\x80\x58\x59\xD5\x76\x63\x94\x0F\x94\xC6\x8E\x9A\x93\x2B\x92\x68\x94\xE6\x8D\x22\x94\xE8\x8D\x24\x94\xDE\x8F\x26\x94\xC3\x8F\x00\x94\x6B\x90\x02\x94\xDA\x92\x72\x94\xF6\x8E\x06\x94\x89\x8F\x6F\x93\x73\x90\x32\x94\x81\x2B\xC8\x93\x71\x68\xD2\x66\xCE\x71\xF8\x90\xE2\x8C\x13\x8D\x7A\x59\xB5\x79\xA1\x94\x78\x67\xB8\x5B\x5E\x91\xC7\x92\x56\x59\x02\x7C\x54\x59\xA7\x67\x0D\x21\x76\x71\x0F\x94\x36\x7A\x00\x00\x1D\x0C\x31\x0C\xD0\x20\xB1\x79\x4E\x5A\x2C\x8D\x99\x79\xF2\x82\xAA\x94\xA3\x91\xE9\x92\x04\x93\xA3\x8B\x24\x93\x34\x8D\x7D\x93\x76\x92\x7F\x93\x49\x94\x81\x93\xDE\x90\x8F\x94\xE0\x8F\x28\x94\x00\x90\xDE\x93\xA5\x8F\xA6\x93\xA7\x8F\x72\x91\x55\x94\xA4\x6F\x51\x91\xF7\x91\x53\x89\x2F\x89\xA1\x6D\xA3\x6D\x4F\x8D\x84\x2B\x9F\x7C\xC0\x80\x0F\x91\x01\x01\xBC\x94\xC1\x91\x28\x92\x98\x92\x25\x8F\x43\x94\x3D\x91\xEE\x92\x3F\x91\x81\x76\x48\x94\xFD\x93\xA0\x93\x6D\x94\xBE\x93\x30\x8F\xC0\x93\xD8\x8E\xC2\x93\xB3\x8E\xD2\x94\x05\x81\xF4\x91\xF1\x68\x96\x7C\xA8\x72\x71\x8D\xF5\x84\x74\x8D\x58\x91\x4D\x79\x00\x8E\x09\x0F\xCA\x7C\xDA\x91\xA3\x67\xCF\x93\xF8\x82\xD1\x93\x04\x92\xD3\x93\x44\x93\x3C\x90\x81\x8C\x7F\x7F\xD8\x93\x8F\x90\x0C\x92\xCF\x8D\xF5\x92\xD1\x8D\x70\x94\xE4\x8F\x04\x94\xE6\x8F\x53\x94\x84\x92\xF4\x94\x17\x92\x9B\x94\x58\x81\x22\x69\x33\x81\x79\x91\x00\x6E\x5E\x94\xA0\x84\x7D\x91\x91\x89\xF0\x8F\xF5\x64\xE0\x94\xDD\x91\xE2\x94\x3F\x93\x7A\x93\x73\x92\xF6\x8F\x5F\x8F\xE5\x91\xEA\x94\xFA\x8F\xC7\x94\x44\x91\xF3\x92\x2D\x93\x91\x94\x8E\x91\x93\x94\xDF\x93\x95\x94\xC9\x8F\xF2\x94\xDA\x8E\x76\x94\x27\x90\x54\x93\xBC\x85\x53\x59\x5A\x81\x46\x0B\x7A\x85\x7B\x91\xE1\x72\x9F\x91\xD6\x76\x60\x7E\x27\x95\x27\x92\xD4\x8F\x97\x93\xDF\x89\x99\x93\xF2\x8C\xB6\x92\x20\x94\x5D\x8D\x8B\x94\x2F\x92\x8D\x94\xAE\x91\x34\x95\x66\x93\x36\x95\xA3\x93\x38\x95\xCE\x94\x15\x95\xB6\x91\x17\x95\x15\x93\x19\x95\x86\x92\x86\x6F\xF6\x88\x85\x78\xE1\x8E\x09\x01\x4B\x95\x96\x92\xC2\x8D\xE3\x94\x3B\x91\xC5\x91\xE6\x94\x32\x8E\x29\x8F\xF0\x92\x2B\x8F\xF2\x92\x1E\x90\x7E\x8A\x5D\x95\x6D\x90\x3A\x95\x6F\x90\x97\x94\x71\x90\x99\x94\x9B\x90\x78\x94\xB1\x78\xD7\x91\xE7\x0D\xD9\x91\x58\x93\x69\x95\x04\x95\x3B\x83\x06\x95\xF8\x93\x08\x95\x06\x92\x45\x93\x7C\x8F\x47\x93\x4A\x94\x7A\x92\x59\x95\x84\x93\x5B\x95\x4F\x94\x78\x95\x24\x91\x7A\x95\x26\x91\x3C\x95\x34\x8F\x3E\x95\x60\x6A\xD4\x94\x8B\x7D\xC4\x81\x54\x91\xB8\x78\x1E\x8A\x32\x89\xC9\x81\x34\x90\x06\x01\x6A\x95\xE8\x92\x6C\x95\x2A\x95\xB3\x92\xEC\x92\xB5\x92\xE7\x94\xB7\x92\x2A\x8F\xB9\x92\x2C\x8F\xBB\x92\xD8\x92\xF7\x92\x47\x90\xA8\x93\xE9\x90\xD4\x88\xC4\x92\x6B\x82\x26\x74\x63\x76\x1C\x92\x57\x74\xE9\x8C\x11\x89\xB9\x8A\xA3\x90\x0F\x86\x22\x92\x11\x86\xCA\x70\xA8\x95\x02\x93\xBE\x94\x4E\x95\xF0\x8C\x50\x95\x95\x8F\x88\x94\x9C\x93\x69\x94\x9E\x92\xBB\x93\xFE\x93\xCA\x89\x94\x95\x6F\x94\x96\x95\x4A\x91\xF0\x94\x32\x8F\x9A\x95\xCB\x8F\x9C\x95\xBA\x95\x57\x94\x9C\x7A\x6B\x8E\x93\x53\x33\x86\xBF\x8E\x97\x8E\xFF\x00\x45\x92\xA6\x95\x03\x95\x40\x94\x79\x93\xAC\x95\xE1\x91\xD0\x92\xB9\x93\xD3\x95\x6B\x94\xD5\x95\x57\x8A\xD7\x95\x44\x90\x13\x95\x46\x90\x4D\x8F\x61\x95\x07\x94\x7E\x95\x3D\x92\x8C\x7A\x89\x8A\x90\x8E\x35\x7E\x7C\x91\x47\x8E\xBD\x8E\xF2\x81\xBA\x8A\xA4\x90\xFF\x00\x6C\x92\x46\x92\x86\x95\xEC\x95\xB4\x93\x03\x92\x8A\x95\xBA\x87\x46\x94\xEA\x8E\x30\x95\x09\x92\x90\x95\x49\x93\xC9\x94\xFE\x8F\xCB\x94\xBA\x90\xF8\x95\xBC\x90\xDB\x95\x04\x90\xDD\x95\x06\x90\xB9\x95\x51\x8F\xE1\x95\xDF\x18\xBC\x95\xB3\x8A\x89\x92\xBA\x8E\x8B\x92\x8D\x8A\x48\x8E\x06\x96\xC4\x95\x35\x86\x3D\x7E\x92\x92\x68\x95\xA7\x95\x87\x95\xDB\x84\x89\x95\x5D\x93\x11\x96\x5F\x93\x54\x5B\x61\x93\x80\x93\x57\x95\x31\x92\x92\x95\x27\x94\xF6\x95\xE2\x90\x1C\x96\xE4\x90\x1E\x96\x23\x90\x20\x96\x25\x90\x17\x8B\x40\x95\xA2\x86\x87\x6F\x5F\x7E\xDC\x8D\xC9\x95\x95\x93\xCB\x95\x01\x92\x98\x93\xB5\x93\x66\x94\x1F\x94\x89\x94\x33\x8E\xB8\x92\x9F\x93\xBA\x92\xBD\x93\xBC\x92\xED\x91\x2C\x94\xEF\x91\x74\x94\xE3\x93\x22\x96\x6F\x8F\x24\x96\x33\x19\xB1\x82\xBD\x53\x4A\x95\x34\x96\xAB\x86\x36\x96\x7B\x93\x2D\x95\x75\x92\xF8",
"\x8F\xFC\x93\x31\x95\x3D\x96\x53\x92\x3F\x96\x90\x94\x6E\x94\xF7\x95\xD9\x95\x6E\x91\x98\x95\x70\x91\x7C\x95\xC0\x90\x98\x8B\x4A\x96\x5A\x78\xE3\x92\xE9\x86\x21\x8F\x27\x01\x4F\x96\x1C\x94\x6D\x95\xC4\x91\xE5\x94\x66\x91\xF2\x95\xD3\x92\x6C\x94\xFF\x93\x77\x96\x42\x96\x79\x96\x90\x91\x7B\x96\x92\x91\xFB\x95\x98\x94\x63\x95\x37\x5D\x37\x8F\xF0\x6F\xF4\x91\x21\x0A\x86\x96\x64\x94\x88\x96\x2A\x92\x52\x95\x57\x96\x72\x95\xE9\x94\xF1\x92\xC8\x89\x75\x96\xCA\x94\x41\x96\xB2\x91\x43\x96\xB4\x91\x5F\x95\xA7\x93\xD2\x89\xDF\x95\x23\x96\x1B\x95\x91\x78\x1E\x8C\xA9\x95\x44\x8A\x5E\x8B\x17\x70\x93\x92\x00\x6C\x9E\x96\x85\x94\x65\x94\xD5\x90\x67\x94\xD1\x95\x8A\x94\x6A\x94\x8D\x96\xF4\x95\xCF\x8A\xAA\x96\x57\x92\xAC\x96\x59\x92\xF8\x92\xB8\x95\x49\x96\x18\x93\x34\x79\x3A\x93\x48\x75\x4E\x96\x6A\x96\x4B\x87\x6C\x96\x2C\x95\xF9\x93\x2E\x95\xFB\x93\xC5\x94\xEB\x94\x5B\x96\xED\x94\x5D\x96\x4D\x93\xCB\x96\xB0\x96\x63\x96\xAA\x8F\x80\x95\xCF\x96\x56\x93\xB2\x7B\x85\x95\x33\x96\x0D\x96\xD0\x93\xCE\x95\x85\x90\xAF\x95\x53\x95\xCA\x8E\x26\x93\xB2\x90\x14\x96\x29\x93\x8E\x96\xD6\x95\x90\x96\xAB\x96\x92\x96\x11\x92\x94\x96\x13\x92\x61\x96\x54\x94\xB1\x96\x64\x96\xB3\x96\xD1\x78\xB5\x96\xCA\x95\xBA\x8B\x75\x93\xC4\x64\x69\x96\xEA\x96\x05\x95\xEC\x96\xCE\x92\xDE\x73\x9B\x92\x61\x90\xFA\x93\xF2\x96\xA6\x96\x55\x8A\xA8\x96\x19\x96\xC7\x96\x7E\x92\xC9\x96\x80\x92\xFB\x96\x82\x92\xFD\x96\x18\x95\xFF\x96\xE3\x96\x80\x96\xDD\x65\xAB\x87\x06\x6C\xD2\x96\x09\x97\x88\x95\x0B\x97\xD2\x93\x38\x96\xD4\x93\x3A\x96\xD6\x93\xAC\x64\xCC\x8D\x7C\x88\xDA\x93\x7E\x88\x92\x90\xA5\x88\x94\x90\xA7\x88\x1A\x97\xDC\x92\xCC\x96\xC1\x90\xCE\x96\xCF\x82\xAD\x93\xF5\x5A\xAF\x93\xBB\x94\xD3\x96\x91\x87\xD5\x96\xC1\x94\x56\x8E\xF1\x96\x07\x92\x71\x96\x15\x96\x32\x95\x4B\x94\x18\x96\xB8\x90\x1A\x96\xF6\x92\x5E\x96\xE0\x96\x39\x8A\x1E\x97\xCD\x8F\x01\x97\x10\x83\xED\x90\x5F\x91\x20\x8C\xCB\x93\x6D\x92\xEB\x95\xF4\x93\x03\x8F\x41\x94\xE0\x91\x67\x8B\xF0\x95\x21\x94\xC3\x96\x09\x93\xF5\x96\xF5\x95\xF7\x96\xC8\x96\xF9\x96\x31\x93\x36\x97\x33\x93\x7D\x96\xE8\x90\xCD\x96\xF9\x76\x0C\x94\xFD\x83\x0E\x94\xEF\x93\x4C\x77\x68\x79\xEC\x93\x02\x84\xEE\x93\x0A\x91\x68\x8A\xBC\x0D\x33\x90\x9D\x8C\x85\x96\x40\x97\xB4\x87\x27\x97\x07\x95\x29\x97\x09\x95\x8B\x90\x0B\x95\xC8\x7F\x8E\x90\x52\x6A\x41\x90\xAE\x83\xDC\x93\x10\x8B\x10\x93\xF4\x8E\x6B\x97\xE1\x93\x38\x97\x7F\x96\x3A\x97\x24\x84\x71\x97\x3B\x88\xEA\x93\xBB\x0D\x12\x94\x47\x71\x79\x97\x1B\x93\x55\x90\x09\x0F\x74\x8C\x7E\x97\x0C\x96\x5C\x97\xFA\x84\xF6\x93\x38\x90\x6D\x96\xD7\x96\x6F\x96\x2F\x95\x12\x97\xCD\x8A\x14\x97\x4C\x97\x16\x97\x0F\x93\x18\x97\x11\x93\x5F\x96\x13\x93\x1C\x97\x62\x95\x52\x97\xEA\x8F\xE4\x96\x88\x79\x9E\x90\xC6\x90\xDB\x88\xDF\x08\x39\x94\xB0\x94\x74\x97\x94\x79\xF5\x5A\x3D\x94\x10\x90\x2D\x69\xBC\x96\xC2\x97\xA5\x97\x5E\x97\x99\x92\xEF\x95\x0E\x97\xD1\x92\x63\x97\x23\x94\x65\x97\xC6\x96\x67\x97\x17\x97\x69\x97\xA5\x93\xAE\x96\xD0\x94\x3B\x92\xFD\x95\x09\x94\x20\x97\x0B\x94\x8E\x8E\x26\x84\xBD\x97\x04\x8C\xBE\x8C\xA1\x90\xA3\x71\xE6\x95\x43\x92\xF9\x58\xA6\x90\xC6\x97\xBB\x96\x80\x97\xFA\x87\x42\x97\x6F\x95\x8B\x96\x9E\x93\x9F\x92\xEC\x94\x8F\x96\xEE\x94\x02\x90\x45\x96\xBE\x90\x6D\x97\x4E\x91\xE2\x96\x53\x97\xBA\x97\x96\x97\xDF\x97\x5A\x94\xC7\x90\x7C\x4C\x7D\x94\xE6\x97\x16\x94\xE7\x8C\xA7\x84\xCE\x90\x7F\x97\x25\x97\x35\x96\x82\x97\x10\x96\xC8\x8A\x12\x96\x4F\x92\xF3\x96\x8F\x95\x49\x97\x91\x95\x76\x95\x83\x8E\xD6\x97\x2B\x94\x50\x97\xF8\x8A\x98\x96\x17\x93\x71\x93\x03\x97\x50\x96\xD0\x71\x34\x94\xA6\x94\x94\x88\x06\x72\xF6\x90\xA5\x94\xE2\x88\xEF\x7C\xFF\x94\xF9\x58\x02\x08\xD2\x79\xCE\x67\x6D\x61\xB9\x67\x3D\x93\x8C\x88\xB3\x88\x3F\x77\x46\x85\x2E\x78\x91\x7A\xDE\x79\x46\x77\x27\x01\x48\x77\x4C\x85\xE6\x5A\x2F\x98\x12\x91\x1E\x78\xE5\x79\x27\x01\x0D\x7A\x54\x59\xAE\x78\x3D\x98\x38\x91\xD0\x71\xB2\x94\x8E\x7A\xE9\x0A\xF1\x79\x36\x98\xAB\x77\x2B\x7A\x62\x7A\xAD\x7A\x64\x7A\x90\x80\x09\x0F\xF9\x79\xA7\x7A\xF5\x64\x45\x98\x57\x97\x7D\x77\x25\x84\x01\x7A\x56\x24\x81\x7A\x4E\x98\xF7\x77\xB3\x7A\x49\x6E\xFA\x77\xF9\x58\x0C\x7A\x32\x7A\x21\x0A\x57\x98\xBD\x94\x47\x98\x25\x84\x14\x7A\xA9\x2D\x5D\x98\x93\x7A\x74\x7A\x2E",
"\x7A\x50\x59\x1E\x7A\xA6\x7A\x69\x7A\x2E\x98\xEF\x77\x97\x97\x25\x7A\x38\x11\x39\x7A\x5E\x32\x10\x94\x7F\x81\x5C\x0B\x4F\x7A\x35\x98\x7B\x98\x2F\x7A\x41\x98\x65\x98\x27\x01\x67\x98\xE1\x94\x46\x68\x48\x98\xAE\x05\x38\x7A\xF8\x87\xFA\x44\x29\x7A\x7D\x98\x6C\x0B\x6F\x98\x85\x7A\xB8\x5B\x42\x7A\x42\x98\x53\x59\x44\x98\x76\x98\x14\x88\xDA\x7F\x4A\x7A\x48\x01\x6D\x98\x73\x7A\x7F\x98\x60\x98\x3E\x2C\xB8\x5B\x54\x7A\x73\x98\x79\x7A\x56\x98\x98\x98\xFE\x90\xDA\x7F\x5D\x7A\xCF\x77\xDA\x94\x33\x2C\x18\x82\x90\x98\x9F\x98\x50\x98\xB2\x7A\x65\x7A\x09\x0F\x26\x7D\x95\x98\xB5\x57\x97\x98\xDD\x77\x99\x98\x08\x91\x5C\x7A\x6F\x7A\x3E\x6D\x9D\x98\x61\x7A\x5F\x98\xB1\x98\xF9\x77\x40\x7A\x09\x0F\x13\x81\xB6\x98\xAD\x78\xB2\x5E\x86\x98\x28\x95\x88\x98\x25\x84\x7F\x7A\x46\x01\xBF\x98\x09\x78\xB0\x98\xB4\x80\xA1\x98\x50\x59\xA2\x85\xC7\x98\xBB\x0D\xB8\x98\xA4\x97\x89\x98\xA7\x77\x8F\x7A\xAE\x23\xD0\x98\x06\x7A\xD2\x98\x95\x7A\xBC\x0D\x0F\x78\x30\x1D\xF4\x7C\x2D\x69\xCA\x98\x4C\x95\x36\x80\x5A\x91\xFD\x92\x27\x01\x32\x65\x02\x89\x75\x98\x3E\x79\x1F\x78\x03\x66\x83\x98\x55\x98\xE7\x98\x90\x77\xE8\x93\x73\x97\x51\x98\x68\x98\x23\x04\x78\x97\x80\x98\x28\x7A\x60\x98\xFA\x90\x00\x95\xD1\x79\x42\x79\x09\x01\xCB\x67\x30\x98\x98\x76\xCA\x84\xC7\x06\xD9\x79\x2D\x7A\x85\x7A\xB4\x0D\xBD\x91\x05\x03\xE6\x98\x00\x6C\x06\x99\x3E\x98\x09\x80\x40\x98\x09\x01\xD7\x98\xB7\x0D\xAE\x78\x13\x99\x46\x98\x10\x73\xDB\x98\xEF\x79\xED\x79\x4B\x98\x7B\x98\xAE\x98\x76\x0B\xE1\x98\x70\x98\xB8\x0D\x54\x98\x74\x98\x9F\x61\x1B\x99\x58\x98\x7E\x70\x1E\x99\x5B\x98\x03\x7A\x22\x99\x3F\x92\xAF\x98\x4F\x98\xD3\x98\x48\x2C\xB8\x5B\x64\x98\xF5\x98\x12\x99\xA7\x98\xBB\x0D\x09\x09\x6B\x98\x96\x2D\xDF\x98\x72\x7A\x94\x7A\x26\x99\x1D\x7A\xF4\x98\x29\x99\xF5\x64\x2B\x99\xFB\x98\x54\x6C\x1E\x99\x26\x7A\x1F\x8A\x25\x32\x23\x99\xA2\x6D\x91\x98\xAC\x7A\x52\x98\xF9\x58\x30\x7A\xB3\x77\x46\x99\x2D\x69\x48\x99\x87\x98\x2D\x16\x1E\x99\x8B\x98\x4D\x99\x6C\x33\x4F\x99\x42\x99\x92\x98\x50\x59\x94\x98\x84\x98\x05\x99\x3B\x99\xB7\x0D\x09\x09\x9B\x98\x5E\x99\xAD\x98\x32\x99\x24\x99\x34\x99\xE2\x98\xC0\x0D\xA3\x98\x56\x99\xA5\x98\x58\x99\x67\x99\xDB\x78\xDF\x77\x38\x3F\xCE\x77\x25\x03\x40\x99\x7E\x98\x6F\x99\x43\x99\x66\x7A\x45\x99\x74\x99\x3A\x99\xB9\x98\xA8\x98\xBB\x98\x69\x12\x70\x7A\x4C\x98\x01\x7B\x6E\x98\x25\x99\x62\x99\xB8\x0D\xC6\x98\x65\x99\x06\x01\x59\x99\xCB\x98\x5B\x99\xCD\x98\x63\x08\xF3\x77\x89\x99\x21\x7C\x9E\x98\x7E\x99\x8D\x99\x87\x7A\x81\x99\x8A\x7A\x2A\x99\x76\x99\x5D\x79\x53\x0A\x05\x78\xDE\x98\x98\x99\xE3\x77\x5E\x98\x83\x7A\x35\x99\x81\x98\x50\x59\xE4\x98\xAE\x1E\x1F\x8D\x83\x99\xA4\x97\xC0\x0D\xD5\x61\x99\x6D\x7C\x98\x53\x91\x58\x59\xD0\x67\x6E\x21\x20\x92\xAD\x67\x7D\x7A\x1D\x0C\x38\x72\x7B\x29\x3D\x01\xDB\x59\x99\x6D\x8C\x54\xBA\x59\xE8\x85\x18\x94\xA7\x84\xB2\x94\x1D\x0C\x73\x0A\x49\x21\x09\x86\xC0\x95\xB5\x57\xB8\x99\xBD\x29\xBA\x99\x9F\x71\x54\x78\xEC\x98\x54\x43\x11\x99\x21\x0A\x92\x99\xE9\x98\x0B\x91\xA1\x59\x0E\x90\x18\x99\xB3\x0D\x1A\x99\xF7\x98\x6B\x8C\x09\x7A\x49\x99\xE6\x0B\xFD\x98\xA0\x98\xA6\x99\x01\x99\x2A\x98\x03\x99\x49\x79\x9F\x61\xCD\x67\x1C\x99\xBC\x8C\xA2\x94\x7C\x4C\x0B\x99\x50\x7A\x52\x99\x0E\x99\x66\x95\x03\x01\x3A\x98\xEF\x88\x6D\x61\xED\x99\x2C\x99\x05\x97\x50\x59\xE6\x79\x90\x99\x03\x01\xFB\x99\xE3\x99\x94\x99\x77\x98\x37\x7A\x63\x08\x21\x99\xFF\x98\xC2\x98\xA7\x99\x8B\x99\x9B\x99\x52\x99\xF8\x79\x9E\x99\xA1\x77\xB2\x5E\x02\x9A\x5A\x99\x74\x17\x2E\x99\x0F\x11\x6D\x77\x5C\x01\x7C\x99\x33\x99\xC1\x98\xAA\x99\x09\x9A\x53\x99\xF5\x5A\x38\x99\x57\x99\x00\x6C\x13\x9A\x93\x99\x15\x9A\x6A\x98\x81\x77\x15\x7A\xE7\x99\x8F\x98\x6E\x99\x1C\x9A\x70\x99\x09\x0F\x72\x98\x73\x99\x9F\x99\xF5\x64\x24\x9A\xD9\x99\xCB\x17\x4B\x99\x79\x98\x8C\x98\x4E\x99\x6D\x99\x50\x99\x8C\x99\x0E\x9A\x9D\x77\x10\x9A\xE8\x79\xEC\x99\xA1\x99\x4A\x7C\x57\x77\x63\x08\xA9\x77\x2A\x9A\xF7\x73\xD1\x98\x0D\x9A\x51\x98\x93\x98\x40\x9A\x0E\x7A\x12\x9A\x43\x9A\x52\x7C\x72\x97\xBA\x77\x98\x6A\xBC\x77\x48\x9A\xF3\x79\x41\x99\x51\x99\x4C\x9A\xC4\x77\x4E\x9A\x43\x98\x50\x9A\x84\x99\x3C\x99\x78\x99\xD8\x48\x7A\x99\xD0\x77\x57\x9A\x17\x7A\x4A\x9A\x2D\x9A\x7F\x99\xB4\x98\x5D\x9A\x96\x98\x5F\x9A\xDA\x98\x5A",
"\x98\xBD\x98\x5E\x03\x1A\x9A\x2C\x9A\xA9\x99\x2E\x9A\xF9\x58\x8F\x99\x39\x99\x21\x0A\x34\x9A\x6B\x95\x1D\x99\x95\x99\xE9\x0A\x97\x99\x31\x99\xE3\x95\x59\x9A\x3D\x9A\x5B\x9A\xB8\x0D\xD6\x98\x00\x9A\xAF\x1E\x51\x9A\xBC\x83\x53\x9A\xDC\x98\xE9\x0A\x90\x7A\x81\x9A\xDF\x7D\x9A\x99\x69\x9A\x9C\x99\xC0\x0D\xAD\x99\xEA\x24\xD6\x99\x27\x01\x7B\x9A\xB6\x96\xEF\x99\x18\x8D\x9E\x7A\xED\x98\x98\x9A\x89\x1D\x90\x77\xB4\x59\xDC\x99\x88\x9A\x0B\x13\xE0\x99\x05\x9A\xE9\x93\x0D\x99\x87\x98\xB0\x7A\x0A\x9A\x71\x7A\x01\x91\x9D\x9A\x0A\x89\x01\x01\xD0\x74\xBA\x59\xE5\x67\x27\x01\xE8\x7E\x03\x7C\x18\x85\xF7\x67\xF9\x8E\x30\x00\x20\x7C\xDC\x62\x3C\x7B\x47\x75\xB8\x9A\xB6\x3C\x43\x6D\x98\x08\xF9\x67\x29\x90\xC3\x6C\xFD\x67\xC1\x7E\xE6\x0D\xFE\x92\xED\x7B\x09\x01\x08\x68\xB9\x88\x98\x08\xCE\x9A\xE5\x5F\x0B\x7B\x4E\x10\x96\x68\xB0\x82\xCA\x9A\x3E\x7B\xAC\x69\xBA\x9A\x2D\x8D\xD2\x9A\x04\x89\x02\x12\x18\x19\xC9\x6F\xAF\x9A\xCF\x79\x50\x59\xBB\x0E\x7D\x7B\x5E\x67\xD5\x61\xE6\x0D\xB7\x5F\xC1\x9A\x4E\x8F\xDA\x9A\x47\x96\x3D\x22\xBD\x9A\x64\x62\x3C\x7B\x75\x66\xEA\x9A\x50\x4A\x73\x78\xA0\x7B\xF4\x9A\x08\x62\xFB\x67\x38\x3F\xC8\x9A\x04\x6D\xB8\x5B\xE9\x0D\x67\x12\xEB\x99\x8F\x68\xB8\x97\x98\x6D\x89\x79\x69\x68\x9D\x66\xE1\x9A\x58\x59\x1F\x68\x86\x13\x29\x79\xDE\x88\xA5\x4C\x95\x67\x20\x8E\x17\x4F\xE4\x85\x8E\x7D\xB3\x6B\x6E\x01\xF1\x67\xE7\x9A\xE8\x49\x3E\x7B\x68\x5C\xB0\x93\x01\x98\x0D\x9B\xC7\x48\xEE\x6A\x11\x9B\x61\x78\xCB\x0F\x14\x9B\x17\x4F\x98\x08\x96\x96\x9F\x70\xEF\x9A\xDA\x62\xF1\x9A\x3E\x7B\xF7\x9A\xFD\x83\x4E\x82\xD0\x01\x0E\x9B\x2C\x91\xF8\x6D\x1F\x9B\xD8\x69\x5A\x70\x22\x9B\xF8\x6D\x98\x08\x2B\x9B\x0B\x64\xF9\x9A\xD8\x48\xFB\x9A\x76\x6E\xFD\x9A\x27\x01\xFF\x9A\x5A\x59\x1A\x9B\x3F\x80\x7C\x4C\x2F\x9B\x1E\x9B\xFA\x94\xE5\x85\x38\x11\x35\x9B\x1F\x4F\x3C\x0A\xFB\x97\x77\x6C\x04\x9B\x10\x5A\x06\x9B\x07\x9B\xC2\x67\x50\x59\x4C\x7F\x19\x40\x05\x91\xD0\x87\xBB\x0D\x95\x07\xD8\x2A\xF5\x58\x46\x34\x40\x50\xB8\x5B\xDC\x8B\x02\x01\x92\x80\x2D\x98\x9F\x61\x67\x87\x56\x59\x40\x50\x21\x0A\xD5\x00\x8C\x5A\x77\x58\xE0\x22\x4C\x78\xF3\x98\x09\x01\x83\x58\x71\x8D\x21\x0A\x65\x9B\x55\x59\x40\x50\xF8\x98\xAB\x7A\xE0\x8B\x61\x89\x91\x2A\xA0\x59\x45\x7D\x11\x8D\x52\x9B\xBA\x83\xB8\x0D\xDD\x08\x6F\x00\x7E\x9B\xDB\x99\x77\x7C\xDB\x9A\xE8\x96\xFC\x55\xEC\x97\x04\x8A\xEE\x97\x8A\x96\x07\x93\xD0\x97\x8C\x94\xD2\x97\x8E\x8B\xB0\x97\x2F\x93\x17\x98\x51\x94\x8F\x8D\x93\x97\x20\x61\xF6\x94\x9E\x6E\xF8\x94\x76\x72\x47\x9B\x73\x8D\x30\x89\x31\x91\x8F\x93\x09\x0F\x34\x89\x7F\x91\x9F\x61\x3F\x72\x14\x9A\x5B\x90\xBF\x94\xA3\x8C\x43\x97\xE8\x8E\x45\x97\x8D\x95\xAB\x91\x12\x98\x73\x96\x82\x93\xAE\x97\xE0\x90\x92\x9B\x68\x93\xCD\x94\x79\x95\xF7\x97\xE6\x90\xF9\x97\xD1\x94\x02\x9B\x9C\x6E\x99\x9B\x74\x72\x9B\x9B\xB4\x78\x9D\x9B\x74\x78\x1F\x85\x76\x78\xAC\x98\x93\x78\xEB\x98\x78\x8D\x25\x85\x03\x8E\x9E\x39\x89\x9B\x4A\x92\x8B\x9B\xAD\x95\x42\x93\x7E\x8C\x85\x97\xD5\x93\x87\x97\x9F\x88\x89\x97\xC8\x6B\x8B\x97\x91\x84\x11\x95\xAD\x8E\x94\x9B\x71\x94\xB9\x9B\x4C\x91\xBB\x9B\xDA\x97\x1B\x98\x37\x93\xFD\x97\x1B\x7D\xEA\x7C\x1E\x95\x98\x8D\x47\x85\x00\x91\xFB\x7C\x9D\x8D\x87\x9B\x4A\x02\xCE\x9B\xCC\x92\x0C\x98\x37\x96\x0E\x98\x39\x96\x79\x42\x3B\x96\xC6\x94\xB1\x9B\xC8\x94\xB3\x9B\x20\x91\xD4\x97\xB1\x97\xDE\x9B\x14\x95\x91\x97\x05\x94\xB6\x97\xFC\x95\xE4\x9B\x70\x93\xA3\x7A\xAE\x89\x9A\x91\x1E\x7D\x7C\x5B\x46\x95\xC9\x76\x48\x95\xD7\x76\x49\x9A\x2D\x69\xA6\x9B\x25\x9A\xA8\x9B\xCC\x95\x05\x8F\x54\x96\xBF\x96\x56\x96\xC1\x96\x58\x96\xB1\x95\x5A\x96\xB3\x95\x5C\x96\xB5\x95\x4F\x97\xB7\x95\xE1\x96\x6F\x97\xDA\x8D\x0F\x99\xA3\x78\x92\x93\x12\x9C\xF1\x9B\xD3\x90\x18\x9C\x87\x94\xA2\x96\x1B\x9C\xA4\x96\xB2\x76\x47\x97\xF4\x96\xC5\x96\x91\x9B\xFE\x9B\x93\x9B\xB7\x9B\x97\x95\xE0\x9B\x39\x92\xE2\x9B\xA9\x92\xBD\x9B\x07\x8D\x65\x96\x76\x91\xB0\x9A\xBE\x85\x34\x91\x9D\x8B\xE6\x5A\x13\x9C\x35\x9A\x14\x90\xAB\x95\x42\x94\xD1\x9B\x44\x94\x43\x93\x8C\x95\x0A\x95\x46\x93\x82\x8C\x2E\x97\x84\x8C\x30\x97\x86\x8C\xA4\x88\x88\x8C\x34\x97\x8A\x8C\x3B\x9C\xA7\x92\x3D\x9C\x35\x93\x06\x9C\xEF\x68\xBF\x9B\xA5\x72\xE2\x85\x21\x8E\x43\x6D\xF5\x84\xFA\x91\x1B\x79\xC5\x99\xFD\x91\x0C\x9B\x21\x0A\x48\x9C\x7C\x9A\x29",
"\x95\xA9\x9B\x79\x8E\xEF\x97\x8D\x9B\x8C\x96\x64\x97\x35\x9C\x46\x91\x37\x9C\xB6\x9B\xB6\x95\xFA\x95\x97\x9B\xAB\x89\xE6\x9B\x9F\x95\xDF\x97\x3F\x8A\xE1\x97\x8C\x89\x2C\x96\x0D\x86\x04\x98\x7F\x94\x4C\x8E\x6B\x9C\x9C\x96\x27\x01\x6E\x9C\x9B\x9A\x4D\x95\x52\x96\x4F\x95\x2D\x9C\x51\x95\xEE\x96\xA3\x96\xEF\x92\xA5\x96\x74\x95\xA7\x96\x15\x98\x22\x91\x00\x9C\xF9\x95\x52\x94\x7D\x9C\x5F\x92\x54\x97\x63\x8A\x91\x9A\x65\x8A\xB9\x5C\x0D\x9C\xE3\x7F\x1D\x82\x61\x94\xCD\x9B\x0A\x98\x6B\x96\xF3\x9B\xA8\x97\x8B\x95\x10\x97\x46\x97\xDA\x96\x72\x96\x90\x9B\x78\x9C\xF5\x97\x21\x90\x5C\x9C\x6C\x93\x5E\x9C\x6E\x93\x60\x9C\x7F\x95\xDD\x97\x11\x7A\x62\x92\xED\x79\x64\x92\x1D\x92\x66\x92\x1F\x92\x9D\x91\x9F\x97\xF9\x58\x0A\x96\xEA\x95\xF0\x9B\xAB\x9C\xD4\x96\xAD\x9C\xD6\x96\xAF\x9C\xD8\x96\x11\x97\x98\x9C\x13\x97\x9A\x9C\x48\x91\x9C\x9C\x1D\x96\xB4\x97\xC1\x93\xBA\x9C\xC3\x93\x4D\x9B\xFB\x8B\xA1\x9C\x61\x92\x7C\x86\xB9\x8E\x58\x6F\x2A\x96\x02\x8B\x29\x03\xC3\x95\xCD\x84\x08\x96\x85\x86\xBA\x96\x6D\x9C\x2B\x9C\x83\x91\x0F\x96\xF4\x9B\x7C\x8E\x0F\x98\x7E\x93\x11\x98\x53\x9C\x66\x90\x2F\x97\x90\x90\xF0\x8A\x8D\x97\x30\x8B\x39\x9C\xDA\x95\xD9\x9C\xF1\x94\xDB\x9C\xF3\x94\x3F\x9C\xAB\x92\x41\x9C\xAD\x92\xDF\x8E\x4D\x96\xEB\x9C\x8C\x9C\xED\x9C\x02\x92\xEB\x92\xCD\x97\xED\x92\x71\x95\x96\x9C\x32\x9C\xB2\x9C\x48\x97\xFA\x9B\x33\x95\xD5\x9C\x6C\x91\xD7\x9C\x44\x96\xFE\x9C\xDC\x95\x00\x9D\x3D\x95\xDD\x9C\x96\x91\xDF\x9C\x32\x91\xBC\x0D\xAA\x94\x7B\x77\x4D\x98\x47\x9C\x0A\x9D\x53\x96\xEF\x9C\xAE\x9C\x84\x97\x50\x9C\x86\x97\x52\x9C\x0C\x95\x3F\x90\x34\x85\xF8\x9C\xDB\x93\xDC\x9B\xD4\x8E\x8F\x97\x16\x8F\x1A\x9D\x1F\x96\x1C\x9D\x9B\x95\x1E\x9D\x40\x9C\x20\x9D\x22\x85\xEA\x5D\x83\x96\xE5\x92\x09\x9D\xCC\x9C\x41\x97\xCE\x9C\xAB\x9B\x4D\x92\xAD\x9B\x51\x9C\x8E\x95\xF5\x9C\x48\x93\xF7\x9C\x0F\x95\x91\x90\xFA\x9C\x93\x90\x15\x8F\x95\x90\x38\x9D\x46\x96\x3A\x9D\xDE\x95\x3C\x9D\x33\x70\x9A\x96\xF2\x82\x8D\x9C\x04\x97\xDE\x91\x4B\x9C\x5F\x97\xC8\x8E\x61\x97\x54\x95\x8E\x9B\x56\x95\xB4\x9C\xB0\x91\xB5\x9B\x86\x93\xFC\x9C\x7A\x96\xB8\x9C\x8A\x93\xED\x9A\x8C\x93\x56\x94\x3E\x9D\xC7\x93\x1E\x98\x12\x76\x67\x6B\x58\x8F\x08\x9D\xC2\x27\x44\x9D\x81\x97\x92\x9C\xCF\x95\x2F\x9C\x63\x9D\xF0\x96\x2E\x92\xB5\x86\x13\x98\x17\x96\xFC\x9B\xEB\x91\xDE\x96\xBF\x93\x55\x9D\xF8\x97\x04\x9C\x97\x96\x02\x9D\xC3\x92\x04\x9D\xC5\x92\x46\x75\x08\x7F\x32\x96\x88\x9B\x7A\x9D\xED\x97\x46\x9D\x73\x9C\x25\x93\x81\x9D\xE8\x89\x14\x9D\x4A\x97\x85\x9D\xD7\x92\x77\x95\x6B\x9D\x93\x96\x6D\x9D\x73\x94\x25\x9B\x7E\x96\x08\x90\xBE\x9C\xF8\x8D\x8E\x8F\xE7\x96\xA4\x9B\xF5\x64\x5D\x9D\x1F\x98\x5F\x9D\x71\x9C\x72\x92\x47\x9D\x7C\x93\x49\x9D\x2D\x9D\x4B\x9D\x2F\x9D\x54\x9C\x40\x90\x56\x9C\x42\x90\x69\x9D\x29\x94\x18\x9D\xAD\x96\x02\x9C\x16\x95\x9F\x9C\xAA\x93\x7F\x9C\xC2\x84\x74\x9D\x2C\x90\x06\x97\x00\x00\xB2\x8F\x82\x9A\xEC\x9C\x95\x9D\x8A\x9B\x97\x9D\x8C\x9B\x99\x9D\x55\x95\x82\x9D\x9C\x9D\x14\x98\xB4\x95\xA0\x9D\x7B\x9C\x9E\x9C\x24\x9C\x39\x97\x0A\x62\xBC\x0D\xD0\x8F\xDC\x8D\xAE\x9D\x87\x96\x60\x9D\xCC\x97\x60\x97\xCE\x97\xF1\x95\xF1\x97\xD4\x95\xF3\x97\xF6\x96\xB6\x9C\x37\x92\xA3\x9D\x96\x94\x8B\x9D\x7D\x95\xBC\x9C\xFE\x95\x7B\x89\x7F\x9B\x4F\x79\xEF\x8F\x35\x91\xA5\x9B\x27\x9D\x91\x9C\x29\x9D\xCF\x9C\x2B\x9D\xB0\x9C\xAE\x9B\x28\x93\xB0\x9B\x67\x9D\x33\x92\x79\x9C\x6A\x9D\xD9\x9D\x96\x9B\xDB\x9D\x94\x97\x1D\x98\x56\x97\x03\x9A\xCA\x93\x6E\x9B\x8A\x9C\xA1\x84\x2A\x9C\xCE\x9D\xCF\x9B\xD0\x9D\x4D\x9C\x70\x95\x9C\x92\xD2\x95\xE8\x9D\xF3\x95\xEA\x9D\x66\x97\xEC\x9D\xA5\x92\xEE\x9D\x3B\x95\x57\x9D\x21\x96\x25\x9C\x9B\x71\xE1\x99\x0F\x94\x55\x59\x46\x8C\x75\x23\xD1\x99\x1F\x9A\xE7\x0D\x7D\x97\x3E\x94\x00\x6C\xE1\x9D\x9F\x96\xE3\x9D\xE4\x94\x16\x9E\xF0\x97\x59\x96\xF2\x97\xDC\x96\xF4\x97\x87\x9D\xEF\x94\x89\x9D\xBA\x9B\xF0\x9D\xA6\x9D\x7E\x9C\xA8\x9D\x39\x88\x26\x9E\xC9\x97\x44\x71\x0B\x80\x29\x84\x14\x94\x87\x9C\xE3\x7D\x17\x94\x10\x9E\xF0\x99\x30\x9E\xFA\x9D\xCD\x95\x7C\x9D\xED\x96\x0F\x9D\x82\x8D\x74\x9C\x1A\x9E\xC4\x96\x1C\x9E\xD3\x97\x1E\x9E\x6A\x93\x20\x9E\x7B\x95\x3F\x9E\x6E\x97\xDC\x9D\xD8\x7F\xFF\x97\x99\x97\xB7\x0D\x64\x88\xC0\x97\x3A\x80\xC9\x97\x3C\x94\xA9\x9C\x94\x9D\xA4\x97\x86\x94\x93\x9C\x54",
"\x9E\xF4\x8C\xC2\x94\xB5\x9D\xD5\x9B\x2E\x9D\x88\x97\x0D\x95\x8A\x97\xBB\x9D\x8C\x97\x34\x9D\xDD\x93\x07\x9E\x5B\x92\xA5\x9D\x60\x9E\x0A\x9E\x62\x9E\xFF\x71\x5F\x80\x7A\x97\x61\x80\x04\x96\x5C\x94\xBF\x8C\xA6\x9C\xF5\x81\xC2\x8C\xC6\x99\x1B\x9B\xCD\x9D\x6D\x9E\xBE\x96\x2E\x9C\x94\x9C\x30\x9C\x10\x9D\xA2\x7F\xF4\x9C\xB8\x9D\xF6\x9C\x55\x9C\x32\x9D\x31\x97\x51\x9D\x33\x97\x53\x9D\x35\x97\x5D\x9E\x99\x95\x22\x9E\x48\x96\x61\x9E\x25\x9E\x59\x94\x64\x9E\x29\x8E\x8D\x80\xC1\x97\x85\x9E\x31\x90\xF9\x58\x62\x9B\x8D\x7D\x4E\x8C\xF9\x9D\x13\x9E\xF2\x9B\x52\x9E\x0C\x97\xAD\x76\xD2\x9B\x89\x90\xD4\x9B\x2B\x97\xD6\x9B\x3E\x90\xB9\x9D\x31\x9D\x4F\x9D\xF9\x9C\x7B\x9E\x8E\x97\xB2\x97\x90\x97\xA1\x9E\x7C\x96\x5F\x9E\xFA\x97\x24\x9E\x54\x79\x0C\x9E\xA7\x9B\xC1\x79\x0D\x8D\x22\x98\x09\x99\x55\x67\x14\x8D\xBC\x80\xB6\x80\x10\x8D\x54\x69\xBB\x0E\x7C\x00\x0E\x62\xBC\x53\x3C\x7B\x83\x00\x3E\x7B\xD7\x00\xC2\x59\xC3\x72\xDF\x9E\x6A\x5B\xF4\x02\xE8\x93\xD8\x05\xB2\x0D\x7F\x58\x61\x40\x3C\x7B\x9E\x56\x49\x7C\x04\x8E\xE0\x9E\xA0\x7B\x34\x00\x5D\x5B\xE4\x9E\xBC\x99\x60\x98\xBA\x50\x82\x55\xBC\x07\xE6\x0D\x85\x00\x3E\x7B\x32\x00\xEE\x9E\x5C\x7B\xFB\x9E\xE3\x9E\x8F\x04\xE5\x9E\xF4\x9E\xA1\x4B\x22\x41\x3C\x7B\x86\x00\x3E\x7B\x3E\x2B\xA7\x84\x98\x08\x08\x9F\x4F\x5C\xF2\x9E\x53\x59\xE9\x0C\x0D\x2E\xE7\x9E\xC1\x58\xF8\x3F\x37\x56\x31\x01\xE6\x0D\x4D\x3C\xEA\x9A\x2E\x00\xFC\x9E\xAC\x76\x19\x9F\xFF\x9E\x3D\x01\x01\x9F\x0A\x9A\x4D\x56\x40\x01\x3C\x7B\x8A\x00\x3E\x7B\x2D\x00\x1A\x9F\xE8\x8B\x26\x9F\x1D\x9F\x65\x00\xAC\x94\x07\x66\x42\x62\x89\x15\xCD\x85\x9D\x0B\xE6\x0D\xD9\x4D\xEA\x9A\x16\x48\xCF\x9A\x15\x48\x9B\x7A\x9D\x1B\x1F\x9F\xB4\x80\x0F\x7B\xE6\x0D\xDD\x99\xBB\x0E\xE2\x00\x9C\x7B\x98\x08\x40\x9F\x2A\x9F\x3A\x9B\xBF\x5E\x7D\x33\xC2\x77\x55\x59\x0A\x0B\x93\x09\xFE\x98\xB1\x3D\x38\x03\xE6\x0D\x24\x9F\xD7\x7B\x06\x01\xC3\x00\xC3\x9A\x27\x01\x53\x9F\x2A\x9F\x2C\x9F\x6D\x7C\x2B\x06\x74\x15\x30\x9F\x26\x7B\x27\x01\x89\x00\x3E\x7B\xC1\x00\x54\x9F\x45\x5C\x38\x9F\xF4\x02\x58\x9F\x79\x66\xE8\x63\x45\x36\x09\x87\xDB\x58\x1F\x36\x3C\x7B\x87\x00\x3E\x7B\xBD\x00\x62\x9F\x06\x01\x70\x9F\x44\x9F\xCD\x9C\xD9\x08\x5A\x3C\x60\x98\x36\x56\x6E\x24\x3C\x7B\x7D\x00\x3E\x7B\xB2\x00\x71\x9F\x03\x01\x7E\x9F\x57\x9F\x11\x7C\x96\x41\x2F\x9F\x2E\x7A\xE6\x0D\xBF\x4C\xBB\x0D\xE9\x67\x33\x72\x98\x08\xAF\x00\x64\x9F\x00\x9F\x5E\x9A\xB3\x6B\x39\x0A\x48\x9F\xDD\x9A\x9C\x2B\x07\x33\xC2\x77\x27\x61\x48\x0A\x73\x32\x2A\x2C\xE9\x0C\x40\x3C\xA1\x98\x87\x9F\x3E\x7B\xAD\x00\x8B\x9F\xC0\x59\x8E\x9F\x1E\x9F\x90\x9F\x5A\x70\x92\x9F\xE2\x99\x94\x9F\xCB\x43\x96\x9F\x09\x7A\x98\x9F\xEE\x07\x0A\x33\xFB\x2B\xE9\x0C\xED\x55\x9E\x9F\x4B\x17\x3E\x7B\xA8\x00\x7F\x9F\x02\x01\xB7\x9F\x74\x9F\xA8\x9A\xE6\x9E\xE5\x9C\xB9\x22\xA5\x31\x3C\x7B\xEF\x7B\x51\x9F\x01\x5E\xB8\x9F\x27\x5F\xA4\x9F\x93\x68\xED\x85\x46\x10\x53\x34\x1C\x72\x67\x58\x6F\x09\x3C\x7B\x7F\x00\x3E\x7B\x9C\x00\xC5\x9F\x00\x00\xD2\x9F\xBB\x9F\xBA\x98\xED\x79\xBD\x9F\x2D\x9F\x6E\x7C\x5D\x0D\x7B\x9F\x3E\x7B\x8B\x00\xD3\x9F\xDF\x9F\x82\x9F\x2A\x7C\xD5\x2C\x85\x9F\x92\x98\xE6\x0D\x9B\x73\xBB\x0E\x34\x80\xEC\x9A\x02\x05\xC7\x9F\x3A\x9F\x75\x9D\xE6\x0D\xD8\x21\xEC\x9E\x06\x01\x66\x65\xEA\x0D\x3E\x6E\xF4\x9F\xD7\x5F\x0D\x9F\xD7\x9F\xFD\x83\xD9\x9F\x45\x9E\xAD\x94\x00\x0C\xB2\x1B\x9D\x97\x73\x93\xB2\x62\xE6\x0D\x7B\x00\x3E\x7B\xF8\x99\xB0\x9E\xA0\x7B\x07\xA0\x29\x5F\xF4\x02\x27\x9B\xCD\x63\x4E\x9F\xFA\x39\x3E\x7B\x3E\x65\xEB\x9F\x00\x00\x98\x7A\x0E\xA0\x8F\x9F\xA7\x9E\xE6\x9F\xDA\x78\xBB\x0E\xFB\x99\x13\xA0\x9A\x9A\xA0\x69\xF9\x9F\x85\x99\xD8\x9F\x02\x9F\xA0\x6A\xE7\x9F\x3E\x7B\x2B\x99\xA5\x06\x98\x08\xD8\x99\xC4\x66\x20\xA0\x61\x9A\x1C\x0C\x23\xA0\x68\x6F\xC8\x99\x38\x04\xCA\x99\x32\x21\x27\x84\xEF\x0C\xB9\x99\xC6\x9C\xBD\x5C\x25\xA0\xC3\x9F\x02\x01\x57\x98\x13\xA0\xE8\x98\x2B\xA0\x17\xA0\xFA\x9F\xD7\x05\x2F\xA0\x66\x6B\xE6\x0D\xD1\x9A\x89\x9F\x41\x9D\x93\x7F\x5C\x7B\xA4\x7E\x85\x7A\xEE\x9F\xE7\x9B\xCE\x99\x36\xA0\xC8\x18\xE0\x1D\xC2\x81\x2D\x91\xBF\x0D\xD7\x67\x94\x2B\x79\x00\x87\x99\x3B\x01\xBA\x02\xCA\x59\xE6\x0D\x71\x00\x3E\x7B\xBC\x53\x13\xA0\x24\x9D\xEE\x68\x2C\xA0\x68\x99\x65\x0C\xE0\x97\x24\xA0\xEB\x46\x60\xA0\xD3\x9F\x63\xA0\x1F\xA0\x41\xA0\x21",
"\xA0\xFB\x9F\x44\xA0\x12\x6D\x12\x0E\xE9\x0D\x74\x00\x29\x79\x3C\x0A\xBB\x00\xF1\x9E\x6F\xA0\xBB\x0D\x1D\x5A\x74\x68\x2E\x7A\xE9\x0D\x75\x00\x77\xA0\x27\x01\x79\xA0\xD6\x9F\xBF\x0D\x7D\xA0\x09\x89\x61\x98\x9E\x04\xE9\x0D\x6E\x55\xAB\x94\xBD\x5B\x84\xA0\x0C\x9F\x7B\xA0\xB7\x0D\x87\xA0\x39\x7C\xB2\x98\x47\x68\x27\x01\x77\x00\x82\xA0\x09\x01\x8F\xA0\x9E\x5D\x65\xA0\xB3\x0D\x93\xA0\xDE\x7B\x92\x98\xE9\x0D\x78\x00\x99\xA0\x06\x01\x9B\xA0\xDB\x5D\x9D\xA0\xFE\x67\xCE\x71\xA1\x98\xE9\x0D\x79\x00\xA4\xA0\x03\x01\xA6\xA0\x3C\x5E\xA8\xA0\xE6\x7A\x5E\x68\xAA\x9A\x83\x9B\x4D\x5A\x45\x7D\xE1\x9F\xB6\xA0\x84\x9B\x5A\x89\x02\x01\x2C\x98\x57\x68\xE6\x5A\x15\xA0\xAB\x64\x8E\x98\xCD\x93\xA5\x4C\xF2\x99\x4C\x9F\xE7\x44\x2A\x78\x45\x7D\x0A\xA0\x57\x9B\x00\x6C\xC1\xA0\x40\xA0\x08\x7A\x16\x99\x21\x78\x11\x9A\xC0\xA0\xC7\x9F\x5C\x99\x07\x9A\x2C\x0F\x73\x9A\x3C\x9A\x4B\x9A\x95\xA0\x0F\x9A\x17\x99\xA5\x9A\x14\xA0\xD5\xA0\x70\x9A\x38\x3F\x18\x9A\x6B\x99\x9D\x1B\x60\x99\x5A\x9A\xDC\xA0\x76\x77\x6C\x9A\xB7\x98\xB2\x5E\xCE\xA0\x64\xA0\x8F\x04\x1E\x99\x3E\x99\x0E\x2F\xD9\xA0\x61\x99\x3E\x9A\x8A\x77\xEB\xA0\xC8\x98\xD4\xA0\x2A\x9F\x37\x9A\xB3\x6B\x7A\x98\x1E\x9A\xE7\xA0\x84\x9A\xE9\xA0\xB8\x0D\x55\x99\x43\x7A\x22\x9A\x21\x0A\xEE\xA0\x6E\xA0\xB9\x06\x7E\x9A\x51\x0C\x47\x9A\x90\x9A\x25\x9D\x92\x9A\x75\x9A\x6A\x9A\xF9\x58\x64\x99\x79\x9A\x97\x7A\xE1\xA0\xA8\x9A\x11\x07\x6A\x99\xF4\xA0\xE8\xA0\xC3\x98\xB3\x98\xF9\x58\x72\x99\x05\xA1\x82\x99\x07\xA1\x17\xA1\x42\xA0\xCC\x77\x0F\x11\x64\x9A\xC7\x9B\xC3\xA0\x58\x9A\x7D\x99\x93\x9A\xF6\xA0\xD8\x77\xF8\xA0\xD8\x98\xED\xA0\x24\xA1\x70\xA0\xA7\x06\x5A\xA0\x72\x9A\x66\x9A\x4D\x7A\x68\x9A\x11\xA1\x94\x9A\xC5\x98\x30\xA1\x19\x99\x32\xA1\xFB\xA0\x0B\xA1\x27\x74\x80\x9A\xFF\xA0\x3B\x9A\xF5\xA0\x85\x9A\x9D\x99\xDE\xA0\x15\xA1\x0E\x1C\x33\xA1\x2D\xA0\x5B\x7A\xA4\x99\x97\x0F\x1B\xA1\x01\xA1\x1D\xA1\x2C\x9E\xFF\x00\x96\x9A\xE0\xA0\xAF\x99\x23\xA1\x2A\x9F\xE8\x99\xF5\x5A\xCB\x9A\xEE\x98\xCC\xA0\x5A\xA1\x90\xA0\x0A\x9A\xA0\x67\xFF\x88\xD2\xA0\x41\x9A\xF5\x64\x08\xA1\xEB\x6A\xB2\xA0\x52\x9A\x98\x97\xB5\xA0\x4C\x95\xAC\x9A\x1D\x9A\x4D\x9F\x00\x99\xBA\xA0\x0C\x91\xF9\x58\x19\x59\xDD\x99\xEA\x9A\x76\x9B\x09\x91\x95\xA0\x63\x59\x24\x85\x06\x01\xBE\xA0\x8D\xA0\xE6\x5A\xCB\xA0\x94\x60\x2A\xA1\x43\x9B\xC5\xA0\x34\x98\xE6\x99\x0E\xA1\x38\x81\xE0\x79\x59\xA1\x39\x98\xC7\x9F\x1A\x8B\xFF\x99\x4B\xA1\x06\x01\x83\xA1\x16\xA0\x0A\xA1\x18\xA1\x8A\x98\xD7\xA0\x05\x02\x52\xA1\xDB\xA0\x54\xA1\xDD\xA0\x66\xA1\x4F\x9A\x82\xA1\x4D\xA1\x66\xA0\x7F\x77\x2F\x99\x19\x9A\x38\xA1\x60\x7A\x3A\xA1\x5E\x24\x76\x9A\x20\x9A\x3E\xA1\xDE\x99\xB2\x5E\x94\xA1\xC2\xA0\xF0\xA0\x27\x9A\xD5\x2C\x82\x77\xA7\xA1\x72\x7A\xC0\x98\x3B\xA1\x2E\xA1\xC0\x0D\x30\x9A\x21\xA1\x32\x9A\x2D\x69\xB0\xA1\xCF\xA0\x1F\x99\x77\x99\x7F\x77\x4C\x99\x9B\xA1\x2D\xA1\x48\xA1\xC0\x0D\x04\xA1\x78\xA1\x9C\x7B\x21\x0A\xC0\xA1\xEF\xA0\x96\xA1\x25\xA1\x06\x9A\xE9\x0A\x0D\xA1\x45\xA1\x82\x9A\x2C\xA1\xB9\xA1\xC8\xA1\x09\x0F\x14\xA1\x06\xA1\x8E\xA1\x41\xA1\x97\xA1\x8B\x01\x1A\xA1\xB6\xA1\x82\x7A\xAA\xA1\x12\xA1\xF5\x5A\x20\xA1\xCB\xA1\x57\x93\xBF\xA1\xA2\xA1\xC3\xA1\x5B\x7A\xAA\x98\x7B\x99\xE2\xA1\xA8\x99\xE4\xA1\x3C\xA1\xF9\x58\xB5\x98\xDF\xA0\xCE\xA1\x09\xA1\xC2\xA1\xA2\x99\xA4\xA1\x71\x9A\x5C\xA0\xF0\xA1\x0C\x9A\xC7\xA1\x02\xA1\xBC\x0D\x78\x9A\xDC\xA1\x09\x01\xF7\xA1\x6A\xA1\xB2\xA1\xDF\xA1\xC2\xA1\x2B\x05\x44\xA1\x72\xA1\x63\xA1\x2B\x9A\xDA\xA0\x00\xA2\x9D\xA1\xD5\x98\xAD\xA1\xD3\x7B\xA1\xA1\xDE\xA1\xD1\xA1\x7E\x7A\xDD\x98\x51\xA1\xFE\xA1\x10\xA1\xF2\xA1\xBA\xA1\x09\x0F\x57\xA1\x69\xA1\xEA\x9A\xCD\xA1\x8F\xA1\x82\x95\xFF\x00\x5E\xA1\xA0\x9A\x93\xA1\x25\xA2\xA4\x7A\x0F\x9E\x89\x7A\xD3\xA0\x6D\x61\x06\xA2\xC2\x77\x7A\xA1\x71\xA1\xC8\xA0\x73\xA1\x97\x68\x70\xA1\x93\x9F\xC4\x99\xBC\xA0\x01\x01\x80\xA1\x83\x68\x2D\x69\xF7\x9F\xCD\x9E\x78\x90\xD1\x9E\x2C\x0C\xC6\xA0\x89\xA1\xD5\xA1\x37\x98\x09\x0F\x8C\xA1\x49\x77\x6D\x61\x40\xA2\x14\x9C\x74\x93\xFE\x99\x14\xA2\xCC\xA1\x27\x01\x4D\xA2\x49\x9C\x01\x78\x42\xA1\xF0\x79\xD8\xA0\x1C\xA2\xB8\xA1\x1E\xA2\xD9\xA1\xF9\x58\x28\x99\x22\xA1\x53\xA2\x8A\x9A\x51\x79\x86\x99\x17\x9A\x02\x7A\xA6\xA1\x8A\xA1\x99\x99\x5B\xA2\xC1\x77\xE5\xA1\xE7\x0D\x21\x9A\x60\xA2\x0B",
"\x20\x62\xA2\x4A\xA0\x0D\x94\xAE\x05\xF2\xA0\x67\x06\xC6\xA1\xD8\xA1\x01\xA2\xBB\xA1\x51\xA2\xE9\xA1\x00\x6C\x54\xA2\x6F\x9C\xCC\x98\x09\xA2\xC5\xA1\x5A\xA2\xA9\xA1\x6B\xA2\xF3\xA1\xF5\x5A\xCA\xA1\xDF\xA0\x7E\xA2\x8E\x9C\x04\x9A\x18\xA2\x49\x98\x0C\xA1\xFE\xA0\x0D\xA2\xB5\x99\x2B\xA1\x1B\x9A\x78\xA2\x12\xA2\xB1\x77\x7B\xA2\xAB\x9D\x7D\xA2\x71\xA2\x58\x9B\x73\xA2\xE0\xA1\x55\x9A\x4B\x7A\x83\xA2\xE0\x98\x9C\xA1\x89\xA0\x1E\xA1\xE6\xA1\x98\xA2\x36\x79\xE6\x5A\x8A\xA2\x5E\x9D\x4A\x99\xE2\xA0\x63\x9A\x5E\x7A\xA1\xA2\x83\x9A\xA3\xA2\xD4\x98\xB8\x0D\xF5\xA1\x92\xA1\x32\x78\x60\x9A\xA3\xA1\xED\xA1\xFC\xA1\xB5\x3A\xB0\xA2\xD7\xA1\x5C\xA2\x79\xA2\x3D\xA1\x4A\xA1\x04\xA2\xF3\x9F\x9B\xA2\x2C\x9B\xBB\x98\xCE\x98\x72\x00\x77\xA2\xBF\xA2\x96\xA2\x49\xA1\x9F\xA1\xA6\x9F\x9F\x61\xAA\xA2\xAF\x9D\xAC\xA2\x09\xA2\x50\xA1\x6C\x00\xCA\xA2\x85\xA2\x1F\xA2\xF9\x58\x21\xA2\x29\xA2\xB7\xA2\xB1\x99\x26\xA2\x28\xA2\x8D\xA1\x70\xA2\xF1\x98\x2C\xA2\x65\xA1\x2E\xA2\x67\xA1\x3F\xA2\xA7\x9A\x8D\xA2\x77\x9B\x7C\xA1\xAB\x9A\xED\x93\xC7\xA0\x35\x46\x8E\x98\xB9\x94\x7F\x78\x24\x92\x38\x78\xEE\x99\x8F\x9C\xCB\x92\x2C\x9C\xFC\x9D\xB3\x9D\x6E\x96\xC3\x94\x70\x96\x12\x9D\x34\x9C\x59\x9E\x36\x9C\x5B\x9E\x88\x93\xC6\x9E\x95\x96\xC3\x9D\x0B\x64\x9E\x95\xF9\x94\xA0\x95\xC2\x7C\xF6\x84\x79\x08\xF8\x84\xA0\x9B\x50\x8D\xCB\x68\x45\x9C\xBB\x0D\xCA\x70\xF5\xA2\xFC\x99\xB0\x9D\x16\x9C\x71\x92\xD0\x9B\x0D\x9D\xAE\x95\x70\x9E\xF2\x9C\xC4\x94\x97\x9E\x76\x9E\x30\x9D\xF8\x85\xC0\x9E\x33\x9D\x4D\x97\x12\x95\xBF\x9D\xCA\x96\x23\x9C\x51\x97\x59\x9D\x9F\x70\x09\xA3\x9C\x9B\x0B\xA3\xB0\x9E\x55\x91\x4C\x8D\x57\x91\xE4\x80\x59\x91\x77\x8D\xC0\x0D\x01\x95\xEF\x9B\xE6\x0F\x50\x9E\x17\x9C\xFA\xA2\x98\x9D\x72\x9E\x9A\x9D\xC9\x8B\xD5\x9D\x84\x9D\x16\x9D\x0F\x92\x29\xA3\x19\x97\x05\xA3\xFC\x96\x7F\x9E\xC9\x9E\xA5\x9E\x6A\x8E\x77\x91\xE9\x9B\x88\x78\x2B\x9E\xB1\x9A\x90\x89\xEE\x9B\xAC\x9D\x2D\x69\x16\xA3\x0D\x9E\x15\x9C\x90\x9C\x51\x9E\x3F\xA3\xD1\x9D\x41\xA3\xD3\x9D\x9B\x9D\x03\x9E\x55\x92\xBD\x9D\xCC\x94\x7D\x9E\xBF\x92\x4C\xA3\xBC\x9B\x2D\xA3\x8B\x8E\xC5\x9D\x42\x85\x99\x91\x83\x70\xB0\x89\x5B\x81\x45\x95\x7E\x94\x47\x95\xBC\x8D\x23\x7D\xDC\x8D\x59\xA3\x41\xA2\xB6\x8F\x33\x9E\x6E\x95\x5F\xA3\x44\x97\x42\xA3\x10\x8E\x44\xA3\x4E\x9D\x4C\x94\x10\x95\x27\xA3\xDD\x9B\xA1\x9D\xFA\x96\x4A\xA3\x1B\x97\x69\xA3\xE3\x9B\x8D\x9D\x6C\xA3\x42\x9E\xCF\x82\xDB\x8D\x78\x9D\x06\x01\x79\xA3\x4E\xA2\x02\x74\xA0\x96\x1E\x94\x08\x8F\x7F\x9D\x0A\x8F\x80\xA3\xCE\x8E\x82\xA3\x9A\x9E\x25\xA3\x9C\x9E\xC2\x9E\xFB\x9C\x67\xA3\x4F\x93\x8C\xA3\x3E\x9C\x6B\xA3\x53\x93\x95\x97\x4F\xA0\x43\x9C\xD8\x91\x13\xA3\x47\x8A\xE6\x5A\x95\xA3\x55\xA2\x7B\xA3\xB1\x9D\x1B\xA3\xE5\x9D\x0E\x9D\x18\x9E\xC2\x96\x75\x9C\xD1\x97\x77\x9C\x68\x9D\x05\x9E\xBE\x9D\x88\xA3\x6A\x97\x8A\xA3\x37\x97\x09\x9E\x98\x9B\x25\x95\xBC\x67\xF6\x91\x80\x9C\xF8\x91\xC5\x81\xA3\x95\xC7\x81\xC0\x0D\xA5\x95\xA2\x97\x94\xA3\x3D\xA3\x1A\xA3\x15\x9E\x1C\xA3\xB8\x9E\xB6\x92\x1F\xA3\xFE\xA2\x21\xA3\xD7\x9B\x77\x9E\xD9\x9B\x79\x9E\xDB\x9B\x86\xA3\x35\x9D\xC4\x9E\x37\x9D\x19\x98\x19\x8C\x8E\xA3\xAA\xA3\xB1\x7D\xC0\x9C\xFD\x83\xBF\x95\x20\x8C\x87\x9E\xE6\x9C\xBE\x8E\x07\x96\xC5\x95\xF9\x58\x23\x92\xCC\x9B\x03\x01\xB2\xA3\x7F\xA2\x13\x91\xB5\xA3\xD5\xA3\xB7\xA3\x1D\xA3\xB9\xA3\x1C\x9C\x73\x95\xB2\x95\x75\x95\xD7\x9D\x16\x98\xC1\xA3\xD7\x97\xC1\x9D\x60\x95\x07\xA3\xE5\x93\x90\xA3\xE0\x9A\xD6\xA1\x7D\x04\x41\x92\x4A\x9E\xB7\x96\xF9\x58\xE9\x95\xD1\xA3\xF6\xA3\xD3\xA3\x23\x93\x40\xA3\x7F\xA3\x61\xA3\x43\xA3\x63\xA3\x7C\x92\x65\xA3\x1B\x96\x48\xA3\xB3\x97\xE5\xA3\x3E\x8E\xE7\xA3\x31\x94\x6D\xA3\xC2\x9B\x00\x96\x29\x6F\x57\x86\xCD\x99\xEE\xA3\x27\x0A\xF0\xA3\x2E\x96\xC0\x8E\x09\x0F\xC9\x9C\x14\xA4\x7D\x10\x16\xA4\x5C\x93\x2A\x9D\xF5\x9B\x2A\x97\xF7\x9B\x2C\x97\x8D\x66\xBE\x9E\x24\xA3\x84\xA3\x50\x9D\xA3\xA3\x52\x9D\x36\x9D\x54\x9D\x22\xA4\x4F\x8F\x24\xA4\x71\x9D\x26\xA4\x06\x86\xE1\x9C\x28\x96\xE3\x9C\xC3\x9C\x8C\x92\xC5\x9C\x21\x95\xC7\x9C\xF5\x5A\xEA\x9C\x93\x9D\x34\xA4\xB3\x9E\xF9\xA2\x0C\x9D\xFC\xA3\xD7\xA3\xAF\x95\xD9\xA3\xAB\x97\xD3\x9C\xAD\x97\x46\xA3\x35\x92\x05\xA4\x18\x98\x2B\xA3\x1A\x98\x47\xA4\xBA\x91\x72\x9D\x4D\x79\x06\x9D\x95\x82\x93\xA3\x15\xA4\x57\xA4\xEE",
"\x9C\x59\xA4\x62\x9D\xE6\x9D\x62\x97\xBB\xA3\x8F\x9B\xBD\xA3\x04\x9E\x03\xA3\x03\x94\x07\xA4\xAF\x96\x2C\xA3\xCA\x9E\x7B\x8B\xFD\x8E\xA3\x77\x78\xA3\x35\xA4\xF7\x93\xF0\x9C\xC7\x91\x5D\xA4\xD9\x96\xDB\xA3\xBD\x9E\x99\x9E\xBA\x9D\x9B\x9E\x57\x9C\x32\x97\x59\x9C\x9F\x9E\x5B\x9C\x3D\x9E\xE1\x9B\xC8\x9E\x6A\xA3\x7E\xA4\x29\x6E\x1F\x8F\x49\xA0\x38\x91\x21\x0A\xF7\xA3\x8B\xA2\xD6\x74\x7C\xA3\x89\x96\x35\x9E\x56\x9E\x37\x9E\xE9\x9D\x39\x9E\xEB\x9D\x3B\x9E\xF6\x97\x93\xA4\x3C\x9C\x95\xA4\x8D\xA3\xA9\xA3\xF8\x6D\x5B\x9D\xF4\xA2\x83\xA4\xA7\x97\xFD\x9D\x38\xA4\xBA\x9E\x3A\xA4\xBC\x9E\x8D\x90\xDD\xA3\x5D\x5F\x90\x84\x52\x7E\x41\xA4\x9E\x9E\x43\xA4\xA0\x9E\xAA\xA4\x5D\x9C\xAC\xA4\xA8\xA3\x97\xA4\x44\x79\xCC\x9E\x96\xA3\x5F\x94\xFF\x00\x1E\x93\x6D\xA4\x56\xA4\x90\x9E\x98\xA3\x55\x96\x9A\xA3\x73\xA4\x64\x9D\x75\xA4\x66\x9D\x77\xA4\x64\xA3\xBF\xA3\x66\xA3\x22\x9C\x7C\x9C\xC5\xA3\x41\x9E\xAB\xA3\x7D\x7E\xD0\x96\x8F\x6B\xB3\x8F\x97\x1E\xB2\xA4\x05\x93\x18\xA4\xAC\x9B\x9D\xA3\xEC\x8E\x1C\xA4\x0D\x93\x1E\xA4\x4E\x97\xDF\x96\x65\xA4\xE6\xA3\xAE\xA4\x48\xA4\x0B\xA4\x35\x70\xAA\x9D\xA8\xA2\xF5\xA3\xCE\xA4\x07\x99\x21\x93\xCB\x97\x34\x9E\xD6\xA3\x4E\x9C\xD3\x9B\x2C\x9D\x74\x9E\xB7\x9D\x22\xA3\x3D\xA4\xD9\x93\x8D\xA4\xBC\x9D\xD9\xA4\x1F\xA4\x63\xA4\x95\x9B\x7E\x9E\x09\xA4\x77\x94\xF4\xA4\xEA\x70\xC7\x9D\x27\x9E\xBB\x8B\x78\x83\x60\x7E\x9D\xA4\xAB\xA2\xF7\xA2\xA6\x97\xE6\xA4\x7E\xA3\xE8\xA4\x1A\xA4\x81\xA3\xEB\xA4\x35\x95\x09\xA5\xEE\xA4\x88\x9D\x45\xA4\x6D\x8F\x67\xA4\xD4\x91\x69\xA4\x80\x5D\x22\x97\x03\x01\x60\x9B\x86\x7B\x6D\x61\x17\xA5\xD2\xA2\x19\xA5\xFC\xA4\x7D\xA3\xA2\xA4\xD2\x9D\x65\x9D\xD4\x9D\x20\xA5\x5A\x95\x22\xA5\x28\xA3\x0B\xA5\xDF\x9B\xC2\xA4\xB9\x9C\xC4\xA4\x5F\x9C\x27\xA5\x1A\x95\x49\xA4\x1E\x8F\xF5\x9D\xFF\x8B\x52\x9A\xDE\x94\x9C\x0F\xE5\xA4\xC0\x94\xE7\xA4\x48\x9D\xE9\xA4\xB4\x90\x39\xA5\x93\x95\x3B\xA5\x87\xA3\xA5\xA3\x2D\x94\xA7\xA3\x42\xA5\xF2\xA4\x68\xA4\x45\xA5\x9C\x94\x12\xA5\xFD\x9F\x1A\x8B\x04\x91\xF4\x90\x00\x6C\x30\xA5\xE2\x9D\xFA\xA3\xB5\x9E\x28\x97\xB5\xA4\x01\xA5\xBB\x9E\x75\x9E\xDC\xA3\x23\xA3\x06\xA5\xA1\xA3\x8E\xA4\x9D\x9E\x90\xA4\xC0\xA4\x92\xA4\x25\xA5\xE8\x8F\x43\xA5\x64\x95\xC3\x90\xB9\xA2\xDA\x7F\x00\x98\xE5\x0B\x2E\x90\xED\x93\x2B\x9E\x1C\x88\x8D\x9E\x86\xA1\x9C\xA4\x4C\xA5\xAA\x9B\x4E\xA5\xB4\x9D\x50\xA5\xE7\x91\x52\xA5\x40\x96\x54\xA5\xE2\xA3\x20\xA4\xC5\x9E\x3F\xA5\x6E\x9D\xA3\x9E\x28\x91\x78\xA5\xE0\x92\x29\xA5\x77\x79\x44\x9E\xAC\x9E\xB2\x88\x9A\x97\x47\x9E\x3F\x88\x7F\x79\x51\xA4\x90\x92\x4C\x9E\x71\x8E\x6C\x9C\x37\x78\x86\xA5\x72\x9C\x1C\xA5\x4F\xA5\x1E\xA5\x9E\xA3\x8C\xA5\x76\x96\x79\xA4\x94\x94\xC3\xA3\x6C\x97\x41\xA5\xBB\x9C\x96\xA5\x1C\x98\x82\x9E\xC4\x90\x84\x9E\x9E\x97\x08\x99\xB3\x0D\x66\x9E\x3F\x14\x81\xA5\x50\x59\xC5\x97\xFE\x91\x9F\x61\x64\xA5\x32\x9E\x66\xA5\x5E\xA3\x35\xA5\x60\xA3\x37\xA5\x62\xA3\xD7\xA4\x1D\xA4\x8E\xA5\x7C\x9E\xDB\xA4\xDA\x9D\x7D\xA4\x4E\xA3\x7A\xA5\xB8\x6A\xB0\x79\x83\x9C\x11\x89\xDC\x66\x5D\x94\x8A\x9E\xBC\x8A\xC0\x0D\xE9\x97\xC2\xA5\xF5\x64\xC4\xA5\xBD\x96\xD0\xA4\x19\x9C\xD2\xA4\xB8\xA3\x0F\x97\xD1\x9C\xB1\x9C\x89\xA4\xB9\xA4\x6E\xA5\x0E\x95\x3F\xA4\xC1\x9E\xE1\xA3\xCF\xA5\xEF\xA4\xDC\xA4\xD2\xA5\x81\x9E\xA6\x9E\x63\x9E\x13\xA5\x11\x9E\xA5\x4C\x03\x98\xF1\xA3\x2F\x96\xAE\x9E\xE8\x8C\x60\x89\x63\xA5\xA7\xA5\xB2\x9D\x88\xA5\xFC\xA2\x73\x9E\x6B\xA5\x03\xA5\x6D\xA5\x05\xA5\xED\xA5\x4B\x97\xB4\x9B\xCE\xA5\xC3\x9E\x90\xA5\xE4\xA3\xF0\xA4\x23\xA4\x5A\xA5\x28\xA5\x5C\xA5\xEE\x87\xC8\xA4\xB3\xA3\x0C\x8D\x18\xA0\xC6\x84\x0F\x8D\xD0\x84\x6F\x8D\xC7\x79\xD2\x9E\xA4\x94\xEF\x7C\xA6\x94\xF2\xA2\xAF\x78\xF2\x82\x77\x65\x5A\xA3\x4A\x9C\xC6\xA5\x71\xA4\xD6\x90\x9B\xA3\xD8\x90\xFD\xA2\x5E\xA4\x01\xA4\x99\x9C\x03\xA4\x9B\x9C\x3D\xA5\x01\x9C\xB1\xA5\x92\x97\xDD\xA4\xEF\x84\xC7\xA3\xF5\x91\x64\x9C\x55\xA0\xD6\x94\x1E\x85\xD8\x94\x4E\x8D\x32\x89\xA3\x9B\x0D\x89\x6D\x61\x28\xA6\x7A\xA3\x3E\x93\x2B\xA6\x40\x93\xC8\xA5\x19\xA4\xCA\xA5\x1B\xA4\xCC\xA5\xEC\xA4\x0E\xA6\xA4\xA3\xD0\xA5\x08\x9E\xF4\xA5\xC6\xA3\xF8\x9D\x68\x62\x3E\xA6\x53\x6F\xC3\x9B\x33\xA3\x63\x78\xAD\x72\x0C\x81\x98\x91\xC9\x9B\x39\xA3\x79\x8D\xF8\xA4\x7B\x43\x6F\xA4\x0B\x9D\x4C\xA6\xFE\xA4\x17\x9E\xE7\xA5\xAA\x97\x88\xA4\xAC",
"\x97\x87\x8D\x0C\xA6\xFD\x9B\xAF\xA5\x39\x95\x38\xA6\x03\x9C\x58\xA5\xB4\xA5\x14\xA6\x44\xA5\x10\xA5\xA0\x7E\x7C\x89\x85\x78\xF2\x99\x53\xA3\x38\x81\x7E\x91\x46\xA6\x9F\x61\x48\xA6\xC9\xA4\x4A\xA6\x19\xA3\x17\xA4\xA9\xA5\x89\xA5\xAB\xA5\xEA\xA4\x51\xA6\x21\xA5\x74\xA6\x5E\x95\x7B\xA4\xD9\x97\xC5\xA4\xD3\xA5\x98\xA4\x42\x95\x78\x85\x72\xA3\xB9\x8D\xDB\xA5\x82\x89\xB8\x0D\x7E\x85\xCD\xA4\x67\xA6\xCF\xA4\xA0\xA4\xA1\x96\x93\x9E\x2E\xA6\xE3\x91\xE8\xA5\x00\x9E\x33\x9C\x02\x9E\x8F\xA6\x3A\xA5\x91\xA6\xB8\x9B\x92\xA5\xA4\x9D\x0E\xA5\x3F\x95\xDF\xA4\xA0\x7E\x92\xA3\x55\xA4\xA1\xA6\xFA\xA4\xF5\x93\x33\xA5\xA1\xA4\x6B\xA6\x36\x9E\x1D\x9C\x38\x9E\x1F\x9C\xDD\x96\x21\x9C\xF2\xA5\xD1\xA5\x66\xA4\x7A\xA6\x79\xA5\x97\xA6\x16\x78\x01\x8E\xAF\xA3\xC8\x6D\xB2\x5E\x86\xA6\x19\xA6\x3C\x8F\x5C\xA3\x3E\xA3\x2C\xA6\xC0\x96\xA6\xA6\x9D\x93\xA4\xA4\x1B\x9E\xA6\xA4\x1D\x9E\xA8\xA4\xB7\x9C\xB0\xA6\xEF\x9D\x78\xA6\xDC\x9C\x27\x5C\x2F\xA3\x27\xA4\xB6\x99\x32\xA3\xA2\x95\x24\x8E\x90\x7D\xFB\x91\x21\x8A\x83\xA5\x81\x84\xF5\x64\xCF\xA6\xF8\xA3\x9F\xA4\x4B\xA6\x2B\x95\xFB\xA2\xA9\x97\x30\xA6\x6F\xA6\x5F\xA4\x71\xA6\x9E\x9D\x4B\x93\xDC\xA6\xED\x9D\xDE\xA6\x21\x9E\xB3\xA5\xE1\xA6\x96\xA6\xB7\x8E\x28\xA4\x1B\x92\x45\x8E\x2B\xA4\x1E\x92\x85\x9C\x95\x8E\x10\xA4\xA7\x9C\x45\x8A\x4D\x9E\x46\x9C\x47\xA6\x02\xA6\xB6\xA3\x72\xA4\xE6\xA5\xCF\x97\xD5\xA4\x38\xA5\xAC\xA6\x53\xA5\xAE\xA6\x3A\x9C\xFE\xA6\x5E\x9E\xE0\xA6\x01\x9D\xC7\xA6\x97\xA5\x16\xA6\x62\xA6\xA3\x9C\x6C\x8E\x66\x8A\x9C\xA6\x7B\x97\x36\x86\xEC\xA6\xEA\x85\xEE\xA6\x11\xA7\xFB\xA3\x13\xA7\xFD\xA3\x6D\xA6\xF6\xA6\xD2\x9C\x32\xA6\xD4\x9C\x34\xA6\xD6\x9C\x36\xA6\x9D\x9C\x56\xA6\xC6\xA6\xC6\xA4\xEA\x81\x83\x9E\x8F\x8E\x29\xA4\x91\x8E\x4E\xA4\x2B\x96\x05\x96\x86\x9C\xFC\xA5\x30\xA4\xC8\x9C\x6B\x9E\x91\x20\x68\xA6\x28\x9D\xD4\xA6\x1A\x9C\xD6\xA6\x19\x9E\xD8\xA6\x58\x9E\xDA\xA6\x5A\x9E\xFC\xA6\x1F\x9E\x1C\xA7\xA2\x9E\x00\xA7\x1F\xA7\x3C\xA7\x3F\x82\x88\x92\x6D\x82\x8A\x92\x42\xA7\xBE\x9F\x17\x03\x2E\xA4\xE8\x9C\xF2\xA3\x53\xA4\x31\x96\x29\x9C\x00\x6C\xEF\xA6\x9E\xA4\x5B\xA3\xF8\xA2\x70\xA4\x6A\xA6\x5A\xA4\xFF\xA4\xB9\x9E\x6A\xA5\xB7\xA4\x6C\xA5\x8A\xA4\x4D\x9D\xA0\xA3\xEE\xA5\x26\xA3\xED\xA4\x3C\xA5\x56\xA5\x60\x96\x1E\xA7\x1D\x9D\x5B\xA7\x7C\x81\x4C\x96\x6C\xA4\xB7\xA6\x2A\x03\x2D\xA7\x67\xA5\x83\x97\x69\xA5\xFF\x9D\x4A\x9D\xAF\x9B\x4C\x9D\x16\x96\x83\xA3\x72\xA6\x86\x9D\xC3\xA6\x24\xA5\x12\xA6\x46\xA4\x20\xA7\xB6\xA5\xC5\x86\x22\x9D\xFE\x8A\xA0\xA6\x86\xA7\x4B\xA7\xFB\x9D\x4D\xA7\xE5\xA5\x30\xA7\x15\xA7\x57\x9E\x76\x9C\x01\xA3\xB5\x9C\x55\xA7\x5C\x9E\x57\xA7\xC7\x9E\x7F\xA7\x3B\x9D\x81\xA7\x20\x69\xE8\x86\xEC\x5D\xD2\x82\x7D\x20\x87\xA7\xC7\xA5\xBD\xA6\xA3\xA4\xBF\xA6\xA5\xA4\xC1\xA6\x3A\x9E\x93\xA7\x3C\x9E\x76\xA5\x94\x91\xB5\xA5\xB9\x48\xB0\xA4\x66\xA6\x9D\xA7\xA2\xA6\xF2\xA6\xEE\x95\x70\xA7\x6C\xA6\xA3\xA7\x51\xA7\xA5\xA7\x53\xA7\x02\xA3\xA8\xA7\x04\xA3\xAA\xA7\x06\xA3\x3A\xA6\xC4\x9D\x7C\xA6\xEC\x90\x26\x5A\xA0\x75\x91\x88\x14\x83\x77\x9D\x85\xA7\x6A\xA7\x18\xA5\xF9\xA3\x89\xA6\x36\xA4\xB4\xA4\xF1\x9C\xF6\x9B\x8C\x62\x3B\xA4\x19\x01\xA0\x88\xB2\x9B\x61\xA4\xA3\x92\x38\xA7\xD8\x9C\xBE\xA7\xB8\x91\xF2\x9D\xDC\x97\xB4\xA6\xCB\x71\x7C\x8B\x46\x87\xDC\x8D\xDD\xA7\x31\xA5\xDF\xA7\xD2\xA6\xD4\xA3\x88\xA7\x0D\x98\xE3\xA7\x39\xA4\xE5\xA7\xB8\xA4\xD7\x93\xEC\xA5\x78\x9E\x07\xA5\x7A\x9E\xF0\xA5\x0F\xA6\xEC\xA7\x19\x9D\xEE\xA7\x5D\x92\x97\xA7\xE5\x9B\xD5\xA7\x39\x93\xE6\x96\xF7\xA4\x02\x95\x4A\xA7\xC5\xA7\xE0\xA7\x84\xA4\x37\xA4\xFE\xA7\xB6\xA4\x00\xA8\x75\xA7\xEB\xA5\x0A\xA6\x04\xA8\x70\xA5\x08\xA5\x1A\xA7\xFD\x9C\x0B\xA8\xC1\x92\xC0\xA7\x07\x9C\x4B\x79\x18\xA6\xF0\xA6\x15\x99\xDE\x6B\xBC\x8B\xF6\xA7\xB4\xA7\xA0\xA7\x9B\x93\x4F\xA7\xBA\xA3\xA4\xA7\xBC\xA3\xA6\xA7\xBE\xA3\x22\xA8\x6C\x9D\xD1\xA7\x4B\xA3\xB2\xA6\xEA\x90\x22\xA7\xEA\xA6\x90\x93\xAC\x87\x68\xA7\x21\x0A\xF7\xA7\x65\xA5\x16\xA8\xB3\xA4\xF4\xA6\xD0\x9C\x6E\xA6\x33\xA7\x1E\x9C\x02\xA4\x20\x9C\xD8\x9D\x55\xA6\x0D\xA5\xD3\xA7\xC5\x93\x98\xA5\x77\x5B\x3C\x97\xE7\x0D\x3E\x97\x24\x92\x44\xA8\xC5\xA5\x46\xA8\x1B\xA5\x4D\xA6\x1D\xA5\x4F\xA6\x1F\xA5\x18\xA7\x8D\xA5\x38\xA8\xA2\x9D\x3A\xA8\x8B\xA3\x3C\xA8\xE0\x95\x54\xA8\xD6\x88\x5E\xA5\x9B\xA5\x22\x95\x59\x97\x0B",
"\x96\xD6\x4B\x2F\xA8\x6F\xA7\x2F\xA7\x5B\xA4\x1E\xA3\xE4\xA7\x8A\x66\x01\xA8\x2D\x97\x8B\xA4\xBF\x9E\x79\xA7\xA2\xA3\x07\xA8\x54\xA6\xC4\xA6\x3A\xA7\xF1\xA4\xAE\xA7\x79\x94\x9A\xA5\xBA\xA5\x04\x6E\xB5\x57\x29\x9E\xE1\x7F\x27\xA7\xC1\x8C\xF1\x93\x2A\xA7\xB2\x79\x2D\x69\x5A\xA8\xE2\xA5\xA3\xA6\x99\xA3\x31\xA8\xD3\xA4\x80\x9D\x8D\xA6\x51\xA5\x62\xA8\xAE\xA5\xCF\xA7\x7A\xA4\x76\xA6\xC2\x9D\x52\xA8\x0A\xA4\xF2\xA7\x3A\x73\x33\xA2\x7D\xA5\xED\x78\xB5\x62\x53\x90\x38\xA0\xF0\x93\x43\x88\x8F\xA8\x71\x6A\x92\xA8\xC9\x97\x6E\x9E\x7D\x9D\xA5\xA6\x97\xA8\x9C\xA3\x99\xA8\x8B\xA5\x9B\xA8\xA9\x96\x53\xA6\x42\xA4\xE3\xA3\x44\xA4\x95\xA7\x26\xA5\x0D\xA8\x27\xA8\xDC\x9A\x1B\xA6\x6D\xA8\x31\x98\x79\x90\xA5\x66\x98\x8C\xA1\xA5\xAB\xA8\xE7\x0D\xC1\xA5\xA5\xA5\x45\x78\x9E\xA7\x5D\xA3\x30\xA8\xD0\x95\x32\xA8\xFF\xA3\x97\x9C\x34\xA7\x60\xA4\x36\xA7\x17\x9D\x09\xA8\xC0\x9D\x9F\xA8\x08\xA4\xA1\xA8\x0F\xA5\xA3\xA8\xF5\x73\x7A\x94\xD7\xA5\x3A\x0B\xDA\xA5\x74\xA3\x11\xA4\xF5\x5A\xDE\xA5\xCD\xA8\x71\xA8\xCF\xA8\xD3\xA6\x73\xA8\x2D\xA6\xB4\xA8\x2F\xA6\x06\xA6\x74\xA7\x08\xA6\x76\xA7\x8F\xA7\x78\xA7\x91\xA7\x9F\x9D\x04\xA4\x7D\xA7\xB5\x97\xAC\xA7\x58\x9D\x84\xA8\x13\x88\x3E\xA7\x68\xA0\x60\xA7\xC4\xA0\x4F\x04\xE4\x8C\xE6\xA8\x0C\xA7\x09\x0F\xAF\x9E\x72\x8D\xB1\x9E\x2C\xA7\xEC\xA8\xFB\xA7\xB5\xA7\xC8\xA7\xBE\xA6\x00\xA4\x4C\xA8\x33\xA6\x4E\xA8\xFA\xA8\x50\xA8\x68\xA3\x68\xA8\xB2\x96\x3E\xA8\x55\x97\xD7\xA7\x72\x75\x21\x98\x27\x98\xF3\x81\x20\xA6\x24\x98\xD3\x9E\xF7\x90\x21\xA9\xD1\x84\x85\x9B\xBA\x94\x24\x92\x33\x11\x0E\xA9\x8A\xA6\x5E\xA8\xAA\xA5\x60\xA8\xAC\xA5\xB8\xA8\x15\x97\xBA\xA8\xBF\xA4\xBC\xA8\xC1\xA4\x24\xA8\x51\x93\x26\xA8\x61\x9C\x3C\xA6\xF7\x94\x8A\x7D\x0A\xA3\xE5\xA6\x0B\xA9\x5E\xA6\xF7\x84\x7B\x72\x31\x89\xCE\xA3\xA2\x9B\xCC\xA6\x4E\x8E\xE6\x5A\x2C\xA9\x15\xA8\xFA\xA7\x2E\xA9\xB6\xA7\x36\xA5\x16\xA7\xCB\xA5\x36\xA8\x78\xA4\x9D\xA8\xB0\xA5\x66\xA8\xC4\xA3\x57\xA6\x50\x91\x62\x9C\xC9\xA3\x40\xA9\xCB\xA3\xA1\x95\xFC\x94\x36\xA3\xFE\x94\x63\xA6\x02\x99\xCB\x9B\x13\xA8\x34\x03\x72\xA8\xF3\xA6\x04\xA6\xF5\xA6\xF2\xA8\x1B\xA8\xF4\xA8\x1D\xA8\x7B\xA8\x3E\xA4\xF8\xA8\xFB\xA6\xBC\xA7\xA9\xA4\x39\xA9\x2F\x94\x3B\xA9\xBD\x9C\xE0\xA8\x46\xA5\x50\xA3\x7D\x89\x80\xA6\xAA\xA8\x75\x97\x23\x95\x56\xA3\x84\xA6\xF5\x64\x4C\xA9\xB9\xA6\x5D\x97\xED\x95\x4C\x9C\x50\xA9\xC9\xA5\x52\xA9\x50\xA6\x54\xA9\xD8\xA4\x64\xA8\x89\xA3\x58\xA9\xB2\xA5\xFD\xA8\x23\x9E\x02\xA7\xC9\x6A\x6F\xA3\x98\x05\x44\x0B\xB1\x89\x9C\x91\xC9\xA8\x43\x71\x0F\x9C\x60\x7E\x86\xA9\x14\x99\x2A\xA6\x5C\xA8\x4D\xA5\x8B\xA6\x05\xA6\x8A\xA5\x62\x93\xAD\xA5\xB9\xA8\x91\xA9\xC2\xA3\x93\xA9\x39\xA6\x5A\xA9\xA0\x9C\x1C\xA9\xB0\x72\xB6\xA6\x42\xA8\x27\x01\xA2\xA9\xF6\xA2\xF9\xA7\x6D\xA7\x69\xA6\x6A\xA9\xA7\xA9\x6C\xA9\xA9\xA9\x3C\x96\xAB\xA9\x34\xA9\xAD\xA9\x06\xA4\xDC\xA8\x7C\xA4\x3B\xA7\x97\xA9\x81\x96\xCA\xA6\xA1\x81\x49\xA9\x6C\x04\x9F\x61\xB8\xA9\x17\xA3\x70\x9C\xA5\xA9\x87\xA5\xBE\xA9\x49\xA8\x32\xA7\xE9\xA5\x70\xA6\xA9\x8E\x73\xA9\x4D\x94\xC4\xA9\x64\xA4\xF3\xA5\xC8\xA9\xA8\x5E\xE3\xA6\x4A\xA4\x41\xA9\x67\x9C\xCD\xA3\x26\x8E\xEB\xA6\x0E\xA7\x23\x98\xCF\xA9\x69\xA9\xC7\xA7\x74\xA8\x71\xA7\xD8\xA3\x77\xA8\x50\x5C\x79\xA8\x3C\xA4\x71\xA9\x6F\xA5\x7D\xA8\x71\xA5\xBE\xA4\x73\xA5\x37\xA9\x75\xA5\xBE\xA8\x77\xA5\xC0\xA8\x9A\x94\xB3\xA9\xE0\x9C\x81\x9C\x08\x86\xC5\x78\xE3\xA8\x41\x8A\x8E\x92\xC4\xA8\xA2\xA5\x0D\xA7\xA4\xA5\x8B\x9C\x09\x01\xD0\xA9\x29\xA6\x97\xA3\x94\xA8\xD1\xA4\x96\xA8\x14\xA7\xE7\x9D\xCB\xA7\x35\xA8\xCD\xA7\xA7\xA7\x75\xA9\xDD\xA6\x77\xA9\x75\x94\xFF\xA9\x7A\xA9\x3E\x92\x0D\xA4\x75\x04\x0F\xA4\x46\xA7\xE7\x95\x13\xA4\x2F\x9E\x21\x0A\x0F\xAA\x49\xA6\xD1\xA6\xBB\xA9\x4C\xA7\xEE\xA8\xD5\xA6\xF0\xA8\xA7\xA6\x4A\xA8\xD8\xA9\xF8\xA6\xDA\xA9\xFA\xA6\xDC\xA9\x56\xA9\x75\xA6\xAF\xA9\x77\xA6\x1A\xA9\x00\x97\x01\xAA\x2D\x66\x26\x96\x3F\xA7\x27\x74\xC2\x9C\x07\xA7\xC4\x9C\x09\xA7\x68\x92\x02\xA0\xCA\xA4\x32\xA4\x28\xAA\xB7\xA9\xEC\xA9\x8A\xA9\x11\xA9\xB7\xA7\x13\xA9\xC0\xA6\x4D\xA8\xC2\xA6\x4F\xA8\x81\xA8\x51\xA8\xB1\xA9\xD4\xA7\x7B\xA9\x65\x9C\x9F\x94\x56\x6F\xE2\x9C\x02\x96\xBA\x8B\xC1\x95\xEF\xA3\x2D\x96\x64\xA7\xFD\xA5\x66\xA7\xC2\x8E\x9C\xA7\x2A\xAA\x87\xA6\x2C\xAA\x1A\xA5\xA6\xA9\x2F\xA9\x8C",
"\xA6\x31\xA9\x8E\xA6\x8F\xA9\xCD\xA5\xDD\xA9\x0C\xA5\x19\xA9\xDE\xA8\xB3\xA6\xCC\x87\x6B\xA4\xDD\x8A\xA1\xA9\x4E\xAA\x61\x9D\xEF\xA8\x15\xAA\x74\xA4\x34\xA8\x76\xA4\x73\xAA\x52\xA6\x75\xAA\x3E\xA5\x1D\xAA\x62\x96\xFF\xA8\xE5\x96\x9A\xA7\xFE\x8E\x2E\xA5\xEB\xA9\x2D\xA9\xE1\xA7\x48\xA8\xFE\x9D\xA8\xA6\x8C\xA7\x01\x9E\x8E\xA7\x83\x9D\x90\xA7\x37\xAA\x85\xA3\x7B\xA7\x55\xA5\x18\xA9\xA6\xA3\x3D\xAA\x1F\x97\x5B\xAA\xE0\x75\x40\x9D\xB1\xA7\x1D\x8B\x0E\xAA\x7E\xAA\xE4\x9D\xEE\xA9\xC9\xA7\x16\xAA\xB8\xA7\xD9\xA6\xBA\xA7\xA7\xA4\x1B\xAA\xFD\xA6\x89\xAA\xFE\x96\x1F\xAA\x17\x5E\x39\x8B\x1D\x79\x2B\xA9\xA9\xAA\xFD\xA4\x50\xAA\x51\xA9\x83\xAA\xD6\xA4\x85\xAA\x90\xA6\x39\xAA\x92\xA6\xC6\xA9\x94\xA6\x59\xA5\x8B\xAA\x12\x79\x6C\xA8\x87\xA8\x72\x8C\xB8\x96\x06\x01\x16\x83\xCC\x9D\x4D\xAA\x91\xAA\x17\xA8\xE2\xA7\x86\xA4\xF1\xA9\x4F\x46\xE6\xA7\x4A\x61\x03\xA8\xDE\xA3\x05\xA8\xE0\xA3\x9D\xAA\x8F\xA5\xDA\xA8\x2A\xA3\xDF\xA9\x83\xA8\xC9\xA9\x21\x97\xE1\xA4\x7D\xAA\xD2\xAA\x47\xA8\x6B\xA9\xD6\xA9\x6D\xA9\x78\xA8\x1C\xA8\x02\xA8\x1E\xA8\xDB\xAA\x20\xA8\x06\xA8\xDE\xAA\xF1\xA5\x94\xA7\xE2\xAA\x13\xA6\xC8\xAA\xFC\x8E\x11\xA8\x55\x83\x67\xA9\x74\x0A\xBB\xAA\x34\xA5\x8B\xA9\x4E\xA6\x8D\xA9\x61\xA8\xC1\xAA\xAD\xA6\xC3\xAA\xAF\xA6\xB4\xAA\x1D\x97\xB6\xAA\xF1\xA7\x0B\x9E\x1E\xA9\xDE\xA2\xC9\x9D\xCB\x9D\x24\xA7\x2D\x69\x6A\xAA\xD0\xA6\x31\x91\x6D\xAA\xD4\xA9\x6F\xAA\xA8\xA9\xB6\xA8\xAA\xA9\x33\xA9\xAF\x97\x35\xA9\xFA\xA9\x10\xA6\xBD\xA8\xF7\xAA\x96\xA7\xF9\xAA\xF5\xA4\x47\x79\x23\x97\x69\xAA\xFF\xAA\xBC\xA6\xBD\xAA\x8C\xA9\xBF\xAA\x17\xA7\x05\xAB\x19\xA7\x07\xAB\x1B\xA7\x09\xAB\xB7\x97\x0B\xAB\xAF\x82\x6E\xA3\x47\xA5\xEE\x8F\x49\xA5\x0D\xAA\x06\x01\x14\xAB\x2A\xA8\xA4\xA9\x4E\xA9\x92\xAA\xEA\xAA\x94\xAA\x33\xAA\xA9\xA6\xFF\xA2\xAB\xA6\x30\xAB\x63\xA8\x32\xAB\x23\xA8\xFD\xA9\xBF\xA7\x36\xAB\xD2\x78\x9D\x94\x9B\x8D\x03\x91\x49\xA7\x68\xA9\xE8\xAA\x5D\xA8\x01\xAB\x5F\xA8\x03\xAB\x32\xA9\x49\xAB\x9C\xA8\xB2\xAA\x56\xA7\x34\xAB\x05\x9C\x79\xA9\xF3\x9D\xC2\xA8\xEA\xA2\x7B\xA1\x49\xAA\x22\x95\xEB\x93\x3A\x76\x80\xA5\x80\xA9\xC3\x97\x2D\x9E\x54\xAB\xFE\xAA\x56\xAB\x6E\xAA\x58\xAB\x30\xA9\x5A\xAB\x72\xAA\x19\xAA\x37\xA8\x4B\xAB\x39\xA8\x60\xAB\x8C\x9D\x4F\xAB\x89\x88\x09\xA2\xA6\xA8\x4D\x82\x75\x62\xA9\xA8\x9E\xA9\x6D\xAB\xFF\x00\xA1\x97\x4C\xAA\xA8\xAA\x71\xAB\x18\xAB\x73\xAB\x70\xAA\x75\xAB\x9A\xA8\x5C\xAB\xAC\xA9\x79\xAB\x65\xA8\x7B\xAB\xF1\x9D\x62\xAB\x0C\xAB\xB7\xA5\x7B\x69\xD6\xA5\xE4\x9C\x58\x7C\x29\x77\x7B\x90\x84\xAB\x55\xA1\xCC\xA8\x62\xA5\x29\xAA\x2A\xAB\xA4\xA6\x70\x9E\xEF\x96\xB5\xA8\x71\xAA\x8F\xAB\x77\xAB\x55\xA9\x5E\xAB\xA9\xA7\x94\xAB\x40\x9E\xB2\xA9\x0F\xA8\xE1\xA8\xBC\x97\x9B\xAB\x81\x8B\x38\x7E\xE5\xA8\x0B\xA7\x8B\x9E\xE8\x97\x6F\xAB\x3E\xAB\x6B\xA7\x40\xAB\x2D\xAA\x9F\xA7\x2F\xAA\x4E\xA7\x31\xAA\xD7\xA6\xAE\xAA\x52\xA7\xB0\xAA\xDB\xA6\xAD\xAB\xD0\xA7\xAF\xAB\x80\x9E\xA7\x9D\xA3\xAA\xAF\x88\xC3\xA8\xCB\xAA\xD2\x99\x4E\x9E\x05\xA9\xC9\x90\x6C\xAB\x55\xA1\x0A\xA9\x66\x9F\x08\xA7\x13\xAB\xA4\xAB\x95\xA8\xD2\xA8\xC4\xAB\x50\xA7\xC6\xAB\xCC\xA7\xC8\xAB\x54\xA7\xCA\xAB\x9E\xA8\x3B\xAA\xA0\xA8\x59\xAA\x53\xA8\x3F\xAA\x3C\x79\x0E\xAB\x87\xA9\xC8\x9F\xD1\xAB\xF1\x90\xDC\x88\xCE\x79\xF9\xA5\xCB\x02\x25\xA9\x26\x98\x16\x8D\x28\x98\x08\x9B\x76\xA3\x67\x9F\x57\x59\x1B\x78\x06\x01\x0F\x7C\x1D\x67\xF9\xAB\x22\xA9\x4B\x78\x09\x9B\x06\x01\x8C\x00\x11\x99\xC3\x85\x46\x10\x23\x58\xEE\x9C\x3B\x7B\x86\x59\x27\x01\x8D\x00\x3E\x7B\x11\xAC\x7C\xA2\x0A\xAC\x4E\x10\x0C\xAC\x02\x92\x60\x2E\x98\x08\x13\xAC\x0E\x96\x60\x2E\xDA\xAB\x67\x7B\x56\x10\x17\x4C\x97\x2E\x47\xA0\xE2\x97\xA0\x8C\xF2\x7A\x74\xA1\x64\xA9\xA1\x7E\xE5\x36\x4B\xA2\x2D\x9B\x52\x07\x7F\x25\xE7\x7B\x23\x8D\x4A\x65\x22\x68\x27\x01\xC7\x7A\xE8\x67\xF8\x65\x68\x87\x2F\x84\xD2\x01\x5F\x54\x48\x07\x24\x8D\xBF\x33\x2E\x7C\x30\x07\x36\xAC\x56\x59\x30\xAC\x70\x07\x0D\xA0\x3A\x86\xC4\x85\x27\xAC\x28\xAC\x8F\x89\x8F\x00\x09\xAC\x2D\x90\x3D\x0D\xD5\x4F\x23\x7C\x3E\xA3\xC1\x7B\x0F\xAC\x48\x3A\x3E\x7B\xC2\x9F\x99\xA2\x28\x9E\x73\x07\x74\x54\xE7\x7B\x62\x54\x87\x25\x98\x08\x55\xAC\xEB\x96\xC0\x33\x88\x2A\xBC\x7B\xE8\x63\xBE\x7B\x59\x9F\xBF\x9F\x44\x68\x47\xAC\xF3\x60\xE3\x9A\x27\x01\x90\x00\x4B\xAC\xE8\x9B\x7D\x89\x4D",
"\x58\x76\x02\xB2\x0D\x9B\x54\x5E\x01\xB8\x5B\xE6\x0D\x91\x00\x3E\x7B\xF1\x00\x57\x7B\x58\x59\x4C\x58\xC5\x54\xD0\x58\x2D\x7C\x2B\x72\x1F\x2D\x98\x08\x79\xAC\x5B\x59\x73\xAC\x72\x00\x44\xAC\xBF\x0D\xE3\x58\x82\x51\xF3\x1E\x68\xAC\x69\xAC\xBA\x7A\x09\x01\x92\x00\xF5\x88\xBC\x0D\xE6\x0D\xF5\x65\xBC\x0E\xAB\x65\x0B\xA9\xA0\x7B\x94\xAC\x6A\x9F\x50\x7F\x1E\xAC\xE8\x7B\x4E\x10\x9D\x13\x23\xAC\x32\x8E\xAE\x65\x8C\xAC\xF5\x99\x75\xA1\x01\x01\x90\xAC\xAF\x99\x49\x9F\xB4\x0C\x0E\x27\xA0\xA0\x20\x88\xD8\x84\x75\xAC\x96\xAC\xEA\x9A\xC4\x05\x87\xAC\x3D\xAC\xBF\x33\xD0\x0C\xF9\x7C\x7D\x66\x98\x08\x99\xAC\x8D\x87\x59\x83\x0E\x09\x9C\xAC\xD8\x08\x9F\xAC\xCA\x85\xA2\xAC\xF4\x88\xB8\x5B\x4B\x85\x1C\x49\x91\xAC\xC0\x0D\x1F\x54\x13\x7B\x6D\xAC\xB5\x57\xCF\x0C\xAB\xAC\x57\x7C\xAD\xAC\xB1\x87\xAC\xAC\xE2\x9A\x8E\xAC\x06\x01\xA7\xAC\x1C\x8D\xF5\x5A\x93\xAC\x3E\x7B\xC4\x05\x13\xA0\xBA\xAC\xB0\x87\x8E\x87\x70\x07\xBE\xAC\x09\x08\xC0\xAC\x50\x7C\x19\x06\xA3\xAC\xA4\xAC\x48\xA2\x02\x01\xD6\xAC\x3B\x98\x5A\x59\xCD\xAC\x3D\x37\x9A\xAC\xAE\xAC\x52\xAC\x6D\x7C\xB1\xAC\x9C\x8B\xBB\x0D\xED\xAC\x4F\xAC\x9D\xAC\xD1\xAC\x16\x01\xB9\xAC\x46\x88\xE1\xAC\x4B\x0D\xE3\xAC\xCB\x7B\xC2\xAC\xC3\xAC\x50\x59\xC9\xAC\x00\x00\xE2\x7B\x2B\xAC\x58\x59\xF6\xAC\xB7\xAC\x28\x7D\x3A\xA2\xA5\xAC\x00\x00\x96\x00\xCB\xAC\x96\x9D\xD3\x09\xF7\xAC\x3C\x9F\x32\xAC\x09\x01\x34\xAC\xF2\x9F\xFA\x64\x56\xAC\x75\x9F\x62\x58\xD2\xAC\xFC\xAA\x55\x83\x5E\x27\xD3\x7A\x8C\x5A\x7C\x28\xB3\xAC\xA8\x86\xC4\x85\xC2\x7B\x3E\x7B\x67\x41\x24\xAD\xFB\xA7\x1C\xAD\xCF\xAC\x12\xA8\x1F\xAD\xFA\x02\x07\x7B\x32\x7A\x36\x0A\x5E\x27\x62\x5A\xCC\x09\x63\x3D\x15\xA2\x5A\x70\x5E\x27\xB8\x7A\xB8\x5B\xD0\xA9\x67\x41\xB4\x67\x06\xAC\x03\x01\x0F\xAD\xA8\xAC\x1B\xAD\x0B\x55\x2D\xAD\x1E\xAD\x37\xAC\xD8\x12\xFA\x02\x3C\x7B\x3C\x7B\x17\xAD\x48\xA0\xEB\x65\x47\xAD\x0B\x98\x12\xAD\xE7\x7B\xF4\x54\x4F\xAD\x2F\xA2\xF7\xA4\x5E\x27\x2A\xAD\xEF\xAC\xF9\xAC\x8D\x01\xE6\x0D\xC3\x7B\xCC\x9A\xC5\x7B\x14\xAC\x44\xAD\x13\xAD\x82\x33\xCD\x7B\x22\x9A\x33\xAD\xFA\x02\x35\xAD\xEE\x07\xD1\x7B\x11\x01\x38\xAD\x57\xAD\xFA\x02\xE6\xAC\xD4\xAC\x54\xA3\x3B\x41\xEB\xAC\x87\x89\x18\x04\x05\x2D\x49\x59\x65\xAC\x04\x01\x93\x09\x4B\xAD\xE6\x0D\x98\x00\x3E\x7B\x14\x00\xD6\x0D\x2A\xAD\x69\x58\xB8\x31\x78\xAD\xFD\xAB\x6E\x7C\x93\x09\x98\x08\x80\xAD\x5B\x59\x40\x50\x59\xAD\xF4\x74\xC3\x7E\x04\x01\x99\x43\x3C\x7B\xE8\x9F\xDB\x83\x42\x9B\x3D\x0D\xE5\x0B\x77\xAD\x07\x59\x86\xAD\x30\x34\x88\xAD\xCA\xAA\xB8\x63\xE8\x63\xF2\x2C\x42\x68\x32\x2C\xC4\x1A\x80\xAB\x0E\x8D\x9D\xAB\xAE\x19\xD7\xAB\x70\xAD\x0D\xAD\x81\x5B\x99\x00\x10\xAD\x9D\xA5\x11\x0D\xA6\x58\x85\xAD\x5D\xA3\xAC\x7B\xF1\xAC\x03\x01\x77\xAC\x3B\xA0\x01\x01\x83\xAC\x1A\xAD\x51\x90\x75\x62\xB0\xAD\x99\xAD\xB2\xAD\x04\x56\x5E\x01\x82\xAC\x0B\x87\xB1\x2F\x8D\xAD\x3A\x8B\x8F\xAD\x74\x51\xED\x2E\xE5\x58\xA9\xAD\xCB\xAD\x38\xA3\x54\xA3\x9A\x00\xC7\xAC\x09\x0F\xC6\x7A\x3E\x7B\x80\x65\x13\xA0\xD4\x7A\x2C\xA4\xC6\x8C\xB7\x4D\x97\x59\x8F\x65\xCC\xAD\xD7\xAC\xE7\x0D\x0C\x62\x85\x89\x3E\x7B\xA4\x72\x20\x4C\x94\xA0\x84\x9C\x25\xAC\xE2\x8B\x68\xAC\xB8\x5B\xDD\x08\x9B\x00\x9F\x59\xB8\x5B\xB3\x07\xD5\x9F\xDC\xAD\xCB\xA9\x0B\x89\xCD\xA9\xB1\x93\x2D\x69\xCC\x42\xA0\xA1\x39\xAD\x35\x27\xE3\xA5\x92\x9E\xA6\xAB\x95\x9C\xE8\x94\x11\x9D\xEA\xA5\xEF\xAA\xF5\xA9\x0B\xA6\x9B\xAA\x40\xA4\x7F\xA8\xBB\xA8\x21\xAB\x38\xA9\x4D\xAB\xEF\xA7\x96\xAB\x49\x8A\xC9\x6D\x54\xA0\x5C\xA6\x31\xA3\x42\xA9\x0D\xA3\x0E\x05\xD9\x94\x44\xA6\xF3\xAD\xB7\x0B\x9F\x61\xF6\xAD\xCF\xA2\x2F\xAD\xF7\x2F\xFA\xAD\x6F\x9E\xFE\xA3\x84\x83\xBE\xAA\x17\xAA\x84\xAA\xAB\xAB\x90\xA9\x92\xAB\x92\xA9\xCC\xAB\x4D\xA3\xE1\xA9\x5C\xA9\x5B\xA6\xAC\x5E\x32\x9B\x13\xAE\xC7\x0A\xC6\x9B\x58\x89\x8D\xAC\xCA\x9B\x5C\x91\x24\x92\x1A\xAE\x6D\x9A\xB3\x6B\x5E\x27\xB1\xA8\x53\x9E\x20\xAE\x87\x90\x12\xA9\xD5\xA8\x14\xA9\x35\xA7\x16\xA9\x35\xA6\xFB\xA8\xDA\x9C\x59\xA7\x80\xA7\xE4\xAA\xAF\xA7\x7E\xA6\xBE\x91\x97\x8D\x52\xA3\xA8\xAD\x82\xA6\x24\x95\x59\xA6\xF5\xAD\x32\xAD\xD0\x12\xF9\xAD\x12\xAA\xE4\xA5\x14\xAA\xA2\xA7\xAD\xAA\x52\xAA\xB9\xA7\x54\xAA\xBB\xA7\x56\xAA\xF6\xAA\xC5\xA6\xE3\xAA\xF5\xA5\x4F\xA3\x59\x81\x99\xA6\x44\x95\x9B\xA6\x07\xA9\x7C\x85\x9E\xA6\xB6\x89\x8F\xAA\xF5",
"\x64\x38\xAE\xEC\xA0\x3A\xAE\x57\xAE\xC6\xA7\x4F\xAA\xAB\xAA\x40\xAE\xFF\xAD\xD9\xA9\xEE\x8E\xDB\xA9\x9C\xAA\x1F\xAB\x1A\x74\x88\xAA\x0A\xAE\x0C\xA8\x25\xAB\xDB\x8A\xB5\xA9\x6F\xAE\x54\xAE\x39\x99\x67\xAD\x1D\xAE\x58\xAE\xFB\xAD\x3E\xAE\x55\x9E\x22\xAE\xE2\xAB\x18\xAA\xE4\xAB\xCE\xA7\xE6\xAB\x57\xA9\x29\xAE\x96\xA4\x4A\xAE\xB5\x8D\x66\x7D\xB8\x0D\x84\x95\x57\xA3\x00\x6C\x71\xAE\xF9\xA0\xF8\xAD\x8A\xAE\x75\xAE\x7F\xAA\x30\xAA\x81\xAA\xD4\xA4\x2E\xAB\x53\xA9\x25\xAE\x74\xAA\x27\xAE\xAE\xA9\x96\xAE\xAD\xA4\xE2\xA6\x2C\xAE\xC1\x9B\xE3\xA9\x5F\xA9\x0C\xA3\x68\x9C\x53\x83\x6A\x9C\x0C\xAA\xF9\xA5\x21\x0A\x9F\xAE\x31\xA1\x73\xAE\xA2\xAE\xD3\xA9\xA8\xA5\x19\xAB\xBF\xA9\x1B\xAB\xC1\xA9\x1D\xAB\x0D\xA6\x87\xAA\x37\xA6\xE8\xAB\xDD\xA8\xEA\xAB\xA2\xA8\xE9\xA3\x04\xA7\xBE\x95\x06\xA7\xED\xA3\xDB\xAB\xC2\x95\x63\xA7\x8A\x78\x66\xAA\xE7\x0D\xF4\xA3\xFD\xAA\xBC\xAE\x3F\xA1\xBE\xAE\x3C\xAE\xB6\x9E\x73\x80\x75\xA8\x8D\xAE\xB0\x95\x5D\xAE\xAF\xAA\x5F\xAE\xB1\xAA\x61\xAE\xBD\xA7\x81\xAE\x25\xA8\x7D\xAB\x94\x8D\x3B\x9A\xE5\x95\x25\xAA\xE7\x97\xF5\x5A\x27\xAA\xEA\x97\xBB\xAE\x55\xAE\x04\x01\x74\xAE\xC0\xAE\x03\xA6\xD5\xA9\x44\xAB\xD7\xA9\x46\xAB\x00\xAE\x7A\xA8\x77\xA7\x8C\xA4\xF2\xAA\xDD\xAA\x7E\xAE\xE1\x7C\xF4\x71\x93\xA5\x48\xAE\xAD\xA7\x98\xAE\x23\x7A\xEA\xA3\x2B\x05\x44\xAA\xD2\xAE\x46\xAA\x44\xA7\x0A\xA7\xF0\xAE\x05\x98\x31\xA4\x6F\xAB\xDB\xAE\xAE\xA1\xDD\xAE\x91\x9E\x1F\xAE\xAE\x7E\x8F\xAE\xE4\xAE\xC7\xAB\xE6\xAE\xC9\xAB\xE8\xAE\x76\xA9\xEA\xAE\x3A\xA9\xEC\xAE\xBB\x95\x5D\xA7\x17\x3A\x6E\x82\x06\xAA\x0B\x7E\x13\xAF\x2F\xA4\xE7\x95\x54\xA4\xB6\xA9\x09\x01\x18\xAF\x6D\xAD\x1C\xAE\xDE\xAE\x68\xA5\x19\xA8\x73\xA7\x6E\xA9\x8D\xA7\x98\x9E\x01\xAF\x7C\xA8\x7C\xAE\x05\xAE\xF4\xAA\x08\xA8\x46\xAE\xFF\x9C\x09\xAF\xFE\xA8\x0B\xAF\xFA\x6D\x7B\xAA\xAF\x92\x9C\xA7\x34\xAF\x9C\x7B\x89\xAE\x37\xAF\x89\xA7\x39\xAF\x8B\xA7\xB6\x9D\x3C\xAF\x04\xA5\x02\xAE\x1F\xA8\xF7\xA9\x21\xA8\xAC\xAE\xC5\xA9\xCA\xAE\xC7\xA9\x64\xAE\xCE\xAB\xDD\x9D\xC0\x0D\x23\x9D\x60\x7E\x4D\xAF\x7C\xA2\x4F\xAF\x1B\xAF\xB2\xA8\xFC\xAD\x94\x9E\xFE\xAD\x96\x9E\x7A\xAE\xB6\x90\x40\xAF\xEF\xA5\x42\xAF\x80\xA8\x62\xAE\x82\xA8\xF8\xAA\x48\xAF\x3B\x97\x82\x96\xA6\xAA\x84\x96\x33\xAF\xF6\xAE\x49\xAD\xBF\xAE\x41\xAB\xD3\xAA\x93\xAA\x8A\xA7\x95\xAA\x54\xAF\x97\xAA\x3D\xAF\xF6\xA8\x02\xAF\x59\xAF\xF3\xAA\x05\xAF\x6E\x84\x07\xAF\xB1\xA6\x78\xAA\x60\x6A\xC2\xA7\xDA\xAE\x7D\xAF\x3B\xAE\x68\xAF\x3D\xAE\x1D\xAF\x2D\xAB\x23\xAE\xC0\xAA\xAA\xAE\x86\xAA\x5B\xAF\xDE\xA9\x63\xAE\x76\xAF\x65\xAE\x32\x79\xEE\xAB\xA3\xA9\xAD\x9E\x1D\x93\xDB\xA7\x32\xAF\xE6\x88\x88\xAE\x56\xAE\x7F\xAF\xC0\xAB\xD0\xA8\xC2\xAB\xA1\xA7\xE1\xAE\x31\xA7\xEC\xAA\xF2\xA9\xEE\xAA\x00\xAF\x88\xAF\x3F\xAF\x04\xAE\x71\xAF\x8C\xAF\x89\x8C\x8E\xAF\xDF\xA6\xA1\xAA\xFC\x97\xB2\xAB\x81\x74\xF4\xA7\x73\x8F\x4C\xAF\x94\xAF\xF8\xAE\x80\xAF\xE9\xAA\xFB\xAE\x83\xAF\x45\xAB\x96\xAA\xAA\xA6\x98\xAA\x9F\xA3\x89\xAF\x70\xAF\x7A\xA7\xBC\xAF\x5A\x9C\xBE\xAF\xFF\xA6\x95\xA9\xA4\x9E\xA2\xAF\x55\x93\xBC\x0D\x65\x9B\x2A\xAD\xCA\x70\x65\xAF\x99\xA2\x67\xAF\x1E\xAE\x69\xAF\xE2\xAE\xA7\xAB\xF1\xA8\xC0\xA9\xF9\x9B\xC2\xA9\x1E\xAB\xC8\xAE\x39\xA7\x58\xAA\xE0\xA9\x60\xAF\x73\x83\x85\x68\xA5\xAF\x33\x66\x10\xAB\x64\xAF\xC7\xAF\xAD\xAF\x17\xAB\xC1\xAE\x8C\xAB\x1A\xAB\xA9\xAB\xB7\xA8\x90\xAB\xC3\xA9\x9E\xAF\x76\xAA\xA0\xAA\x90\xAF\x69\xA8\xEC\xAB\x11\xA3\x09\x0F\xDF\x9D\xC6\xAF\xAB\xAF\xF7\xAE\xF9\xAF\xBB\xA6\xA5\xAB\xE6\xAF\xFD\xAD\xE3\xAE\x41\xAE\x53\xAA\x15\xA9\x55\xAA\x17\xA9\x57\xAA\x77\xAA\xCC\xAE\xDF\xA8\x61\xAF\x09\x0F\xEE\x98\x9D\x00\xEC\x88\xBB\x83\x63\xA2\x9D\xAE\xF5\xAE\x0C\xB0\x7E\xAF\x50\xAF\xFD\xA7\xD5\xAA\xFF\xA7\xED\xAA\x6F\xA9\x01\xAE\x3E\xAF\x72\xA9\xBA\xAF\xD4\xAF\xED\xAF\xED\xA7\x25\xAF\x78\xA9\x27\xAF\x8F\x9D\x51\xAB\xEF\x81\x6F\xA8\xCA\x9C\xB4\x3E\x26\xB0\x95\xAF\xE4\xAF\x97\xAF\x88\x81\xB2\xAF\xCA\xA7\x90\xAE\x24\xAE\x92\xAE\x1A\xAA\x23\xAF\x1C\xAA\x35\xB0\x1E\xAA\x83\xAE\x9D\x90\x7F\xAB\xA8\x9E\x45\x8C\x01\x84\x19\x88\xBF\xA5\xE4\x7F\xB9\xAE\x4E\x9E\x25\xB0\x66\xAD\xAC\xAF\x28\xB0\x85\xA4\x45\x94\xD6\xAA\xA9\x64\xB6\xAF\xF4\xA9\x2F\xB0\xF6\xA9\xD3\xAF\x7E\xA8\x72\xAF\x07\xAE\xE0\xAA\x49\xA3\x5D\xAF\xC6\xAA\x79\xA6\x4D\xB0\xCB\x71\xA5\xA8\x50",
"\xB0\x6D\x8C\x2C\x6E\x0C\x80\x49\x9E\x14\xAF\x88\x9C\x56\x90\xAD\xA8\xB2\x5E\xE1\xAF\x2E\xAD\x48\xAD\x3F\xB0\x8B\xAE\x1C\xAF\x42\xB0\xEF\xA9\x5C\xA4\x5E\xB0\xC7\x5E\xF3\xA9\xE7\xA7\xD8\x9B\xBB\xA4\xDA\x9B\xBD\xA4\x06\xAE\x36\xA9\x08\xAE\xFC\xA9\x23\xAB\xBF\xA8\x6D\xB0\xA4\xA8\xB4\xAB\x03\xA9\x1C\xA6\x9D\xAB\xC8\xA8\x8C\xA8\xA6\xAF\xCB\xA8\x17\xAF\xF8\xAF\x5B\xB0\x18\xA8\x2A\xB0\x1A\xA8\x2C\xB0\x55\xAF\x09\xA6\x57\xAF\xF1\xAA\x8A\xAF\x04\xAF\x33\xB0\x0A\xA8\x4B\xB0\x8A\xAA\x77\xAF\xFE\x97\x01\xA9\xA4\xAD\xE4\xA8\x89\x9E\x6B\xAE\xDC\xA5\x8C\x9E\xE9\xA9\x43\xA2\x19\xAE\x9C\xB0\x96\xAF\xDF\xAE\xB4\x71\xA6\xAE\x98\xA8\xFE\xAF\x1C\xAB\x00\xB0\xEC\xAF\x02\xB0\x80\xAE\x8F\xB0\xFE\xA9\x91\xB0\xB3\xAB\xF1\xAB\x35\x94\x86\x9E\xEA\xA9\xC8\x90\x3A\x94\x69\x9E\xCC\x90\x81\x94\x57\x59\xD5\x76\x7A\xB0\x50\xAD\xE3\xAF\x7E\xB0\xE5\xAF\x98\xAF\x02\xAB\xA8\xAE\x8E\xA9\x9C\xAF\xC2\xAA\x94\xAE\x3A\xAA\xAE\xAE\x95\xA6\xDB\xAF\xC7\xA4\xA4\xAF\xB9\xA9\x74\x17\x20\xA9\x03\xAC\xBA\x8A\x23\xA9\x2D\x77\x25\x98\x23\xA6\x27\xA9\x34\x77\x25\xA6\x9A\x79\xF4\xAD\x00\x6C\xEA\x88\x6C\x88\x7D\x83\xDD\x89\x0F\xB0\xDE\xAB\x7E\x9D\xE0\xAB\x33\xA8\x9A\xAF\x2F\xAB\xDC\xB0\x06\xAB\xDE\xB0\xC4\xAA\x6A\xB0\xDE\x7E\x70\x9D\xD3\x94\xB1\xAE\x3F\xA9\x30\xA3\xE4\xA9\x9A\x7C\x9F\x9B\x75\x8D\x08\xB0\xF9\x58\x45\xA6\x4A\xA5\xF4\xB0\x96\x7F\x5B\xAD\x9D\xB0\xD4\xAA\x5D\xB0\x2B\xB0\xB5\xAF\x2D\xB0\xB7\xAF\x99\xAA\xF7\xA8\x31\xB0\x65\xB0\xD5\xAF\x91\xA4\xD7\xAF\x1D\xA7\xC0\xAF\x77\x6C\xE2\xA9\x70\x8D\x11\xAE\xFB\x94\xC5\x9B\x61\xA6\x93\x82\x29\x98\xF5\x5A\x3A\xA3\x24\xB0\x27\x01\x12\xB1\xD7\x84\x14\xB1\xB9\xB0\x38\xAF\x9F\xB0\x3A\xAF\xA1\xB0\x86\xAF\x56\xAF\x62\xB0\x03\xAE\xEA\xA7\x01\x94\x68\xB0\x21\xA4\xAA\xB0\xB5\xAA\xC6\xB0\x7C\xA9\x5C\x7C\x51\xA3\xED\x7C\xEB\x9B\xF8\xA5\x82\xA9\x0B\x73\xFD\xAA\x32\xB1\xF2\x88\x34\xB1\x40\xB0\xBA\xB0\xAD\x81\x51\xAA\x14\xB0\x5E\xAE\x16\xB0\x60\xAE\x18\xB0\x74\xAF\xEF\xAF\x5F\xAF\xDE\xA4\x21\xAA\x09\x9C\x70\xA3\x9B\x91\x0C\x9C\xB2\xB0\x9D\xA6\xBC\x0D\x9F\xA6\x85\xA7\x4E\xB1\xA3\x85\xD8\x84\x15\xB1\x82\xAF\x52\xAF\x84\xAF\x02\xA5\xA2\xB0\xF5\xA8\x1C\xB1\xD2\xAF\x1E\xB1\xF8\xA9\x8B\xB0\x20\xAB\x40\xB1\x91\xA5\xE0\xB0\xC7\xAA\xAC\xB0\xA7\x69\x85\xAE\x4D\x7F\x6D\x61\x68\xB1\x15\xAC\x50\xB1\xD6\xB0\x41\xB0\xDB\x82\xBC\xB0\xA8\xAB\x8E\xAB\xFF\xAF\xFF\xB0\x31\xAB\x01\xB1\x08\xAB\x42\xB1\x0A\xAB\x44\xB1\x33\xAE\x2D\xB1\x83\x95\x17\xAE\xC6\x0B\x9F\x61\x81\xB1\xC9\x9F\x6A\xB1\x35\xB1\x51\xAF\x37\xB1\x53\xAF\x6F\xB1\x3A\xB1\xA3\xB0\x3C\xB1\x58\xAF\x64\xB0\x75\xB1\x66\xB0\x8C\xB0\x78\xB1\x11\xA6\xC4\xB0\x4E\xAB\xB0\xAE\x3D\xA9\x9A\x9B\x08\xB1\xE4\xA6\xB4\xAE\xE6\xA6\xB6\xAE\x99\x83\xFC\x91\x56\xB0\x32\x98\xF5\x64\x98\xB1\x15\x86\x21\x88\xA3\xAE\xAA\xAA\x80\xAA\x5B\xAE\x82\xAA\xFD\xB0\xA9\xAE\x47\xB0\x78\xAB\x8D\xB1\x33\xAB\x8F\xB1\x35\xAB\x91\xB1\x3F\xA6\x99\xAB\xBD\x95\xED\x79\xEC\xA3\x36\x7E\x62\xAA\x2D\xA4\x64\xAA\xD6\xAE\x47\xA7\xF5\x5A\xD9\xAE\x3B\xA3\x00\x00\xB9\xB1\x45\xAC\xBB\xB1\xF9\xAE\x12\xA7\xBE\xB1\x43\xB0\x5C\xAE\x55\xB1\xE5\xAE\x57\xB1\xE7\xAE\x59\xB1\xE9\xAE\xAA\xB1\x0B\xAE\x37\xB0\x6A\xA8\xAD\x92\xEE\xAE\x24\xAA\x2F\xAF\xF1\xAE\xE7\x0D\xF3\xAE\xDF\xA5\x2D\x69\xD9\xB1\x62\x86\xDB\xB1\xC9\xAF\x57\xAB\x2C\xAB\xD9\xB0\xC1\xB1\xDB\xB0\xC3\xB1\xAC\xAB\x49\xB0\xB3\xAA\xC7\xB1\x61\xAB\xE9\xB1\x07\xB0\x7B\x86\x03\xAA\x01\x96\x9F\x90\x8D\x92\x54\xB0\x5E\x86\x78\xB0\xE6\x5A\xF4\xB1\x89\x86\xF6\xB1\xAE\xAF\xED\xA8\xBD\xA9\xC2\xAE\xEB\xAA\xE9\xAF\xDB\x96\xFD\xB1\x26\xAE\xC5\xB1\x4C\xAB\xE7\xB1\x82\xAE\x7C\xB1\xCA\xA3\xB8\xA5\xF6\x78\x5F\xAA\x08\xB2\x50\xA4\x98\xB0\xCA\xA4\x31\xAF\x86\xAE\xF3\xB0\x96\x88\x9B\xB1\x29\xB0\x17\xB1\xA0\xB0\x19\xB1\x70\xB1\x70\xA9\xA2\xB1\xA5\xB0\xA4\xB1\x5A\xAF\x1A\xB2\x7A\xAB\x01\xB2\x7C\xAB\xC9\xB1\x17\x82\x4A\xAF\xA5\x86\xDC\x8D\x0E\xB2\x25\xAD\x10\xB2\xFA\xAF\xFA\xAE\x14\xB2\xFC\xAE\xB4\xAF\xD7\xAA\x85\xB0\xD9\xAA\xF0\xAA\x88\xB0\xDF\xA3\x8A\xB0\xA6\xB1\x77\xB1\x44\xAF\x1B\x9D\x46\xAF\x96\xA9\xE2\xB0\x9A\x60\x67\x96\x6D\xA0\x0B\x9A\x80\xB1\x2A\xB2\x51\xB1\x36\xB1\x2D\xB2\x38\xB1\x2F\xB2\xA0\xB1\x71\xB1\xD1\xAF\xB9\xAF\x3E\xB1\x92\x94\xA8\xB1\x22\xAB\xA0\xAF\x24\xAB\x1E\xB2\x7D\xA6\x79\xAF\xE4\x63\xB2\xA7\x09\x01\x3F",
"\xB2\xCC\x86\x8A\x86\xBC\xB1\xBC\xAA\x77\xAE\x54\xB1\x79\xAE\x35\xAA\x7B\xAE\x74\xB1\x35\xB2\xFF\xB1\x5F\xAB\x38\xB2\x95\xAB\x36\xAB\x92\xAF\xD7\xB1\x70\xB2\x5A\xAD\xDF\xAC\xBD\x89\x0E\x96\xD1\xA8\xFA\xB0\x87\xB1\xE8\xAF\xC4\xAE\xEA\xAF\xC6\xAE\x73\xA6\xC2\xB0\xC9\xAE\x7A\xB1\x6C\xB0\x6A\xB2\xD6\xA7\x74\x83\xE5\xB0\x28\xA7\xCD\xAA\x69\x6B\x3E\xB2\x5A\xB2\x84\xB1\x52\xB1\x1D\x80\x76\xB2\x6D\xAF\x78\xB2\x6F\xAF\x7A\xB2\x8B\xAF\xA8\xB0\xDB\xA8\x03\xB1\x3D\x85\x05\xB1\x15\xA6\xC2\xAF\x32\x89\x47\x75\xE2\xA4\xD0\xAA\x6F\xB2\x9C\xB2\x73\xB2\x00\xAB\xF9\xB1\x59\xAB\xDA\xB0\x04\xAB\x8B\xB1\x4A\xAB\x36\xB2\x93\xAB\x7E\xB2\xB0\xAB\x5A\xAA\x1D\xB0\xF9\x58\xDE\xAF\xF2\x82\x83\xB2\xBB\xAC\x32\x84\x86\xB2\x5F\xAC\x10\xA9\x75\xB2\x1E\xAF\xE1\xB1\x20\xAF\xE3\xB1\x22\xAF\xE5\xB1\x24\xAF\x1C\xB2\xEB\xAE\x3A\xB2\x02\x97\x29\xA8\xBE\xAB\x29\x60\xF6\xAF\x9B\xB2\xBC\x88\xF8\x87\x42\xB2\xDD\xB1\xA5\xAE\xBF\xB1\xA7\xAE\xFB\xB1\xB8\xB2\x18\xB2\xAB\xAE\xBB\xB2\x28\xAE\xBD\xB2\xCD\xAB\x5D\xB1\x03\x6C\xDE\x9D\x91\x93\x28\xB2\x21\x0A\xC4\xB2\xDE\xAC\xBC\xAC\xF7\xB0\x89\xA9\xA4\xAE\xC3\xAB\x8A\xB2\x32\xAA\xFD\xAE\xCE\xAF\x47\xAB\xD0\xAF\xEB\xAF\xC7\xAE\x90\xB2\xEE\xAF\x1A\xB0\xF0\xAF\xEA\xB2\xF4\x9D\x7D\xA1\x22\xB0\x72\xA2\x84\xA9\xF3\xB1\xB2\xB2\xDC\xB1\x2E\xA7\xDE\xB1\x81\xB0\x76\xA8\x18\xB1\x47\xB2\x60\xB0\x86\xB0\xBA\xA4\xEE\x71\xFE\xB2\xE6\xB2\xAD\xAE\xE8\xB2\x2A\xAE\xF1\xAF\x28\xA8\xE4\xB0\xD1\xA9\x98\x75\x60\xA5\x6F\xAB\xF0\xB2\xD0\xAC\x85\xB2\xEE\x8C\xF8\xB0\x13\xAA\xDF\xAB\xF7\xB2\xC5\xAB\x1F\xAF\xE3\xAB\x21\xAF\xE5\xAB\x7C\xB2\xAE\xAB\x19\xB3\x97\xAE\x54\xB2\xC6\x9A\x4F\xB0\x4A\xB1\x69\xAB\x7F\xA5\x78\x97\x0A\xB2\xC0\x0D\x2E\x9E\xF4\xAE\x31\xB1\x0A\xB3\xF7\xB1\x72\xAB\xB5\xB2\x74\xAB\xB7\xB2\x5B\xAB\xB9\xB2\x5D\xAB\x2F\xB3\xCB\xAB\x31\xB3\xAF\xAE\x94\xB2\x92\xB0\x35\xB3\x5F\xA5\x50\xA0\x69\x76\xB1\x6C\xA0\xA5\x25\xB2\x1C\x93\xE7\x0D\x87\xAB\x3D\xB3\xB1\xB2\xDB\xB2\xE3\x8B\x87\xB2\xB0\xAF\x5A\xAE\xDF\xB1\xC0\xB1\x45\xB0\x9B\xAF\xE4\xB2\x9D\xAF\x17\xB3\x5C\xAF\x92\xB2\x01\xA7\x33\xB3\xE7\x93\x93\xB0\x45\xAA\xBC\xA5\x38\x94\xBE\xA5\xD7\xAB\x6A\x9E\x0C\xB2\x59\xB2\x5A\xB3\x6B\xB1\x43\xAB\xCC\xAF\xF9\xB2\x85\xAF\xCF\xAF\x87\xAF\x72\xB1\x63\xB2\xD8\xA8\x47\xA3\x66\xB2\x09\xAE\xD2\xB2\x26\xAF\xD4\xB2\xC4\x70\xE2\xA8\xB5\xAB\x78\x9B\x88\x9E\xE4\x97\x3A\xB3\xB4\xB0\xB6\xB1\xCB\xB0\x09\xB3\x74\xB3\x2B\xB2\x5C\xB0\x4F\x9C\x9E\xB1\x07\xA6\x30\xB2\x2E\xB0\xB8\xAF\x30\xB0\x64\xB2\x37\x95\x80\xB3\x8E\xB0\x68\xB2\x90\xB0\x4C\xB3\xC7\xB0\xF7\xA5\x4F\xB3\xB7\xB1\x02\x98\x06\xA9\xB9\xAB\xB3\xB0\xFE\xA5\x07\x98\x10\x89\xEF\xB2\x3F\xB3\x11\xB2\x0F\xA9\x88\xB2\xB3\xA8\x29\xB3\xE1\xAB\x2B\xB3\x91\xAE\x2D\xB3\x93\xAE\x48\xB3\xE7\xAB\x67\xB3\x5A\xA7\xA0\xB3\xB4\x7F\x9D\xAD\xC9\xB0\xF2\x15\xE7\xB0\xD5\x9E\x1E\xA6\xCD\x84\xEA\xB0\xA3\x94\x08\x72\xED\xB0\xE8\xB0\xEF\xB0\x29\xA9\xF3\xA2\xC3\xA7\x27\x41\x7A\x84\x78\x8C\xED\x8C\xDC\xB2\x26\xB3\x59\xAE\x28\xB3\xE0\xB2\xBD\xB0\x89\xB1\xBF\xB0\x46\xB3\x91\xAB\x65\xB3\x9F\xAF\x75\xAF\x69\xB2\x2B\xAE\xAD\xB1\xC0\x9B\xAF\xB1\xB3\xAE\x40\xA6\x2F\x91\x0C\xB1\xFD\x94\x2A\xA5\xFC\x84\x86\x9B\x30\xB1\xF7\x88\xEB\x8C\xE1\x8B\xD1\xB3\x5B\xB3\xC8\xB2\xB0\xB3\x6A\xAF\xD3\xA8\x31\x9C\xA1\xB2\xD6\xA8\xF9\xA6\x9A\xB3\x5C\x95\x9C\xB3\x22\xB1\x58\xA7\xD9\xAF\x95\xA5\x36\xAB\x26\xB1\x5C\xAA\xB9\x88\x29\xB1\xC4\x7C\x32\xAE\x1C\x95\xE7\xAC\x65\xA9\x36\xAE\xCD\xB3\xC5\x8C\x12\x89\xC7\x8C\x5C\xB3\x13\xB2\xFC\xAF\xC3\xAE\xBE\xB0\xC5\xAE\xC0\xB0\x16\xB3\xB8\xB3\x95\xAE\x4A\xB3\xE1\xB0\x1B\xB3\x66\xAE\x1D\x95\x7E\xA9\x46\x85\x81\xA6\x1A\x8B\x83\xA6\x4A\xA5\xCE\xB3\x10\x89\x25\x8C\xA1\x8B\xB3\xB2\x2B\xAB\xCA\xB2\x99\xAF\x61\xB3\xFE\xB0\x63\xB3\xDD\xB0\x18\xB4\xDF\xB0\x1A\xB4\x7B\xB1\x69\xB3\x4B\xAE\x98\xA6\xB7\x8D\x0B\x9C\xCF\x61\xA7\xB3\x64\xB1\xA4\x59\x6E\xAE\x7F\xB1\x9F\x61\x25\xB4\xD0\xB1\xD8\xAD\x6F\x8A\xF2\xB3\x5D\xB3\xD5\xB3\x5F\xB3\xE1\xB2\x2D\xB4\xC2\xB1\xB6\xB3\x48\xB0\xD0\xB2\x4A\xB0\x82\xB3\x36\xB0\x84\xB3\xB4\xA9\x27\x9C\x46\x7D\xA9\xAF\xD0\x34\x0D\xB4\x26\x8C\x0B\xB3\xFC\xA7\x92\xB3\x00\xA5\x94\xB3\xF3\xA8\x96\xB3\x1B\xB1\x62\xB2\x99\xB3\x7E\xB3\x62\xA4\x50\xB2\x39\x9D\x52\xB2\xDA\xAF\x1C\xB4\xDC\x5E\x5C\xA1\x94\xB1\xDD\x94\x3C\xAB\x57",
"\xB4\xEE\xB3\xE6\xAD\xF0\xB3\x75\xB3\xCB\xAF\x6D\xB1\xCD\xAF\x79\xB3\xFB\xB2\x7B\xB3\x62\xB4\x63\xB0\xA4\xB2\xA7\xB0\xFF\xB2\x34\xB0\x50\xB4\x4C\xB0\x4A\x5E\x02\xB4\xCA\xB1\x4A\x8D\xCD\x6D\xB3\xB1\x21\x9D\xCF\xA3\x6F\xAB\x41\xB4\x00\xA6\x27\xB4\xA1\x8C\x29\xB4\x10\xB0\xD8\xB0\xB6\xB2\xE2\xB2\x45\xB3\x2F\xB4\x00\xB1\x31\xB4\x02\xB1\xBA\xB3\x49\xAE\x35\xB4\xBF\x9C\xCF\xAE\xCD\xB1\xD1\xAE\xCF\xB1\x8D\xB4\xD1\xB1\x45\xA7\xEE\xB1\x15\xAF\xF3\xA3\xC7\x95\xB2\x5E\x8C\xB4\xD7\xAD\x0E\xB4\x3F\x8B\x10\xB4\xED\xA9\x0D\xB3\xAC\xAA\x60\xB3\xB4\xB3\x46\xB0\x4C\xB4\xC4\xB1\x98\xB4\x8E\xB1\x81\xB4\xAB\xB0\x9C\xB4\x81\x95\x22\xAA\xDB\x0C\xED\xB1\x65\xAA\xD4\xB1\xF0\xB1\x8B\xB4\x58\xB4\x28\xB4\x5A\xB4\xC9\xB2\xB0\xB4\x78\xAE\xF7\xB3\x42\xAE\xD7\xA8\x44\xAE\x37\xA7\x66\xB4\x56\x9D\x68\xB4\x00\xB4\x52\xB4\x02\xAA\x01\xA9\xE3\x78\x23\xB2\x47\xAA\x08\xAA\xD2\xAB\x55\xA1\x4B\xAA\x58\xB3\x06\x01\xAA\xB4\xD3\xAE\x8E\xB4\x50\x8C\x9D\xB2\x5C\xB2\x93\xB3\x6E\xB1\x95\xB3\x60\xB2\x31\xB2\x98\xB3\x7C\xB4\xFA\xB3\x95\x95\xFC\xB3\xD8\x7D\x6B\xB0\x68\xB3\x6A\xB4\x23\x74\x29\xAF\xA4\x3E\x2B\xAF\x87\xB3\x24\xAC\xD4\xAE\xD2\xB1\x75\x9D\x50\x59\x27\xB2\x3F\xB4\xF5\x64\xDF\xB4\x11\xAF\xA0\x8B\x8F\xB4\xC6\xB4\xF3\xB3\x11\xB0\x6B\xAF\x13\xB0\x77\xB2\xF8\xB3\x36\xAA\xEC\xB4\xD8\x95\xEE\xB4\xEB\x84\x04\xB1\x69\x7F\x37\xAB\x9D\x85\x3C\xB2\x97\x2F\x60\x7E\x00\xB5\x4F\xA4\xEF\xB3\xDC\x89\xC7\xB2\x0A\x97\x5B\xB4\x9E\xB0\x5D\xB2\x5E\xB4\x3B\xAF\xE8\xB4\x97\xB3\x7C\xB3\x63\xB4\xCD\xB4\xD9\xA8\xCF\xB4\x8A\x9D\xFF\xB3\xAA\xB2\x7B\xA6\xCF\xAB\x3F\xA8\xC6\x92\x9B\xA7\x85\xA7\x17\xB5\x43\xA7\x02\xB5\xE2\xB4\x90\xB4\xF9\xB0\xB1\xB3\xD6\xB3\x88\xB1\x44\xB3\x76\xAB\x96\xB4\x8C\xB1\xB7\xB4\xC6\xB1\xB9\xB4\x43\xB1\xBC\xB3\x7A\x6E\xA5\xAA\x6D\xB2\xA7\xAA\xDE\xB4\xC4\xB4\x03\xB5\x40\xB3\x8B\xAB\x42\xB3\x8D\xAB\x3B\xB5\xAA\xAB\x3D\xB5\xBA\xB2\x3F\xB5\x1B\xB2\x9E\xB3\xC5\xB0\x4A\x5E\x81\xB2\xEC\xB3\x48\xB5\x71\xB4\x34\xB5\x79\x8C\x5B\xB2\x9C\xB1\x1F\xB5\xE6\xB4\x5F\xB4\x22\xB5\x61\xB4\xFD\xB2\x8F\xB2\xDC\xB3\x03\xB0\x57\xA5\x24\xB1\xDE\x9C\x04\xB2\x53\x8F\x1D\xB3\x10\xAA\xCA\xA4\xCC\xA4\x31\xB5\x49\xB5\x35\xB5\x04\xB5\x46\xB4\x89\xB2\x39\xB5\x8B\xB2\x14\xB4\x8D\xB2\x16\xB4\x66\xB5\x53\xB5\x37\xB2\x41\xB5\x90\xB1\x43\xB5\x47\xA9\x91\x9D\x35\x83\xDC\x8D\x32\xB5\x61\xA7\xAC\xB4\x44\xB4\x1C\xB5\xC7\xB4\xDF\xB2\x48\xB4\xD7\xB3\x4F\xB5\x8A\xB1\x51\xB5\x47\xB3\x4E\xB4\x00\xB2\x80\xB5\xC8\xB1\x82\xB5\xE7\xA9\xC0\x0D\xC2\xB2\x24\x92\x87\xB5\x5B\x94\xE1\xB4\x5D\xB5\xE3\xB4\x5F\xB5\xE5\xB4\x77\xB4\x9F\xB1\x7A\xB3\x3B\xB1\xEA\xB4\x3D\xB1\x64\xB4\xEB\xA7\x28\xB5\x3E\x9E\x2A\xB5\x11\xB5\x50\xAB\xBE\xB3\xF9\x5C\xD9\xB2\x9C\xA7\x9D\xB5\xB6\xAB\x5C\xB5\x73\xB4\x91\xB3\x1E\xB5\xA3\xB5\x78\xB3\xA5\xB5\x79\xB4\xA7\xB5\x24\xB5\xEB\xB4\xAA\xB5\x3F\xB1\xAC\xB5\x94\xA4\xAE\xB5\xAE\x82\x27\x7F\xEC\xB2\x41\xA8\xEE\xB2\x27\x01\xB5\xB5\x88\xB3\x9F\xB5\xB8\xB5\x5E\xB5\x2C\xB2\xBB\xB5\x46\xB2\x5F\xB0\x1A\xB1\x61\xB0\xA8\xB5\xA3\xB1\x7D\xB4\x4D\xB2\x20\xB1\x74\xA5\xFD\xB3\xAB\xA7\x6A\xB5\x1F\x9D\x6C\xB5\xC8\x9B\x05\xB3\xC7\x70\x3B\xAB\x3C\xA6\x21\x0A\xCD\xB5\xF8\xB4\xCF\xB5\x1A\xB5\x25\xB3\xF4\xB2\xBD\xB1\x8D\xB5\x0E\xB3\xE2\xAE\x87\xA4\x4B\xA8\x15\xB0\x43\xAE\x17\xB0\x45\xAE\x9F\xAA\x69\xB5\x05\xB0\x1B\xA9\xAC\xB2\x17\xA6\x6E\xB5\x2B\xAA\x28\x69\x3B\xB0\x33\xA4\x31\x40\x5B\xB5\xEB\xB5\x01\x8A\xD2\xB3\xEE\xB5\x74\xB2\xC8\xB4\xA0\xB2\x1E\x86\xFF\xAE\xD7\xB5\xC0\xB5\xA9\xB5\x26\xB5\x7F\xB3\xC4\xB5\xAB\xA4\xC6\xB5\x10\x88\x12\xB5\xA1\xB3\x34\xA1\x43\x8C\x70\xB0\x76\x09\x38\xB3\x53\xB0\x70\xB3\x07\x84\xB5\xB0\xA9\x9E\xE6\x5A\xE9\xB5\xE5\xAD\xB7\xB5\xEC\xB5\x08\xB6\xAE\xB4\x76\xAE\x0B\xB6\xCB\xB2\x09\xB5\xCB\xB4\xF9\xB3\xC2\xB5\x65\xB2\x14\xB6\xC3\xA4\x16\xB6\xF9\x8E\x18\xB6\x33\x94\x86\xA8\x67\xAB\xC5\xA8\xB7\x0D\x9B\x97\x2A\x84\x75\xB0\x4B\x9E\x77\xB0\x22\xB6\xC5\xB3\x2D\x69\x25\xB6\xD8\xA5\x19\xB5\x07\xB6\xF1\xB3\x8B\xB5\x05\xB5\x92\xB4\x43\xB3\x94\xB4\x3C\xB5\xB5\xB4\xFE\xB1\x94\xB5\x7D\xB2\x96\xB5\x02\xB2\xD3\xB4\x6A\x8C\xC8\xB0\x63\x88\x6E\xB3\x92\x79\x3B\x94\xC0\xA5\xC3\xB4\x05\xB6\xD0\xB3\x28\xB6\x49\xB6\x26\x97\x1D\xB5\x16\xB1\xD3\xB5\x16\xB2\xB3\x9C\x8E\xB2\x92\xA7\x7E\xB5\xBC\xB2\x54\xB6\x39\xB2\x98\xB5\xC4",
"\x76\x6B\xB3\x10\xAF\x18\xB5\xB7\xAB\xB1\xB0\x3B\xB4\x98\xB2\xBB\xAB\x72\xB3\x40\xB4\x73\xB5\xA0\xB5\x36\xB5\x27\xB3\x77\xB5\x8E\xB5\x3A\xB5\x4E\xB6\x50\xB5\x50\xB6\x19\xB2\x6B\xB6\xE7\xB2\x6D\xB6\x7F\xB2\x56\xB6\x92\x8C\x58\xB6\xD7\xA5\x7C\x94\xA6\xB3\x3F\xB6\xE7\xA8\xE7\x0D\xD9\xAB\x9F\x8B\xE8\xB5\x7B\xB6\xD0\xB5\xA1\xB5\xD2\xB5\x5D\xB4\x61\xB5\x21\xB5\xA6\xB5\xA1\xB1\xD8\xB5\x33\xB2\xDA\xB5\x48\x74\x38\x9C\x33\xB6\x40\xA5\x35\xB6\x08\x94\x37\xB6\x5D\xA5\xD6\xB2\xDE\xA7\xE6\xB0\xCF\x9E\xEE\xB0\xC4\xB3\x19\x94\xF6\xAB\x22\xA6\xF3\x81\xD0\x9E\x47\xAC\x0E\x90\x9E\x00\x11\x99\x6F\xB0\x9E\xB5\x60\xB6\x48\xB6\x5E\x67\x50\x59\xDD\x08\x9F\x00\xF0\xAD\xE6\x60\x45\x7D\xA1\x00\x21\xB0\xB8\x0D\x2B\x99\x28\x37\x74\xA1\x7E\xA1\x03\x01\x3D\xA2\x71\x9B\x27\x01\x92\xA2\xD7\xB2\x9C\xA5\xB6\xB0\xD8\x79\x88\xA1\xAD\x9A\xA6\x99\xCA\xA0\xDC\xA2\x32\x08\xA2\x9A\x4D\x77\xA7\xA2\x50\xAD\x21\x0A\xCF\xB6\xAB\xB6\x36\x9A\x57\xA2\x20\x99\x59\xA2\x68\xA2\x58\xB2\x6A\xA2\x0C\x99\xD9\xA2\xF5\x5A\x5F\xA2\xBE\xA1\x00\x6C\xDF\xB6\xF8\xA7\x26\x9A\x09\xA2\xA5\xA1\xE5\xA0\x85\xA1\x39\xA1\xA2\xA2\x11\xA2\xA4\xA2\x55\xA1\x6E\xA2\xEC\xB6\xDE\xB6\xC5\xA2\x3D\x99\x28\x9A\x6C\x98\xBD\xA2\x94\xA2\xCB\xA2\xF8\xB6\xB8\x5B\xBC\xA1\xE8\xA1\x99\xA2\xFC\xB6\xB8\xA2\xEC\xA1\xDA\x7F\x82\xA2\xE5\xB6\xE2\x7A\x1D\xA2\xD8\xA2\x5D\xA2\x87\xA2\xDC\xB6\x48\xAD\x9F\x61\xEE\xB6\x12\x76\xD6\xA0\xD3\xA1\x90\xA2\x35\xA2\x0E\xA2\x11\x9C\xB1\xA2\xF7\xB6\xB3\xA2\xBC\x0D\xDB\xA1\x6F\xA2\x06\x01\x17\xB7\x8F\x80\x1E\x99\xE1\xA1\x0E\xB7\x0F\xA2\x47\xA1\xC0\xA2\x1F\xA1\x14\xB7\xF5\x9F\xE6\x5A\x26\xB7\xB1\x94\xAD\xA2\xBF\x5E\x28\xA1\xD7\xA2\xE8\xB6\x12\xB7\xE7\x0D\xB5\xA2\xC3\xA2\x03\x01\x32\xB7\xC9\x97\x16\x9A\x38\x3F\xE1\x77\x01\xB7\x74\x9A\x03\xB7\x21\xB7\xE9\x77\x2F\xB7\xAE\x78\x3E\xB7\x09\xAA\xEB\x13\x19\xB7\x51\x0C\x0C\xA2\x1C\xB7\x17\xB7\xE3\xA1\x11\xB7\x2D\xB7\xF5\x5A\x87\x9A\xB6\xA2\xD9\xB6\x0A\xB7\xFA\xA1\x4F\xA1\x1A\xA2\xD6\xA2\x43\xB7\x10\xA2\x95\xA2\x04\xB7\xAC\x99\x16\xA1\xE1\xA2\x25\xB7\xDA\xB6\x9A\xAE\x17\x78\x9F\x9A\x64\xB7\x3D\xB7\x66\xB7\xB1\x59\xA4\x9A\x57\xB7\xEC\x9F\x1F\xA9\x39\xB6\xF8\xB6\xE3\x99\x38\xA2\xA9\x9F\x85\x67\x92\x7D\x8F\xA8\x8C\x67\xBC\x99\x38\x04\xBE\x99\xCF\x21\x35\xA0\x11\x0D\x8F\x29\xCD\xB0\x4B\xB7\x81\xA9\xC5\xB6\xBC\x0D\xA5\x06\xC5\x9A\xC1\xB6\x89\xB7\x02\x91\xE8\xAC\x01\x01\xA4\x00\x0E\x62\x16\x9B\x12\x5B\x3E\x7B\xBE\x92\x13\xA0\x5D\xAF\x32\x00\xC5\xAD\xD4\x6C\x3C\x7B\xA6\x00\x3E\x7B\xF9\x00\xD3\x9F\x9C\xB7\x32\x5D\x45\x9F\x50\x5F\x3C\x9B\x2F\x6D\x3E\x9B\xD8\x5B\xAE\xA0\x6F\x9D\x4F\x9B\xE4\x05\x12\x6B\xF0\xAD\x40\xAD\x02\x01\x8E\xB7\xB4\x7A\x90\xB7\xBA\x1F\x92\xB7\x27\x9F\x98\x08\x95\xB7\x97\xB7\xA3\xB7\xE6\x0D\x9A\xB7\xB7\xAD\x00\x00\x9E\xB7\x36\x9F\x09\x01\xBC\xB7\x3B\x5F\xA0\xB7\x54\x5F\xA2\xB7\x2F\x70\xA4\xB7\x14\x5C\xA6\xB7\x94\xA5\xFE\x9E\xA1\x62\x05\x9B\x04\x6D\x8A\xB7\x6C\xB4\x99\x07\x9C\x5D\xCD\xB7\xDD\xAD\xCF\xB7\x03\x01\xBA\x9F\xD1\xB7\xC1\xB6\x0E\x90\xA9\x00\xB8\xB6\xE5\x59\x32\x2C\xD2\x42\xAD\xA0\xC5\xB2\x04\x01\xF6\x58\x7B\x9B\x54\x9B\xBA\x3A\x11\x99\x27\x61\x5A\x9B\x68\x34\xB5\x94\x8A\x22\x5E\x9B\x50\x59\x2D\xA5\x49\x0C\x04\x99\x26\x53\x5C\x59\x67\x9B\x27\x01\x69\x9B\x5F\xB6\x7A\xAD\x7B\x58\x47\x78\x2D\xA2\xA3\x2C\xEF\xB7\xA6\x20\xF1\xB7\xCD\x9F\xEA\x02\xB9\xB6\xB6\xB5\x25\x8C\x7A\x9B\xD3\x99\xBC\x0D\x0E\x91\x6F\xB4\x31\x5C\x5C\x59\x13\x58\x7E\x1C\x74\xB4\x44\xB2\x77\xB3\xD4\xB5\x84\xB0\x12\xB3\x49\xB2\xA4\xB0\x4B\xB2\xDC\xAA\xDB\xB5\xA6\xB2\xE1\xAA\x55\xB5\xAB\xB1\x83\xB4\x07\xB1\xDE\x80\x1F\xB2\x1C\x8A\xD7\x94\x55\x89\x15\xAE\x83\xB5\xF5\x5A\x10\xB1\x07\xB8\xEE\x05\x09\xB8\x79\x4F\x3B\x54\xCA\x97\x09\xB6\xB4\xB2\x2B\xB4\xFA\xB1\x4A\xB4\xFC\xB1\x84\xB6\xE5\xB2\x86\xB6\x18\xB3\x88\xB6\xBE\xB2\x08\xA3\x1C\xB8\x07\x81\x10\xAE\x0A\xB1\x9E\x9B\x06\xB4\x2B\xB1\xD6\x91\x48\xAC\xE7\x0D\x2F\xB1\x08\xB3\x00\x6C\x82\x9B\x84\xAC\x29\xB8\x5D\x0D\x0C\xB8\x12\xB4\x15\xB2\x8C\xB2\x17\xB2\x32\xB8\x64\xB3\x34\xB8\x66\xB3\x33\xB4\x93\xB2\xBB\xB4\x9F\x81\x6E\xAC\x7F\xA6\x20\xB4\x50\xAE\x22\xB4\x52\xAE\x0F\xA7\x9F\x61\x46\xB8\xEC\xAC\x48\xB8\x51\x0D\x4A\xB8\x4D\xB5\xFD\xAF\xD8\xB3\x15\xB4\xDA\xB3\x01\xB0\x67\xB5\xC3\xB0\x19\xB8\xE8\xB1\x8A\xB6\x37\xA3\x67",
"\xAE\x38\xB4\x9C\xA9\x62\xB1\x76\xB6\x4C\x5A\xA0\xA9\xDC\x8D\x5F\xB8\x59\x59\x0A\xB8\xFC\x14\x63\xB8\x2E\xB8\x93\xB4\x30\xB8\xE3\xB2\x4F\xB8\x30\xB4\x52\xB6\x30\xB3\x36\xB8\xE9\xB2\xB1\xAB\x2D\xB5\xF8\x89\x7E\xB1\x7A\x83\x27\x01\x78\xB8\x08\xAD\x61\xB8\x0B\xB8\xB9\xB5\x65\xB6\x9A\xB6\xA4\xB5\xE7\xB4\x9D\xB6\x61\xB2\x65\xB5\x6A\xB6\x83\xB8\x49\xB3\x85\xB8\x1A\xB3\x03\xB3\x1D\xB4\x41\xB8\xFF\x00\x9C\xAE\x44\xB8\x21\x0A\x8D\xB8\x57\x59\x7A\xB8\x20\x0A\x91\xB8\x6C\xB1\x9D\xB1\x9B\xB6\x39\xB1\x96\xB8\xE9\xB4\x10\xB6\xD9\xB5\x0C\xB5\x78\x96\x0E\xB5\xCF\x89\xF0\xB4\xBB\xB3\xE0\xB3\x53\xAE\x3D\xA6\xB2\xAE\x27\xB1\x3C\xB8\x20\x9B\xE6\xA9\x2E\xB5\xF9\x58\xD0\xA3\x88\xAB\x06\x01\xA5\xB8\x41\xAC\x8F\xB8\x7B\xB8\xA9\xB8\x76\xB3\x76\xB4\xBC\xB5\x95\xB8\xBE\xB5\x9E\xB6\xB0\xB8\xA0\xB6\xB2\xB8\x91\x96\xB4\xB8\xA6\x8F\x10\xB5\xC7\xB5\x6A\x82\x0D\xAF\xA6\x0A\xA0\xB4\x03\x96\xE0\xB4\xA3\xB4\x2E\xAF\xC0\xB4\xE7\x95\xD6\xB1\x59\xB5\x03\x01\xC5\xB8\xA9\xAC\x19\x4B\x26\x4B\x7C\xB8\x2C\xB6\x2C\xB4\xB3\xB4\x62\xB3\x81\xB8\x97\xB4\x9A\xB8\xB9\xB3\x53\xB8\xF1\xB4\x9E\xB8\x6B\xB4\xEC\xB1\x26\xA7\x63\xB1\x77\xB6\xF2\xAE\x6F\xAB\xE5\xB8\x22\x8D\xC7\xB8\xA8\xB8\xD1\xB5\x5C\xB4\x72\xA7\x20\xB5\xAD\xB8\xCE\xB8\x97\xB8\x69\xB6\xF9\xA8\xF8\xB5\x19\xB0\x04\xB0\x1B\xB0\x79\xAA\xFF\x95\x06\xB2\x40\xA7\x60\xAA\xC9\x76\x26\xB4\xDE\xB8\x48\xAA\xBF\xB3\x4A\xAA\xFB\xB8\x28\xB8\xE7\xB8\x2A\xB8\xE9\xB8\xF0\xB5\xB1\xB4\x49\xB4\xEC\xB8\x2E\xB4\xEE\xB8\x3E\xB5\xF0\xB8\x19\xB4\x9C\xB8\x32\xB3\xF2\xB4\x03\xA7\xDF\x97\x7D\x86\xF7\xB4\x26\xB6\x63\xAA\xA4\xB4\xE0\xB8\xEF\xB1\xFF\x00\xFD\xB4\x8B\xB8\x09\x01\xFC\xB8\x53\x59\xA7\xB8\xEF\xA1\x00\xB9\xBA\xB5\x93\xB8\xCC\xB8\x62\xB5\xAE\xB8\x23\xB5\x7B\xB4\x11\xB6\xF7\xB5\xCE\xB4\xF9\xB5\x7E\xA7\xE0\xB5\x3D\x9D\xE2\xB5\xA1\x78\x83\xA7\x7C\xAA\x77\xB8\x19\xB9\x26\x1F\xFB\x22\x1C\xB9\xF6\xB2\x78\xB5\xF8\xB2\x0F\xB8\xF8\x9B\x4E\xB8\xCE\xB2\x2E\xB3\x24\xB9\x32\xB4\x26\xB9\x4B\xB3\x55\xB8\x54\x6E\x56\xB2\x60\x7E\x36\xB9\xCC\xAC\xFE\xB8\x39\xB9\x98\xB6\x01\xB9\xF0\xA9\x10\xB3\xD5\xB5\x60\xB4\x0F\xB6\x41\xB9\xB1\xB8\x31\xB6\x9B\xB3\xA4\xB6\x08\xAF\xA6\xB6\xDB\x97\xA8\xB6\xA4\xAA\xE2\x63\x9A\xA4\x2C\x99\xA4\xB8\x4E\xB9\xB0\x53\x50\xB9\xC9\xB8\x75\xB4\xAB\xB8\x94\xB8\x3E\xB9\x05\xB9\xAF\xB8\x6D\xB9\xD1\xB8\x6F\xB9\xFB\xB3\x71\xB9\x8F\xAF\x0C\xB9\x91\xAF\xB8\xAA\xC7\xAD\xFD\xAA\x62\xB9\xBF\x0D\x38\xB9\x65\x9A\x3A\xB9\x92\xB8\x02\xB9\xAC\xB8\x5F\xB2\x3F\xB9\x64\xB5\x07\xB9\x74\xA9\x51\xB8\xDD\xB3\x5B\xB1\xA1\xAF\x28\xB9\x0A\x90\xB1\xB5\x65\xA7\xE7\x0D\x71\xB5\x56\xB4\x08\xB8\x47\xB8\x1A\xB9\x49\xB8\x7E\xB9\x0D\xB8\xCB\xB8\x55\xB9\xD8\xAA\xE8\xA7\xFB\x9B\xD2\xB8\xF8\x96\xD4\xB8\xCF\x94\xD6\xB8\x17\xB6\xC8\xB5\xC0\x0D\xAE\xB2\x61\xB9\x7B\xB9\x2B\x72\x7D\xB9\x94\xB9\xAA\xB8\x60\xB5\x81\xB9\x9C\xB6\x83\xB9\x40\xB9\x98\xB8\x08\xB9\x44\xB9\x0A\xB9\xFA\xB5\x8B\xB9\x06\xB0\xFD\xB5\x99\xB5\x09\x0F\x9B\xB5\xC3\xA7\x90\xB9\xF5\xAC\x64\xB9\x93\xB9\x66\xB9\x3B\xB9\x96\xB9\xC3\xB9\x04\xB9\x0E\xB6\x13\xB3\xDA\xAA\x14\xB8\x03\xAF\x16\xB8\x7F\xB4\xA9\xB0\x5C\xB9\x1B\xB4\xF4\xB8\x86\x79\xFF\xB5\x6B\xAA\x6B\x66\xB3\xB5\x85\xA7\xD3\xB9\xB7\x0D\x92\xB9\x2B\xB8\x2A\xB6\xF5\xB2\xB1\xAF\xF1\xB5\xB3\xAF\x67\xB6\x13\x9D\xC7\xB9\x9C\xB9\x5A\xB9\x99\xB4\xF2\xB8\xB7\xB8\xA1\xB9\x44\x87\x27\xAB\x2C\xA5\xBC\xB9\xA9\xB9\x4F\xB9\xE8\xB8\xAC\xB9\x4B\xB8\x45\xB2\xF6\xB9\x00\xA3\x68\xB8\xC1\xB0\x6A\xB8\x91\xB2\xFC\xB9\x9B\xB4\xFE\xB9\xAD\x89\x30\x78\x06\xB3\x9C\xA2\xA3\xB8\x8C\xB8\xBD\xB9\x1F\xAC\x2C\x72\x62\xB8\x06\xBA\x64\xB8\x13\xB4\x66\xB8\x7B\xB5\x0B\xBA\x17\xB4\xFA\xB9\xB8\xB4\x6C\xB8\x1D\xB2\x5E\xB9\x2C\x79\xA3\xB9\x3A\xB0\xF9\xB7\x81\xAB\xDD\xB4\xE4\xB8\x18\xBA\x94\x7B\xD8\x12\xBF\xB9\xD7\xB9\x95\xB9\x68\xB9\x2E\xB2\x11\xB3\xD6\xB5\xDD\xB9\x4A\xB2\x15\xB3\x7D\xB5\x23\xBA\x40\xB5\x25\xBA\xD3\xB2\x6F\xB6\x85\xB3\x72\xB7\xB1\x79\x8A\xA8\x03\x84\xD3\xB1\xE7\x95\x3C\xB3\xF2\xB1\x45\xB8\x2F\xBA\xF7\x02\x1A\xBA\x90\xB8\xC0\xB9\xCA\xB8\x80\xB9\x3D\xB9\xC4\xB9\xDC\xB9\x12\xB8\x32\xB2\xDF\xB9\xA6\xB0\xE1\xB9\x0D\xBA\x00\xB3\x0B\xB9\x02\xB3\x87\xB8\x70\x97\x65\xAB\x02\xA9\x6C\xB3\x11\x94\x9E\xA5\x13\x94\x53\xB3\xF8\xB8\x8D\xA8\xAC\xA8\x42\xB6\x19\x94\x7A\xB9\x03\xBA\x7C\xB9\x05",
"\xBA\x50\xBA\x7F\xB9\xC2\xB9\x53\xBA\xDB\xB9\x6E\xAF\xE9\x91\x34\xB2\xA5\xB2\xE2\xB9\xA7\xB2\x9A\xB4\x0A\xAF\x27\xBA\x4F\x84\x71\xB6\xA1\xB4\xBF\x0D\xBD\xA5\x5B\xB6\xCE\xB0\x3D\x80\x79\xB6\xF5\x64\xED\xB9\xB3\x0D\xEF\xB9\x51\xB9\xF3\xB9\x1E\xB9\x8F\xB5\x82\xB6\x91\xB5\x22\xB9\x52\xB5\x3D\xBA\x54\xB5\xDE\xB3\x9F\xB3\x7E\xBA\x77\x84\x80\xBA\xDC\xB8\x01\xB5\x7B\x84\x75\xB6\x90\xB6\x08\xA9\x78\xB6\x6B\xBA\xC4\xA0\x6D\xBA\x60\xB8\xAA\xB9\x1B\xBA\x71\xBA\xAD\xB9\x52\xBA\xAF\xB9\x48\xB2\xB1\xB9\x15\x9D\x87\xB9\xED\xB4\x89\xB9\xBF\xAF\xFB\xB5\x3E\xAA\xCE\xB9\x70\xB6\x8C\xB6\x2C\xB9\x90\xA8\xFA\xA5\x8F\xB6\xA5\xB4\x76\xB0\x09\xA9\xFF\xA5\x87\x9E\xA4\xBA\x79\xB8\xD5\xB9\xF0\xB9\x45\xB4\x11\xB4\x1D\xBA\x4C\xB8\x7A\xB5\x57\xB9\xF6\xB5\x58\xB1\x09\xB9\x5A\xB1\x01\xB3\x5C\xB1\x5F\xBA\xF2\xAF\x90\x68\x71\xB7\xC8\xB0\xB4\xB6\x43\xB6\xA5\x4C\xE0\x88\xD4\x9E\xCF\x84\x5C\x67\xAF\xB6\xD3\xAC\xDF\x79\x77\x38\xD6\xB7\x13\xBA\x6D\xAE\x06\x5B\xE1\xBA\xD2\xB7\x4C\x7F\xCC\x93\x27\xAC\xF0\xB0\xDF\xA0\xA0\xAC\x98\xA9\xE1\xB3\x63\x9C\xBB\xB8\x03\xB4\xD0\xB0\x12\xAE\x30\x91\x0D\xB1\xDB\x94\xEA\xB3\x2A\xA9\x3C\xB7\xB4\x0F\x38\x9F\x55\xA8\xEE\xBA\x5D\xA9\x09\xB1\xB1\xB1\xF3\xBA\x2A\xB1\xF5\xBA\xE2\x95\xCD\xAD\xE9\x99\x66\xA9\xFB\xB6\x03\x68\xFB\xBA\x6B\xA8\xED\xAE\x57\xB8\x4D\xAE\x7F\xA9\x9F\xAB\x54\xA3\x39\x81\x5C\xB8\xBD\xAE\x6D\x61\xEC\xBA\x95\x75\xC4\x92\x0A\x73\x60\xB1\x39\xB4\x53\xA3\x76\xB8\x0F\x79\x2D\x69\x16\xBB\xDA\x83\x94\x8D\x8A\xB8\xCD\xB6\xCD\x9A\x0A\xBB\x5A\x8B\x18\xBB\x26\xA2\xA2\xB8\xF7\xAD\x9F\x61\x20\xBB\x36\xB4\xB9\xB8\x3E\xA9\x1D\xB8\x5E\xA9\xE5\xB3\xA1\x95\x88\xB4\xA1\x9B\xC1\xB8\x11\x86\x98\x79\x6E\x07\x26\xBB\x09\x65\x88\xB8\x19\x92\x9E\xB4\xEB\xA3\xDB\xB8\x61\xAA\xA2\xB4\x62\xA7\xFA\xB4\x1B\x88\xCE\x73\x8F\xA8\xAE\x78\x2D\xBB\x84\x87\x0C\xBB\x12\xAB\x32\x86\xBF\xB4\x47\xBA\x31\xB9\xF1\xB1\x71\x79\xB2\x5E\x4A\xBB\x19\x93\xD8\xB8\x3F\xBB\x0E\xAF\x2A\xA4\x72\xB6\x33\xB5\x2E\xB9\xDF\xB8\x50\xBB\xA6\xB4\x6B\x92\x38\xBB\x54\xBB\x3B\xBB\xD2\x78\x41\xAA\xAC\x98\xF6\xB4\x94\xB0\xCE\xB5\x14\xB9\xD9\xB4\x3A\xB6\x0A\xAA\x30\x96\x68\xAA\xD3\x79\x25\xBB\xD2\xBA\xB5\xBA\x89\xB8\x4B\xB9\x4B\xAF\x71\xBB\x06\x01\x55\xBB\x0B\x79\x2F\x7E\x60\xB9\x00\x9B\x1F\xBB\x64\xBB\xB9\x83\x45\xB5\x03\x01\x4C\xA0\x06\x01\xFF\xAB\x07\x68\x3B\xBB\x58\xB5\xE7\xA2\x00\x6C\x7A\xBB\xC9\xAA\xD8\x8B\x39\xB0\xC1\xB4\xCB\xA4\xA8\xAF\xBF\xA0\x15\xBB\x80\xBB\xD8\x8B\xC4\xAF\x3B\x93\x1E\xBB\x8B\xBB\x95\xBB\xC4\x92\x54\x83\x15\xB7\x08\xBB\x72\xBB\x1C\xB3\x38\xB0\x29\xBA\xDD\x83\xEB\xB9\x63\x9B\xF5\x64\x8C\xBB\x28\xBA\x96\xBB\x9A\x83\x28\xAB\x78\xBB\x87\xBB\x73\xBB\x3D\xBB\xD8\x72\xD2\xB7\x58\xA8\xF9\xBA\x3A\xBB\xAF\xBB\x0D\xAB\x96\xB2\x1E\xB3\x0D\x90\x2B\xBA\x0F\x90\x56\x59\x39\xBB\x4C\x07\x9B\xBB\x8F\x9D\x00\xB8\x83\xB7\xD3\xAB\x37\xB3\x3D\x0D\x2F\x90\x9F\xAB\x82\xA5\xA2\xBA\x8B\x9A\x21\x0A\xA8\xBB\xAC\x8F\xC4\x92\xC2\xBB\xDA\xB4\x46\x9E\x51\xB3\x73\xB0\x67\xBA\x74\xB8\x99\xB0\x86\xAB\x62\xBB\xE6\x5A\xCD\xBB\x11\xA5\xD8\x8B\x86\xB3\x69\xBB\x0A\x72\x96\xB0\x67\x9E\x8B\xB3\x7E\x90\x8F\xA8\xBE\xBB\xDB\xBB\xC6\x9D\xDD\xBB\x9A\xBA\x42\xBB\xAB\xB4\xB8\xAB\x9F\xBA\xBA\xAB\xE8\xA8\xD9\xBB\x94\xBB\xB6\xBB\x98\xAB\xD5\xA5\xC5\x90\xB8\xBA\x8E\xB6\xD6\xAB\xC8\xBB\xCF\xB0\xF5\x9A\xD8\x5D\xAE\xBB\xA1\xBB\xEA\xB1\x67\x6D\xD4\xBA\xA2\xB3\xBE\x97\xBB\xB6\xDD\x60\xB0\xB6\x34\x09\xEC\xB0\xB3\xB6\xAE\xB6\x9E\x3C\xB8\x5B\x3C\x0A\x07\xB7\x6A\x7C\x96\x82\x80\x01\xC0\x25\xBE\x2B\xE6\x32\xD5\xB6\x2A\xB7\xE9\xBA\x50\x59\xA5\x06\x0F\xBC\x06\x91\x0C\xA9\x38\x7E\x3B\x39\x14\xBC\xD9\x41\x46\xA2\x91\xA2\xE5\xBA\x34\xAE\xC0\x0D\x8B\x06\x1B\xBC\xA5\x0E\x4C\xBA\xDA\xB8\x62\x01\xE4\x2B\x16\xBC\x47\xA2\xD6\xB7\x48\x95\xAC\x00\x24\xBC\xE4\x88\x9C\x8D\x39\x5D\x33\xBC\xCE\xB7\x02\x08\xAE\x00\xAD\xAD\xB7\x0D\x4B\x07\x10\x2C\x22\xBC\x50\xB7\xE1\xBA\xED\x9B\x6B\x5C\x37\xBC\x39\xAB\xF9\x58\x4C\x7F\xB0\x00\x44\xBC\x49\xBC\x11\xBB\xC5\x36\x81\x9F\xE2\xB7\xB8\x0D\x4C\x7F\xB1\x00\x4A\xBC\xF1\xAD\xF5\x5A\x57\x69\x28\xBC\x89\xB7\xE9\xAD\x27\x01\xEB\xAD\x52\xBC\x26\xA2\xDD\x08\x60\x2F\x5B\xBC\x53\xBC\xE7\x0D\xA4\x05\xEC\x7B\x56\xA8\x55\x69\xF2\xAC\x3E\x7B\x21\x0A\x5E\xAC\x58\x59\x1D\x72\x2B\x8D\x50\x59\x8C\x54\xBA\x7B\xA6",
"\xBB\x2D\x69\x69\xBC\x57\x59\x75\x9B\x72\xB7\x5B\xAC\x69\x07\xB8\x5B\x40\x9B\x03\x01\x6F\xBC\xFE\xAB\xB2\x5E\x72\xBC\x66\x9B\xFE\xB7\x56\x58\xAA\xAD\xBB\x0E\x63\x49\x07\xAD\xEA\x97\x3B\x09\x86\x34\x5C\xBB\x66\xAC\x7E\x40\x06\x58\x15\xAD\xE2\x5B\x3E\x7B\x86\x4B\xBA\xAD\xD4\xAB\x6E\x09\x7E\x40\x89\xBC\xF6\xB7\x86\x34\x98\x08\x90\xBC\x9F\x8C\x03\x8B\x91\x2A\x9C\xAC\x96\x09\x49\x1C\x72\xAC\xFB\x3A\x1B\x08\x3C\x7B\x5E\x57\x4E\xAD\x6D\x3F\xF4\xAC\xD2\xB6\xDF\x88\xF7\xB7\xBA\xB6\x96\xBC\x7E\x40\x98\x08\x6C\x3F\x9A\xBC\x02\xB8\xA5\x31\x9D\xBC\xCB\x0A\x5B\x9F\x96\xAC\x9B\xAD\x45\x09\x3C\x7B\xB5\x00\x3E\x7B\xE4\x00\xA7\xBC\x23\xB6\x06\x72\xAA\xBC\x01\xB8\x8A\xBC\x5D\x50\xFA\xAC\x27\x01\xBC\xBC\xF5\xB7\xD6\x2C\xB2\xBC\x83\x9F\xC8\x64\xE5\x9F\x7F\xAC\x19\xBA\x1F\x2D\xA3\xBC\x3E\x7B\x9E\x3C\x95\xAD\x2B\xA7\xA9\xBC\x88\xBC\x88\xB5\x4B\x55\x74\x00\x98\x08\x7D\x9B\xDD\xB8\xAC\xBC\xC3\xBC\x74\x00\xB3\xBC\xE4\x9F\xB5\xBC\xDA\x9F\xB7\xBC\x6F\x09\xE6\xB7\xCB\x0A\xD8\x2A\xE9\xB7\xCD\x22\x5E\x9B\xE6\x0D\xA4\xBC\x1D\x7C\x08\x05\xF7\x9D\xA4\xB3\xD8\xBA\xC0\xBC\x6A\xBB\xDD\xBC\x69\x50\x86\x07\x98\x08\x73\x9B\x13\xB9\xF5\xBC\x43\x55\x8C\x01\xE0\xBC\x84\x9F\xE2\xBC\x79\xAD\xC8\xBC\xE5\xBC\xCA\xBC\xE8\x63\xE3\x2C\x5C\x9B\x41\x3B\x6B\xBC\x5F\xBC\x05\xBB\x66\x67\x12\x52\x0A\xBD\x09\xB4\xF9\x58\xA4\x05\x08\x37\x0E\xBD\x71\xAD\xF9\x58\xDD\x08\x75\x52\x13\x72\xD5\x61\xBC\x53\xBB\x00\xBD\x78\xB2\x5E\xF9\x9E\xAB\x6E\xC4\x3B\x19\xBB\x9A\xA9\x00\x00\x9F\x58\xB1\xAD\x9E\xAD\xFF\x7B\x24\x35\x27\x61\x9B\x0F\xCE\x3B\x8F\x10\xD8\x08\x4E\x35\xC9\x50\x6E\x05\xAE\x9F\xD2\x09\xB4\x3B\xBF\x05\xB2\x9F\xF4\x32\x2F\xBD\x80\x05\x65\xBC\x03\x01\x50\x38\x85\xBC\x00\x6C\x1E\xBD\x04\x74\x20\xBD\xBA\xA0\xB8\x5B\x25\x06\x73\x9F\x13\xBD\xA0\xB8\xC0\x04\xBE\x00\x45\xBD\xE2\xBA\x65\xB1\x27\x01\xBF\x00\x49\xBD\x14\xBD\xF5\x5A\xC5\x36\x61\x9F\x64\xA1\x4B\xBD\x30\x58\x4E\xBD\xAA\xAD\xC5\x36\x56\x9F\x4E\xBC\xBC\x0D\x4C\x7F\x77\x2C\x45\xBD\xCA\xB6\xBD\xA0\xFB\xB7\x02\x01\xB9\xA0\x9C\xA0\x36\xA2\x1B\x9B\x88\x04\xD4\xB6\x34\xA2\xF0\xA2\x60\x98\xD7\xB6\x6A\xB7\x62\xBD\xC7\x9F\xF9\x8D\x67\x5C\xE0\x67\x50\xA2\xC2\xA2\x24\xB7\x03\x01\x63\xBD\xA7\xA0\x08\xA2\x61\xBA\x58\x77\xE4\xB6\x2F\xBC\x8A\x99\x10\xB7\x38\xB7\x54\xB7\xE7\x0D\xEB\xB6\x56\xAD\xF5\x64\x77\xBD\xB1\xA0\x79\xBD\x1A\xB6\x6E\x7A\xE3\xA0\x66\xA2\xF3\xB6\x65\xBD\x67\x9A\xF6\xB6\x60\xB7\x46\xB7\x09\x0F\xFA\xB6\x84\xBD\x2D\x69\x86\xBD\x0B\xA0\x88\xBD\x4E\xA1\xDA\x7F\x75\xA2\xB1\x01\x37\xB7\xF3\x99\x39\xB7\xFF\x00\x06\xB7\xDF\xA0\x97\xBD\xF8\x9F\x99\xBD\x7B\xA5\xBB\x98\x0D\xB7\x7D\xBD\x69\xA2\x84\xA2\x80\xBD\xCC\xA2\xC9\xA1\x48\xB7\xB2\x5E\xA4\xBD\x84\xA1\xA6\xBD\x0B\xB7\xC7\xA2\x46\x9A\x1B\xB7\x6A\xBD\x1D\xB7\x93\xA2\x44\xB7\x53\xB7\xAE\xBD\xDA\xA1\xB0\xBD\xE6\x5A\xB2\xBD\x95\xA1\xF9\xA1\x44\x9A\x86\x0D\x29\xB7\xAA\xBD\xE6\xB6\xAC\xBD\x9F\xBD\x81\xBD\xFF\x00\xE7\xA1\xA3\xBD\xEB\xA1\x5A\xB7\xA9\x98\x27\xA1\xAF\xA2\x17\xBC\xBB\xBD\x5F\xB7\x45\xB7\x36\x99\x50\x59\x3B\xB7\x75\xBD\x6E\xBD\x17\xA2\x89\xBD\xEE\x79\x36\xA1\xFD\xA1\xD5\xBD\x8F\xBD\x1F\xB7\x91\xBD\xD9\xBD\x8E\x99\xC0\xBD\x6D\x61\xC2\xBD\xB1\xA1\xD0\xA1\xDF\xBD\x8E\xA2\x43\xA1\x80\x7A\x5E\xB7\x2C\xB7\xBE\xBD\xF9\x58\x56\xB7\xB4\xBB\x00\x00\xEB\xBD\xC1\xA1\x4D\xB7\x27\x74\x8F\x9A\xC8\xBD\x0F\xB7\xE7\xB6\xCB\xBD\xF4\xBD\xF5\x5A\xDB\xA2\x6D\xBD\x01\x01\xF9\xBD\xCF\xA1\x32\xB7\x37\x8F\x5F\xA1\x67\xBC\x27\x01\x07\xBE\xF8\xA1\xA3\x9A\xBB\xBB\x56\xBC\xAE\x78\x0E\xBE\x07\xA2\xA5\x9F\x4E\xB3\xFA\x98\xED\xA2\xE5\x99\x2E\xBC\x23\xBC\x56\xBD\xA0\xB8\xDF\xAD\x3B\xBC\xCD\xA6\x90\x0C\xF9\x56\x3C\xAC\x2D\xB9\xBB\xB6\xF7\xAC\x10\xBE\xB8\x0D\x28\x7B\x06\x01\xC5\x00\xD8\xB6\x01\x01\x1B\xAC\xB0\xBC\x26\xBE\xD8\x07\x50\x59\x1B\x8D\xC4\x00\x1D\xBE\x36\xBE\x0E\xBD\xAC\xB7\x01\x01\xC6\x00\x0E\x62\xB5\x9A\x09\x01\xC8\x00\x3E\x7B\x12\x00\xD6\x0D\x13\xA0\x41\xBE\x5B\x59\x89\xAC\x7A\x51\xE1\x53\x11\x01\xB6\xB7\xE0\xBB\xDC\x88\x03\x37\x3C\x7B\xC7\x00\x3E\x7B\x0E\x00\x42\xBE\x3E\x6E\x51\xBE\x45\xBE\xF4\x74\xC8\x2E\x47\xBE\xEC\x53\x49\xBE\x98\x59\x9F\x53\x6F\x0B\x3C\x7B\x3F\xBE\xBA\xB7\xD9\x0D\x09\x9F\x27\x01\x61\xBE\x5A\x59\x46\xBE\xC9\xAD\x48\xBE\x68\x00\x4A\xBE\xF2\xAB\xB4\x02\xD4\x53\x5B\x04\xE6\x0D\x4F",
"\xBE\xBA\xB7\x29\x00\xB3\xB7\x27\x01\x72\xBE\x55\xBE\x3A\x8B\x57\xBE\x67\xBE\x59\xBE\x69\xBE\x5B\xBE\x2E\x59\x25\xBD\x37\xBE\xDC\xAD\x45\x7D\xC9\x00\x7F\xBE\x38\x81\x1E\x8D\x3C\xBD\x21\x0A\x06\xAD\x13\xB1\x24\xB3\x46\xAD\xA9\xAD\x48\x95\xDD\xAC\x85\xBB\xB2\x5E\x3E\xAD\x1B\xAE\x7C\xB0\x6F\xAD\x1E\x68\x50\x59\x77\x65\x57\xA1\x60\xA1\x65\xAD\x82\x99\x89\xAE\x83\xBE\x37\xBC\x39\xBE\x00\x00\xCA\x00\x0E\x62\x06\x0E\xE6\x0D\x5F\xBE\x35\xAC\x6D\x0D\x52\xBE\x5F\x72\x44\xBE\x65\xBE\x56\xBE\x99\x43\x6A\xBE\xA5\xAD\x4C\xBE\xCC\x53\x4E\xBE\x50\xBE\xA8\xBE\xC3\x72\x54\xBE\xAB\xBE\x77\xBE\xAD\xBE\x7C\xBE\x0B\x1F\x6E\xBE\x27\x01\xA5\xBE\x18\xAD\x93\x65\x73\xBE\x09\x01\x2C\x00\x8C\x5A\x45\x59\xBA\x53\xE5\x58\xAE\xBE\xC4\x53\xBC\xBE\x09\x01\x70\xBE\xA6\xBE\x8B\x87\xC1\xBE\xCE\xBE\x76\xBE\xB9\xAA\xE4\x53\xEB\x53\xD6\x53\xBF\x09\xAE\xBE\x5C\xBE\x68\x05\x5E\xBE\x3E\x7B\x3B\x36\xFC\xBB\xAC\x76\xDC\xBE\x57\x59\xC5\xBE\xD5\x53\x84\x43\x7F\x0C\xC8\xBE\x3E\x59\xD4\xBE\x71\xAC\x9D\xBE\xE9\xBE\x9B\x67\xEA\xBA\x24\x92\x5A\xBC\x5A\x59\x39\x58\xC4\xBA\x4A\xB6\x76\xB5\x38\xB5\x80\xB6\x79\xB5\x1F\xBA\xCA\xBA\xCC\xB4\x43\xB9\x27\xB5\x45\xB9\xFC\xA8\x47\xB9\x46\x8D\x39\xB8\x0F\xAE\x2E\xAE\x5D\xA6\x30\xAE\x45\xA9\x10\xA3\xF6\xBA\x33\x91\x6E\xB4\xE7\xB5\x59\xBC\xFD\xB7\x9D\x3B\xAB\xB9\xA8\xBA\x07\xBA\x0E\xB8\x09\xBA\x48\xAB\x21\xBA\x3C\xBA\xCD\xBA\xE6\xB1\x3F\xBA\x83\xB3\x1B\xB8\xFD\xBA\x2D\xAE\xC4\x70\x2F\xAE\x61\xA9\xC7\x9B\xFC\xBA\x0B\xBD\x42\xB8\x65\xA6\xFD\xAA\xEE\xBE\x59\x59\xF0\xBE\x8C\xBA\x5E\xB3\xF4\xB9\x44\xB0\x20\xB9\x4B\xB4\x58\xB9\xB7\xB3\x94\xBA\x7F\xB5\x18\xBF\x51\xB4\x41\xBA\xA2\x9C\x46\xB1\x1F\xB4\x34\x81\x7A\x91\x68\xBA\x3B\x6D\x42\xBC\x70\xA3\x25\xBF\x0C\xBF\xCB\x58\x0E\xBF\x33\xBA\xC1\xB9\x66\xB6\x4D\xB8\x68\xB6\x7C\xB5\x99\xB8\x16\xBF\xD1\xB2\x33\xBF\x82\xB4\x98\xBA\x6B\xB2\x5F\xB1\x22\xBD\x61\xB1\x3A\xB4\xEE\xBB\xA3\x66\x1D\xBB\x85\xA7\x26\xBF\x6A\xBC\x76\x54\xC8\xB8\x0F\xBF\xC7\xBA\x08\xBA\x46\xBF\xF7\xB9\x9B\xB9\x38\xAA\x5B\xBA\x80\xB4\x4C\xBF\xBA\xB4\x11\xBA\xAF\xA7\x23\xBB\xB0\xB2\x06\x01\x58\xBF\x73\xBC\x5A\xBF\xFF\xB8\x43\xBF\x51\xBA\x73\xBA\xAB\xBA\x11\xB8\xAD\xBA\x9D\x9D\xB3\xB9\x68\x97\xB5\xB9\xD8\x97\xB7\xB9\x36\xB6\xDE\x7D\xAD\xA3\x6D\xB4\xFD\x84\xD7\xB1\x6C\xBF\x7F\xBC\x0D\xBF\xA7\xBA\x70\xBF\x72\xBA\x45\xBF\xC9\xBA\x47\xBF\x14\xBF\x49\xBF\xC9\xB9\xCE\xBA\x5D\xBA\xD0\xBA\x19\x85\x00\xBF\x1B\x85\x85\xB4\x22\x8E\x87\xB4\xBF\xB8\x69\x9C\xB5\xB1\xA7\xA8\x4A\xBA\x21\x0A\x82\xBF\x74\x9B\x6E\xBF\x65\xB9\x7D\xB6\xD4\xB3\x7F\xB6\x2B\xBF\xE0\xB1\x2E\xB6\xF5\xB5\xF9\xBE\xCC\xBA\x8D\xBF\x17\xBF\x96\xBA\x56\xB5\x4E\xBF\xFF\xBA\x20\xB2\x0A\xA2\x2B\xBC\x05\xAA\xB8\xBA\x70\x82\x6C\xBB\x16\xB9\x55\xB3\xFF\x00\xE2\xB8\x16\xBA\x09\x01\x9D\xBF\x04\xBD\xFF\x7B\x42\xBF\xA1\xBF\x8C\xAE\x4C\xB6\x4E\xB5\x90\xBA\xD9\xB3\x92\xB5\xDB\xB3\x9D\xB9\x68\xB5\x46\xB9\xB3\xBA\xA2\xAA\x5E\xB1\x0F\xA1\xA4\x9C\xE3\xBB\xFA\xB8\x87\xBA\x2D\x69\xBD\xBF\xE3\x9F\x41\xBF\x85\xBF\xC1\xBF\x7F\xB0\x86\xB1\x53\xB9\x2A\xB3\xCC\xB2\x2C\xB3\x2F\xBF\x4D\xB4\x4A\xBF\x4F\xB4\x65\xBF\x42\xB5\xAE\xBF\xB0\xB1\xB0\xBF\xD6\xB4\x2C\xAF\x09\xB2\x20\xB6\x0F\x7E\xD3\xBF\x00\x6C\xD5\xBF\x55\x7C\x9F\xBF\xD6\xB9\xD9\xBF\xD7\xB0\x80\xB0\x8E\xBA\x81\xB6\x7F\xB8\x95\xB4\x92\xBA\x93\xB5\xE2\xBF\x95\xB5\xE4\xBF\x81\xB5\xE6\xBF\xE4\xB3\xCB\xB1\x27\x96\x5E\xA7\x29\x96\xDF\xBB\x25\xBE\x44\xBB\x2F\xB9\x5F\xBB\xBD\xBA\xF9\x58\x33\xB9\xE3\xA4\x6B\xBF\x40\xBF\xC8\x64\x6F\x7C\xF3\xBF\x75\xB5\xC6\xBA\x7D\xB8\x4D\xB6\xF9\xBF\x4F\xB6\xE0\xBF\xB6\xB4\x31\xBF\x6C\xB6\xFF\xBF\x97\xB5\x01\xC0\xE7\x86\x14\xB5\xDE\x8A\x6A\xBF\x03\x01\xF0\xBF\xBF\x0D\x28\xBF\x1C\xBA\x17\xC0\xC4\xBF\x19\xC0\x83\xB6\x1B\xC0\x51\xB6\xFD\xBF\x53\xB6\x1F\xC0\x55\xB6\x35\xBF\xB4\xB1\x8D\xAA\x81\xA4\x9C\xA7\x27\xC0\x59\x9B\xF2\xBF\xF1\xBE\x63\xB6\x8C\xB5\x52\xB9\xF5\xBE\x54\xB9\x12\xBF\xFC\xB2\x61\xBF\x7D\xAE\x17\xB8\x69\xB0\x7C\xBA\x47\xAF\x21\xC0\x44\xB5\x77\xB9\x7A\xAF\x42\x9D\xBC\xBF\x11\xC0\x9F\xAD\xC0\xBF\x15\xC0\xAF\xB4\x1D\xB9\xC9\xB4\x0D\xB6\x76\xBA\xD5\x92\x78\xBA\x7E\xB4\x63\xBF\xE3\xB9\x33\xC0\x6E\xB6\xA8\x5E\x89\xBB\x4A\xA5\x3A\xC0\x3C\xBC\x3C\xC0\x29\xBF\x47\xB4\xA4\xBF\xB2\xB4\xDE\xBF\xB5\xB3\x2F\xC0\x85\xB6\x1D\xC0\x87",
"\xB6\x5F\xC0\x89\xB6\x35\xC0\x75\x79\xAA\xB6\xEF\xB6\xF9\xB8\xA5\xB9\x92\xBB\xFE\xB4\xD4\xBF\x51\xC0\xBF\xBF\xD8\xBF\x54\xC0\x2B\xB6\x56\xC0\x0C\xB6\x53\x87\x59\xC0\x0B\x93\xA1\xB6\xA5\x80\x7F\xAE\x0E\xBA\xE4\xB9\x34\xB4\x67\xBF\x8D\x8F\xB8\x0D\xBB\xB9\xDC\x8D\x64\xC0\xB3\x0D\x29\xC0\x5C\xBF\x2B\xC0\x65\xB8\x90\xB5\xC6\xBF\xFB\xBF\xC8\xBF\x6F\xC0\x35\xB8\x71\xC0\x37\xB8\xCD\xAE\xEB\xB2\x9A\xB5\xBD\xBC\x4A\xA9\x6D\x61\x91\xC0\xCC\x9F\x84\xBF\x4F\xBA\x86\xBF\xA9\xBA\x72\xBF\x43\xC0\x7A\xB4\xF8\xB9\x62\xBF\xC9\xBF\x6B\xB8\xAC\xBF\x1A\xB8\x4B\xC0\xFE\xB5\xB8\xBB\x6F\xB5\x38\x76\xA5\xBB\xCB\xB5\x50\xC0\x8B\xAD\x66\xC0\x2A\xC0\xEA\xB8\x2F\xB8\x2D\xBF\x31\xB8\x6D\xC0\x33\xB8\x9B\xC0\x52\xB8\x8A\xC0\x54\xB8\x8C\xC0\xA9\x9D\x00\xBA\x02\x01\xED\xB7\x34\xB9\x10\xC0\xBC\xC0\xA7\xC0\x5B\xBF\xA9\xC0\x10\xBF\xAE\xB9\xAC\xC0\xBF\xB5\x85\xB9\x58\xBA\x5B\xC0\x5A\xBA\xB0\xC0\x89\xC0\x9D\xC0\x86\xB8\xBF\xB2\x08\x9C\x4A\xBD\x48\xA5\x8B\x9A\x63\xC0\x7C\xC0\xDB\x9F\x7E\xC0\x4B\xB5\xFB\xAF\x5D\xBF\x11\xBF\x5F\xBF\x0A\xBA\xC7\xBF\x69\xB8\xDC\xC0\x5C\xBA\xCB\xB9\x5E\xBA\xE0\xC0\xFF\xBB\xD3\xBA\xDE\xA2\x20\xB3\xEE\xBF\x9C\xBF\xE6\xC0\x30\x34\x53\xC0\xE9\xC0\x43\xB2\xD4\xC0\xAA\xBA\xD6\xC0\xCF\xB8\xD8\xC0\x3B\xBA\x8C\xBF\xFB\xBE\xCA\xB9\xCB\xBF\xCC\xB9\xFC\xB5\xB0\xBB\x57\xB6\x61\xBA\xA4\xAD\x45\xBA\x01\xA0\xB7\xBF\x52\xA4\x6E\xAB\xFA\xC0\x0B\xBF\xD0\xC0\xD7\xBF\xA8\xC0\xF4\xBF\x85\xB1\xFD\x87\xF5\xB3\x95\x9E\x58\xC0\xA2\xB2\x77\xBA\x86\xC0\x87\x8C\x88\xC0\xF2\xC0\x0A\xC1\xF4\xC0\xEB\xAB\x74\xBB\xD2\x6D\xD0\xBB\x6D\xBB\x88\xA8\xBF\x0D\x3D\xB6\x74\xB0\xBC\xBA\x40\xB6\xA0\x97\x6F\xAB\xA5\xC0\xB6\xBC\x07\x29\xE8\xC0\xAE\xB3\x4F\xA9\xEB\xC0\xD5\xC0\xED\xC0\x13\xBF\xEF\xC0\x0C\xBA\xF1\xC0\x64\xBF\xB2\xC0\x6D\xB8\x73\xC0\x8B\xB6\x03\xBC\xD1\xBB\x2A\x60\x97\x8C\xE2\xBB\xEC\xBF\x57\x84\x9A\xBF\xEA\xA8\x26\xC0\xFC\xC0\x38\xC1\x1A\xC1\x7F\xC0\xF2\xB9\x2A\xBF\xF7\xBF\xF6\xBE\x97\xC0\x67\xB8\x40\xC1\x22\xBA\x31\xC0\x84\xB8\xDE\xC0\x9D\xB8\xD1\xBA\xF6\xA5\xAE\xB0\x1C\xB6\xC1\xBC\xF0\x09\x8A\xB3\x4D\xC1\xDD\xA5\x35\xC1\x52\xC1\xDF\x2F\x54\xC1\xFF\xC0\xDE\xB2\x40\xC0\x69\xC0\x1F\xB9\x6B\xC0\xB4\xB4\xC3\xC0\x50\xB8\xC5\xC0\x9E\xB9\xCF\xBA\xA0\xB9\xE6\xB9\x3E\x71\xB7\xBA\x07\xC0\xB9\xBA\xD5\xAB\x82\xB7\xDA\xB4\xD7\x71\xAA\xB3\xC1\x95\xFB\xC0\x18\xC1\x12\xC0\xFE\xC0\x3A\xC1\x42\xAB\x87\xBF\x3C\xB9\x73\xBF\x38\xBA\x56\xBA\x9F\xB6\xD9\xC0\x23\xC1\x58\x9C\x25\xC1\x43\xC1\x9F\xB9\xDF\xB3\xC9\xC0\x7B\xBB\x75\xC0\x12\x76\xC1\xB3\xDB\xBA\x15\xB9\xD7\xBA\xB1\xB6\xC7\xB3\x0A\xBC\xC9\xB3\xDD\xBA\x25\xBC\x0A\xB4\xCB\xB6\x61\xBD\x01\x01\xEF\xAD\x27\xBF\x3C\xC0\x0C\x9B\x67\xBD\x39\xBF\xDA\x79\x1B\xBE\x40\xBC\x4F\xBD\xE7\x0D\x4A\xA2\x74\xAD\xF5\x64\xAC\xC1\x59\xBF\xD1\xC0\x18\x0A\x90\xA1\xE9\xBD\x9F\x61\xBA\xC1\x6D\xBF\xBC\xC1\x25\x03\xFB\xBD\x58\xA2\x9A\xA1\xF2\xBD\x1C\xA1\x61\xB7\x27\x99\xBF\xC1\xB9\xC1\x6C\xC1\xF3\x12\x51\x0D\x40\xB7\xD8\x48\xE4\xA0\x9E\xBD\xEF\xA2\xD5\x5A\x62\x98\xAC\xA1\x74\xBD\x9F\xBB\x06\x01\xC1\xC1\x83\xBF\x19\xC1\xFC\x14\xF1\xA0\xFF\xB6\x3F\x99\xC8\xC1\x53\xA1\xCA\xC1\x44\x99\xD9\xC1\x95\xBD\x00\x6C\xDC\xC1\x9E\xBF\xC3\xC1\x70\x0A\x25\x84\xA9\xBD\x1C\xBE\xBD\xB4\xF3\xBD\xE5\xC1\xAF\xBD\xE7\xC1\x8A\xBB\x21\x0A\xEA\xC1\xBE\xBF\xE7\xC0\x7E\x1C\xC5\xC1\xED\x79\xD4\xA1\xF0\xC1\x4D\xBB\xBE\xA2\xBD\xBD\xF3\xC1\xBF\xBD\xF5\xC1\x2B\xBB\xCD\xC1\x88\xC1\x52\xC0\xD0\xC1\x25\x84\xC7\xBD\xFF\xC1\xCF\xBF\xCA\xBD\xD5\xC1\x8D\x98\xC4\x98\x2E\xB7\x05\xC2\x92\xBE\xE9\xC1\xCE\xC1\x13\xC0\xC4\xBD\x6C\xA1\x26\xA1\x79\x99\xD4\xBD\xFE\xBD\x2B\xB7\xC9\xC1\x92\xBD\xF4\xA1\xCC\xC1\x2D\x69\xF8\xC1\xD6\xBF\x89\xC1\x0A\xC2\xF1\xB6\xBB\xA2\xD4\xC1\x3F\xBC\xB9\xBD\x55\xA1\x03\xA2\xDC\xBD\xAB\xC1\x17\xC2\x5D\x0D\xFC\xC1\xFD\x83\x4F\xB7\x2D\xC2\x00\xA1\xB2\xA2\xE7\xBD\xCD\xA2\xE6\xA2\x06\xC2\x24\xC2\x32\xC2\x28\xC2\x7A\xBD\x5C\xB7\x2B\xC2\xB3\xC1\x2D\xC2\xB8\x5B\x04\xBE\x86\xBE\x27\x01\x25\xC2\xF1\xBF\xEC\xC1\x09\xBE\x8D\xB9\xA0\x7A\x05\xBE\xD4\x9F\x3F\xC2\x7E\x1C\x28\xBE\x53\xAB\x14\xC2\x39\xAE\x6D\x61\x4A\xC2\x28\xC0\x3C\xC0\x2C\xC1\x73\xB7\x19\xBE\x19\x88\x10\xC2\x3A\x9A\xAB\xB7\xBB\xBB\xCB\x00\xDA\xB7\x17\xBE\xD4\xB0\xAC\xAF\x26\x8D\xB8\x0D\x5E\x91\xCC\x00\xEA\xBE\x9A\x68\x6D\xBC\x76",
"\x8C\xAF\x99\xC1\xB7\xB7\x60\x12\x4E\x07\x89\x6E\x8A\x8B\x89\xCB\xAD\x0E\x90\xCD\x00\x65\xC2\x0F\xC1\x70\xB0\xEC\xBE\xC3\xA7\xC4\xB6\x8A\xAB\xEA\xC0\x95\xC0\x1E\xBA\x5A\xC1\x20\xBA\x5C\xC1\x15\xBF\xAA\xBF\x4B\xBF\x44\xC1\x26\xBA\x58\xA6\x5D\xB8\x5A\xA6\xF0\xBA\x94\xBF\x66\x9C\x0B\xB1\x42\xA6\x46\xA9\xCF\xB9\x0F\xB1\x95\xB1\x98\x0C\x9F\x61\x80\xC2\x4D\xA9\x8B\xC1\x81\xAF\x71\xBF\x88\xBF\xF7\xBE\x8A\xBF\x87\xC2\x07\xC1\x13\xB6\xFC\xBE\x47\xAE\x73\xB9\xF0\xA7\x0D\xAE\x89\x7D\x31\xBB\xAF\xBF\x1F\xB8\x41\xA6\x56\x91\x57\x89\x08\xB4\xB5\xC1\xF6\x5A\x24\xBF\xD7\xB1\x9B\xC2\xEF\xAB\x67\xC0\xA3\xBF\x58\xC1\x42\xC0\x3E\xC1\x44\xC0\x48\xBF\xC8\xB9\x08\xC1\x8E\xBF\xF3\xC0\x90\xBF\x29\xC1\x0D\xC1\x76\x8D\x37\xBF\x58\xB8\xB1\xC1\x99\x8D\x54\xBF\x0E\x9E\x35\xBC\x3E\xBF\xB6\xC2\xDD\xAB\x7E\xB6\xF4\xBE\x72\xC1\x8F\xBA\x2D\xC0\x91\xBA\x76\xC1\x82\xB8\x5E\xC1\x9B\xB8\x60\xC1\x27\xB9\x7C\xC1\xED\xBA\x50\xBF\xDC\x6E\x71\xA3\x69\xAE\x9D\xA9\x54\xB3\x3A\x5B\x56\xBF\xA7\xB9\xFE\x5E\xD1\xC2\xA2\xBF\xD3\xC2\xBB\xC2\xDD\xBF\xA6\xBF\x56\xB1\xCB\xBA\xE4\xB1\xDA\xC2\xF1\xB8\xC7\xC0\xF3\xB8\x62\xC1\x65\x95\xDF\xBA\x7D\x89\x85\xA7\xB7\xC2\xF4\xAF\x88\xA6\x6F\xC1\x0C\xB3\x81\xC0\x2D\xB6\xCA\xB4\xA7\xBF\x30\xB6\x12\xB6\x65\xB4\xA6\xC2\x45\xAF\xA8\xC2\x0C\xAE\x7D\xBF\x93\xB1\xA1\xB8\x98\xC2\xBC\x67\x9A\xC2\xEA\xC2\xC2\xBF\xF6\xBF\x57\xC0\x83\xC0\x21\xC1\x5A\xC0\x94\xC1\x8F\xA4\x96\xC1\x5E\xC0\x8B\xC2\x40\xBA\xB8\xB8\x8E\xC2\xC8\xA3\x1C\xBF\x3E\xBB\xBD\xB8\x33\x9B\xF7\xA4\x25\x8E\xC0\xB8\xBB\x78\x6F\xAB\xFC\xC2\x97\xB2\xBF\xAB\xDD\xB2\x00\xC3\x71\xC1\xED\xC2\xB3\xB3\x74\xC1\xED\xB8\xD8\xC2\xEF\xB8\xF3\xC2\x25\xB9\xDC\xC2\x5D\xB9\x9A\xC1\x8D\x8E\xD5\xB4\x04\xAA\xD7\xB4\x12\xAF\x15\xB9\x08\x96\xBA\xBF\x4A\xA5\x2B\xC3\xB9\xBB\xF1\xA6\x55\xC1\xEF\xB5\x30\xC3\x15\xC3\x98\x87\x84\xC0\x2B\x93\x19\xC3\x72\xA5\x1B\xC3\x7B\xBA\x0F\xBA\x7D\xBA\x3B\xC3\x0C\xA4\x00\xC2\x0E\xA4\xF7\xB8\xD6\xBB\xCA\xA4\x52\xBB\xA2\xAB\x63\x5B\x12\xC3\xDA\xBF\x1D\xC1\xFB\xB0\xD4\xA8\xEF\xC2\xE2\xB1\xF1\xC2\xCF\xB2\x37\xC3\x5B\xB9\x39\xC3\xE5\xB9\xF7\xC2\xDC\x5E\x66\xBB\xE9\xBF\xB4\xBF\x07\xAA\xD1\xBF\x98\x8E\x2A\xC3\x5F\xC3\xF5\xBF\xDB\xBF\x41\xC0\xEE\xC2\x03\xC3\xF0\xC2\xA8\xBF\xF2\xC2\x89\xC2\xE3\xBF\x1D\xC3\x19\xBF\xB4\xC0\x3B\xB8\x01\xA9\x2B\xB9\x7F\xC1\xB5\xBF\x72\xC3\x32\xB9\x67\xA7\xBA\xC0\x5B\x5C\x75\xC3\x1C\xC1\x5B\x8D\x1E\xC1\x6C\xAF\x20\xC1\x0A\xB5\x79\xB2\x77\xBF\xD5\x97\x79\xBF\x93\xA6\x7B\xBF\xA7\xB6\x44\x7D\x76\xBB\x3D\xB2\x9C\xA7\x45\xC3\xB7\xC0\x6C\xAA\xD3\xB3\x13\xC3\x77\xC3\xD4\xC2\xF8\xBF\xC1\xC0\x80\xB8\x35\xC3\x23\xB9\x68\xC3\xFB\xB9\xF5\xC2\xFD\xB9\xDE\xC2\xFF\xB9\x37\xC0\x0E\x79\xFB\xC2\x8D\xC3\x9E\xB2\xCB\x85\x4B\xC3\x2F\x8C\x4D\xC3\x64\x93\x4F\xC3\xF9\xA9\x51\xC3\x18\xB8\x80\xC3\x34\xBF\x82\xC3\x2C\xB1\x6C\xB2\x83\xBB\x6E\xB2\x8C\xC3\x81\xC2\x00\xC1\x3C\xC1\x02\xC1\xBD\xC2\xAD\xC0\x45\xC0\x41\xAF\xDC\xB5\xFB\xA9\xDE\xB5\xD2\xA7\x0B\xC1\x26\x6C\x62\xC0\x26\xB8\x62\x5F\xB4\xC3\xE4\xB4\x8E\xC1\x03\xC1\x06\xB9\xBF\xC2\xF9\xB9\xAB\xC3\x24\xBA\xBF\xC3\x4D\xBF\x55\xC3\xCE\xBB\xB6\xC0\x00\xB6\xCA\xA8\x91\xBB\xB9\x96\xB3\xC3\xC7\xC3\x70\xC1\x8D\xBA\xB7\xC3\xF7\x8C\xB9\xC3\x25\x94\xBB\xC3\x76\xB1\xBD\xC3\x48\xC0\x53\xC3\x4A\xC0\xE3\xC3\xE0\xA4\x8E\xC0\x92\x9D\xE8\xC2\xD7\xC3\xEB\xC3\x2F\xC3\xED\xC3\x82\xC0\x4C\xC3\x17\xC3\x85\xC0\x95\xC3\xFF\x9B\x97\xC3\xC5\xAA\x99\xC3\x74\xB9\xB9\xB9\xD0\xB9\xA2\xC0\xCE\xA9\xF5\x64\x9F\xC3\xE6\xC3\xBA\xA6\x2C\xB8\x2A\xB4\xBF\xC0\x7E\xB8\xA7\xC3\xFA\xBF\xA9\xC3\x93\xBA\xDF\xC3\x3E\xBA\xE1\xC3\x66\xBF\xAF\xC3\x21\xBB\xE8\xB9\x15\xAB\x14\x67\xB9\xC0\x7A\xC0\x00\x6C\x10\xC4\xE9\xB9\xFB\xA4\x13\xC4\x91\xB4\x14\xC3\x01\xC4\xB8\xC3\x03\xC4\x4E\xC3\x05\xC4\xA3\xB6\x08\xC3\x51\xB2\x0A\xC3\x03\xB2\x2A\xC1\x36\xC0\x40\xA8\xAC\xBB\xFC\xC3\x27\xC4\x22\xC4\x12\xC4\xF1\xB9\x49\xC3\x00\xC4\x02\xC3\x92\xC3\x2F\xB6\x0B\xB5\xAF\xBA\x0D\xB5\xB1\xBA\xD8\xAF\xFE\xBE\x8E\x9D\x00\xBC\xB2\xBB\xF0\xBC\x14\xA3\xB2\x5E\x3C\xC4\x3F\xAB\x11\xAA\x1B\xC1\xB5\xC3\x21\xAE\xEB\xB8\x33\xC3\x21\xB9\x19\xC4\xFC\xBF\x7E\xC3\xFE\xBF\x1D\xC4\xE5\xBF\xF8\xC3\xE8\xBB\x21\xC4\x52\xC4\x15\x78\x02\xB6\xC3\xB8\x27\x5D\xD8\xC3\xA2\xB5\xDA\xC3\xCB\xC3\xD7\xC0\xAE\xC0\x46\xC0\x7A\xBA\xBE",
"\xC3\x98\xC1\x97\xBA\x60\xC4\x6E\xB0\x43\xBA\xD7\xA5\x11\xC1\x88\xC3\x49\xBA\x50\xC1\x6D\x5D\x68\xC4\x99\xB6\xD9\xB9\x74\xBA\x98\xB9\xC5\xB9\x9A\xB9\xDD\xC3\xAF\xC0\x78\xC1\xCA\xBF\xFD\xBE\xCC\xBF\xC1\xAF\xC6\xC2\xB9\x8C\x75\xC4\xB8\xBA\x30\xC1\xD5\xBB\xCC\xC2\x77\xC0\xD8\xBB\x16\xC1\xDD\x5B\x7C\xC4\x67\xB9\x82\xB0\x69\xB9\x10\xB8\x90\xC1\x75\xBF\xD6\x9D\x06\xC3\xAB\xB5\x33\xC4\x67\xB4\x35\xC4\x6E\xB8\x58\x94\x48\xC1\x2D\xC1\x84\xB7\xC6\xA8\xE1\x6C\x97\xB0\x3B\xBF\xCA\xA4\xA1\xAB\xBA\xAE\x5E\xC3\xFE\xC3\x64\xB6\x44\xBF\x6A\xC4\x89\xBF\x60\xBF\x83\xC4\x6E\xC4\x5D\xC0\x52\xC3\xAD\xC3\x10\xBA\x1F\xC4\xDE\x97\x64\xC1\x36\xB3\xDC\xBC\xDD\x66\x68\xC1\xFA\xBB\x92\x88\xCA\xBB\x84\xA5\xAE\xC4\x9C\xC2\x2E\xC3\xB0\xC4\x9F\xC2\xB2\xC4\xA1\xC2\xB4\xC4\x8B\xBF\xC0\xC2\xA5\xC2\x09\xC1\x87\xC4\xD3\xC3\xCD\xBF\xF4\xBB\xA9\xA0\xF6\xBB\x7F\xC1\xF8\xBB\x82\xC1\xA5\xC4\x85\xAB\x93\xB6\x5B\xB5\x84\x5A\x95\xC4\xD8\xB9\x35\xBA\x5E\xB2\x37\xBA\x6B\xB9\x39\xBA\x13\xB8\x06\xC1\xCF\xC4\x07\xC3\xD1\xC4\xA7\xC2\x4A\xC4\x8F\xA3\x8A\xC4\x09\x8D\xA3\xBB\x92\x68\x9E\xC1\x1D\xA6\xDC\xBA\xDB\xBC\xED\xA6\xF5\x90\xF7\xAB\xC8\xB3\xC2\xB3\xF5\xC4\x8C\xB7\xE7\x0D\x06\xB8\x57\xC2\x9F\x61\x88\xB7\x0C\x67\x84\xB4\x83\xC3\x33\xBB\x0C\xA3\xF4\xBA\xE8\xB3\x71\x8F\x08\xBF\x80\xBF\xE8\xC1\x21\x0A\x02\xC5\x9D\x95\x92\xBF\x2C\x89\x91\xC2\xA7\x84\x05\xB4\xB0\xC2\x07\xB4\x23\xA7\xA7\xC1\x06\xBB\x0B\xB4\x30\xC2\x0B\x4C\x26\xBB\x75\xB9\x18\xC5\x1E\xB4\xC9\xC2\x1F\x95\xCB\xC2\x32\xC1\x12\xB9\x5B\xB8\x83\xA9\x3D\xC2\x00\x6C\x0F\xC5\xCD\xB9\xEF\xC4\x04\xBB\x70\xB8\x0A\x9C\x72\xB8\x53\xBF\x25\xC5\xF1\x7C\xFC\xAB\xA9\x51\xAA\xC1\x1D\xC5\x46\xC1\x3C\x62\x69\xBF\x41\xA9\x0E\xC5\x1E\xC5\x0C\xC3\xA0\xB8\x2A\xBB\x15\xC2\x3D\xC5\x1A\xBF\x2F\xBB\xAE\xB1\xAC\xC2\xE7\xBF\xAE\xC2\xCC\xA3\xE8\xA6\xE5\xA0\x66\x96\xB8\xAE\x4F\xC1\x84\x79\xC0\x28\x39\xC5\x05\xB2\x3D\xC3\xCE\x6E\xCC\x99\x5B\xBB\x88\xB5\xE7\x9C\x0B\xC0\x33\xC1\xA7\xB4\x48\xBB\xB2\x5E\x2B\xC5\x0C\xC1\xCE\xBF\x7E\xBD\xD0\xBF\x69\xC1\x44\x92\xF1\xBB\x01\xC5\x3E\xC5\x57\xBB\x0F\xB9\x43\xAA\x5A\xBB\x81\xBA\xBF\xC4\x59\xC5\xFB\xB4\xED\xBF\xC4\xC4\x07\xB3\x43\xC5\xC1\xC3\x1D\xBF\xF4\xB4\xB0\x3F\x68\xBB\x63\xBA\x58\xC5\xD5\xAE\x70\xC5\xBD\x8A\x70\xBB\x70\xBC\x2A\xC5\x68\xC5\x22\xBB\x9C\xC3\x15\xB5\x7E\xBB\x81\xC5\x52\xC5\xE9\xB3\xC6\x86\x30\xB5\x80\xC5\x74\xC5\x73\xC4\xFD\x8B\xC3\xC3\x1A\x6B\x2D\xBE\x38\xC5\x61\xC0\x4E\xC2\xFF\x92\xF7\xBD\x5F\xC5\xB4\xBA\x2D\xC5\xDF\x18\x8F\xBB\xE7\x95\xA6\xB9\x93\xBB\x67\xC5\x88\xC5\x0A\xC5\xBC\x0D\x8F\xC0\x99\xBB\x8D\xC5\xBB\xC4\x8D\xC0\xDD\xAF\x0D\xC4\x7C\xA2\xA6\xC5\x6C\xC3\xE7\xB9\xE5\xC3\x28\xC4\x4C\x77\x24\xC4\x3E\xA2\x87\xC5\x75\xC5\xB7\xAE\xCB\xC0\x01\x01\xCD\xC0\x24\xBB\x5A\x1F\x82\xC5\x28\xBB\x45\xBC\x3D\x97\x4E\xC4\xDC\xAE\x6D\x61\x98\xC5\xD4\xC4\xF6\xC0\x4C\x68\xD8\xA7\x36\x94\x65\xC4\x57\x59\xBE\xBB\xC3\xC5\x89\xC4\x60\xBA\xEE\xBD\xEB\xA2\xDB\xC4\x17\xB7\x77\xC4\x64\xC5\x8E\xA8\x72\xC5\x15\xBA\xAC\xC5\xF5\xC0\x64\xAB\xCF\xC5\x66\xAB\x13\xC1\xBB\xA5\x64\xBA\xD3\xBB\x48\x9E\x8F\xC4\x33\xC5\xEF\xBB\x56\xB3\x66\xC5\xF5\x64\xCC\xC5\xB9\x97\x37\xC4\x0E\xC1\xBD\xC4\xA3\xB3\xA7\xC4\xE1\xBB\x6F\xB3\xC2\xC4\x4E\xC1\x2C\xBA\xBD\xBB\x5E\xC5\xBC\xC5\xC1\xBB\xEA\xBB\x26\xC5\x43\xBB\xC0\xC4\xCD\x76\xE5\x97\x90\xC4\x69\xBA\x60\x94\xE5\xBB\xF5\xC5\xA1\xC5\x4D\x90\xB0\xBF\xA4\xAD\xD9\xC4\xAB\x9E\x83\xC1\xFB\xBB\x08\xA0\xFD\xBB\x98\x36\xF6\xC5\x00\xBC\x9C\xC5\x26\x77\xD5\xBA\x0B\xBC\xAF\xC1\x08\xBC\xF9\xC4\xA4\xC1\xFB\xC4\x48\xAA\x0D\xBC\x90\x30\x0B\x9B\x62\xA5\x2E\x9B\x1D\x9B\xA3\x69\x2F\xAE\xCB\x0F\x11\x2A\x5D\xB7\x24\x5C\xB8\x5B\x78\x08\x38\x9B\x71\x8D\x14\xC6\xE8\x05\xE3\xB3\x9D\x70\x21\xC6\x38\x11\xE0\x30\xE6\x29\xB8\x5B\xC4\x05\x28\xC6\x11\xAE\x2A\xC6\x00\x00\x45\x9B\x20\xC6\x03\xBF\x22\xC6\x46\x03\xE6\x29\x6D\xC2\x6D\x9B\xB5\xC1\x3D\x4E\xBA\x59\xB0\xB7\x03\x01\xD1\x00\x3E\x7B\xA6\x5C\x13\xA0\x9C\xB3\x33\x00\xAE\xBE\x71\x38\x3C\x7B\xD2\x00\xD8\x9A\xCF\xBE\x15\x68\x65\x5C\x72\xC2\xF8\x05\xF8\x29\x59\x6B\xC5\xB7\x03\x01\xCF\x00\xC7\xB7\xC5\xAA\xA8\xB7\x58\x01\xC3\x6E\x62\xC2\x40\xC6\x8F\xB7\x8D\xBC\x44\xC6\x46\xC6\x50\xC6\x74\xA5\x4A\xC6\x98\x59\x4C\xC6\xE6\x0D\x4E\xC6\xBA\xB7\x22\x00\x65\xC6\xAB\x69\x52",
"\xC6\xC7\x9A\x55\xC6\xFA\x6B\x57\xC6\x02\x01\x59\xC6\x86\xC5\x3C\x0A\x6A\xB0\x5C\xC6\x76\xA0\x85\x6B\x13\xBD\x5F\xBD\x3C\xA2\x37\xC5\xA7\x00\x17\xC2\x93\x09\x36\xC6\x45\xA2\x44\xC2\xD6\xC1\x6B\xBD\x54\xB4\x31\xA2\xFD\x90\xF5\x64\x81\xC6\x08\xC2\xFF\x7B\x83\xC6\xDB\xB6\x56\xC2\x72\xAE\x6D\x61\x8D\xC6\xEF\xBE\x80\xBC\x2D\x0B\xE2\xB6\xFD\x83\x08\x9A\x0D\xC2\x62\xC5\x0F\xC2\x2C\xC2\x87\xC6\xA5\xA2\x82\xBD\x23\xC2\x00\x6C\x95\xC6\xAD\xC1\x9D\x3B\x93\x09\xD1\xC1\xBF\x5E\xD3\xC1\xE3\xC1\x39\xC2\xAB\x99\x0B\x7A\xA3\xC6\x72\x5A\x82\xC6\x45\x09\xE0\xC1\xB4\xA1\x29\x9A\xE3\xBD\xF5\xB6\xE5\xBD\xD8\xBD\xAE\xC6\xE6\xC1\xCE\xA2\x00\xC5\x8C\xC6\xB2\xC6\x03\xBD\x81\xA2\x38\x9A\x8D\xBD\xBA\xBD\xE4\xBD\x01\xC2\xAD\xBD\x03\xC2\x54\x99\xB0\xC6\x57\x5B\xC0\xC6\xEA\x02\x34\xC2\x2B\x05\xFE\xC1\xB4\xC1\xF1\xC1\x20\xC2\x3A\xC2\x41\x7A\xCB\xC6\xD0\x5B\xCD\xC6\xA3\x08\x09\xA2\x0C\xC2\xD2\xC6\x57\xC3\xBC\xBD\xC8\xC6\x21\xC2\xA6\xA2\x92\xC6\xA0\xAE\x9F\x61\xA5\xC6\xBB\xC1\xCB\x58\xA8\xC6\x34\xB7\x50\x5F\x36\xB7\xAC\xC6\x20\xB7\xD5\xC6\x6B\x9A\xE3\xC6\x14\xBB\xE5\xC6\xD9\xC6\x98\xC6\x29\xC2\x41\xB7\x88\x99\xB7\xC6\xA8\xA1\x90\xBD\xBA\xC6\x1E\x9A\xB8\x5B\x2F\xC2\xDA\xC1\xC4\x9F\x8E\xC6\x87\xAD\xB3\xC6\x99\xC6\x0B\xA2\xF1\xBD\xF9\xC6\xB7\xA1\x9E\xC6\x86\xC6\x11\xC2\xA1\xC6\xFF\x00\xF6\xBD\x1C\xC5\xE6\xC6\xC2\xC1\xE8\xC6\x04\xC7\xD4\xA2\x42\xC2\xED\xC6\xE6\xBD\xBB\xC6\x95\x9A\x63\xB7\x48\xC2\xD8\xC6\x02\xC7\xE4\xBC\xEA\x02\xCE\xB7\xE0\xA2\x1C\xC7\xD0\xB7\x1E\xC7\xC2\xBC\x1F\xA6\x72\xBD\xE5\xA2\xA4\x98\x00\xC7\x32\x5E\xF4\xC6\x20\x01\x5C\xC2\x71\x7A\x9B\x0F\x75\xB7\x6E\xA1\x34\xBC\x35\xAE\xA9\xC1\x86\xC5\x21\x0A\xD5\xB7\x30\xBE\xFB\xBC\x78\x58\x97\x09\x84\xC6\x68\xBD\x39\xA2\xFD\xC4\xB9\x5B\x05\xA2\x92\xC5\x39\xC7\x82\x94\x07\x2D\xF7\xB7\xD1\xA0\x3C\xC2\x42\xC5\x27\x01\x45\xC7\xD1\xB0\x47\xC7\x86\x34\xCF\xC6\xD7\x04\x7C\xBD\x9C\xC6\xAB\xBD\xFB\xC6\x02\xC2\xE1\xC6\xA2\xC6\xF1\xC6\xC1\xC5\x9F\x61\x4D\xC7\xBA\x88\x25\x8A\x91\x2A\xA9\xC6\x50\x5F\xAB\xC6\x08\xC7\x52\xB7\xE0\xC6\xEF\xC6\x63\x98\xD7\xC6\x06\x01\x5D\xC7\xCF\xB3\x3B\xC7\xE0\x22\xB4\xC6\x96\x41\xB5\xA1\x64\xC7\xF1\xA1\x57\xC7\x67\xC7\xF5\x5A\xA2\xBD\x6F\xB7\x00\x00\x6B\xC7\xFA\xBC\x02\xBD\x7E\x40\xFC\xA0\x5A\x70\xB8\xBD\xA0\xC6\x51\xB7\x73\xC7\x66\xC7\x19\xC7\x09\x0F\x88\xA2\x78\xC7\x7A\xC7\x42\xB4\x7C\xC7\xDE\xBC\x51\xC7\x2C\x0D\x80\xC7\x0C\xC7\x82\xC7\xFF\xA1\x18\xC7\xFD\xC6\x63\x99\x69\xC7\xD4\xB7\x58\xB4\x60\xC7\x0B\xC2\x9F\xA2\x9C\x98\x17\xC7\xFC\xC6\x91\xA2\xA2\x98\x96\xC7\xB9\x9F\x98\xC7\xA5\x31\x61\xC7\x54\x5F\xEC\xC6\x72\xC7\x92\xC7\x9E\xC7\x50\xB7\xB8\x5B\xDB\xBD\x2B\xC7\x01\x01\x89\xC7\xFA\xC5\xD8\xBC\xA5\xC7\xB7\x60\x42\xB7\xA8\xC7\x7F\xBD\x01\xBE\xC9\xC6\xF5\x5A\xFF\xC6\x0D\xC5\x4C\xC7\xA3\xC7\x50\xC7\x05\xC7\xB6\x06\xCF\x98\x9D\xC7\x74\xC7\x85\xC7\xF5\xBD\xA1\xC7\xAF\xC7\xBE\xC7\x7D\xC7\xC0\xC7\x51\x01\xA5\x99\xB6\xC7\x00\xBE\x60\xC2\x6C\x33\x46\xC2\x1B\xC7\xB8\xC1\x2D\x69\xB0\xC7\xAB\xB4\xD8\xBC\x21\xC7\x69\xB7\x23\xC7\x97\xC7\xC7\xBC\xD8\xC7\xF2\x98\x29\xC7\x31\x9A\xBC\xC7\x09\x01\xD6\xC7\xBF\xC4\xD8\xBC\x2F\xC7\xB6\xA1\x31\xC7\xEE\xA2\x9F\xC6\x90\xC7\xBE\xC5\xE7\x0D\xB3\x07\xD3\x00\x5B\xBC\x7E\xC2\xFD\xAA\xB0\x42\xFD\xC2\xA1\xC3\x2A\xC4\x37\xB5\xF4\xB3\x62\xC3\xF6\xB3\x43\xC4\x04\xC3\x45\xC4\x9D\xC4\xC3\xB5\x9F\xC4\xD0\xB4\xA1\xC4\x44\xC5\x20\xC3\xBA\xB8\x2C\xC6\xF1\xBA\xDD\xBE\x01\xBB\x94\xC2\x06\xBF\x89\xC5\x51\x8D\x09\xBF\xB9\xB8\x21\x0A\xF4\xC7\x2C\xC3\x53\xC4\x48\xC3\x0A\xB6\x01\xC3\x57\xC4\x64\xC3\xCD\xB2\x66\xC3\x59\xB9\x1B\xC4\x95\xBA\x71\xC4\xAD\xBF\x8D\xC2\x4F\xC4\xF1\x84\x90\xC2\x05\xC5\x49\xC5\x60\xA9\x02\xBB\x09\xC5\x21\xBF\x19\xC5\x2E\xB1\xB5\xC2\xE3\xB8\x02\x01\x12\xC8\x46\xC3\x6C\xA7\xC8\xC4\x3F\xC0\x41\xC4\x18\xC8\x7A\xC3\x65\xC3\x7C\xC3\x67\xC3\x5C\xC4\x32\xC0\x5E\xC4\x00\xC0\x8E\xC5\xAC\x93\x0D\xBB\x96\x8D\x0F\xBB\xE5\xC2\x01\xB6\x8C\x78\x28\xC5\xD6\xC3\x30\xC8\xA0\xC3\x16\xAB\xA2\xC3\x60\xC3\x8F\xC3\xFA\xC7\x1F\xC1\x16\xC3\x93\xC3\xA3\xB2\x31\xC4\x7A\x9C\x01\xC8\x29\xB5\xED\xC4\xE8\xA3\xE1\xC0\xBB\x0D\x43\x95\x19\x1C\x6A\xAE\x5A\xC3\x9E\x91\x35\xC5\xA0\x91\xDC\x8D\x49\xC8\x11\xC4\x88\xA9\x3F\xC4\x16\xC8\x4A\xC3\x2D\xC4\xEF\xC3\x2F\xC4\xBA\xC3\x54\xC8\x06\x9E\x56",
"\xC8\xAD\xB5\x58\xC8\x25\xA4\xEA\xC5\xE0\x63\x3B\xC5\x0E\xC2\x2D\x69\x64\xC8\xB0\xC5\x66\xC8\xC5\xBA\x55\xC0\x69\xC8\x42\xC4\x51\xC8\x44\xC4\x94\xC3\x46\xC4\xB3\xB8\x48\xC4\x23\xB1\x88\xC4\xE9\xC5\x9A\xC5\x4D\xC5\x4F\xBC\xFC\x90\x84\x5E\xFA\x5F\x09\x4A\xA5\x9C\xAA\xC4\x68\xAB\x40\xC5\x0F\xC3\x12\x86\x9F\x61\x79\xC8\x3D\xC4\x7B\xC8\xF2\xBE\x16\xC0\x15\xC4\x18\xC0\x17\xC4\x1A\xC0\x1B\xC8\x30\xBF\x1D\xC8\x32\xBF\x3D\xC8\x20\xC0\x21\xC8\xB0\xA3\xE1\x85\x24\xC8\x02\xBF\x28\xB1\x48\x9B\x4B\xC5\xA4\x95\x6F\xAB\x97\xC8\x63\xC4\xFE\xC2\x9D\xC2\xCA\xAF\xAA\xC0\xA0\xC2\x85\xC2\xF8\xBE\x05\xC3\xFA\xBE\xD0\xC4\xC2\xC2\x27\xC1\xC4\xC2\x9F\xC0\x87\x92\x58\xBB\xB2\xBF\x3F\xC3\xF9\xB4\x0A\xC0\x7D\xC5\x0B\xAA\x4F\xC5\x0A\xBF\x09\x01\xB0\xC8\xD0\xB6\xB2\xC8\x33\xC8\x4B\xB6\x2C\xC4\x7F\xC8\x02\xC4\x52\xC8\x22\xC1\x6E\xC8\xC0\xA3\x85\xC8\xFE\xB3\x72\xC8\xF3\xA4\x89\xC8\x42\x9C\x9D\xC6\xE4\x95\x4F\xBB\xC6\xC8\x65\xC5\x93\xC4\x8C\x3E\xE0\xC4\x34\xBA\x97\xC4\x36\xBA\x6A\xB9\x63\xB5\x6C\xB9\x6D\xC4\xCE\xC3\x47\xC0\x41\xB1\xB9\xC4\x54\xC3\xA7\xC5\x0C\xAF\xC1\xC8\xCA\x0C\x41\xA7\x7A\xC5\xAB\xBC\x39\x7E\x45\xBB\x5C\xB6\x71\xC5\x8D\xB3\xA8\xBC\x00\x6C\xCB\xC8\xE0\xB6\x2D\xC3\x4C\xC8\x76\xC3\x61\xC3\xB2\xB3\xFC\xB0\xD6\xC2\x98\xC0\x5A\xC4\x9A\xC0\xA2\xC8\x1E\xC0\xA4\xC8\x34\xC0\xB5\xC5\xD4\xB4\xB0\xBF\x85\xC3\xF6\xC8\x66\xC1\xF8\xC8\xC5\xC8\x46\xBB\x91\x92\x7F\xC5\x8B\xC3\xB1\x42\xE4\xC8\xB1\xC4\x7E\xC4\x8F\xC1\xE5\xC4\x91\xC1\xD0\xB8\x93\xC1\xD5\xC8\xDA\xA4\xEB\xC4\x09\xC3\xD9\xC8\x5B\xA5\x74\xC8\x3A\xC5\x84\xC5\x24\xC0\x4D\xBB\x11\xC8\x1C\xC9\xCA\xC4\x1E\xC9\xDB\xC3\x84\xB9\xEB\xC8\xBB\xAF\xED\xC8\x79\xB1\xF6\xC3\x53\xB2\x3F\xC8\xC3\xAF\x80\xA4\xB2\xC3\xFC\xC3\xFF\xC8\x76\xC0\x01\xC9\xF7\xC7\xD2\xC2\xF9\xC7\x05\xC9\x63\xC3\x37\xC8\x1A\xC8\x39\xC8\x1C\xC8\x3B\xC8\x5F\xC1\x0D\xC9\x60\xC0\x3B\xC9\x4C\xC0\xB8\x0D\xE4\x92\xEA\x75\x2F\xC9\xAF\xC4\x34\xC8\x57\xC1\xEE\xC3\x58\x8E\xF0\xC3\x8E\x94\xF2\xC3\x4E\xB2\xF4\xC3\xEE\xC8\x6A\xC3\x8B\xC0\x5B\x61\xD5\xC3\xC9\xC8\xE3\xC8\x56\xC9\xCF\xC8\xA4\xC3\x31\xC3\x06\xC9\x9E\xC8\x2E\xC0\xA0\xC8\xE1\xBF\x4C\xC9\xDB\xC2\x4E\xC9\x72\xC0\x0F\xC9\x74\xC0\x62\xC4\xCC\xC8\x14\xC1\xE8\xC3\xCE\xAA\x60\x7E\x40\xC9\x45\xA8\xFF\xC2\xC9\xC4\x8D\xC1\x32\xC9\x6B\xC4\x04\xC1\x35\xC9\x32\xB0\x6F\xC4\xF5\xC3\xEF\xC8\xF7\xC3\xF1\xC8\x8C\xAA\xBA\xB9\xFB\xC3\x1A\xC9\x2F\xC8\x30\xC9\x80\xC9\xE2\xC4\x03\xB9\x80\xC4\x55\xBA\x9B\xC4\x45\xA3\x83\xC8\xD3\xB8\xD7\xC8\xDF\xB5\x87\xC8\x6B\xB5\x2A\xC9\x07\xBF\xA9\xC5\x61\xAD\x65\xC9\x1B\xC9\x67\xC9\xF3\xBE\x45\xC9\xDC\xBF\x32\xC3\x19\xC8\xDF\xBF\x6E\xC9\x1C\xC0\x0B\xC9\x70\xC0\x72\xC9\x9E\xC0\x1C\xB0\x73\xBB\x6F\x68\x41\xC9\xD8\xB2\x2C\xA8\x15\xA5\x63\xC8\x90\xC9\xB5\xC8\xCB\xC4\xB7\xC8\xA2\xC2\x99\xC0\xF0\xC0\x85\xC4\xB1\xC0\x1F\xC8\xB3\xC0\x50\xC9\x23\xB8\xE7\x0D\x0A\xB0\x85\xA7\x7C\xC9\x5B\xA8\x7E\xC9\x57\xC9\x68\xC0\x6A\xC9\x47\xC9\xFC\xC7\x7B\xC3\xB9\xC8\xA9\xBF\xC1\xC2\xAB\xBF\xC2\xC9\x45\xC1\x74\xC9\xC7\xC2\x0C\xAD\xE3\xC0\x23\xB0\xBB\xBF\x66\xC9\xC7\xC4\x02\xC9\x8E\xC3\xCF\x92\x4F\xC8\x91\xC3\x80\xC8\xFD\xC7\x82\xC8\xFF\xC7\x32\xB6\x70\xC8\xC5\xB5\x28\xC9\xAB\xB2\xDB\xC8\x27\xBB\xAF\xC5\x98\xC8\x1A\x7A\xC9\xC5\x9B\xBF\xE0\xBA\xA4\xC9\x9B\xC8\x17\xC8\xC0\xC0\x58\xC4\x2E\xBF\xAB\xC9\x30\xC0\x70\xC9\xF4\xC2\x61\xC9\xC8\xC0\x8A\xC9\xBB\x97\x66\xC2\xD1\xC5\x57\xAC\x77\x97\x1F\xB6\xF1\xC5\x3B\xB3\xAF\xC8\xB9\xC9\x01\xC1\xAB\xC0\x82\xC9\xDC\xC3\xCE\xC4\xDE\xC3\xFE\xC9\x38\xC3\xAF\xC9\xDF\xC0\xC5\xC2\xCE\xC5\x9A\xBD\xBB\x98\xA4\xAD\x8E\xC4\x12\xC1\x08\x96\x57\xB3\xF4\xC9\xCA\xC8\x0C\xCA\xC9\xC3\x0E\xCA\xB3\xC4\xEE\xC0\xBE\xC9\x41\xC1\xC0\xC9\xDD\xC0\x15\xCA\x61\xC1\xD9\xC5\xD4\xA5\xD6\xC4\xB9\xA5\x05\xCA\x4A\xC1\x7A\x90\xA9\xC4\x5F\xC8\x78\xC9\xAC\xC4\x57\xB0\xF5\xC9\xDF\xC9\x43\xC9\xEB\xC2\xA6\xC9\x78\xC3\xA8\xC9\x48\xC9\xAA\xC9\x4A\xC9\xA1\xC8\x13\xCA\x69\xC3\x2B\xCA\xDD\xC2\xAD\xC5\x7D\xC1\xA4\xC4\xDD\xC5\x2E\xC1\xBF\xC4\xED\xBB\xE3\xC5\xA8\xB3\xF0\xBB\xE2\xC8\xA3\xC9\x3A\xCA\x67\xC8\x2D\xB8\x9C\xC8\x2C\xC0\x6C\xC9\xD7\xC2\xFC\xC9\x6E\xC0\xAD\xC9\x9C\xC0\x46\xCA\x3A\xC3\x02\xCA\xAD\xB0\x05\xC6\x65\xC1\x86\xA1\x81\xC1\x08\xC6\xD1\xC5\x84\xC1\xCD\x90\xAB\xB3\x39\xCA\xB8\xC2\xBE\xC0\xF8\xC9\x16",
"\xC4\xFA\xC9\xC2\xC0\x5B\xCA\xC4\xC0\x5D\xCA\xC6\xC0\x00\xCA\xF6\xC2\x2D\xCA\xAE\xC5\xF3\xAF\x13\xC8\x1A\x16\xF3\xC4\xF2\x90\xF4\xAB\x92\xBC\x15\x09\xB2\xB6\xBA\x8A\xD6\xBA\xDE\xBA\xC0\x0D\x3D\x73\x20\xBE\xB2\x0D\x5D\x7C\x13\x32\x22\x32\x50\xAE\x5F\x9B\x27\x01\x0A\xA9\xB3\xC5\x65\x5A\x48\x92\xAA\xBE\x73\x60\x7F\x5F\x03\x37\x1A\x8B\x77\x77\xDB\x00\xDF\xA0\x0C\x56\x7C\xCA\xB2\xC8\x95\xCA\x02\xAC\x97\xCA\xCC\x53\x21\x0A\xB9\xAD\x59\x59\x66\xBE\xC9\x36\x7A\xBE\x9C\x67\xD5\x61\xAA\x94\xD7\x00\x1C\xBD\xE6\x5A\x9D\xCA\x31\xC8\xBF\xAB\xA0\xCA\x03\x77\x0B\x72\x03\x37\xA4\xCA\xC4\xBE\x56\xBE\xE4\x58\x68\xBE\x27\x61\x4D\x08\xD8\x41\x95\x09\x29\x58\x0B\x3B\x85\xAC\xFF\x00\xAA\x94\x4F\x2C\xF7\xBD\xB0\xCA\x4A\xC8\x7D\x72\xB3\xCA\x89\x5D\xA2\xCA\xE7\xBE\x24\x02\xB7\xCA\xD1\xBE\xC7\xAD\x78\xBE\xA8\xCA\xD5\xBE\x6C\xAD\x38\x81\xCB\x9A\x9B\x96\xBE\xC6\x2D\x69\xC7\xCA\x65\xC8\xFA\x84\xCA\xCA\x8E\x79\x6C\xBE\xB6\xCA\x83\x02\x9C\xAC\x8E\xAD\xF1\x82\x90\xAD\xE5\x53\xD2\x7B\xAA\xAD\xEE\x98\x42\x7A\x29\xC5\x93\xCA\xCA\x92\xDE\xCA\x32\xCA\x51\x67\xE1\xCA\x09\x01\xA5\xCA\x58\x59\xA7\xCA\xD0\x36\x68\xBE\x38\x81\xF4\x9F\x9B\x7B\x78\xC7\xDB\xCA\x7A\xC8\xDD\xCA\xE3\xCA\x9C\xAB\xB0\xBE\xCD\xCA\xB5\x69\xF4\xCA\xE0\xBE\xB9\xCA\x8A\xAC\x01\x1F\xA0\xB8\xFD\x24\x02\x01\x05\x32\x1C\xC5\xFD\xCA\xF1\xC9\x21\x0A\xEF\xCA\x96\x8C\xCC\xCA\x46\x59\x9F\x0A\xCF\xCA\xB7\xBE\xD2\xBE\xD2\xCA\xF7\xCA\x7A\xBE\xB8\x5B\x5E\xAD\x9F\x1D\xC6\xCA\x94\xCA\x00\xCB\x95\xB0\x02\xCB\x15\xCB\x6F\x0B\x17\xCB\xA6\xCA\x07\xCB\x58\xBE\xD4\xCA\x7B\x03\x50\x59\xEC\x7B\x40\x3F\x20\xCB\xEE\xCA\x22\xCB\x04\xBC\xE6\xCA\x03\xCB\xC1\x6C\x05\xCB\x56\x59\xF6\xCA\xFC\x36\xB8\x5B\x98\x7B\x00\x00\x25\x2E\x30\xCB\x9C\xC2\x12\xCB\x37\x94\x35\x25\xF2\xCA\x06\x01\x37\xCB\x55\x59\x39\xCB\x76\x51\x4B\xAD\xAA\x4D\x84\x58\x9C\xCA\x21\xCB\x8D\xC8\xB5\xCA\xA3\xCA\x27\x01\x46\xCB\x54\x59\x48\xCB\xE5\x58\xFF\x00\x4B\xCB\x6B\x4A\xAE\xC7\x5D\x5D\x4E\xCB\xAE\x60\x14\xCB\xC6\xBE\x16\xCB\xE2\xCA\xD0\xCA\xE5\xCA\xD3\xBE\x25\xCB\x2B\xCB\xB8\x5B\xDC\x7A\xD5\x00\x4D\xCB\x31\xCB\x4F\xCB\xF2\x90\x44\xCB\x03\x01\x53\xCB\x53\x59\x55\xCB\x68\xBE\xB8\x5B\xB9\x47\xE0\x00\xAE\xCA\x6D\x61\x0F\xCB\xB1\xC8\x2C\xAA\x41\xCB\x82\xBA\xE6\xBE\x65\xCB\x76\x02\xB2\x94\x8A\x08\x87\x99\xAE\x11\xA7\x53\x16\x07\xAC\x9C\xF6\x06\xA7\x57\xA0\xBC\x09\x40\xA7\x57\xB8\x5B\x43\x44\x02\x01\x76\xCB\x97\x79\xB2\x5E\x79\xCB\x77\xC9\x31\x91\x7C\xCB\xEE\xC5\x24\xCB\x5F\xCB\x82\x0B\x7D\x7A\x8A\x08\xE9\x0C\xAA\x57\x84\x3A\x60\x07\x85\xCB\xAE\x0A\x87\xCB\x94\x57\xF1\x9F\x02\x20\x36\x59\x89\xCB\xB8\x5B\x68\xB1\xD4\x00\x6A\xCB\x40\xCB\x32\xCB\x4B\xBE\xE0\xCA\x51\xCB\xF3\xCA\xB8\xCA\x77\xBE\xBA\xCA\xA9\xCA\x38\x81\x34\x80\xDF\x00\xAC\xCB\x6D\xCA\xA7\xBE\x6C\xCB\x98\xCB\xE2\xBE\xCE\xCA\x52\xCB\xB3\xCB\x19\xCB\xB5\xCB\x2B\xCB\xB9\x7A\x3C\x73\x2F\xB7\xFB\x8D\xA7\x08\xD1\x32\x2D\xBC\x69\xBD\x81\xC7\xE6\xAC\x7E\xC6\x00\x00\xCC\xB6\x11\xAE\x2F\x5B\x2B\xA2\x81\xCA\x4E\xAE\x48\xB1\xD0\xC7\x6C\x99\x38\x81\x55\xBC\x29\x79\x31\xBD\x68\x0E\xB0\x9F\x9B\x9F\x32\x2C\xB3\x9F\xB6\xA1\x48\x0C\xAC\x9F\xAA\x9A\x6C\xBD\xDB\xC7\xE5\x5D\x25\xA2\x49\xC7\x2A\xC7\xE2\xC7\x36\xBC\xDE\xBD\x19\xCA\x9D\xA2\xB1\xBF\xD0\x04\x53\xC7\xDD\xC6\x77\xC8\xB9\xC6\xC4\xC7\x94\xC7\xCB\xC1\x5A\xC7\x19\xAF\x6D\x61\xA1\x9F\xF0\xCB\xA7\xBD\xF2\xCB\xF2\xB6\x43\xC2\xCD\xCB\x90\xC7\x37\x99\xC7\xC7\x4C\x5E\xD0\xBD\xC5\xBD\xEE\x79\x9C\xBD\xFF\x03\x04\xCC\xAB\xA1\xE7\x0D\x77\xC7\xF7\xBD\xFF\xCB\x62\xA1\x19\xC2\x8B\x9A\xA7\x06\xEF\xC1\xF6\xCB\xDD\xC8\xF8\xCB\x84\xC7\xFA\xCB\xBC\x0D\x87\xC7\x13\xCC\x0A\xCC\x1A\xC2\xD2\xA1\x8F\xA2\x39\x9A\x5F\x99\x46\xA1\xD4\xC6\xC5\xC7\xF5\x5A\x23\xB7\x5A\xCB\x14\xCC\x64\xBD\xED\xBD\xF1\xCB\x8C\x9A\x67\xBB\x56\x9A\xCE\xC7\x0A\xC7\x05\xCC\x25\x32\xA0\xC7\xFC\xCB\x35\xAF\x2D\x69\x2E\xCC\x78\xBD\x30\xCC\x01\xCC\x32\xCC\xEE\xA1\x14\xC0\x37\xC2\x28\xCC\xE4\xC1\x58\xC7\xFF\x00\xAD\xC7\xEE\xCB\xC4\x59\x22\xCC\x17\xCC\x1B\xC2\xD8\x48\xB5\xC7\x1E\xC2\x1E\xB7\xC7\xC6\xB8\xC7\x47\xCC\xBB\xC7\xF6\xC1\xA3\x9F\x00\xCC\xB5\xBD\xF2\xCB\xC8\xA2\x0F\xCC\x6C\xA2\x0E\xC7\x08\xCC\x3D\xCC\x87\xBD\x3F\xCC\x5A\xCC\x32\xCC\xD5\xA2\x5D\xCC\x86\xA2\xE7\x0D\x47\xC2\xD4\xC7\x00\x6C\x61\xCC\x98\xBD\xC5\xC6\x41",
"\xC7\x22\xC7\x6B\xCC\xD4\xCB\x5B\xA1\xDF\xC7\x55\xC2\xBD\xC6\x93\xC6\x9F\x61\x6D\xCC\xA5\xBD\x16\xBE\x7C\xC2\x33\xC7\x8E\x9C\x32\xC7\xF4\x99\xD7\xB7\x11\xBE\x7B\xC2\xDB\xC5\x37\xCC\x27\xCC\xDA\xC9\xA8\xC1\x60\xBD\x37\xC7\x2A\x5B\xD5\xCB\xF1\xBC\xB0\xC1\x23\xC5\x54\xCC\x4C\x98\xB8\x5B\xDC\xCB\x86\xC5\xDE\xCB\x42\x0D\xE0\xCB\x4E\x09\x9C\x9F\x0D\x33\x8A\x2C\x71\x7A\xE5\xCB\x26\x2C\x93\x9F\xE8\xCB\x72\xCC\x8C\xCC\x74\xCC\xEC\xCB\xE1\xC7\x57\xCC\xED\x5B\x4C\xCC\xDC\xC9\xF1\x77\x99\xA1\x5A\x77\xC3\xC7\x1D\xCC\x9F\xC7\x62\x77\x08\xCC\x8D\x9F\x59\xCC\xD1\xBD\x64\xA2\x8B\xBD\x5C\x98\xAE\xCC\x91\xCC\x2A\xCC\x6D\xA2\xB2\xCC\xA9\xCC\x07\xB3\x13\x7A\xE1\xC1\xF3\xA0\xB9\xCC\xD9\xCB\x9D\x1B\x05\xB7\xBD\xCC\xB4\xCC\x0B\xCC\x11\x07\x19\xCC\x44\xCC\xD3\xC6\x46\xCC\x75\xC7\xE7\x0D\x20\xCC\x1C\xC5\xB3\xCC\x15\xCC\x8D\xC7\xA5\x72\x8F\xC7\x61\xC2\xDE\xC6\xD7\xBD\xF9\xCB\xB0\xCC\x97\xA2\x3A\xCC\x52\xA2\xA8\xCC\xC8\xCC\x23\xCC\xEE\x79\xDC\xC6\xCC\xCC\xD9\xCC\xF2\xC1\x47\xCC\xCE\xBD\x78\xC7\xD3\xCC\x2F\xCC\x16\xCC\xAA\xCC\x4E\xCC\x35\xB7\x1D\xC2\x54\xC7\xC9\xBD\x56\xC7\xAF\xCC\xAB\xC7\xDA\xBD\xC7\xCC\xD4\xCC\xEA\xC6\x54\x5F\x50\xCC\xF2\xCC\xFF\xBD\x36\xCC\x10\xCC\xFF\x00\x56\xCC\xEC\xCA\xA3\xCC\xF9\xCC\x15\xC7\x7F\x9A\x07\xC7\x51\xCC\xD6\xBD\xE7\xCC\xCF\xCC\x5F\xCC\xDE\xCC\xAB\xC5\x04\xCD\xEC\xCC\xD5\xCC\xFD\xBD\xFD\xCC\x1F\xC2\xCE\xCC\xBB\xCC\x56\xA1\xD3\xC7\xF9\x99\x9F\x61\xEB\xCC\x3E\xCC\x4D\xC2\xD4\x99\x06\x01\x0B\xBE\xBA\xB7\x98\x5A\x8D\xCC\xBB\xA0\x76\xCC\x4A\xC7\xD9\xCA\x00\x6C\x1C\xCD\x62\xCC\xF0\xAB\x7D\xCC\x81\xCC\xCB\x98\x80\xCC\x18\xBE\x11\xBB\xD8\x9E\xDA\x9E\x62\xC6\x02\x01\xDD\x9E\xBA\xB7\xE2\x9E\xBD\xB7\x06\x01\x39\xCD\xEC\xCC\x4E\xA0\x1A\x3D\x00\x4E\xD2\x4D\x5E\x3B\xEA\x9E\x3E\x7B\xF0\x9E\x62\xBE\xED\x9E\x85\xA0\x31\xCC\x43\xA0\x0A\x9A\xF5\x9E\xF1\x07\xF8\x9E\xFA\x9E\x6E\xC6\xE4\x65\x7A\xA0\x7C\xCC\xDF\xBD\xFC\x9F\x0C\x90\xC4\x3B\x05\x9F\x07\x9F\x50\xCD\x0B\x9F\x3D\xCD\xDB\xB7\xA1\x6D\x10\x9F\x00\x0C\x40\xCD\x03\x20\x21\x51\x3C\x7B\x17\x9F\x8B\xC6\x01\x01\x1C\x9F\x3A\xCD\x03\x01\x68\xCD\x5C\xCD\xBC\x9F\x60\x98\x21\x9F\x22\x05\x4F\x9F\x25\x9F\x50\xCD\x29\x9F\x15\xCC\xFE\xBC\xCB\xBC\x00\xBD\x28\x8F\x31\x9F\x81\x4C\xBA\xB7\x35\x9F\xF2\xBA\x98\x08\x7D\xCD\x1D\xCD\x3E\xCD\xE2\xAF\xAC\xAF\x3C\x7B\x3E\x9F\xB0\x58\x41\x9F\x87\xCD\x48\xCD\x1C\x80\x47\x9F\x76\xB7\x63\xB9\x02\x10\x4B\x9F\xEB\xC7\x38\xCC\x71\xCD\xBA\xB7\x59\xBD\x7E\xCD\x55\x9F\xC7\x9F\x76\xCD\x05\xBD\x78\xCD\xA5\x8D\x7A\xCD\x09\x01\x5F\x9F\xBA\xB7\x52\xBD\x69\xCD\x10\x5D\x98\xCD\xF9\xC1\xC6\x01\x69\x9F\xDF\xB7\x39\x3F\x48\x3F\x6D\x9F\x6F\x9F\xD3\x9F\x44\xBD\x6C\xCD\x7B\x9D\xB9\x35\xB4\x80\x79\x9F\x9C\x2D\xDD\x9F\xBA\xB7\x4D\xBC\x96\xCD\x09\x01\xB7\xCD\x1D\xCD\x99\xCD\x2E\x9F\x9B\xCD\x9D\xA1\x9F\x9F\xBA\xB7\x2A\xCD\xC6\xA2\xAC\x76\xC2\xCD\x7B\xCC\x2C\xCD\xE4\xC6\x55\x83\xA8\x9F\x7E\xCC\x92\xA0\x02\x12\xE6\xCB\x52\x99\x96\xCC\xD1\x0F\x98\xCC\x40\x01\x9A\xCC\xDE\x3B\xB4\x9F\x09\x01\x88\x9F\xEE\xBC\x79\x70\xA2\x9F\xB1\x5C\xED\x9F\x15\xC2\x38\x0A\x7E\x07\x40\xC7\x86\xA0\xCD\xCD\x9F\xCC\xAD\x9F\x75\x9F\xD2\xCD\x79\x00\x35\xBD\xFE\x34\xD6\xCD\x06\x01\x4C\x17\xCD\xBE\xDC\xC7\xA2\xCD\xC8\xC7\x8A\xCD\x64\xCC\x4A\xCD\x75\xC2\xBA\x31\x91\x2A\xC1\x9F\x3E\x7B\x11\xC7\x97\xAC\x5C\x7B\xFA\xCD\xC6\xCD\xD3\x9A\x08\x1F\xCB\x9F\x37\xC1\x3B\xC7\xCF\x9F\xD1\x9F\xD3\x9F\x59\xC2\x08\xBE\x82\xCD\x9A\xAD\x53\xC1\xFC\x14\xB5\xCD\xEE\xCD\xDD\xBD\xF0\xCD\xF8\xBD\xA4\xCD\x26\xC2\x9A\xCD\xC1\x19\xF7\x79\x3A\xA0\x0E\xCE\x70\xB7\x10\xCE\x4A\xB7\x95\xA0\x09\xCE\x83\xC1\xF0\x9F\x3E\x7B\xF4\x9F\xE9\x0D\x98\x08\xD1\xA2\x32\xA2\xF3\x9E\x4B\xCD\xD7\xA5\x01\x0D\xEC\x1B\x66\x00\x03\x0D\xC8\xBB\x04\xA0\x06\xA0\xD3\x9F\x8A\xC6\x85\x7A\x4B\xC6\x36\x99\xE6\x0D\xCF\x43\xA5\xBC\xE5\x98\x46\xCD\x10\x78\xDD\xCD\xC8\xB0\xEB\xCD\xFC\xC8\x95\xAC\xA1\x9A\x39\xCE\x01\x9A\x3B\xCE\x18\xA2\x55\xCD\x1E\xCE\x1A\xA0\x27\x01\x27\xA0\x3E\x6E\x2A\xA0\x08\xCE\x26\xCE\x62\xBA\x93\x6B\x31\xA0\x58\x01\x33\xA0\x60\x2C\xD7\xA5\xCF\x99\xB0\x29\x70\xB3\x17\xCE\xBF\xBE\x01\x01\x3D\xA0\x3E\x6E\x3F\xA0\x4C\xCE\x6D\xCD\x27\xCE\x69\xA0\xA0\xBB\x59\xCE\xD1\x74\xDB\xCD\x46\xB5\x15\xCC\x1D\xCE\x40\xC8\x50\xB3\x31\x74\xD1\x67\xDA\xC4\xBC\xB8\x56\xA0\x32",
"\x2C\xD8\x67\x59\xA0\xBD\x98\xFB\x18\x5D\xA0\x6A\xA0\xBA\xB7\x61\xA0\x3E\x6E\x57\xB2\x25\xCE\x5F\xCE\x4E\xCE\xCB\x78\x5E\xA0\x6B\xA0\x41\xCE\xC8\x86\xAF\xCD\x54\xCD\x72\xA0\xCB\x78\x74\xA0\x27\x01\x7B\xC6\x99\xBB\x78\xA0\x52\xCD\xC7\xCD\x7C\xA0\x02\x12\x1E\x5A\x7F\xA0\x27\x01\x81\xA0\x77\xC6\x83\xA0\x8C\xCE\x62\x5A\x9F\xA0\x8B\xBE\x04\xB7\x8B\xA0\x5A\xC6\xB0\xA0\x6E\xCC\x8D\xCE\xCC\xCD\x9C\x2B\x90\xCE\xA1\xA0\x97\xA0\x9C\xCE\x96\xCE\xAA\x9F\x25\x5A\xA2\xCE\x0E\x9A\xA2\xA0\xA5\xCE\xF2\xCD\x2F\xCA\x89\x80\xAA\xCE\x27\x01\xDE\xB7\x8A\xCE\x95\xCE\xAD\xCE\xB3\xA0\xF4\x59\xCB\xCD\x4A\xBC\xED\xAD\x89\xCD\x9D\xBE\xD0\xCB\xD2\xCB\x3C\xC5\x27\x01\xBA\xCD\x2B\xCD\x3E\xC7\xCA\xC2\xBA\xCC\xC8\xBD\xA1\xCC\x1A\xCD\xF5\x64\xC1\xCE\x9E\xCE\xBE\xC1\x0E\xCD\x08\xB7\xC0\xCE\xBE\xCC\x15\xBA\xAB\xCC\x4A\x98\xF5\xCB\xE5\xCC\xF7\xCB\x53\xCC\xC4\xCC\xD7\xC1\x59\xC7\x77\xCC\xC8\xCD\x2D\x69\xCA\xCE\xC6\xCD\xB3\xC7\xF6\x05\x63\xC7\x09\xCD\xC6\xC6\x02\xB7\xDB\xCC\xF6\xCC\xAF\xC6\xCD\xCE\x7B\xB0\x00\x6C\xDE\xCE\xB3\xBD\x63\xCC\xB5\xCC\xF2\xCB\x0D\xCC\x29\xA1\x8E\xBD\xB8\xC6\xD7\xCE\x91\xCD\xD1\xC7\x71\x98\x08\xCC\xEC\xCE\xC3\xBD\x7E\xC7\xF7\xA4\xD7\xCC\x87\xCC\xE6\xCC\x29\xCC\x1E\xCC\xF4\xC1\xDB\xCE\xF2\xC6\xC9\xCE\xD0\xCE\xC3\xCD\x65\xCC\xB7\xBD\x26\xCC\xDA\xCB\x00\xCF\x16\xCD\x02\xCF\x04\xC2\x04\xCF\x5B\xC7\x06\xCF\xE1\xCC\x4D\xCC\xC6\xBD\x9B\xC7\xC4\xC6\x91\xC7\xB7\xC7\xD8\xCE\x12\xC2\xE2\xC6\x11\xCF\xFD\xCB\x9F\x61\xFA\xCE\xEC\xBD\xED\xCC\xBF\xCC\xEF\xCC\xEB\xC6\xF1\xCC\x1A\xCC\x55\xC7\x1C\xCC\xC5\xCE\xDC\xCC\x2F\xA1\xE9\xCE\xDD\xB6\xCF\xCE\x14\xCF\xEE\xCC\x8A\xBD\x4F\xCC\xF8\xC6\xE3\xCE\xF4\xCE\xE5\xCE\xF5\xCC\x45\xC2\x76\x7A\xF9\xCE\x07\xCF\x09\x09\x5C\xCC\xC3\xCC\xF6\xCE\x33\x2C\xB8\x5B\x0F\xC7\x5A\xCB\x21\xCF\xFA\xBD\xCB\xC7\x37\xC6\xCD\xC7\x36\xCF\xFA\xC6\x2A\xCF\x1B\xCF\x0D\xC7\x6A\xCC\xC8\xCE\xDD\xCE\x24\xCD\xA0\xB8\x71\xCC\x51\xCF\xEB\xCE\x53\xCF\xEC\xAD\x83\xCC\x78\xC7\x46\xCF\x5E\xCE\x2D\xCD\x31\xCD\x6F\xA1\xEA\xC7\x0B\xC7\xD8\xCC\xAA\xAD\xFF\xC4\x10\xC8\xDB\x1E\xB8\xB0\x94\xC0\x57\xCA\x96\xC0\xC5\xBF\x5B\xC1\x27\xCA\x5D\xC1\x44\xCA\xAC\xC3\x77\xCA\xAE\xC3\x3B\xA6\x45\xC5\xE2\xB3\x47\xC5\x02\xC0\x86\xB4\xAF\xC2\x4C\x8D\x22\xB8\x96\xC2\x24\xB8\x94\xC8\xCA\x70\x5E\xBC\xDE\xCD\x5A\xB0\x6E\xCA\x7E\xC8\x36\xC8\xD0\xC9\x38\xC8\xD2\xC9\x7D\xC3\xD4\xC9\x8A\xC2\xD6\xC9\x8C\xC2\x5B\xA9\x1B\xBF\xA9\xC8\x76\xC5\xAB\xC8\x3D\xB8\x16\xC5\x3F\xB8\x36\xBF\x04\xB8\x64\xA6\x07\xBB\x2E\xC8\xB7\x2C\x68\xCF\xD3\xC0\x23\xCA\xB6\xC8\x6C\xCF\x86\xC2\x6E\xCF\x88\xC2\x8B\xCF\x7F\xC3\x8D\xCF\x1E\xC3\xC4\xC9\x20\xC5\xB7\x0D\x78\x91\xEA\x9B\x21\xB4\x4B\xB1\xCF\xC2\x9B\xCF\x61\x2F\x9D\xCF\x54\xC4\xD9\xC3\x81\xC9\x25\xCA\x3F\xC1\xA3\xCF\xA4\xC2\xEA\xC4\xBC\xC8\xD2\xC4\x28\xC1\xBF\xC8\x9F\xB8\xB3\x0D\x5C\xC8\x6A\x49\xE4\xC2\x91\xC8\xE6\xC2\x61\xC8\x49\x95\xDC\x8D\x81\xCF\x28\xCD\xD5\xB0\xB4\xCF\x69\xC4\xB6\xCF\xCC\xC4\x26\xCA\x09\xC9\xBF\xC9\x75\xCA\x79\xC1\x8F\xBF\x7B\xC1\x48\xCA\x4B\x96\xF6\x99\x96\x8D\x85\xA7\xCA\xCF\x78\xCC\x36\xAF\x84\xCF\x35\xC8\xF9\xC9\xA9\xC9\x6C\xC0\x73\xCA\x77\xC1\xD4\xCF\x86\xC4\xEC\xC4\x9C\xC9\xE1\xB5\x9E\xC9\x2E\xC5\x0D\xC3\x41\xC5\xA2\xC9\x82\x28\xB3\xCF\x15\xC8\x56\xCA\x6F\xCA\x9D\xC8\x71\xCA\xA8\xC3\xE5\xCF\xD9\xC2\x70\xCF\xE0\xC3\xA7\xCF\x81\xC3\xA6\xC8\x21\xBE\xA8\xC8\x07\xC8\x13\xC5\x04\xB4\xAC\xC8\x5A\x70\x27\xC3\x98\xBF\xE8\xA9\x3E\xCE\xD7\xBA\x90\x5A\xF2\xCF\xCB\xC9\x68\xC9\x04\xC9\xA7\xC9\x6B\xC9\xF7\xCF\x18\xC4\xF9\xCF\x36\xC3\xFB\xCF\x1C\xC4\xFD\xCF\xC0\xC3\xA9\xCF\xAA\xC8\x6A\xC5\xD0\xAE\x56\xC5\x6D\xC5\x9C\xBA\x6B\xBB\x88\xC3\x43\xC3\xD6\xC3\xDD\xCF\xDC\xCE\x30\xB7\x27\xB0\xE0\xCF\x58\xC9\x6A\xC8\x5A\xC9\x6C\xC8\xF1\xC3\x24\xC9\x0A\xA5\x9A\xC9\xD2\xC3\xBE\xCF\xB1\xC9\x04\xB3\xD6\xCE\x58\xC3\x90\xC8\x35\xCA\x6E\xBB\x12\xA4\x6F\xAB\x26\xD0\x05\xCF\x93\xBE\x0E\xB0\x3B\xCA\xA3\xC3\x10\xD0\x3E\xCA\x12\xD0\xE3\xCF\x75\xC1\x15\xD0\xAA\xC3\x17\xD0\x1E\xC8\x7A\xC1\x99\xC1\x61\xCA\xD5\x94\x03\xC0\x42\xAA\x63\x92\x6C\xC5\x9B\xBA\x73\xB6\xC4\xC8\x5E\xBB\xE0\xC8\x48\xA7\x52\xCA\xF1\xCF\x3E\xB0\xC8\xAF\xB3\xC8\xF8\xB1\x83\xC2\xC8\xBA\xD0\xCF\xB8\xCF\xD2\xCF\x28\xCA\xE7\xCF\xC1\xC9\x4D\xD0\x72\xC4\x4F\xD0\x1E\xB8\xF5\xBB\x04\xC0\x2A\xAF\x5F",
"\xA7\x13\xC9\xF4\xBC\x15\xC9\x58\xD0\x17\xC9\x7E\xC5\x00\x79\x60\x7E\x3E\xD0\x12\xCF\x40\xD0\xB9\xC2\xEC\xC2\x59\xC9\x47\x94\x5B\xC9\x58\x95\x30\xD0\x23\xA5\xD5\xC9\x69\xD0\x20\xC8\x6B\xD0\xB5\xA6\x2C\xC9\x78\xD0\x0D\xD0\x5F\xD0\x41\xB3\x61\xD0\x5E\xBF\xB7\xCF\xBE\xC2\x11\xCA\x84\xC4\x67\xD0\x2A\xCA\x19\xD0\xE2\xC3\x87\xD0\xF3\xA7\x3D\xC9\x82\xCE\xFC\xC3\x79\xD0\x1F\xCF\xDF\xCF\x69\xCF\xF5\xCF\x58\xCA\x13\xD0\x9F\xC8\x42\xCA\x6F\xC9\xA5\xCF\x5D\xC4\x96\xD0\x1E\xC4\xD8\xCF\x81\x96\x82\xBB\x91\xC5\x47\xB5\x64\x27\x8B\xD0\xCE\xC8\xA5\xC9\x06\xB5\x90\xC3\x08\xB5\x40\xCA\xE4\xCF\xA5\xD0\xAC\xC9\x4B\xD0\xA3\xC8\xA9\xD0\x5F\xC4\x63\xC9\x95\xC5\x38\x8F\x24\x92\x9D\xD0\x3B\xCC\x28\xD0\x7D\xB0\xCD\xCF\x7D\xC4\x92\xC9\x97\xB9\xE4\xC4\xE9\xC8\xE6\xC4\x57\xBA\xE8\xC4\x12\xCA\xA7\xD0\x3C\xC8\xBD\xD0\x3E\xC8\x98\xD0\x3A\x73\x10\xC6\x60\xBB\x78\xC0\xE9\xC3\x9C\xD0\xB1\xD0\xE0\xC9\x55\xC4\x3F\xAE\x2C\xD0\x7F\xD0\x2E\xD0\x5C\xC9\x82\xD0\x7C\xA7\xEA\xC9\x15\xB6\xEC\xC9\x2C\xB5\xC0\xB2\xF5\x5A\xA4\xC5\xDC\xCF\xDC\xD0\x42\xD0\x4D\xC8\xE2\xC9\x46\xC9\xFB\xC7\xE5\xC9\xD1\xC9\xFE\xC7\xBA\xC8\xBB\xCF\x84\xD0\xD6\xCF\x4E\xD0\xAB\xD0\xE5\xAA\xFB\xAA\x9E\xBB\xB1\xCF\xC3\xD0\x4E\xAF\x83\xCF\xA0\xD0\x85\xCF\xE2\xCF\xB7\xD0\x48\xD0\xB9\xD0\xFD\xC9\xD1\xD0\x4D\xC9\xD3\xD0\xA5\xC8\xD5\xD0\xF5\x73\xD7\xD0\x87\x87\xB2\xC5\x0F\xC0\xB0\xD0\x5D\xD0\x41\xD0\x55\xCA\x14\xC4\xA1\xD0\x6B\xCF\x07\xC9\x6D\xCF\x65\xD0\x6F\xCF\x0B\xD1\x71\xC9\x0D\xD1\x0E\xC9\x1B\xD0\x08\xD0\x39\xC4\x01\xBA\xC9\xCF\xEE\xD0\x18\xD1\x2B\xC4\x69\xC9\x7E\xD0\x13\x96\x80\xD0\x3E\x96\xE4\xD0\x9E\xAA\x26\xC9\x34\xC4\xE8\xD0\xC8\xA6\x41\x95\xE4\xB5\xF6\x9D\xE6\xB5\x66\xCF\xAB\x5B\x29\xD1\x7C\xC8\x80\xC0\x05\xD1\x70\xCA\x47\xD0\x34\xC3\x49\xD0\x1A\xC4\xBB\xD0\x0C\xC9\x22\xD1\x4F\xC9\x0F\xD1\xBD\xB3\x9C\xC1\xEC\x9B\xBB\xBB\xE8\xBA\xC5\xC4\x3C\xD1\x16\xD1\x7C\xD0\x3D\xCA\xA5\xC3\x59\xC1\xA1\xCF\xB8\xC8\xF6\xD0\xD3\xC9\xBB\xC8\xF9\xD0\xC3\xC2\xD7\xCF\x79\xCA\x49\xCA\x85\xCC\x10\xC1\x52\xB0\x47\x8C\xD4\xC5\xF5\x5A\x79\xC4\x5D\xC3\x51\xD1\x59\xB0\x0D\xB0\x53\xD1\xB4\xD0\xE3\xC9\xB6\xD0\x87\xCF\x49\xC9\x89\xCF\x3A\xC8\x20\xD1\xFF\xC9\x5F\xCA\x6B\xC3\x5F\xD1\xFA\x67\x8C\xC4\x7F\xC1\x1C\xCA\x88\xC3\x1F\xCA\x7A\xC4\x9C\xCF\x52\xD1\x2A\xD0\xCD\xC9\x2D\xD1\x10\x98\x2F\xD1\x74\x96\x31\xD1\xDF\xAA\x32\xD0\x3B\xA8\xEA\xCF\x48\xB9\xEC\xCF\x99\xA5\x7E\xC1\x71\xD0\xAF\xCB\x90\x79\xF0\xC5\x44\xC8\xE7\xC3\x37\xCA\xF1\xBC\x0C\xD0\x81\xD1\x04\xD1\xE1\xCF\x41\xD1\x07\xD1\x43\xD1\x09\xD1\x5C\xCA\x46\xD1\xAE\xC9\x48\xD1\x73\xC9\x24\xD1\x2B\xC1\xF8\xC5\x9C\x9A\x4D\xCA\x9E\xBA\x4F\xCA\xD9\xA7\x6A\xC1\x5B\xD0\x80\xD1\x6A\xD1\x29\xD0\x9B\xD1\x2B\xD0\xD1\xC8\x2E\xC4\xD3\xC8\x18\xC3\x88\xD1\xF5\xAA\x5C\xD1\xBD\xC8\x5E\xD1\x17\xCA\xD5\xC4\x1B\x65\x9A\xAB\xD8\xC4\xAA\x9E\x68\x9E\xC3\xBB\xD8\xAB\xBF\xBA\xD3\xAE\x99\xD1\xB1\xD1\xC6\xD0\xF3\xCF\x19\xD1\x40\xD1\xF6\xCF\x42\xD1\x59\xC4\x44\xD1\x5B\xC4\x74\xD1\x14\xCA\xA4\xD1\xB0\xC9\x0D\xB9\xC5\xC5\xB3\xC9\x9D\xC1\xAD\xB6\xA5\xC1\xF6\xC4\xD4\xBC\xD8\xBA\x09\xBC\x84\xCA\x13\xC6\xED\xC7\x39\xBD\xEE\x88\x7C\xBC\xE6\x5A\x7B\xBC\x51\xAD\x7C\x34\x87\x25\xCC\xAD\xB8\x5B\xC5\x36\xC6\xBC\x5A\xBD\xC0\x0D\x4C\x7F\x8E\x7B\x56\xBD\xEE\xD1\xCC\x39\xC6\xCB\xF2\xD1\xE4\xB7\x3E\xC6\xFC\x88\xF2\xC7\xD7\xB1\x13\x52\x5A\x59\xE8\x9E\x24\x39\x6C\xD1\xC3\xBF\x1B\xD1\x59\xCA\x08\xC9\xD2\xD1\x0A\xC9\xA2\xD1\x5E\xCA\xD6\xD1\x16\xCA\xEE\x64\x04\xC5\x1C\xD0\x00\xBB\x15\xC5\x7B\xCF\x43\xA6\xC5\xC9\x33\x89\x7F\xCF\xB2\x5E\xFF\xD1\x59\x59\x01\xD2\x24\x3B\x03\xD2\xD0\xC8\x86\xCF\xF4\xD0\x88\xCF\x59\xD1\x8A\xCF\x5B\xD1\x8C\xCF\x85\xD0\xC3\xC9\x8F\xCF\x75\xCF\xEF\xBA\x02\xD0\x25\xC8\x79\xCF\xE6\xB3\x3E\xB8\x03\xBB\xE3\xB5\x2B\xC8\x23\xBF\x9A\xCF\xDD\xC9\x03\x01\x19\xD2\x58\x59\x1B\xD2\x2A\x3F\x1D\xD2\x2C\xD1\xE0\xD0\x2E\xD1\xE2\xD0\x81\xD0\x98\xC9\xB4\xB9\x8A\xD1\x67\xA8\x8C\xD1\x03\x9D\x4C\xC4\x4C\xAE\x42\xC8\x59\xB8\x10\xBB\x51\xAE\x47\xC8\xF0\xCF\x01\x01\x37\xD2\x57\x59\x39\xD2\x85\x39\x3B\xD2\x44\xD0\x55\xD1\xBC\xC2\x90\xD0\xCC\xC3\xB5\xC4\xEC\xC8\x86\xC9\x60\xC9\x76\xD1\x62\xC9\xFC\xD0\x2E\xBB\x2F\xC5\x1A\xBB\x31\xC5\x1C\xBB\xC7\xCF\x10\x9C\x58\x9A\x21\x0A\x50\xD2\x56\x59\x52\xD2\xB7\x40\x54\xD2\x4E\xC8\xF2",
"\xD0\x50\xC8\xD2\xC8\x81\xC8\x53\xC8\x41\xD2\x78\xBF\x43\xD2\x59\xA9\x34\xD0\xD8\xD1\xF8\xC2\x38\x98\xFA\xC2\xFC\xC3\x6A\xD2\x55\x59\x6C\xD2\xF1\x3A\x6E\xD2\xF1\xD0\x11\xD0\xCF\xC9\x20\xD2\x71\xD1\x22\xD2\x73\xD1\x24\xD2\xA6\xCF\x26\xD2\xD7\xC9\xA6\xD1\x38\xC4\x09\x0F\x4C\x7F\xE6\x00\x6E\xC2\x9B\xAE\x17\xD2\xE6\x5A\x7F\xD2\xFE\x9F\x6F\x3D\x82\x58\x83\xD2\x0D\x97\x70\xD2\xE4\xC9\x72\xD2\xE6\xC9\x74\xD2\xE8\xC9\x70\xB9\xE6\xD0\x34\xB6\x35\xD1\x1E\x8E\x11\xC5\x51\x89\x03\xD0\xF2\xBA\xE5\xA9\xAD\xC8\x15\xD2\xC2\xB8\x2D\xBA\x02\x01\x98\xD2\x53\x59\x81\xD2\x5B\x3B\x9C\xD2\xB7\x9E\x56\xD2\x79\xC3\x70\xD1\x41\xCA\x72\xD1\x4B\xC9\xD4\xD1\x45\xCA\x0C\xD2\x2C\xCA\xBE\xD1\xC0\xC8\x1D\xD0\x9F\xB4\x1F\xD0\x55\xD0\x95\xBC\x73\xD0\x41\xC3\xA4\xB9\xB9\xBF\xA8\xB4\x97\xD2\xA6\x67\x7F\x4B\x5D\x55\x62\x01\xB7\xD2\xE0\xAE\xB9\xD2\x3F\xCA\xBB\xD2\xB8\xD0\xBD\xD2\x43\xCA\xBF\xD2\x71\xCF\x5E\xD2\x01\xCA\x60\xD2\x99\xAE\xD9\xCC\xEF\xAE\xAC\xD1\x91\xC4\x5C\xC3\xAD\xC4\x09\x01\xB3\xD2\xB5\x57\xB5\xD2\x55\x39\xD4\xD2\xBB\xB0\x85\xD2\xF3\xD0\xA0\xD2\xF5\xD0\xE7\xC9\xF7\xD0\x9E\xC4\x33\xD1\xA0\xC4\xA7\xD2\x98\xA7\xE5\x5F\x6E\xC3\x8A\x8A\x11\xB9\xA9\xD1\x21\xD0\x09\xC0\x74\xD0\xFA\xC8\x0B\xB2\xD6\xC5\xB9\xBA\x69\xD2\xD0\xD2\x9A\xD2\x5E\x3B\xED\xD2\x53\xB1\xB5\xD1\x6B\xC8\xB7\xD1\x04\xC4\x75\xD2\x96\xC3\x77\xD2\x94\xA9\xF8\xD2\x0E\xA8\xEE\xC9\x30\x7E\x51\xD0\x67\xBB\x70\xD0\x57\xC5\xF7\xC8\x6F\xC5\x75\xD0\xC1\x8E\x77\xD0\xDC\x8D\xE9\xD2\xBF\x0D\xEB\xD2\xC2\x05\x0A\xD3\x9F\xB2\x0C\xD3\x2D\xD0\x0E\xD3\x30\xC4\x10\xD3\x06\xC4\x12\xD3\xB0\xA9\x79\xD2\x3D\xA8\x8E\xD1\x4A\xB9\xB8\x0D\xA4\x86\x85\xC5\x9C\xA7\x22\xD3\xBB\x0D\x24\xD3\xD3\x05\x26\xD3\xB6\xC3\x3D\xD2\x85\xD1\x3F\xD2\x30\xD1\x2C\xD3\x32\xC4\xF6\xD2\x02\xC8\x14\xD3\xC1\xA8\x7F\xA4\x8A\xC5\x8E\xAA\x25\xC4\x06\xD3\x5B\x59\x3A\xD3\xD3\xD2\x82\xD1\xBA\xC2\x84\xD1\xF3\x9C\x86\xD1\xE9\xA7\x42\xD3\x55\xC8\x44\xD3\x57\xC8\x45\xD2\x4B\xC4\x49\xB9\x65\x7D\xAD\xD0\xCD\x6F\xC5\xC3\x36\xD2\x07\xD3\xD1\x4D\xAD\x65\x09\xD3\x50\xD3\x7D\xD0\x3E\xD3\x53\xD3\x40\xD3\x87\xD1\x56\xD3\x6F\xC8\x58\xD3\x71\xC8\x5A\xD3\xFC\x92\x68\xB7\xC6\xAD\xFE\xD1\x62\xD3\x61\xCD\x88\x50\x53\xD2\x66\xD3\x54\xD1\xCE\xC9\xF0\xD2\xB6\xD1\x73\xD2\xD4\xC8\x6C\xD3\xD6\xC8\xA5\xD2\xA5\xB6\x46\xD3\x00\xAA\x32\xD3\x0B\xBB\x76\xC9\x00\xC9\xD7\xBB\x9E\xC5\x4B\xD3\x0D\xBD\x4D\xD3\xD1\xD2\x30\x3F\x3C\xD3\x56\xC4\x06\xD1\xD8\xD2\x08\xD1\xDA\xD2\xA6\xD0\x8B\xD2\xA8\xD0\x8D\xD2\x8E\xCF\xE0\xD2\xCA\xC0\xA3\xC5\x8D\xC9\x8C\xD3\xE8\xD2\x75\xD3\xB3\x04\x83\x50\xBA\x54\x91\xD3\xDF\xD0\x28\xD3\xE1\xD0\x2A\xD3\x6D\xC8\x80\xD3\x25\xC9\xBC\xCF\xE9\xCF\xD3\xC4\xCD\xC5\xA0\xC0\x0C\xC4\xA1\xC9\x3B\xD1\x06\x01\x38\xD3\xB7\x0D\x4E\xD3\x24\xC6\x9E\xCF\x8E\xD0\xEC\xC0\x58\xD2\x6C\xC4\xCD\xC3\x36\xC9\x5C\xD2\x38\xC9\x88\xC9\x3A\xC9\x4A\xD1\xA9\xB6\x88\xD3\xB4\xC9\xF5\xAF\xB6\xC9\xB1\x8F\x60\x7E\xB7\xD3\xB3\x0D\xB9\xD3\xA6\xD3\x8E\xAE\x1F\xD2\xF1\xD2\x21\xD2\xF3\xD2\x5A\xD1\xF8\xD0\x25\xD2\xFA\xD0\x6A\xD0\x9C\xD3\x8B\xC9\x09\xB0\xED\xB2\xA0\xD3\xB6\xD3\xA2\xD3\x8E\x05\xA4\xD3\xD2\xD2\xBA\xD3\xC7\xD0\x96\xC4\x0F\xB3\xE7\xC8\x99\xC4\x20\xC9\x96\xC9\x9A\xAA\xB9\xD1\x43\xAF\x82\xD3\x72\xB9\x84\xD3\x20\xAA\x5A\xC8\xBD\xB6\xE5\xB5\xE4\xC0\xD6\xC3\xCE\xD3\x11\x9F\x08\xD3\xA5\xD3\x79\xD3\x6D\xD1\x9E\xD2\x6F\xD1\x87\xD2\xBC\xD2\x89\xD2\xBE\xD2\x98\xD3\xD2\xD0\x9A\xD3\xA8\xCF\xC6\xD3\xB5\xC0\x7B\xCA\xB1\xCA\x3C\xBF\x4E\xD1\x5A\x97\xB2\xD2\xE2\xD3\x8C\x06\xE4\xD3\x90\xD3\xFE\xD3\x04\xD2\x84\xC2\x57\xD1\xBD\xC9\x1E\xD1\xA4\xCF\x06\xD4\x0C\xD1\x08\xD4\xFE\xCF\x0A\xD4\xD0\xAB\x5E\xCF\x49\xC1\x76\x97\x6A\xAB\x39\xB3\x65\xD1\x15\xC1\x04\xD3\x71\x6A\xFA\xD3\x60\xCD\xA3\xD3\x41\xCD\xFD\xD3\xB3\xD1\x83\xD1\x68\xD3\x20\xA3\x54\xD3\xB2\xB9\xAC\xD3\x31\xD0\xF1\xD3\x8A\xB9\x30\xD3\x2C\xC5\x18\xCA\x40\xCC\x6D\xA1\xED\xC5\x3C\xB6\x65\xBA\x9C\x97\x7D\xD1\x6F\xAB\x2C\xD4\x3F\xCD\x2E\xD4\x64\xD3\x30\xD4\xBB\xD3\x6A\xCF\x18\xD4\x1C\xD1\xA2\xCF\x1B\xD4\xBA\xCF\xF5\xD2\xAE\xD3\x27\xC9\x70\xD3\x59\xC8\x63\xC1\x63\xCA\xBE\xC4\x65\x9E\x5A\xB6\x6D\xCE\x08\x96\x97\xD1\x8E\xB3\x00\x6C\x46\xD4\x63\xD3\x76\xD3\x9B\xD2\x16\xD4\x1E\xD2\x93\xD3\x02\xD4\xD9\xD2\x04\xD4\xDB\xD2\x1D\xD4\x21\xD1\x1F\xD4\x1A\xD0\x21",
"\xD4\xB6\xBA\x4A\xCA\xC3\xC8\x9D\xBA\xC1\xC4\x95\xD1\xCC\xAA\xA1\xBA\x0A\xD0\x6C\xBA\x8D\xD3\x00\xD2\x8F\xD3\x21\x34\xD1\xD3\x71\x9E\x67\xD4\xD4\xD3\x88\xD2\xD6\xD3\x23\xD2\xD8\xD3\x8C\xD2\xDA\xD3\x86\xD0\xDC\xD3\x03\xCA\x72\xD4\x8D\xB6\xC3\xD1\x88\xC3\xDD\xC4\x1D\xBC\x60\xD4\x12\xD4\x8D\x03\x77\xD3\x6D\xD2\x65\xD4\x3C\xD2\xA8\xD3\x3E\xD2\xAA\xD3\x2F\xD0\x37\xD4\x83\xD0\xD9\xD3\x5D\xD1\xFB\xD0\x78\xD1\x17\xBB\xF0\xC9\x7A\xCB\xD9\x88\x12\xC6\xDD\xD1\x36\xC6\xD9\xBA\x26\xA9\xA8\xD4\x9F\xBE\xE7\x00\x89\xCA\x93\x7B\xF7\x02\x70\x3B\x53\x68\x70\x3B\xAF\xAC\x09\x01\xE8\x00\x3E\x7B\xB7\xD4\xB4\xD3\x91\xB9\x5C\x0C\xB2\xD4\xA2\x66\x70\x3B\x98\x08\xB9\xD4\x04\x74\x70\x3B\x9C\xAC\x48\x0C\x03\x41\x21\x59\xD7\x3F\xC0\x05\xD1\xB7\xFD\xD1\xB1\xCF\x17\xBD\x12\x91\xC4\x3B\x7F\xD4\xE7\xAF\x57\xD2\x63\xD0\x91\xD0\xA3\xC2\xE9\xC4\x52\xD4\xBB\xD1\xBD\xCF\xBE\xC8\x94\x7C\xA9\xD2\x1A\x8A\xAB\xD2\x09\xC8\x12\xD2\x5F\xA6\x4D\x8D\x95\xC2\x28\xC3\xE7\x0D\x25\xB8\x4E\xD2\x00\x00\xCD\xD4\xB9\xA9\xCF\xD4\x97\xD4\x55\xD2\x7B\xD3\x71\xD2\x7D\xD3\xA1\xD2\x7F\xD3\xA3\xD2\x88\xB9\x39\xD4\xB2\xBA\xB0\xD3\x25\xB1\xDC\xD4\x48\x8D\xDE\xD4\x0B\xC6\xE6\xA6\x1F\xBF\x92\xB1\x0F\xBD\x2C\xC8\x34\xD2\x4A\xA5\xE9\xD4\xB9\xBB\xEB\xD4\x31\xD4\x51\xD3\x33\xD4\xDA\xA3\x35\xD4\xAE\xBA\xF3\xD4\xB0\xBA\xF5\xD4\x49\xC4\x55\xD4\x73\xC8\x16\xD3\x95\x8D\xDB\x72\x43\xC8\xC5\xCF\x45\xC8\xCE\xC2\x22\xBD\xFD\xAA\x04\xD5\x03\x9A\x06\xD5\x4B\xD4\x1A\xD1\x4D\xD4\x06\xD2\x1D\xD1\x08\xD2\xD3\xCF\x0A\xD2\x76\xCA\xDE\xD2\x78\xCA\xC3\xD2\xC0\xCF\xB2\x0D\xC2\xCF\x5C\x81\x10\xBB\xE7\xC2\x8E\xC9\x01\x01\x1C\xD5\x5A\x99\x1E\xD5\xE7\xD3\xE1\xC4\xE6\xC8\xE3\xC4\xE8\xC8\x99\xB9\xEA\xC8\xC0\xD3\x85\xC9\xB7\xC4\x70\xC4\x6E\xD4\x97\xD0\x8A\xD4\xC9\x6F\x76\xC8\x1B\xCC\x21\x0A\x33\xD5\x93\x99\x35\xD5\xCC\xD1\x2B\xD1\xED\xD4\x52\xD3\x34\xD4\x6A\xD3\x55\xD3\x0D\xD5\x47\xC4\x0F\xD5\x86\xC8\xF7\xD4\x9D\xC9\x13\xD5\x29\xBB\x96\xD2\x6D\x61\x48\xD5\xE9\x98\x4A\xD5\x0E\xD0\xB3\xD0\x17\xD4\x62\xD0\xBC\xC9\xCD\xC4\xD5\xD4\xD0\xD0\x6C\xD4\x75\xD1\xC1\xD2\x47\xCA\x91\xBF\x90\xCF\x2B\xD2\x10\xD2\x06\xC5\xB2\xB1\x97\xBF\xB6\xC5\x09\xD0\xC8\xC8\x38\xCA\x09\x01\x5C\xD5\xF8\xA3\x5E\xD5\x8C\xD0\x4C\xB5\xBC\xD3\x3D\xC1\xBE\xD3\x83\xC9\x3D\xD5\x1F\xB1\x37\xC9\xA9\xB1\x72\xCF\xBA\xC4\x43\xD5\x50\xD0\x6D\xD0\x52\xD0\xC6\xD2\xB3\xBF\x86\xC3\x71\xC3\x28\xD4\xCD\xD2\x8F\xA8\xCA\x70\x77\xD5\x8B\xA2\x79\xD5\xB2\xD0\xF7\xC9\xCE\xD1\xA2\xD0\xD0\xD1\xFB\xC9\xA0\xD1\x74\xCA\x26\xD5\xD5\xCF\xA0\xD4\xDB\xD3\xA2\xD4\x12\xBA\x1B\xCC\x40\x92\x59\xC3\xFE\xC5\xD7\xBB\xE6\xD2\x75\xD5\x76\x52\x36\x6F\x94\xD5\xDD\xD0\xB5\xCF\xC9\xD0\xDA\xB9\x94\xC9\x0B\xD5\x76\xBF\x9D\xD4\xE5\xD0\x6E\xD3\xEB\xC9\x11\xD5\xDA\xC8\xCE\xAE\xC5\xD2\xFD\x83\x0F\xAF\x20\xD0\x56\xD0\x5D\xBB\xCB\xD2\xD7\xAE\x09\x96\x6F\xAB\x92\xD5\xDE\xA7\xAC\xD5\xEF\xD0\x03\xC9\x6F\xD2\xEF\xD2\xEF\xD4\x0D\xD3\x7E\xD3\xB8\xD1\xB4\xD5\x32\xD1\x53\xD4\x34\xD1\xB8\xD5\x29\xC9\x16\xD3\x66\xBB\x12\xC9\x1B\xD3\x14\xC9\x1D\xD3\x02\xD3\x1F\xD3\xBE\x2F\x60\x7E\xC5\xD5\xF8\xA7\xC7\xD5\x2A\xD1\xF8\xC7\xFF\xD3\xCB\xD5\x9F\xD2\xF0\xD4\xF2\xD2\xA2\xD2\xF4\xD2\x00\xC8\xB6\xD5\xE7\xD0\xD4\xD5\xED\xC9\x7A\xAA\x89\xD0\xDC\x8D\xE0\xD5\x53\x68\xE2\xD5\x3E\xD1\x56\xC1\x32\xD4\x99\xD4\x3F\xD3\x9B\xD4\xE3\xD0\xD0\xD5\x89\xD1\x54\xD5\xD8\xC8\xEF\xD5\xE9\xD0\xB2\xD3\xF9\x58\x63\xAF\xF3\xD5\xAB\xD5\x92\x35\xD0\xD4\x12\xB0\xF3\xB5\x34\xAA\xFC\xD5\x40\xD2\x52\xD5\x84\xC8\x00\xD6\x9B\xC9\x56\xD5\xEB\xCF\x58\xD5\x90\xC5\x5F\xD3\xAF\xD0\x02\x01\xF4\xD5\xA2\x66\xF6\xD5\x9A\xC8\x7D\xC8\x9C\xD1\xCF\xD1\x9E\xD1\xD1\xD1\x9B\xD5\xE6\xCF\x9D\xD5\xE8\xCF\x54\xD4\x14\xD6\xC8\x6E\x64\xC9\xB5\xD3\x03\x01\x1B\xD6\x15\x71\x1D\xD6\x3E\xC0\x0F\xD0\xCA\xD5\x45\xD0\x86\xD2\x82\xD4\x03\xD4\x84\xD4\x8A\xD2\x86\xD4\x99\xD3\x88\xD4\x27\xD2\x86\xD5\xDC\xBB\xC8\xD3\x59\xD0\xA7\xAF\xDA\xD0\x31\xD5\xE8\xD4\x08\xD6\x22\x41\x0A\xD6\x07\xB5\x0C\xD6\xFE\xAE\xB2\xD5\x9C\xC4\xEB\xD5\xE9\xC9\xED\xD5\xA6\xD2\x02\xD6\x36\xD1\x55\xB2\xE6\xAA\x07\xD6\x1F\xBD\x09\xD6\xEC\xD4\x33\xD6\xD6\xD2\x46\xD0\x22\xD6\x9A\xD5\x96\xD3\xBA\xD0\xDC\xD2\xFC\xCF\x41\xD5\xAA\xD0\xA1\xD5\xA6\x74\xFE\xD0\x28\xD0\x1B\xD5\x46\xD6\x24\x44\x48\xD6\xB5\xD0\x4A\xD6\xFA\xB2\x95",
"\xC9\x87\xB0\xCF\xD0\x93\xD0\x26\xD6\x68\xD0\x3C\xD6\x8E\xD2\x70\xD4\x1D\xA9\xA4\xD4\x94\xCB\x23\xC4\xCB\xD3\x76\x93\x56\xD6\x3F\xBD\x58\xD6\x07\xD5\x67\xD3\xFA\xD5\x69\xD3\x0E\xD6\x41\xD3\x10\xD6\x99\xC9\x12\xD6\x33\xD0\xDA\xD4\x7A\xD2\x48\xD3\xC9\xB5\x3A\xC4\x44\xD6\x2E\xD6\x7D\x6C\x30\xD6\xEA\xD1\x32\xD6\x84\xD2\x34\xD6\x7C\xD3\xCD\xD5\xF1\xD4\xCF\xD5\x88\xD6\x42\xD2\x8A\xD6\x8B\xD1\x29\xD6\x46\xD2\x5C\xD3\xEB\xB1\xE4\xD1\xB3\xBB\x69\xD6\x57\xD6\x47\xD6\x59\xD6\x97\xD6\x5B\xD6\x35\xD6\xE8\xD5\xD5\xD3\xEA\xD5\xD7\xD3\xD7\xD4\x9F\xD4\xBC\xD1\xA1\xD4\x2A\xD5\xA3\xAF\x7A\xD6\x89\xD3\x64\xC4\x0F\xD4\x70\xA8\x2D\xD6\x6A\xD6\x6D\x0B\x6C\xD6\x6E\xD1\x6E\xD6\x78\xB4\x70\xD6\x14\xB3\x51\x7E\xA2\xB6\x57\xD3\xD2\xD5\xF7\xD2\x52\xD6\x21\xA7\x86\xD3\x98\x1D\x5C\xC2\x44\xBA\x63\xD1\x2A\x9E\x8E\xD5\x67\xD1\xE7\xD2\xAA\xD5\xA8\xD6\x6B\xD6\xAA\xD6\x9D\xD2\xE6\xD5\x01\xD4\x36\xD6\x69\xD4\x38\xD6\x05\xD4\x3A\xD6\x07\xD4\x76\xD6\x9B\xD3\x65\xD6\x85\xA8\x04\xCA\x4B\xCA\xA6\xC4\x41\xD4\xE0\xC5\x9F\xA5\x1D\xCA\xCC\xD2\x7E\xD1\x68\xD1\xD6\xD6\x80\xD6\xA9\xD6\x82\xD6\x7A\xD3\x4E\xD5\x0A\xD5\x50\xD5\x36\xD4\x9D\xD6\x76\xD2\x9F\xD6\x44\xD2\xA1\xD6\x5B\xD3\xCD\xD6\xCC\x71\x58\xD4\x40\xD4\x6D\xB3\x4B\xC1\x94\xD1\x17\xD5\x96\xD1\xC4\xD5\xBE\xD6\xC9\x34\xC0\xD6\x00\xD4\xC2\xD6\xBD\xB5\xC4\xD6\xDE\xB9\x72\xD6\xB6\xC4\x42\xC1\x1C\xC3\x69\xD5\x60\xCA\x3E\xD6\x4E\xB0\x8C\xD4\x70\xC3\xA0\x90\xFC\xC5\x88\xC3\xE9\xA8\xF0\xD6\xBD\xD6\xD7\xD6\xBF\xD6\xD9\xD6\xB8\xD2\xEE\xD4\xE7\xD5\x9A\xD6\xE9\xD5\xF2\xD4\x4E\xD6\xA4\xD2\x50\xD6\x83\xD3\xCB\xD6\xF9\xD2\x2E\xCA\xC0\xD1\xD7\xC4\x91\xD1\xDF\xD1\x66\xCA\xC4\xD1\x09\xC6\x80\x94\x09\xC8\x08\x98\x76\xD5\x0A\xD7\x58\x2D\x0C\xD7\xDB\xD6\x0E\xD7\xCD\xB8\x10\xD7\x3A\xBA\xC6\xD6\x87\xC0\x06\xAF\xEF\xB4\x09\xC4\xA9\xC2\xB0\xB5\x4C\xD1\x0F\x94\x7E\xCA\xF3\xAB\xB7\x80\xA9\xD4\xE1\xD1\x6F\x8D\x85\xCA\xFB\xAB\x0B\x62\x27\x01\xE9\x00\xFB\xD1\x23\x85\xD5\x61\x57\xA1\xEA\x00\x0E\x62\x57\xA1\x1B\xBD\x39\x99\x21\xBD\xE1\xC2\x24\xBD\xBE\xAD\x26\xBD\x6E\x7C\x28\xBD\x87\x98\x2B\xBD\x9F\x14\x2D\xBD\x14\x3C\x37\xBD\x67\x00\xD0\xCD\x30\x59\x33\xBD\x0E\x02\xD4\xCD\x77\x32\x6E\xD7\x41\xC7\x99\x6D\xEB\x00\x32\x7A\x70\xD7\xE0\x6E\x72\xD7\xF1\x06\xE9\xCD\x83\x35\x6E\xD7\x29\xBD\x0D\x10\x6A\xD7\x2B\x0B\x9B\x0F\xF5\x3B\x6D\xD7\xC1\x50\xE4\x34\x62\xD7\xCB\x70\x23\xBD\xAE\x58\x4E\x58\x02\xCE\xD8\x12\x24\x35\xF8\x88\xBD\xCE\x37\xC5\xAE\xCD\x38\xD2\x12\x9F\x47\x3C\xA9\x2D\xC3\xCE\x90\xCC\x4E\xCF\xB4\x80\xC7\xCE\xE7\xD1\x6D\x61\x96\xD7\x51\xD2\x98\xD7\xEF\x3F\x0E\x2F\xCC\xCE\x1E\xCF\xC4\xD0\x21\x0A\xA2\xD7\x6B\xD2\xA4\xD7\x3A\x56\x67\x06\xD5\xCC\x9B\xC6\x28\xCF\xF3\xCC\x4D\xCF\x41\xCF\xC5\xCC\xB1\xCC\x2E\xCF\xFF\xD0\x00\x6C\xAB\xD7\x80\xD2\xAD\xD7\x17\x51\xB1\x01\xE0\xCE\x29\x0B\xB8\xCC\x35\xCC\xF4\xCC\x2B\xCF\xE7\xCE\xBC\x0D\x94\xBD\xA7\xCC\x72\x9F\x93\xD4\x1A\x51\x21\x51\x6F\xC7\xC8\x64\x71\xC7\x4B\xCF\x09\xC7\xC4\xD7\x9D\xD7\xC6\xCC\xB8\xD7\x68\xD6\xF5\x64\xBB\xD7\x99\xD2\x63\xD3\xF2\x3F\x13\x9F\x6E\x24\xFC\xCE\x55\x83\xFE\xCE\x0C\xCF\x37\xD0\xDF\xC6\xC5\xD7\x3A\xCF\x03\xA1\x08\xCC\xD9\xD7\xB4\xD2\xBD\xD7\x24\x51\x23\xCF\xD1\xCE\x45\x9A\x1A\xB7\x0B\xCF\xE6\xA0\x45\xCC\xAD\xC6\x0F\xCF\x13\xA1\xE8\xD7\xCB\xD7\x27\x51\xC2\x58\xAF\xD7\x9A\xC7\x33\x7E\x34\xCC\xD1\xD7\x65\xC7\xE5\xD7\x81\xC7\x39\xCC\xA8\xD7\xDF\xCC\xCA\xD7\x8E\xD3\x6F\x3D\xC5\x58\xBF\xD7\xFA\xCC\xB7\x60\xA7\xC7\xFF\xD7\x83\xC7\x01\xD8\x06\xCC\xF7\xCC\xD6\xD7\xAE\x78\xE9\xD7\xEA\xD2\xEB\xD7\x14\x9F\xC0\xD7\x21\x0C\x35\xCF\x14\xCD\x52\xCC\x38\xCF\x10\xD8\x38\xCC\x3B\xCF\x13\xD8\xB2\x5E\x15\xD8\x23\xD3\x17\xD8\xDE\xD7\x48\xCF\x36\xC2\xCE\xCB\xF3\xD7\xEE\xC6\x17\xCD\x44\xCF\x4A\xCC\x02\x01\x24\xD8\x39\xD3\x26\xD8\x9C\x2D\x12\xCD\x4A\xCF\x1C\xD8\x0A\xCD\x01\xCF\x2C\xCF\x1A\xC7\x4C\xA1\x50\xC2\x31\xD8\xB8\xD3\x33\xD8\x9A\xD7\xDF\xA2\xDA\xC7\xA2\xCC\x09\x01\x3E\xD8\xCF\xD3\x40\xD8\x96\x2D\x54\xC2\xFB\x90\x22\xD8\xE6\x5A\x46\xD8\xFB\xD3\xDB\xD7\x09\xD8\xFF\x03\xE7\xC7\x08\xC7\xE9\xC7\x1A\xBE\x86\xCC\xE2\xD7\xF6\xD3\x19\x8D\x09\x01\x04\x1D\x59\xD7\x65\x7C\x0E\x90\xED\x00\x84\xCC\x0E\x77\xEC\x38\xA6\xC0\xCB\x58\x6D\x0B\x59\xCF\x56\xD7\xE0\x58\x53\xBD\xC0\x0D\xED\xB7\x91\xCA\xBA\xC5\x03\x01\xC0",
"\x00\xE2\x83\x0A\x36\x11\xCB\xAE\xCB\x6B\xBE\x8A\x43\xCC\x53\x99\xCA\x27\x01\x9B\xCA\x78\xC7\x70\xD8\x98\x82\x72\xD8\x3F\x02\x74\xD8\xAF\xBE\xB0\xCB\x35\xCB\xAC\x6A\x70\xCB\xB5\x57\x72\xCB\xB6\xCB\x08\x9B\xAB\xCA\x27\x01\xAD\xCA\x91\xCB\xE6\x5A\x7C\xD8\xF5\xB0\x73\x56\x4E\x0B\x73\xD8\xBD\xCB\x82\xD8\x7F\xCB\xC0\xCB\xB2\xCB\x62\xCB\x96\xC5\x1A\xCB\xFC\x36\xBC\xCA\x6C\x04\xBE\xCA\x8F\x04\x35\x58\xC1\xCA\xA1\xBC\xC0\x07\xC3\xCA\x4E\x2C\xDF\xA0\x8F\xD8\x89\xBE\x46\x66\x7E\xD8\xBC\xCB\x5D\xCB\xF1\xCA\xB1\xCB\x45\xCB\xC2\xCB\xD1\xCA\xC4\xCB\xE3\xBE\xE8\xCA\x1A\x8B\xD7\xCA\xA7\xD8\x71\xD8\x1F\x36\x93\xD8\xAD\xD8\x50\xCB\x83\xD8\x21\x0A\x8A\xAD\x18\xCB\xD1\xCA\x99\x43\xB3\xC2\xEA\xCA\xB8\xD8\x7D\xD8\xBA\xD8\x7F\xD8\x94\xD8\x76\xD8\xBE\xD8\xC1\xCB\x99\xD8\xC1\xD0\xC8\xAD\xD3\xCA\xB4\xD8\xD5\xCA\x54\x69\xFA\xCA\xC6\xD8\x90\xD8\xAB\xD8\xB5\x02\x80\xD8\xC9\xBE\xC8\x43\x98\xD8\xC1\xD8\x63\xCB\x9B\xD8\x76\x51\x0A\xCB\x27\x01\x0D\xCB\x5A\xCB\xA8\xD8\x33\xB1\x0B\x66\xD8\xD8\xE7\x02\xDA\xD8\x7E\xCB\x99\xCB\x68\x05\x27\xCB\xF5\xCA\x29\xCB\x79\xBE\x66\xCB\x50\x59\x1E\xCB\xD6\xD8\xA9\xD8\x1A\x51\xC8\xD8\xAC\xD8\x96\xCA\xAE\xD8\xCC\xD8\xDD\xD8\x28\xCB\xB4\xCB\x08\xCB\x7F\x0C\xB8\x5B\x2E\xCB\xF6\xD8\xE7\xD8\xAA\xD8\xF9\xD8\xD9\xD8\xCA\xD8\x34\xCB\x96\xD8\x04\xCB\xB1\xD8\xDF\xD8\xB3\xD8\x62\x51\x01\x1F\x3B\xCB\x24\x2E\x05\xD9\x4F\xB1\xE8\xD8\x08\xD9\xEA\xD8\x0A\xD9\x64\xCB\xED\xD8\x76\x02\xEF\xD8\x06\xCB\x00\xD9\x2A\xCB\xD2\xD8\x7B\x03\xD5\x61\x4B\xCB\xD6\x00\x15\xD9\x69\xB1\x40\x57\xE9\xD8\x99\x03\xEB\xD8\x43\xCB\xAF\xD8\x6F\xCB\x0E\xD9\x9A\xD8\x10\xD9\x69\x51\x12\xD9\x58\xCB\x27\xD9\x82\xB1\x17\xD9\x48\x3F\xBB\xD8\xFB\xD8\xBD\xD8\x0C\xD9\xC1\x6C\xC0\xD8\xFF\xD8\x19\xCB\x91\xAD\x50\x59\x68\xCB\x36\xD9\x99\xB1\x29\xD9\x18\xD9\x2B\xD9\x1A\xD9\x6D\xBE\xDC\xD8\xB0\xD8\xCE\xD8\xC7\x36\x01\xD9\xD0\x09\x50\x59\x75\xCB\x77\xCB\x9F\x61\xE6\xD8\x16\xD9\x07\xD9\x39\xD9\xC9\xD8\xBC\xD8\x6D\xCB\xCC\x53\x81\xCB\x0E\x06\x83\xCB\x49\x01\x63\x00\xA1\xCB\x3E\x03\xA3\xCB\x39\x59\xB0\xD4\xF8\xD8\x8C\xCB\x50\x59\x8E\xCB\x01\x01\x90\xCB\x41\x9B\xB2\x5E\x56\xD9\x28\xD9\x38\xD9\xF2\x41\x3A\xD9\xA1\xCA\xFC\xD8\x3D\xD9\x6E\x00\x5E\xD9\x79\x01\x9D\xCB\xAB\x57\x63\xD9\x3E\x01\x65\xD9\x89\xCB\x67\xD9\x69\x3F\x97\x3A\xBA\x18\xA9\xCB\x27\x01\xAB\xCB\x7B\xD8\xB9\xD8\x59\xD9\xFA\xD8\x75\xD9\x3C\xD9\x1C\xD9\x97\xD8\x4D\xD9\xDE\xD8\x31\xD9\x50\xD9\xD3\xD8\x54\x69\xB8\xCB\x45\xD9\xBA\xB1\x57\x51\x48\xD9\x03\x06\x2C\xD9\x5E\xCB\xBF\xCB\x0D\xD9\x4E\xD9\x39\x1E\x93\xD9\xE5\x9A\x86\xCA\x89\xCC\x7F\xC6\x8B\xCC\x63\x9F\xC7\xD8\x48\x3F\x9B\xD7\xEA\x9B\x9D\xD7\x00\xD5\xB6\xC1\xDD\xA1\xE9\xCB\x59\x5D\x89\xD9\xF2\x41\xA7\xD7\x27\xCD\xDE\xCF\x2D\x69\xA1\xCD\xF7\xD8\x82\xD9\xE1\x41\x79\x00\xB0\xD7\xD4\xCE\x2A\xD8\xCD\xCC\xF4\xD7\x3A\xD8\x53\x98\x08\xCC\xB9\xD9\x06\xD9\x68\xD9\xF2\x41\x19\xD8\x3B\x0B\xC2\xD7\x0E\xD8\xA9\xC7\xE6\xCE\xE6\xD7\xC7\xD7\xC5\xD9\xB3\xD9\xBC\xD9\xCE\xD7\xE8\x63\xD0\xD7\x37\xD8\xE4\xCE\xE4\xD7\xD4\xD7\xF8\xCE\x4C\xD8\x6D\x61\xC6\xD9\x57\xD9\xC8\xD9\xD4\xD9\xEE\xC1\xC3\xC6\x67\xCC\xE9\xB6\xD0\xCC\xD2\xD9\xA9\xD9\xC9\xD9\x48\xCF\xD1\xC6\xD5\xCE\xA3\xD5\x1E\xD8\xDB\xD9\xDD\xCC\x04\xD8\x0F\xCD\xA8\xD9\xD7\xD8\x1F\x36\x28\xB7\x17\xCF\xE5\xD9\xA0\xBD\xE9\xCC\xF7\xBD\xDF\xD9\x71\xD9\x58\xD9\xEA\xD9\xF6\xC6\xAE\xA2\xAB\x98\xF9\xD9\xCC\xBD\x49\xCC\xC9\xD7\x49\x5B\xD3\xD9\xE9\x2D\xCA\xD9\xFC\xCC\xB2\xD7\xFE\xCC\xD3\xD7\xB5\xD7\xD9\xCE\x01\xCD\xE8\xD9\xF5\xD9\x48\x3F\xD5\xCC\x29\xD8\xEC\xC7\x2B\xD8\x93\xC7\xC3\xD9\xC6\xC7\xDD\xD9\x9F\x61\xFD\xD9\x37\xD9\xFF\xD9\xE2\xD9\x06\xCD\x51\x0C\x13\xCD\x0D\xDA\x15\xCD\xC2\xD9\xC6\xD7\x3B\xD8\x3A\xCE\x50\xC2\x1F\xDA\x46\xD9\x72\xD9\xBC\xD9\xD9\xC7\xD5\x99\x2C\xDA\x09\xDA\x4E\x0B\x4A\xD8\x5B\x79\x1D\xDA\xF5\x64\x2D\xDA\x98\xD9\x47\xD9\x48\x3F\x53\xD8\xD1\xD7\x55\xD8\x5F\xC2\x10\xDA\xF3\xCE\x7E\xBF\xF6\x03\x27\x01\xEF\x00\xE9\xBE\x94\xD7\xA7\xD9\x52\x9F\x3D\x7C\xF1\x61\x04\x05\xAB\xD9\x88\x78\xAD\xD9\xB3\xC2\xB7\xC1\x56\xCF\x21\x0A\x95\xCD\x2A\x67\x4E\xDA\x91\xC6\xF2\xD9\xCE\xCE\x09\x01\x56\xDA\x35\x69\x04\x05\xBE\xD9\xC7\xC1\xC3\xD7\xB4\xD7\x62\xCF\xF7\xCE\xFB\xCB\x5A\xDA\xEA\xCE\x55\xDA\x4C\xDA\xC4\x5F\x5F\xDA\x0B\xD8\xE1\xCE\x8C\xBD\x04",
"\xDA\x02\xBE\xBC\xCC\x38\xDA\x2D\x69\x5D\xDA\xB1\x6A\x6C\xDA\x09\xA2\xF1\xCE\x70\xDA\xB9\xC7\x11\xCC\x08\xCC\x75\xDA\x51\x6D\x77\xDA\x61\xBA\xCB\xCC\xC0\xD9\x0D\xCF\x28\xDA\xD0\xD9\x03\xCF\xB6\xD9\x27\xD0\x69\xDA\x2F\x63\x80\xDA\x85\xCC\x5D\x99\x7A\xDA\x47\xCC\x2C\xCC\x2F\xD8\x01\x01\x7E\xDA\xE5\x6D\x8C\xDA\x49\xCD\x49\x7A\xF8\xD9\x40\xCF\x64\xDA\x42\xCF\x5C\x9A\x73\xDA\x00\x6C\x94\xDA\xD6\x6F\x96\xDA\x3E\xD4\x25\xCF\xA6\xC7\x27\xCF\xED\xD9\x29\xCF\xF5\xCE\x9B\xDA\xB6\xD7\xB4\xA2\x7D\xDA\x6A\xDA\x39\x19\xA2\xDA\xF3\xCD\xA4\xDA\xB4\xC7\x1B\xD8\x26\xDA\x1D\xD8\xDA\xD9\x42\xDA\x0D\xC7\x02\xCD\x4B\xC7\x5C\xDA\xAE\xDA\x9F\x1C\xB0\xDA\xEF\xCE\x09\xCF\x07\xCD\xC2\xC7\x62\xDA\xA9\xDA\x57\xD8\xAB\xDA\x3B\xC2\xED\xCB\x07\xDA\x02\x01\xA0\xDA\xAF\x76\xBF\xDA\xC9\xCC\x98\xA1\x8E\x9A\x36\xD8\xB5\xDA\x38\xD8\x0E\xCF\x1B\xDA\x03\xBE\x19\xCD\xA0\xD7\x9F\x61\xCC\xDA\xE4\x76\x58\xDA\x67\xB7\x9E\x9A\x32\xDA\xB1\xD9\x00\x00\xDB\xDA\xCD\x7E\xDD\xDA\x6D\xB7\x5A\xCF\xF7\xBD\xE3\xDA\x83\x83\x04\x05\x3E\xDA\xD8\xD9\x6D\x79\x30\xCD\xEC\xA2\xE2\xC0\x09\x0F\xB3\x07\x78\x7B\xB9\xCE\xCB\xB3\x26\xA6\x24\x92\x2C\xBE\x40\x8B\x60\x2E\x3F\xD7\x98\xD6\xCC\xD5\x29\xD3\xCE\xD5\x0F\xD3\xFA\xD6\x11\xD3\xFC\xD6\x78\xD2\x8C\xD6\x10\xC5\x6C\xD5\x77\xCF\x6E\xCE\x6F\xD5\x0A\xC8\x21\xB8\x14\xD2\x7D\xCF\xE5\xD4\x5A\xD5\x9F\x61\xF9\xDA\x1C\xAC\xCB\x28\xFC\xDA\xAC\xD6\x99\xD6\xFF\xDA\x9B\xD6\x01\xDB\x2B\xD7\xF4\xD4\x2D\xD7\xF2\xD3\x2F\xD7\x87\x7D\x05\xC8\x30\xBB\x3A\xB8\x6E\xD5\x26\xC8\x07\xC5\x28\xC8\x62\xA9\xED\xCF\xAE\xD9\xB4\xC2\x02\xD5\xD6\xC3\x13\xDB\xC8\xB2\xFB\xDA\x24\xD7\xD5\xD2\x26\xD7\xDC\xD6\xAE\xD6\x83\xD4\xB0\xD6\x85\xD4\xB2\xD6\x87\xD4\x9F\xD5\x89\xD4\xE5\xD6\xBC\xB4\x7D\xA9\x22\xC5\xAD\xCF\x5A\xB8\xAF\xCF\x1A\xD5\xD7\xB1\x2F\xDB\x8B\xB5\x31\xDB\xF4\xD6\xE5\xD5\xFD\xDA\x27\xD7\x19\xDB\x29\xD7\x9C\xD6\x1C\xDB\x0E\xD5\x1E\xDB\x3A\xD4\x06\xDB\x3C\xD4\xF5\xD3\xC1\xCF\x68\xAE\x5D\xC8\xC4\xCF\x3A\xD0\xAB\x62\x30\xD5\xE0\xD3\x03\x01\x47\xDB\x3E\xC0\x49\xDB\x1F\xD5\x97\xD5\x05\xD2\xA3\xD0\x6D\xC9\x24\xD6\xFA\xCF\x61\xD6\x18\xD0\x63\xD6\xBE\xD0\x18\xD7\x42\x85\x45\xD5\x29\xCF\x21\x0A\x61\xDB\xEA\xD1\x63\xDB\x36\xD5\xE5\xC8\xE9\xD3\x39\xD5\xEB\xD3\xCC\xD0\x21\xC9\x05\xC1\x45\xD7\x24\xC1\x47\xD7\x0F\xB5\xA9\xB2\xAF\xB5\x76\x85\x44\xDA\xEF\xCF\x2C\xD6\x02\x01\x74\xDB\x87\xCB\x14\x4C\x8F\x4F\x16\xDB\x34\xDB\x41\xD7\x82\xB9\x43\xD7\xE7\xC4\x7F\xDB\x95\xC1\x81\xDB\xB5\xB8\x49\xD7\x0C\xAE\x0F\xD2\x92\xCF\x24\xC3\xE7\xA6\x06\xD0\xE9\xA6\x25\xD1\xDD\x69\x6F\xAB\x8A\xDB\x75\x9F\x8C\xDB\x99\x4F\x54\x01\x8E\xDB\xF6\xD6\x31\xA6\x00\xDB\x2B\xD3\x02\xDB\x2D\xD3\x04\xDB\x13\xD3\x20\xDB\x47\xD3\xF3\xB4\xF3\xC8\x0B\x0B\xC7\xD2\xEB\xBB\x6E\xC5\x7C\xC5\x1E\xD3\xC6\x95\x90\xD5\xB2\x5E\xA3\xDB\x45\x9D\x09\x1F\x15\xDB\x32\xDB\xEE\xD2\x4C\xDB\x35\xDB\x28\xD7\xAF\xD6\x2A\xD7\xB1\xD6\xEC\xD5\xC9\xD6\x45\xD3\xB1\xDB\x85\xD3\x16\xD6\xE2\xD2\xDF\xC8\xBA\xDB\x3C\xD0\xAF\xD1\x00\x00\xBE\xDB\x7B\x9D\xA5\xDB\x69\x04\xA8\xDB\x09\xD5\xAA\xDB\x1A\xDB\xAC\xDB\x51\xDB\x53\xD5\x53\xDB\xF6\xD4\x3B\xD4\x60\xC5\x0E\xB9\x54\xC5\x10\xB9\x73\xD4\x22\xD0\x8E\xD5\xDC\xB4\x20\xCA\x2B\xBE\x5C\x59\x20\x58\xCE\x05\xDA\xDB\x84\xD6\x4F\xD5\x86\xD6\x6B\xD3\xAD\xDB\x43\xD3\xCB\xDB\x59\xD3\xFE\xD6\xEE\xC4\xBA\xD5\x84\xC3\x22\xB2\xEA\xBF\x24\xB2\x07\xD7\x77\xD4\x67\xAA\x20\xD3\x9C\xA7\xD6\xDB\x11\xAD\xD8\xDB\xF0\xDB\xC2\xDB\x0B\xD3\xD3\xD3\x36\xDB\x37\xD6\x38\xDB\x39\xD6\x3A\xDB\x3B\xD6\x3C\xDB\x3D\xD6\x3E\xDB\x49\xAF\xF2\xD5\x05\xDC\xEE\xDB\x3E\x54\x86\x4D\xF1\xDB\x0C\xDC\xC6\xDB\x37\xDB\xC8\xDB\x39\xDB\xCA\xDB\xD8\xD4\xAF\xD3\xE3\xDB\x99\xC5\xEA\xD0\xE7\x0D\x06\xD6\x18\xDC\xFA\xDA\xC1\xDB\x4A\xDB\x61\xD5\x8F\xD0\xD3\xD4\x59\xD2\x92\xD0\x13\xD7\x29\xCA\x26\xC1\xD9\xD4\xBD\xD1\xBF\xCF\xF5\xB8\x17\xD6\x64\xCE\x19\xD6\x01\x01\x06\xDC\xCF\x9D\xC0\xDB\x1B\xDC\x0A\xDC\x27\xD3\x1D\xDC\x4E\xDB\xC7\xDB\x50\xDB\xC9\xDB\x4F\xD6\xF8\xDB\x6F\xD3\xFA\xDB\x17\x4F\x2B\xD6\x05\xC8\x73\xDB\x19\xDC\xD8\x2C\x76\xDB\x4B\xD5\xE4\xD5\x2E\xDC\xBD\xD3\x30\xDC\xBF\xD3\x5A\xD2\xC1\xD3\x3F\xD5\x87\xC9\x84\xD5\xF0\xC8\x6F\xDB\xD6\xD0\xF1\xC4\x31\xB9\x8B\xD3\xCE\xC0\x60\xDB\x51\xDC\x8A\x31\x53\xDC\x5F\xD5\x96\xD5\x20\xD6\x98\xD5\x5D\xD6\x72\xCA\x69",
"\xDB\x16\xD0\x6B\xDB\x4C\xD0\xE3\xD6\x09\xD4\x60\xDC\xF5\x73\x97\xBB\xD1\x96\x2A\xDC\x14\xDB\x41\xDC\x2D\xDC\x66\xD4\x9D\xD1\x94\xD3\x9F\xD1\x5F\xD6\x0A\xD1\x67\xD5\xD5\xD1\x6D\xDB\xD4\xD0\x76\xDC\x3C\xC9\x67\xD6\xDF\xAF\xBD\xDB\x67\xDC\x8B\x5E\x69\xDC\x7A\xD5\x82\xC2\x4C\xD4\x62\xD5\x19\xD4\x64\xD5\xB9\xCF\xD6\xD4\x22\xDC\xB3\xD6\x36\xDC\xB5\xD6\x38\xDC\x7A\xCA\xF7\xC0\xEF\xAB\x1A\x8B\x41\x79\xDC\x8D\x3E\xDC\x14\x9E\x40\xDC\x41\x54\x1C\xDC\x81\xD4\x0D\xDC\xDE\xD6\x0F\xDC\xE0\xD6\x11\xDC\xE2\xD6\x13\xDC\x77\xD6\x88\xDC\xCF\x8F\xDF\xD3\x65\xDC\x89\xDB\x8D\xDC\x3A\x7B\x2C\xDC\x64\xDB\x6C\xDC\x66\xDB\x99\xD5\x6F\xDC\x82\xDC\xA1\xD1\x72\xDC\xBC\xD0\x86\xDC\x0E\xD1\xB1\xDC\xB2\xC2\x8B\xB7\x3A\xAB\xF8\xD3\xE7\xD4\xA3\xDC\xB4\x9E\x08\xDC\xA7\xDB\x42\xDC\x3D\xD3\xF2\xDB\xF7\xD6\xF4\xDB\x51\xD5\xDF\xDB\x11\xD6\xE1\xDB\x10\xD5\x4C\xDC\x12\xD5\xB7\xBB\x0C\xD4\xC8\xCA\x81\xA9\xF3\xC9\x7F\xD1\xD5\xDB\xB6\xDC\xDF\x6D\x8F\xDC\x95\xD5\x1F\xD6\xB4\xD1\x44\xDC\xA9\xD3\xAB\xDB\xAB\xD3\xF6\xDB\xC8\xD6\x23\xDC\x28\xD6\x25\xDC\xC4\xC5\xDA\xC5\x97\xDA\x2B\x90\x59\xD4\xB3\x0D\xD3\xC5\x09\xCA\x32\x90\xA2\xDB\xE1\xDC\xF7\x6F\xE3\xDC\xAD\xD5\xCE\xCF\xAF\xD5\x7F\xC4\xCB\xD0\x3B\xD5\xCD\xD0\x92\xC1\x12\xD7\x5B\xD2\x5C\xDC\x5D\xD2\x16\xD7\x77\xD1\xB6\xD6\x17\x68\x23\xD4\x31\xCA\xBB\xAD\xA8\xA8\x52\xB3\xED\xD6\xC2\xD5\xEF\xD6\xD5\xD6\x66\xDC\x2B\xDC\x7C\xDC\xB9\xDC\xE6\xDC\xA8\xDC\x1E\xDC\x0E\xDC\x20\xDC\x10\xDC\x98\xDC\x3B\xDB\xB4\xD6\xA0\xD5\x0B\xDD\x60\xD1\x02\xD7\xC5\xD1\xDF\xCA\x93\xD1\x84\xBA\xC5\xD1\x71\xB3\x2A\xD4\x8C\xDC\x17\xDD\xA6\xDC\xCE\xDC\x92\xD3\x7F\xDC\x68\xD4\x95\xD3\x6A\xD4\x97\xD3\xE1\xD6\x1E\xD4\x74\xDC\x20\xD4\xC4\xDC\x22\xD4\xEC\xC5\x27\xDD\x7B\xC7\x4E\xCA\x30\xB9\xD8\xD0\xFF\x00\x1F\xD7\x15\xDD\xB5\xDC\x2F\xDD\x8D\xDB\x31\xDD\xA7\xD3\xE7\xDC\x9A\xD4\xE9\xDC\x9C\xD4\xEB\xDC\x6D\xD3\x4A\xDC\xB7\xD5\xD8\xDC\xB9\xD5\xBF\xD1\x5D\xAA\x30\xCA\xE8\xD6\xC4\xBB\x5F\xD4\x36\xD7\x8F\xD4\xC7\xD1\x01\xB5\x50\xDC\x48\xDD\xA6\xDB\x3D\xC0\x95\xD6\x60\xD5\x7E\xDC\x21\xD6\x80\xDC\x23\xD6\xBE\xDC\x9C\xD5\xC0\xDC\x47\xD1\xC2\xDC\x23\xD1\x78\xD6\x3A\x79\x4C\xD7\xC9\x97\x4E\xD7\x6C\xBE\x80\xCA\x8E\xCC\x15\xC6\x83\xCA\x53\xD7\xE3\xD1\x57\xBC\x6A\xAC\x40\x5C\x0E\x62\xF2\x0D\xE6\x0D\xF2\x00\x3E\x7B\x04\x00\xB4\xBE\xA0\x7B\x84\xDD\x6E\xBA\x2B\x72\xF4\x03\x9C\xAC\x0A\x0B\x96\x54\xEC\xBA\x5F\x53\x15\x9F\x27\x01\x82\xDD\xBA\xB7\x92\xDD\x10\xCE\x94\xDD\xC2\xBA\xBB\xBE\xF8\x06\x8B\xDD\x5C\x0C\x8D\xDD\xC7\xD4\x03\x38\x75\x0A\x3C\x7B\xF1\x00\x78\xAC\xD3\x9F\xA1\xDD\x88\xDD\x19\xBA\x8A\xDD\xFD\xB8\x02\x10\x9C\xDD\xA8\xCD\xCD\x3E\x91\x54\x1B\xCE\xAF\x9A\x9F\xBE\xF4\x00\x61\xC6\x92\xAC\x27\x01\x70\xD9\xEA\x9A\x70\xD9\x13\xA0\xB5\xDD\xF0\xCA\x8D\xD9\x9E\xD9\x20\x01\x9A\xDD\xA9\xDD\x63\x0A\x84\xB2\x21\xDA\xE9\x2D\x3C\x7B\x93\xCB\x29\xBC\xE4\xBA\x81\xCE\x14\x5D\xF9\x5F\xBB\xDD\xA7\xDD\x37\xB9\x9B\xDD\xC0\xDD\x64\xCA\x5D\xD8\x66\x7C\xBB\xBB\xF5\x00\x61\xD8\xA3\xDA\xF3\xDC\x23\xB3\xF2\xB2\xE4\xAD\x4E\xBD\xBA\xCE\x09\x01\x80\xCD\x9E\xBE\xF6\xDA\xF1\xB0\x18\xAE\xF5\x64\x6C\xC2\xDD\xC7\xC5\xB4\x6A\xDC\xE5\xDC\xF9\xD5\x4C\xDD\xFB\xD5\x4E\xDD\xFD\xD5\x50\xDD\x81\xD3\xD6\xDC\x55\xD5\xEF\xDC\x51\x9B\x08\xDB\x24\xDB\x9B\xDB\x11\xD2\x93\xC2\x0D\xDB\xE3\xD4\xA0\xDB\x97\xC2\x0F\xC8\x4F\xDC\x27\x01\xE4\xDD\x91\xD4\x06\xB6\x0F\xB4\xF7\xD5\x40\xC4\x1A\xDD\x33\xDD\xDD\xD6\x35\xDD\xDF\xD6\x6B\xD4\x38\xDD\x6D\xD4\x3A\xDD\x6F\xD4\x74\xCF\x22\xDB\x46\xC5\xF5\xDD\x23\xC3\xF7\xDD\x94\xCF\x34\xA3\xB1\xC2\xAA\xCF\xB3\xC2\x43\xB8\x4A\xA5\x00\xDE\x3A\xC7\x89\xB5\x6E\x88\xFD\xDC\xC8\xD0\x38\xD5\x93\xC9\x01\xDD\x81\xC4\x3C\xD5\x5A\xDC\x3E\xD5\x14\xD7\xB8\xC4\x5E\xDC\x89\xC9\x3C\xDD\xC2\xC3\x40\xDB\x0E\xBB\x4A\xD2\x76\xD4\xD3\xAB\x3D\xBF\x45\xDB\xB1\xCF\x1D\xDE\x46\xC7\x3E\x8B\x8A\xB5\x31\xD6\x65\xDD\x98\xD4\xEA\xDD\x85\xD6\xEC\xDD\x0F\xD6\xD4\xDC\x89\xD6\xF0\xDD\x01\xD6\x54\xDD\xD5\xD5\x61\xC5\xB7\x0D\x2D\xD5\x73\xA3\x5C\xDB\x9F\xA9\x66\xD2\x60\x7E\x38\xDE\x4E\xC7\x3A\xDE\x20\xDE\xC8\xD5\xE1\xC9\xDA\xD6\xC4\xDB\x90\xDB\x54\xBA\x4C\xD6\x97\xC9\xEE\xDD\xAD\xD3\xED\xDC\xD3\xD5\x47\xDE\xF0\xD5\x26\x9C\xDA\xCF\x28\x9C\x44\xD6\x51\xDE\x5E\xC7\xEC\x8C\x61\xB6\xA7\xDC\x07\xDE\xA9\xDC\x09\xDE\xAB\xDC\x0B",
"\xDE\xAD\xDC\x39\xDD\xAF\xDC\xE4\xD6\x24\xDD\xDF\xC2\x86\xDB\x11\xDB\xE3\xDD\x96\xB6\x6A\xDE\x4A\xDD\xD2\xD3\x1B\xDD\x45\xDC\x1F\xDC\x47\xDC\x21\xDC\x49\xDC\x5F\xDE\xCA\xD6\x61\xDE\x6D\x8D\xF9\xD4\x6F\x8D\x08\xC8\xFC\xD4\x12\xAE\x35\xBB\x0E\xB1\x29\xC3\xD4\xDB\x67\xDE\x6C\xC7\x1F\xDE\xF3\xB2\xE3\xD5\x44\xC9\x4B\xDB\x17\xDB\xFE\xDA\xE8\xDC\xDD\xDB\xEA\xDC\x43\xDE\x9E\xD6\x45\xDE\x13\xD6\xF2\xDD\x88\xC8\xFC\xDB\xE8\xBF\x3E\xC3\xFF\xDB\xD8\xB4\x23\xD0\xCE\xD2\x6D\x61\x91\xDE\x7B\xC7\x59\xB4\xE7\xDD\x3F\xD1\xBA\xDC\x21\xD5\x67\xDB\x5A\xCA\x70\xDC\x4A\xD0\x6C\xDD\xA3\xD1\x6E\xDD\x49\xD1\x2E\xDE\x40\xB8\xD0\xDB\xA5\xD5\xE4\xD2\xFF\xC5\xE8\x95\x6F\xAB\xAB\xDE\x8A\xC7\xAD\xDE\x90\xDC\xC8\xC3\x7C\xD5\xCA\xC3\x7E\xD5\x10\xCA\x65\xD5\x73\xD6\xB6\xDE\x0B\xD2\xB8\xDE\xA5\xD1\x70\xDD\x10\xC9\x18\xD3\x6F\xC3\x8C\xD5\x2D\xAF\xC1\xD5\x90\xBB\xEB\xDB\xDF\xDC\xC2\xDE\xB1\xC7\xE6\xDD\xC5\xDE\xEC\xC3\x06\xDE\x67\xDD\x34\xDD\x81\xDC\x36\xDD\x60\xD6\x84\xDC\xC0\xD2\xCF\xDE\xD7\xD1\x31\xD3\xD6\xD5\x77\xC5\xC4\x46\x79\xC5\xD9\xD5\x72\xD0\xDB\xD5\x85\xBA\x76\xD0\xDE\xD5\xDC\x8D\xDB\xDE\xD7\xC7\xDD\xDE\xE4\xDC\xAF\xDE\xE0\xDE\x6D\xDC\x68\xDD\x5E\xD6\xE4\xDE\x83\xDC\x0C\xDE\x68\xD5\xE8\xDE\x0D\xD2\x35\xD0\x7B\xD2\x09\x0F\x35\xD3\x2D\xC9\xF7\xCB\x21\x0A\xF6\xDE\xE5\xC7\xF8\xDE\x21\xDE\xE8\xD3\xF2\xB5\x83\xB0\x56\xB9\x1A\xD4\x24\xD5\x66\xD0\x74\xD6\x95\xD0\x03\xDF\xC2\xD2\x9C\xDC\x71\x5F\x7D\xBB\x9C\xA7\x0C\xDF\xFF\xD2\x93\xDE\x1B\xB5\x3C\xDE\x6B\xDC\xFB\xDE\xBB\xDC\x6E\xDC\xF8\xCF\xB4\xDE\x45\xD1\xCD\xDE\x27\xD5\x09\xDD\x5F\xD2\x15\xDC\x78\xAF\x5E\xD3\x3B\xDC\x7B\xAF\x06\x01\x1F\xDF\xBF\xD5\x31\xBE\x3B\xDE\x64\xDD\x24\xDF\xE9\xDD\x7E\xDE\x9A\xDE\x4F\xDB\x1B\xDB\x48\xDC\x2C\xD7\x52\xDD\xEE\xD5\x86\xDE\x6E\x5C\x4E\xDC\x22\xC8\xAA\xDE\x7A\xDE\x48\xB6\x6B\xDE\xE1\xDE\x08\xDE\xE3\xDE\x0A\xDE\x37\xDD\x71\xDE\x0D\xDE\x73\xDE\x75\xDC\x2F\xDF\xA9\xBB\x40\xD6\xD2\xDB\x42\xD6\x7A\xC9\xF5\xDE\x49\xDF\x03\xDE\x1E\xD6\xFA\xDE\x3B\xDF\x6C\xDE\x1C\xDD\xAA\xDC\x1E\xDD\xAC\xDC\x20\xDD\x12\xDC\x22\xDD\x3D\xDB\x75\xDE\xB0\xC3\x8C\xC9\x85\xB5\x1E\xDF\x5C\xDF\xAD\xB4\x04\xDE\x68\xC8\xB0\xDE\x93\xDC\x4E\xD4\x58\xD1\x4F\xDF\xE5\xDE\x01\xDF\x85\xDC\x0E\xDE\x42\xD5\x55\xDF\x26\xAB\xA0\xC9\x91\xBC\xFE\xDD\x09\x01\x35\xDF\xC9\xD2\xC4\xDE\xF9\xDE\xF8\xD5\x08\xD5\xD0\xDC\xDC\xDB\x3E\xDF\xDE\xDB\x40\xDF\x1D\xDB\x42\xDF\x51\xD6\x44\xDF\xCC\xD6\x16\xD3\x11\xD1\xFD\x99\xB8\x0D\xA1\xDC\x6E\xDF\xE5\xDD\x4A\xB5\xDE\xDE\xFF\xC3\x25\xDF\xB1\xDE\xBC\xDC\x28\xDF\x6A\xDD\x25\xD6\x2B\xDF\x9E\xD5\x68\xDF\x14\xDC\x6A\xDF\xFD\xD0\x8F\xD6\x27\xD1\x98\xDF\x01\xDE\x37\xDF\x54\xDE\x95\xDE\x3C\xCA\x97\xDE\x8F\xDB\x12\xDF\xB0\xB9\x71\xD6\x94\xDB\x1A\xC3\x96\xDB\xD5\xB8\x83\xDB\xD7\xB8\x4C\xBB\x98\xCF\x09\x0F\x4D\xAD\x01\x01\xF7\x00\x95\xBE\xF7\xD3\xDC\xC9\x1C\xDE\x6F\xDF\x38\xDF\x8B\xDB\x96\xD6\x57\xDE\x98\xDE\x4D\xDB\x3D\xDF\x46\xDC\x3F\xDF\x82\xDE\x41\xDF\x84\xDE\xCC\xDB\x91\xDF\x30\xD7\x9D\xDC\xC6\xC5\xE3\xA2\x21\x8C\x90\xDE\xC6\xDF\xAE\xDF\x71\xDF\xF4\xCF\x65\xDB\x9E\xDF\x27\xDF\x14\xD0\x29\xDF\xD3\xD1\xE6\xDE\xDD\xD2\x2D\xDF\xDF\xD2\x7D\xDF\x99\xBA\xE7\xD6\xD0\xD6\x07\xCA\x64\xD1\xF7\xDC\xD5\xC5\x79\xD4\xA3\xBA\xFF\xDD\xDB\xDF\x94\xDE\xDD\xDF\xCD\xD1\x73\xDF\x2F\xDC\x63\xD5\xD1\xCF\x15\xDF\x1F\xD1\xE5\xDF\x62\xD6\x7B\xDF\x64\xD6\xA7\xDF\xBC\xC4\xF2\xDC\xA9\x9A\x03\xD7\xDF\xC5\x7D\x79\x11\xDD\x44\xD4\xDA\xDF\x99\xDF\x74\xB5\xAE\xDE\x87\xDF\x83\xD6\x3F\xDE\xF3\xDB\x41\xDE\x87\xD6\x9D\xDE\xFB\xD6\x9F\xDE\x8B\xD6\x37\xDC\x05\xDF\x31\xD7\x57\xDD\xAF\xCE\x3F\xDD\x13\xCB\xC7\xA8\x4C\xC1\xEF\xDF\xC4\x97\xC1\xDE\xF4\xDF\x22\xDF\x39\xDF\xE8\xDD\x88\xDF\x11\xE0\xD1\xDC\x13\xE0\xF5\xDB\x15\xE0\x03\xDB\x17\xE0\xA0\xD6\xA1\xDE\x57\xD5\x3D\xD4\x88\xD5\x7D\xCE\xC8\xD2\x88\xB5\x41\xDD\x5A\xC5\x91\xB6\x44\xDD\x24\xE0\x0C\xE0\x7C\xB6\x54\xDC\x96\xDE\x56\xDC\x7D\xD5\x58\xDC\x7F\xD5\x28\xDE\x81\xD5\xC2\xD3\x83\xD5\x28\xD5\x73\xCF\xE9\xDF\x19\xD7\x3E\xDD\x24\xD4\xD6\xCB\xFB\xA5\xBE\xDE\xD7\xBB\x90\xD4\x9A\xBC\x0B\xDF\x25\xE0\xED\xB5\xAF\xDF\x43\xD0\x5A\xD6\xB2\xDF\x98\xC4\x13\xDF\x95\xDC\x50\xD4\x97\xDC\x83\xDE\x99\xDC\x24\xDC\x55\xDB\xE4\xDB\xD9\xD1\xC7\xC5\xCE\x9E\xA7\xD4\x18\xC6\xB6\xBF\xA1\xC1\x78\xDD\xA3\xC1\xE2",
"\xD1\xA8\xD4\xD2\xB7\x82\x06\xF8\x00\xE5\xBA\xCB\xD4\xF4\xC5\xE6\x5A\x34\xC6\xB0\xDC\x6B\xD5\x29\xD2\xFE\xBA\x48\xC5\x2D\xD2\x27\xC8\x0B\xC8\x30\xD2\x8A\xC8\x0E\xC8\x0C\xC5\x77\xE0\x6D\x61\x79\xE0\x74\xDE\x0E\xD2\x88\xDE\x0F\x9B\x2C\xD2\x95\xBF\x7A\xCF\xE1\xD4\x35\xA3\x20\xBF\xDC\xC8\x2B\xDB\x1B\xDE\x50\xC5\x09\x01\x88\xE0\x54\xDF\x02\xE0\xE1\xD2\xC8\xC2\x31\xDE\xC4\xCE\xAE\xCF\x35\xDE\xE1\xC2\x59\x59\xBE\xBB\x98\xE0\x3B\xDD\x4C\xE0\x38\xAB\xE0\xC2\x8C\xD7\x52\xBF\x65\xD2\xE3\xBA\x77\xA3\xF7\xBD\xA4\xE0\x0F\xDE\xA6\xE0\x13\xB5\x54\xB4\x7E\x81\xF3\xD9\xD4\x3C\x26\xBB\x2B\xB5\x53\xD6\xCA\xA9\x77\xDE\xFD\xDD\x31\xCC\x21\x0A\xAF\xE0\x7C\xDF\x38\xB8\xF4\xDD\x01\xBF\xF6\xDD\x0B\xDB\xAD\xD2\x9E\xDB\x4C\xC5\xA4\x1D\x78\xB7\x04\xD3\x31\x0C\x51\x4A\xB7\xE0\x84\xDB\xD8\x8B\xFB\xD2\x55\xC5\x8B\xD5\x34\xD7\x46\xB6\x40\xC3\xB6\xBF\x42\xC3\xE6\xC5\x2D\x69\xBF\xE0\x01\xE0\x1B\xDF\x76\xDE\xEE\xD9\x23\xAA\xBD\xDE\x42\xDD\x0C\xC0\xD2\xBF\xCB\xE0\xB2\x5E\xDB\xE0\x6E\xDB\xB1\xE0\x78\xCF\xAE\xCE\xF3\xCB\x28\x74\xF5\xC8\xEF\xDE\xEA\xB5\xE9\xDB\x22\xE0\x73\xC3\x8F\xA8\xCC\xE0\x02\x01\xE7\xE0\x87\xDC\xE9\xE0\x0A\xDB\x18\xD3\xD8\xD5\xBE\xD5\xC9\xD2\xF1\xDE\x2B\xDD\xFC\xB4\x8A\xC3\xCA\xDA\x01\x01\xF7\xE0\xC3\xDC\xF9\xE0\x32\x5B\x23\xC0\xDF\xA0\x05\xE1\x6F\xDD\xBA\xDE\x72\xD5\x62\xAF\x8B\xC5\x92\xDA\x00\x00\x0B\xE1\xB9\xDE\x07\xE1\x76\xB9\x52\xC9\x78\xB9\x92\xCA\x1B\xC6\xCD\xDB\x5C\x22\x46\xDF\x40\xCC\xBE\xE0\xCE\xE0\xBB\xDF\xC4\x92\x94\xDF\x3B\xE0\x64\xDC\xBB\xDA\xB6\xE0\x1B\xE1\x63\xAB\x8E\xD6\x6C\xDF\x7D\x8B\xAE\xE0\x20\xE1\xB8\xB9\x7C\xBB\xF6\xA4\x50\xAD\x53\xBB\x78\xE0\x2E\xE1\x7C\xBF\xAF\x80\x72\xDD\x3F\xDD\x13\xD1\x28\xCD\x1F\xE1\x28\xE1\x97\xAB\x99\xA7\x26\xD1\xCC\xC0\x0A\xE1\x35\xE1\x9A\xC3\x85\xDB\x88\xCC\xAE\x93\xC0\xC5\x64\xCC\x3C\xE1\xD4\xDF\x15\xD3\xDA\xDC\x9E\xDC\xF5\xC7\x18\xD5\x26\xCD\x74\xD5\x89\x66\xCD\xE0\x3D\xE1\x1F\xC5\x71\xD4\x61\xD1\xD0\xDD\x4F\x0D\x1E\xB6\xEE\xDF\x33\xDE\x55\xA1\xD4\xD6\x27\x64\x54\xE1\x4B\xE1\xB2\xDB\x25\xDD\xD6\xDD\x05\xE0\x1E\xE0\x6A\xCE\x52\x90\x09\xE0\x8E\xD5\x14\xDD\x60\xE1\xF6\xE0\x43\xE1\x0A\xC4\x7E\xAB\x1A\xD7\x7F\xC1\x83\xBA\x5C\xD4\xCC\xD2\x5E\xD4\x7B\x69\x61\xE1\x32\xE0\x15\xD6\x34\xE0\xEB\xE0\xAF\xB0\x0F\x6D\x75\xD4\x01\xDC\x85\xAB\x45\xDD\x6D\xE1\x04\xE1\x6F\xE1\x4A\xD7\x71\xE1\x4E\xE0\x0E\xDD\x50\xE0\xBB\xBA\xE2\xE0\x5B\xC5\xF5\x5A\x54\xE0\xF0\x61\x4A\xE1\x7A\xE1\x8D\xD1\x93\xDF\x62\xDC\xEF\x90\xDC\xD1\x6B\xE0\x06\xBC\x04\xA9\x6E\xE0\xCC\x84\xFC\x57\x24\xA6\xF6\xDA\xBF\xB7\x80\xC5\x36\xC6\x38\xC6\xA2\x6C\x2E\xC6\xB3\x6B\x28\x31\xAD\xCC\xC2\x6D\xDC\x94\x06\x01\xA1\xE1\x9F\xC5\x2F\x9E\x1E\xC6\x22\xC3\x7E\x63\xA6\xE1\x5A\x70\x37\x31\x62\x00\x01\x38\x38\x81\xCD\x06\xAD\xE1\x81\xA1\xF5\x74\xB0\xE1\x91\xCF\x32\x64\x2F\xAE\x08\x0E\x16\x31\xAC\x6A\x60\x66\xB8\x5B\x6B\x06\xBA\xE1\xB3\xC5\xA3\xE1\x1F\xC6\xA5\xE1\x03\xBF\xF2\xA0\xA2\x08\xB7\xE1\xD1\xDD\xE8\x88\x7D\xDD\x06\x01\xFD\x00\xB2\xDD\xB2\x99\x2C\x2A\x3E\x7B\xFF\x5E\x13\xA0\x1F\xAB\x34\x00\x33\xCE\x88\x61\x3C\x7B\xF5\x53\x63\xCE\x3B\x00\x50\xCD\xE2\xE1\x73\x5E\x53\xC6\xB4\x0F\x72\xC6\x1C\x6F\x74\xC6\x01\x01\xFC\x00\x5A\xC6\xFC\xB3\x7A\xC6\x59\x6B\x5F\xC6\x0D\xAD\xD4\xE1\xAF\xB7\x35\xCD\x01\x01\xDD\x37\x37\xCE\x94\x81\xDA\xE1\x0F\x5E\xDD\xE1\xA7\x63\xDF\xE1\x26\xA0\xE3\xE1\x0F\x5E\xE6\xE1\x6E\x07\xE8\xE1\x4E\x70\xEA\xE1\x00\x00\xEC\xE1\x94\xCE\xBD\xAF\xEF\xE1\xFA\x6B\xD0\xE1\x99\x68\x0E\x90\xFE\x49\x3C\xBD\x5C\xC2\x9D\x51\xAE\xDD\xAF\xDD\xBB\xBB\x51\x59\x11\xE2\x72\xB7\x42\x58\xFF\x03\x7C\xDD\xE0\xC7\xC6\xDD\x6B\xCC\x5C\xC2\xF5\x41\x1C\xE2\x51\xE1\xA5\x0E\x8C\x5A\xEC\x60\xE7\xD6\x6F\xCD\xF1\xD1\x49\xA2\xEC\x05\x70\x67\xB6\xA0\x1A\xC6\x09\x01\x8C\xD8\x3C\xBD\x9D\xD8\xAC\x0B\x9F\xD8\x3D\x01\x73\x0A\x64\x3F\x85\xAC\xDB\xDD\xC7\xCF\x8E\xBE\x10\xBC\x6D\x61\xFB\xCA\x0E\x96\xB1\x2F\x0D\xE2\xE6\xDA\x1D\xE2\x03\x00\x22\xAD\x66\xCD\xB1\xDA\xD7\xDD\x88\x8B\xEB\x06\x79\xD9\xA9\xE1\x12\x2C\xEB\x06\x66\x56\x32\xE2\xB7\x0B\x34\xE2\x80\x77\xD5\x2C\x52\x3F\xBF\x23\x66\x56\x22\xE2\x4B\xD8\x2C\x05\x25\xE2\x46\xE2\xC0\xDA\x3F\xD4\x49\xE2\xE0\x01\x58\xE2\x37\xDA\x37\x05\x5B\xE2\x03\x89\xE7\xD6\x0D\x50\x61\xE2\x76\xA1\x43\x03\x64\xE2\x8F\xBE\x66\xE2\x52\x58\x68\xE2\xF3",
"\x87\x32\x03\x6B\xE2\x3C\xE2\x58\xE1\x07\x5D\x68\x23\x4E\x0C\x6F\xE2\xE7\x0D\x19\x59\x08\x00\x72\xE2\x1C\xBC\x74\xE2\x62\xD4\x48\xD4\xDC\xD7\x99\xD7\x49\xD8\x41\xC7\xBB\x0E\x09\x00\x2C\xE2\xB3\xDD\x88\xE2\x08\x36\xBA\xB7\xCA\xCA\x43\xBE\x80\xD8\x7D\xD9\x72\x00\x69\xAD\x32\xBD\x66\xD9\x01\xCB\x95\xD8\x8E\xD9\x7E\x01\xE6\x0D\xDF\xBE\x5F\xAD\x03\x01\xC3\xBE\xC8\xDD\x00\x00\x9C\xE2\xA5\xBA\x90\x40\x7B\x3A\x91\xE2\x68\x0E\x72\x0B\x64\xD9\x28\x77\xBE\xCB\xE8\x58\x41\xE2\xDF\x67\x0E\x90\x0B\x00\x7C\xE2\x1E\xE2\x7E\xE2\x56\xCD\x92\x35\x38\xD1\x99\xCF\x7F\xA1\x37\xC5\x43\x9F\x15\xCC\x4F\xDA\xD8\xCB\xB8\xDA\x9E\xD7\x89\xC6\x92\xC5\xB7\xE2\xEC\xCC\xB5\xD9\xC9\xDA\x03\xCD\x09\x01\xBF\xE2\x1D\xCD\x60\xDA\x4C\xE2\xED\xDA\x4C\xCF\xC5\xDA\x00\xCD\x83\xBD\x03\xE1\x00\x00\xC5\xE2\x2B\xCD\xCA\xD9\xE2\xCE\xC9\xE2\xD2\xD7\x63\xDA\xC6\xDA\x11\xDA\xC8\xD7\xC3\xE2\x06\x01\xD0\xE2\x9E\xCE\xD5\xD9\x42\x62\xD7\xD9\xD3\xDA\xD9\xD9\xDA\xCC\x39\xCF\x02\xD8\xDC\xD9\x67\xDA\x2F\xCF\xC4\xE2\x3D\xCF\x53\x0A\x82\xDA\x18\xDA\xC1\xD9\x2C\xD8\xF5\xD7\x13\xB7\x9E\xDA\x21\x0A\xDC\xE2\xDF\xCE\xEB\xD9\xE1\xD7\xF2\xD7\xEE\xE2\x1A\xDA\x29\xDA\x10\xCF\x88\xDA\x3F\xD0\x00\x6C\xF4\xE2\xED\xCE\xED\xD7\x08\xCF\xA7\x06\xE4\xCC\x83\xDA\xE3\xD7\xE3\xE2\x1F\xD8\x65\xDA\x53\x7A\x08\xCC\x00\xE3\xFB\xCE\x6D\xDA\x4A\x02\xA6\xDA\x06\xE3\xDF\xE0\x08\xE3\xF0\xD9\x2D\xCF\xE7\xE2\xB9\xD7\xF3\xE2\xEA\xE2\xFB\xA1\xF7\xC6\xBE\x98\x9A\xDA\xD7\xE2\x1C\xCF\xE7\x0D\xBA\xDA\x3B\xE1\xBB\xCE\x11\xCD\x28\xD8\x08\xCD\xD4\xE2\x00\xD8\x15\xE3\xC0\x0D\x2E\xD8\xCE\xE2\x0D\xE3\x22\xCF\x35\xD8\x1B\xA2\xC4\xDA\xEF\xD9\xBB\xE2\xD2\xC7\x3C\xD8\xE1\xDA\x2E\xE3\xC1\xA1\x31\xDA\x20\xCD\xBE\xE2\x58\xCF\x6A\xD8\x62\xE2\xFD\xE2\x7A\xD0\xFF\xE2\x43\xCE\xB0\xE2\xF0\xDA\x60\xCF\x56\xD8\xE1\xCD\x34\xC7\xC0\x0D\xB3\x07\xED\x29\x67\xD8\x54\xBD\x66\xBC\x22\xCD\x8D\x7B\x2A\xBC\x95\x7B\x1B\x08\x30\xBC\xEC\xB7\x90\xCA\x37\xC5\xF0\xD1\x97\xDD\x4E\x54\xBE\x2E\x68\x9B\x6A\x9B\x4F\xC7\x94\xBC\xF8\xB7\x1D\xE2\x70\x9B\xD3\xCB\xC5\xBC\x52\xE3\xC0\x33\xBE\x2E\x5C\xC2\x6B\x9B\x0F\x58\x25\xCD\x6B\xD8\x57\xE3\x4A\xDA\x03\x01\xAF\xBC\xE7\xC6\x12\xC0\x93\x09\x5D\xE3\xDD\xC7\x03\xB8\x34\x78\x0E\x90\x63\xE3\xBF\xCE\x09\x01\x71\xE3\x12\xC7\x73\xE3\x45\x09\x69\xE3\x5F\xE3\xDE\xBC\x82\xBC\x76\x01\xAE\xE2\x56\x59\x81\x58\x5E\x3B\x4F\xD8\x63\xD4\x42\xCD\xB4\xAD\x03\x0A\x5C\x5A\xBB\x0E\x4C\xE3\xEA\xCE\x06\xCA\xD4\x08\x82\x58\x8A\xE3\x80\xE2\x82\x58\x98\x08\x91\xE3\x97\xD7\xFC\xD3\xE5\xD3\x9C\xAC\x16\x0C\xB2\x40\xC1\x54\x8A\xCB\x5B\xE3\x54\xE3\xAA\xE2\x18\xBC\x68\xD8\xCE\x54\x28\xC7\xBC\x0D\x6C\xD8\x37\xC5\xC1\xD4\x59\x59\xB8\x50\x21\x0A\xDB\x00\xA0\x75\xBD\xD4\x78\xE3\xBB\xBB\x10\x00\x8C\x5A\xE7\x65\x03\x01\xAD\xE3\x58\x59\xB8\x50\xCF\xD6\x8E\x58\x86\xCB\x84\xE2\x34\x02\x87\xE2\xD6\xE1\x89\xE2\x81\x49\xBA\xB7\x80\x00\x50\xCD\xC7\xE3\x25\xC7\xE0\xB7\xB4\x3A\xAE\xBE\xEB\x50\x53\x05\x3C\x7B\x1F\x4A\xD9\xCD\x00\x00\x3E\xBD\xB8\xCD\x06\x01\xD4\xE3\x72\xE3\x9F\xAD\x24\x35\xCD\xE3\x03\x9F\x24\x44\xF5\xD1\x50\x59\xC5\x36\x13\x00\xC2\xE3\xA5\xE3\x41\xC7\x28\x8D\xAF\xA0\x64\x7C\x9F\xBE\x14\x00\x86\xE3\x55\x59\xC4\x58\x21\x51\xA9\xE2\x47\xD4\xE3\xD3\xF9\xD7\xDD\xD7\xB4\xCD\x8D\xE3\x01\x01\xB6\xAD\x18\xCE\x00\x00\x37\xCB\x2A\xAD\xEC\xE3\xFA\xD7\x9E\x0A\x7E\xAC\x61\xCD\x76\xD3\x51\xD8\xBC\x98\xFE\xD8\x9B\xE3\x50\xD8\x21\x51\xAE\xBE\x87\xD8\xC5\xCB\x5E\xBD\x50\x59\xD7\x0A\xE2\xE3\x4B\xBC\x35\x01\x0D\xE4\xAA\xAD\x3D\x73\x10\xE4\xFC\xD1\xD2\xE1\xBE\x2F\xEA\xE3\x1D\xC6\x14\x07\xEC\x06\x41\x59\x54\x85\x3C\xDA\xF2\x41\x7C\xAD\x91\x2F\x8F\xE3\x9B\x04\xA4\x0E\x21\x0A\x36\xC6\xD7\x58\xFE\xE3\x1C\xE4\x2F\xDA\xE9\x2D\x98\x08\x04\x00\xEC\x66\xBB\xD9\xE9\x2D\xAE\xBE\x4F\xE2\x62\x9C\x52\xE2\xA1\xD8\x7D\x3F\x31\xE4\xA8\x9A\x8A\x08\xF1\xCE\x66\x56\x3C\x7B\x18\x00\x21\xE4\xFE\x0D\x7A\xAC\x86\xBC\x19\xE4\xEE\xE3\xD8\xDD\xE1\xD9\x2A\xE4\x7A\x07\x2D\xE4\xA9\xCD\xF2\x41\x30\xE4\x95\x44\x9F\x03\x82\xCC\xB5\xC1\x1A\x00\x17\xE4\xF5\xAB\xB3\x08\x1F\x57\x27\xE4\x71\x95\x9D\x0B\xF4\xE3\x00\x00\xF6\xE3\x63\xCE\xF9\xE3\xB4\x72\x9E\x02\xAD\x43\x81\xBC\x14\x7F\x04\x05\xC2\xAD\x8B\xDA\x33\x27\x98\x59\x08\xE4\x22\xD9\x7F\xBE\x8D\xBE\x92\xC5\xF4\xDA\x1E\xDE\x8B\x2E\x8A\xB7\xB8\x5B\x0C",
"\x62\x1B\x00\x13\xE4\x1A\x8B\xAB\xE3\x6F\xE3\x02\x01\xA4\xDD\x90\xD8\xB5\x38\x21\x0A\xB6\xBE\x5A\xE3\xB0\x53\xA9\xE2\x07\xCC\x09\x01\x7A\xD8\xF7\xBD\x77\xE4\xBA\xD9\xD8\x12\x79\xE4\x76\x01\x8E\xE2\x7D\xBE\x60\xCB\x03\xE4\x1F\xD9\xC3\xCB\xA2\xD9\xAA\xCA\x49\xD3\x3B\xCD\x54\xD9\xF5\x64\x83\xE4\xC7\xD9\x04\x01\x86\xE4\x9A\x01\x88\xE4\x98\xDD\x93\x07\x1E\xD9\x38\xCB\xF1\xD8\xD1\xD8\x11\xD9\x7F\x0C\x50\xE2\xC6\x0B\x33\xE4\xC0\xCA\x7D\x3F\xC2\xCA\xC4\xCA\xDF\xA0\x94\xE4\xE0\xD9\x96\xE4\xCE\x3C\x7A\xE4\x99\xE4\x97\x53\x4C\xD9\x2F\xD9\xA0\xD9\x79\x51\xF2\xD8\x67\xE4\xD6\xCA\xE4\xCA\x11\xE1\xAA\xE4\xFE\xD9\xD0\x12\x97\xE4\x81\x01\xAF\xE4\x7D\xE4\xB1\xE4\xB3\x04\x80\xD8\xE1\xBE\xFC\x36\xC4\xD8\x27\x01\xEB\xCA\x26\xE1\x6F\xCB\xE2\x83\xBD\xE4\x92\x02\xBF\xE4\x89\xDD\xC1\xE4\xB8\xAD\x30\xD9\xCF\xD8\xE0\xD8\xCA\xAD\x1A\x8B\xD5\xD8\x78\xC7\xBA\xE4\x20\xDA\xBC\xE4\xAD\xE4\x87\xE4\xA5\xDD\x30\xBA\x58\x53\xEE\xD8\xCD\xD8\x91\xD9\xD3\xE4\x32\xD9\x71\x51\x09\xCB\x22\xBF\xFF\x00\x0B\xCB\x01\x01\xE4\xD8\xB9\xE4\xCB\xE4\xDC\xE4\x98\xE4\xDE\xE4\x4D\xBA\x59\x08\xE2\xE4\x40\xD9\xB2\xD8\xA2\xD9\x1D\xCB\x9E\x1D\xA9\xE4\xEE\xE4\xD1\x3E\xAE\xE4\xF1\xE4\xD0\x12\xF3\xE4\x8B\xE4\x9D\xE4\x20\xD9\xB5\xE4\xA0\xE4\x51\xD9\xB8\x0D\x04\xD9\xD8\xE4\xFB\xE4\xAD\xDD\xFD\xE4\xA0\xE2\xC0\xE4\x9B\xE4\xF4\xE4\xF0\xD8\x03\xE5\x9F\xE4\x33\xD9\x02\xD9\x50\x59\x3C\xCB\x3E\xCB\x1C\xC5\xD9\xE4\x2E\xDA\x46\x66\xCC\xE4\xE4\x03\xCE\xE4\xA6\xDD\xD0\xE4\xF8\xE3\xD2\xE4\x4F\xD9\x21\xD9\x05\xE5\xB6\x09\x24\xD9\x27\x01\x26\xD9\x09\xE5\x98\x82\x1D\xE5\x0C\x06\x1F\xE5\xDF\xE4\x00\xE5\x90\xD9\xF5\xE4\x0F\xD9\xF7\xE4\x35\xD9\x2B\xE5\x78\xE4\xEF\xE4\xBE\xE4\xFE\xE4\x04\x01\x31\xE5\x33\x04\xC3\xE4\xAC\xBE\xE7\xCA\xB6\x09\x43\xD9\xF3\xB7\xFA\xE4\x2C\xE5\x39\xE5\xCD\xE4\x3B\xE5\x1B\x3D\x21\xE5\x85\xD8\x88\xAC\x9E\xE4\x1B\xCB\x09\xE4\x54\x69\xAA\xCB\x45\xE5\x38\xE5\xFC\xE4\xDD\xE4\x0D\xE5\xCF\xE4\x0F\xE5\x01\xE5\x47\xCB\x4E\xE5\xC5\xE4\xB7\xCB\x27\x01\xB9\xCB\x37\xE5\x84\xE4\xAC\xDD\xD0\x11\x0C\xE5\x7C\xE4\x58\xE5\x8A\xE4\x32\xE5\x11\xE5\x8D\xE4\x25\xE5\x14\xE5\xB5\xD8\x84\xE3\xD6\x12\x50\xE4\xB6\x71\x20\x59\x72\x68\x8A\x43\x6B\x0A\xB4\x7A\x56\xE3\x09\x01\x6D\xD8\x64\xE3\xF0\x58\x5C\x59\x8F\xDD\x65\xE5\x8E\xB8\x9A\xE4\xD8\x58\x7F\xE4\x06\x01\x81\xE4\x1C\xC5\x96\xDD\xBB\xE3\x1D\x59\x43\xCC\x26\x06\x2F\xE5\xF2\xE4\x4B\xE5\x23\xE5\xA1\xD9\x6C\xE5\xE6\xE4\x7F\x0C\x8F\xE4\xB1\xC3\x02\x01\x30\xE2\xA2\xE0\xB2\x5E\x87\xE5\x57\x59\x7E\xE5\x56\xE5\x66\xE5\x20\xE5\x59\xE5\x69\xE5\x8C\xE4\xF6\xE4\x91\xE5\x83\x51\xA1\xE4\x32\xE4\xE7\x41\x34\xE4\x4D\x40\xA7\xE4\xA6\xD8\x78\xC7\x9A\xE5\x56\x59\x9C\xE5\xF0\xE4\x57\xE5\x9F\xE5\x68\xE5\xB2\xE4\xE3\xE4\x24\xE5\x04\xE5\x6D\xE5\x94\xD9\x1D\xE1\x9E\xD0\x2D\x69\xAE\xE5\x55\x59\xB0\xE5\x3A\xE5\xB2\xE5\x30\xE5\x21\xE5\x3F\xD9\x6A\xE5\xC2\xD8\x41\xE5\x19\x59\xB8\x5B\xC5\xD8\xAD\xE5\x7D\xE5\x89\xE5\xFA\x84\x7B\xE4\x80\xE5\xB0\xE4\xA0\xE5\xB5\xE5\x33\xE5\x92\xD9\xA4\xE5\x8B\xAC\xD6\xE4\xA3\x7B\xCC\xE5\x5B\x59\xC0\xE5\x48\xE5\xC2\xE5\x8D\xE5\xD3\xE5\x76\xE4\x8F\xE5\xB4\xE4\x13\xE5\x92\xE5\x6E\xE5\x2B\xDB\xEA\xE4\x00\x00\xEC\xE4\xCE\xE2\xBE\xE5\xA7\xCE\xF0\x5D\x61\x57\x67\x03\x7F\xE5\xA6\xB8\x89\xE4\x26\xCB\x10\xE5\xA2\xE5\x34\xE5\xD7\xE5\x12\xD9\xF4\xD8\xF9\xE4\xDB\xE5\x5A\x59\xDD\xE5\x1E\xE5\x49\xE5\xE0\xE4\x1D\xD9\xF6\xE5\x02\xE5\x6B\xE5\xB8\xE5\xE6\xE5\x42\xE5\x07\xE5\x3F\x3F\xDF\xA0\xED\xE5\x18\x68\xCE\xE5\xF2\xE5\xC6\xB8\x81\xE5\xF5\xE5\x5A\xE5\x54\xCB\x5C\xE5\x49\xCB\x16\xE5\x14\xD9\xFD\xE5\xAE\xE3\x0F\xE6\x9D\xE5\xD1\xE5\x0E\xE5\xB4\xE5\xE2\xE5\xB3\xE4\xD0\xD8\x4F\xE5\x22\xD9\x4A\xCB\x29\xE5\x0C\xE6\xCD\xE5\x9E\xDD\x6B\x0A\x10\xE6\xE6\xB8\xD2\xE5\x20\xE6\xD1\xE4\x22\xE6\xD4\xE4\x73\xCB\x36\xE5\xF7\xBD\x0D\xE6\x1C\x5A\x1C\xE6\xB1\xE5\x9E\xE5\xC3\xE5\xE1\xE5\x8E\x05\x3F\xE5\xB8\xBE\xC8\xE5\x67\xCB\x44\xE5\x1A\xE6\x88\xE5\x2A\xE6\xF1\xE5\x1D\xE6\xF3\xE5\x12\xE6\xE1\xE4\x14\xE6\x71\xCB\x16\xE6\xD5\xE4\x51\xE5\x86\xD9\x28\xE6\xDC\xE5\x38\xE6\xC1\xE5\x3A\xE6\xE0\xE5\x2F\xE6\x22\xE5\x31\xE6\xE5\xE4\xA5\xE5\x6E\xE5\xB8\x5B\x96\xD9\x43\xE6\x9B\xE5\x53\xE6\xDE\xE5\x55\xE6\xFF\xE4\x8E\xE5\x59\xE6\x8E\xE4\xE3\xE3\xF1\xE1\xF9\xD1\xD6\x36\x72\xE4\xE8\xAD\x5B\x91\x36\xC7\xA5",
"\xC5\x37\x9F\x16\xD1\xB9\xE2\x15\x33\x51\xDA\xAA\xAD\x53\xDA\xD9\xDA\xF5\x64\xDE\xDD\x8A\xBB\x9C\xBE\x59\xDA\x40\xE3\xBC\xE5\x00\x6C\x7A\xE6\x29\xC5\x89\xAE\xC7\xE2\x8F\xDA\x0C\xCD\xCD\xE2\xDA\xE2\x03\x01\x81\xE6\x82\xCF\x0D\xB0\xD2\xE2\x6F\xDA\x1E\xE3\x00\xCD\xD9\xE2\xC9\xE4\x02\x01\x8A\xE6\xCB\xCF\xAC\xAF\xDE\xE2\x43\x4F\xE0\xE2\xA7\xDA\xB3\xD7\xCB\xE2\x5E\xCC\x12\xCC\x1C\xC5\x94\xE6\xB7\xD9\xC5\xD0\xFA\x02\xDF\xD7\x48\xAD\xF7\xE2\xF4\xB6\xCA\xE2\x33\xE3\xAA\xDA\x11\xDA\xD1\xCC\x5A\xCB\xA0\xE6\x27\xD0\x83\xE6\xF6\xE2\xF1\xD7\xA7\xE6\xD5\xE2\x9C\xE6\x68\xCC\xFF\x00\x91\xDA\xCE\xE2\xAE\xE6\xFE\xE2\xB0\xE6\xDB\xC6\x99\xDA\x32\xE3\xB7\xDA\xAA\xE6\x20\xE3\xCD\xBD\x08\xCC\xBA\xE6\x41\xE3\xBC\xE6\x61\xBA\x42\xCC\xF2\xCE\x6F\xCC\xA8\xE6\xC0\xE6\x1F\xE3\x0D\xC7\x06\xDA\x88\xE6\x93\xE6\xF8\xAF\x0B\xDA\xB4\xDA\x9A\xE6\x0E\xDA\xD6\xE2\x00\xCD\x22\xE3\xA1\xE6\x21\x0A\xC5\xE6\x7F\xE6\xC7\xE6\x8D\xDA\x96\x99\x27\xE3\xE1\xE2\x37\xCF\xCD\xE6\x00\xCD\x2C\xE3\xD1\xE6\x01\x01\xDD\xE6\xC4\xD0\xDF\xE6\x04\xE0\xEF\xBD\x63\x76\x25\xDA\xD6\xE6\x27\xDA\xEF\xE2\xD6\xDA\x69\xCC\xD8\xDA\xEF\x98\x9F\x61\xEA\xE6\x02\xD1\x0D\xB0\x3A\xE3\x19\x78\x50\xC2\xF9\xE6\x66\xAF\x68\xC2\x75\xCC\x59\xE2\x7E\xE6\xA9\xD7\x71\xE6\xCA\xD1\x68\xAD\x72\xB7\x30\xC7\x0D\x10\xEF\xDA\x54\xA1\x32\xD2\x8C\xBC\xBC\xE0\xA7\xC8\x9F\x61\xC1\xDF\x3E\xE0\x97\xB6\x77\xDB\x1D\xC9\xFF\xDC\x1F\xC9\x7C\xDB\xED\xD3\x1D\xB1\xEF\xD3\x73\xAF\xD2\xDF\xF9\xDB\x93\xE1\xFF\xBE\xC2\xE0\x93\xBF\x8D\xE0\x92\xC2\x16\xDE\xE1\xD4\x7C\xCF\xE4\xD4\x16\xD2\x10\xE7\x00\xD0\x12\xE7\x57\xE0\x29\xB6\xF6\xDF\x4C\xD5\x5B\xE0\xA9\xDB\xF7\xA6\xD2\xDC\xF9\xD6\x2E\xE0\xAE\xDB\x30\xE0\xFD\xD6\x21\xE7\x2E\xA3\x8B\xE0\x30\x9B\x25\xDB\x7F\xE0\x27\xDB\x2F\xD2\x29\xC8\x93\xE0\x1A\xDE\x2D\xC8\x35\xD2\x02\x01\x13\xE7\xAC\xDF\x43\xB4\xDC\xDF\x5E\xDF\x0F\xE0\xF5\xD6\xDB\xDB\x35\xE7\x2C\xE0\xD3\xDC\x8D\xDF\x52\xDB\x8F\xDF\x2E\xD7\x62\xE1\xCE\xDB\x49\xDE\xB3\x0D\xAC\xCF\x4F\xAE\x4B\xD2\x27\xC5\x4C\xB1\xD7\xB1\x4A\xE7\x6C\xE4\x0E\xDF\x55\xDE\xDE\xD0\x7D\xDE\x61\xDF\x7F\xDE\x1D\xDD\x81\xDE\x1F\xDD\x62\xE0\x21\xDD\x9A\xDC\x23\xDD\xDD\xE0\xBA\xE0\x5B\xC8\x59\xDB\xC3\xCF\x73\xB8\xA6\xD5\xD3\x61\x4F\xDE\xDC\x8D\x63\xE7\x39\xDE\x4F\x8C\x3F\xE0\x0E\xE0\x05\xDE\x60\xDF\x4C\xDF\x6D\xDE\x4E\xDF\x6F\xDE\x50\xDF\x66\xDF\xAE\xDC\xA5\xDF\x7A\xE0\x9A\xE0\xB1\x78\x71\xDB\xB3\xD7\x21\x0A\x7C\xE7\x52\xDE\x7E\xE7\x15\xE7\x40\xE0\xB0\xDF\x42\xE0\xC8\xDE\x44\xE0\xCA\xDE\x96\xDC\x66\xD5\x79\xDF\xE7\xDE\x00\xE0\xE8\xE0\x8C\xE7\x56\xB8\x60\xBC\x0E\xC3\x2C\xE7\xA3\xC0\x2E\xE7\x14\xE7\x7B\xDE\x7D\xDC\x3E\xDE\x3C\xDF\x4D\xDD\x9B\xDE\x4F\xDD\x38\xE7\xF7\xDB\x1F\xE7\x4B\xDC\x3C\xE7\xC3\x29\x9A\xDB\x14\xDE\xC5\xE0\x05\xD0\x26\xC3\x9F\xDB\x0E\xE1\xA1\xDB\xD4\xDB\x91\xE7\x68\xDE\x47\xB6\x5D\xDF\x23\xDF\x28\xE0\x10\xE0\xAC\xE7\xEB\xDD\xAE\xE7\xED\xDD\xB0\xE7\xEC\xDC\x63\xE0\xEE\xDC\x65\xE0\x26\xDC\xE5\xDB\xA4\xDE\xD2\xE0\xE8\xDB\x00\xD3\xD7\xDE\xE1\xB8\xA9\xDE\xA7\xE7\x4B\xE7\x21\xDF\x58\xE0\x31\xE7\x55\xDC\x66\xDD\xFC\xDE\xE2\xDE\x69\xDD\xFF\xDE\xBF\xDC\xFE\xDF\x6C\xDB\x9F\xE7\xF8\xE0\xA1\xE7\x78\xAF\xBC\xDE\x39\xD0\x78\xE7\xB8\xBF\xA8\xD5\x98\xD1\x27\x01\xBF\xE7\x92\xDE\x85\xDF\x0F\xDF\x37\xD5\x79\xDB\x24\xDE\x3A\xD5\x26\xDE\x03\xDD\x22\xC9\x05\xDD\x5B\xDC\x2A\xDE\x40\xD5\xE6\xE7\x06\xE1\xE8\xE7\x52\x91\xE6\xDB\x6B\xC5\xEE\xE0\xFD\xE0\x7B\xC5\xF9\xC8\xF2\xDE\x92\x8A\x6F\xAB\xF1\xE7\xAC\xDE\x65\xE7\x59\xE0\xF0\xD0\xCA\xDF\x5C\xE0\xEA\xD3\x5E\xE0\xFB\xDF\xE3\xDF\x09\xD2\xA3\xDF\x27\xD6\x60\xDE\xB4\xE7\x56\xD4\xFA\xD2\xEC\xDE\x36\x05\xEE\xDE\x07\xE8\x1C\xD3\xB9\xDB\xDC\xD5\x6F\xBB\x04\xDC\x85\xA7\x0D\xE8\xC3\xDE\x0F\xE8\xDC\xE7\x41\xE0\xDE\xE7\x26\xDF\xFD\xDE\xBD\xDC\xE2\xE7\x6B\xDD\xE4\xE7\x73\xDC\x53\xDF\xA5\xE0\x02\xE8\x7D\xB1\x17\xDC\x28\xE8\x2F\xE7\x62\xB6\x27\xE0\x5F\xDF\x29\xE0\xC6\xE7\x40\xDE\xC8\xE7\x42\xDE\x55\xE7\xE0\xDB\x57\xE7\x1F\xDB\x59\xE7\xF4\xD3\x3F\xE1\x2F\xB5\x4A\xD3\xB4\xDC\xC0\xDF\x3C\xE8\x4B\xDF\xDF\xE7\x4D\xDF\xE1\xE7\x77\xDF\x00\xDF\x51\xDF\x02\xDF\x00\xE8\x0C\xE1\x15\xE1\x62\xA6\x31\xDF\x84\xBB\x5E\x6F\x90\xE7\x50\xE8\x7C\xDE\x80\xD4\x69\xE7\xCD\xDF\x80\xDE\xCF\xDF\x6D\xE7\xD1\xDF\xCC\xE7\x1B\xE8\xCE\xE7\xEE\x6A\xBB\xE5\xA6\xE7\xF5",
"\x64\x29\xE8\xDC\xDE\x9A\xDF\x86\xDF\x81\xE7\x40\xE8\x64\xE8\xAD\xE7\x8B\xDF\x9C\xDE\x45\xE8\xD5\xDC\x47\xE8\x54\xDB\x19\xE0\x8D\xD6\xD6\xDF\xDA\xD1\x58\xDF\xD9\xD0\x5A\xDF\x9C\xA7\x71\xE8\xF7\xDE\x73\xE8\xF4\xE7\x78\xDB\x11\xDF\x5D\xE0\xB4\xDF\xC5\xD6\xBC\xA4\xC7\xD6\x51\xDD\xB2\xE7\x53\xDD\x1C\xE8\xD9\xDC\x04\xD6\xEB\xD0\x9F\xD3\x4E\xE8\x00\x00\x87\xE8\x0D\xDF\x89\xE8\x66\xE7\xAE\xD5\x23\xDE\xCA\xD0\xF8\xE7\x92\xDB\xCE\xD0\xB6\xDF\x50\xC3\xB8\xDF\xB6\xB9\xBA\xDF\x2F\xE1\xAA\xBB\x8A\xDC\xF2\x82\x9C\xE8\x20\xDF\xF3\xE7\x9F\xE8\xFE\xDC\xA1\xE8\xB0\xD5\x25\xDE\xA4\xE8\x04\xDD\xA6\xE8\xBC\xC3\xA8\xE8\x7A\xBF\xAA\xE8\x36\xE1\x8E\xBB\x96\xE1\x12\xD1\x7D\xD6\x07\x97\x7B\xE7\x61\xE8\xAA\xE7\x4D\xD5\x51\xE7\xF4\xB5\x79\xE8\xAF\xE7\x7B\xE8\x44\xDE\x7D\xE8\xE2\xDB\x6C\xE8\xB1\xD3\x4B\xE8\xF9\x58\xC7\xC9\xFC\xC3\xAF\xE8\x36\xDF\x4C\xE7\xF5\xDF\x4E\xE7\x75\xE8\xC5\xE7\x77\xE8\xC7\xE7\xCA\xE8\xC9\xE7\xCC\xE8\x9E\xDE\xCE\xE8\xD7\xDC\x95\xE8\x55\xDD\x36\xD0\x46\xE1\xBF\xC5\x3A\xD1\x81\xDF\x06\x01\xD6\xE8\x84\xDF\x2B\xE8\xDA\xE8\x72\xDF\x9D\xDF\x74\xDF\x22\xD5\x4F\xD4\xFC\xDF\x1C\xD4\x9D\xE7\xE6\xDF\x19\xDF\x6A\xD5\x38\xE8\x3F\xD6\xB8\xD6\xC9\xD3\x6E\xA8\xBB\xD6\x3C\xB0\x9B\xE8\xC5\xE8\x19\xDD\x82\xE7\x52\xE8\x84\xE7\x54\xE8\x86\xE7\x78\xDF\x57\xE8\x7A\xDF\x36\xE8\xB0\xE0\xFC\xE8\x4D\xE0\xED\xE6\xD0\xC5\x59\xDD\xD2\xC5\xD1\xD6\x8B\xA8\x81\xE1\x5E\xE1\x0C\xE8\x04\xE9\x16\xE7\x31\xC9\x18\xE7\x33\xC9\xC6\xB9\x80\xD5\xA5\xB1\xCF\xC3\x8D\xB0\xD1\xC3\x31\xE0\xD0\xE8\xA2\xDE\x56\xDD\x15\xCF\x66\xE1\x4F\xE0\x2F\xC1\x42\xD4\x3E\xB6\x52\xE0\xCA\xA4\x6C\xE1\xEF\xE7\x09\x01\xED\xE8\xD7\xBC\xEF\xE8\xC3\xE7\x3F\xE8\xDC\xE8\x83\xE7\x62\xDF\x6E\xDE\x64\xDF\x70\xDE\x88\xE7\x72\xDE\x8A\xE7\x89\xE0\x1A\xE0\x0C\xDD\x89\xE1\x14\xE9\x28\xDD\xD3\x02\x34\xCA\xEC\xE7\x36\xCA\x1A\xE9\xA8\xE7\x4A\xDF\x62\xE8\xD1\xD4\xBA\xD2\xE0\xE7\xFE\xDE\x55\xE8\xE3\xE7\xF8\xE8\xFF\xDF\x0E\xE9\xC0\xE0\x72\xE7\x6A\xB3\x90\xD1\xEF\xE0\x08\xC0\xFB\xC5\xA5\x79\xF2\xE0\x3C\xE0\xBE\xE7\x1B\xE9\x95\xE7\x5A\xE0\xAB\xD6\x13\xE8\x7A\xDB\x15\xE8\x64\xD0\xF6\xE8\x51\xD4\x40\xE9\x52\xDF\x42\xE9\x99\xE0\x5B\xE9\x03\xE0\x18\xD3\x06\xC6\x8E\xD4\x8E\xD5\x90\xE1\x92\xE7\xD8\xE7\x64\xE7\x9E\xE8\x10\xE8\xC9\xD5\x68\xE9\x34\xE7\xC9\xE8\xCE\xDF\x8C\xDF\xD0\xDF\x8E\xDF\x93\xE8\x43\xDF\xE5\xE8\x48\xDE\xB2\xC9\x68\xE0\xC0\xB3\x98\xE1\x9F\xC1\x6C\xE0\x07\xBC\x82\xCA\x6F\xE0\x7A\xDD\x71\xE0\x38\x81\x65\xCF\xEB\xE8\x03\x01\x74\xE0\xF6\xC9\xC4\xE7\x50\xE7\x89\xDF\x52\xE7\x43\xE8\x14\xE0\xE1\xE8\x16\xE0\xE3\xE8\xF1\xDD\x27\xE9\x2A\x91\x3E\xE7\x03\xE8\xB8\xE7\x27\xE7\x44\xA9\xE2\xD4\x0C\xC8\xA2\xC5\x12\xA3\xA5\xE7\x0E\xC4\x2D\x69\x9A\xE9\x54\xCA\x2C\xE8\x96\xE7\x2E\xE8\xE0\xDF\x30\xE8\xA0\xDF\x32\xE8\xA2\xDF\x34\xE8\xC1\xDC\x59\xE8\x14\xE1\xC1\xE0\x7C\xE0\xB1\xE1\x40\xAA\x03\xBF\xFE\xD4\xC5\xDC\x41\xC7\x95\xE0\xE7\xD4\xB4\xE9\xBB\xCB\x05\xE9\x76\xE8\x3B\xE9\x6A\xE7\x63\xDF\x6C\xE7\x65\xDF\x6E\xE7\x67\xDF\x70\xE7\x69\xDF\x73\xE9\x9B\xE0\x21\xC5\x9D\xE0\x90\xCC\x9F\xE0\x46\xC8\x61\xE7\xB1\xCF\xCC\xE9\x4F\xE1\x29\xC4\x7E\xE9\x56\xDE\x25\xD7\x81\xE9\x0D\xD6\x53\xE7\x37\xE7\xA2\xE9\x2F\xE0\xA4\xE9\x46\xDE\x89\xE9\x62\xDE\xE7\xE8\x4A\xDE\x75\xE7\x2E\xD5\x5D\xE1\x54\x69\x66\xB1\xFC\xC3\xE2\xE9\x9E\xCA\xF6\xC7\xE5\xE9\x67\xE7\x63\xE8\xD0\xE9\x65\xE8\x6B\xE7\x67\xE8\xD4\xE9\x69\xE8\x6F\xE7\x64\xE0\x7F\xE8\xEA\xDE\xF1\xD5\x64\xDE\x55\xB4\x44\xD6\xFA\xE9\x0D\xD4\xB4\xA3\x66\xE9\x11\xE8\xE7\xE9\xC8\xE8\xE9\xE9\xA0\xE9\x2D\xE0\xEC\xE9\x39\xE7\xEE\xE9\xA0\xDE\xA6\xE9\x7B\xE1\x57\xDB\x0E\xE7\x87\xDB\x98\xE9\x02\x01\x0E\xEA\xDC\xDC\x99\xC8\x38\xE9\x4F\xE7\xB1\xDF\xE8\xE9\x4B\xD6\xF8\xD6\x0C\xD5\xCA\xE7\x92\xE8\x6A\xE8\x85\xDE\xF0\xE9\x87\xDE\x23\xE7\x12\xC5\x25\xE7\x14\xC5\xB9\xE7\x55\x83\x07\xD0\xBC\xE7\x37\xBB\xD4\xDB\x23\xEA\xDC\xCA\x51\xE8\x2F\xE8\x53\xE9\x31\xE8\x55\xE9\x33\xE8\x57\xE9\xE5\xE7\x59\xE9\xDC\xE0\x44\xE9\x29\xB9\x04\xE8\x1E\xD0\xD3\xE0\x5E\xE9\xD5\xE0\x57\xD0\xD5\xE7\x31\xB9\x24\xD0\xCB\xE9\x22\xCA\xC7\xDE\x24\xCA\x99\xE7\x34\xC9\x21\xE9\x7B\xB2\x34\xDC\x97\xC1\xFA\xE8\x17\xD7\x5B\xE8\x2F\xDE\x07\xE3\xE3\xD2\x8D\xE1\x3B\xE0\xEE\xE7\x5F\xD4\x21\x0A\x3D\xEA\xFE\xCA\x3F\xEA\xB9\xE9\x41\xEA\xBB\xE9\x43\xEA\xBD",
"\xE9\x45\xEA\x35\xE8\x71\xE9\x37\xE8\xD9\xE9\xF2\xC8\xBB\xD5\x59\xBB\x06\xE8\x37\xE0\x23\xE8\x09\xE8\x00\xE1\xFB\xC8\x52\xE1\x67\xEA\x27\x01\x69\xEA\x10\xCB\x50\xE9\x0B\xD6\xB3\xDF\xAC\xBA\xB5\xDF\x90\xE8\x46\xD7\x8D\xAF\x48\xD7\xBD\xE8\x44\xE1\xD0\xE0\x1F\xE8\x34\x09\x1A\xD3\x22\xE8\xDA\xD5\x24\xE8\x0A\xE8\x26\xE8\xF4\xDE\x9C\xA7\x82\xEA\xA5\xD4\xE4\xE9\xB6\xE9\x67\xE9\x12\xE8\x29\xEA\x6F\xD6\x5B\xDE\xEE\xD3\xFE\xD5\xBA\xD1\x2F\xEA\xD3\xDF\x31\xEA\xB9\xE0\x82\xA7\x34\xD3\xE0\x8E\xF9\xE9\x55\xEA\x92\xDC\xF9\xDF\x94\xDC\x16\xE8\xA1\xDF\x6A\xDB\xBE\xE9\x6D\xDD\xC0\xE9\xD0\xDE\x0D\xE1\x90\xD2\x05\xD6\x10\xE1\x5F\xDB\x22\xEA\xAE\xEA\x20\xD5\xF3\xE8\xB2\xDE\x07\xD2\x17\xE8\x25\xD5\x19\xE8\x75\xD6\x47\xEA\xA0\xE7\x75\xEA\x56\xB8\x5D\xE8\x60\xD3\xBE\xEA\x9B\xE9\x39\xE9\x9D\xE9\x2A\xE0\x8A\xDF\x83\xE9\x7A\xE8\x85\xE9\x56\xE7\x87\xE9\x90\xDF\xA8\xEA\x99\x96\xC0\xD0\xD8\xCA\x88\xDB\x01\x01\x9A\xEA\x7B\xD6\x3E\xC4\x9D\xEA\x12\xEA\x33\xDB\xA0\xEA\xC3\xD6\xA2\xEA\x1C\xE7\xA4\xEA\xF0\xD3\x3A\xE7\x05\xDB\x08\xEA\x56\xDB\x67\xE0\x72\x75\x76\x9D\x43\xD6\xBD\xEA\xDF\xEA\xBF\xEA\xDF\xDF\xC1\xEA\x9F\xDF\xE2\xDF\xB3\xEA\x71\xDC\xB5\xEA\xB7\xDE\xB7\xEA\xE9\xDE\xEF\xEA\xBD\x75\xFA\xC3\x6D\xDF\x85\xA7\xE0\xEA\xB9\xD6\xCD\xC8\x8A\xE8\x17\xE7\xB4\xE8\x00\xDD\xA3\xE8\xE8\xEA\x73\xB1\x1D\xE7\x67\xB0\x2E\xD3\x3C\xAA\x55\xE1\x0B\xC4\xC1\xB2\xAA\xC5\xE2\xDD\xB3\xE9\xF6\xEA\xF8\xDF\x57\xDC\xFA\xDF\x6C\xE9\xC4\xEA\x16\xDF\xC6\xEA\x18\xDF\xFF\xEA\x04\xDF\x80\xE8\xE3\xB0\xFE\xE8\x53\x78\x3A\xE1\x2E\xC9\x81\xEA\x1A\xEB\xF2\xE8\xB0\xEA\x75\xDF\x14\xDF\x1F\xEB\xFD\xDF\x71\xEA\xBF\xE9\xC8\xEA\xE7\xE7\xCA\xEA\x5F\xB9\xAB\xBB\xAA\xDF\x05\xEB\x2C\xEB\x06\xE9\x40\xEA\x53\xE8\x54\xE9\x0A\xE9\x56\xE8\x6F\xE9\x58\xE8\x35\xEB\x01\xE8\x37\xEB\x56\xC3\xF1\xDA\x47\xE1\xEA\xE8\x47\xDF\x9F\x61\x06\xEB\xFF\xE8\xFC\xE9\xE3\xEA\x7F\xE9\x9F\xEA\x14\xEA\x2A\xEA\x36\xE7\x2C\xEA\x18\xEA\xB1\xE7\xA6\xEA\x20\xE7\x1C\xEA\x94\xE1\x4D\xE1\xD7\xDF\xF8\xC0\xD9\xDF\x2D\xDD\xE6\x5A\x4E\xEB\x7D\xC9\x9B\xDF\x7F\xC9\xBA\xC9\xCF\xCF\x1D\xEB\xD4\xD4\x9B\xE7\xCC\xDE\xFD\xEA\xCE\xDE\x23\xEB\x1A\xDF\x49\xEA\x79\xD1\xEB\xDF\x76\xC4\x16\xE9\x46\xBA\x41\xD6\x29\xD4\xF1\xDF\x8E\x9E\x2B\xEB\xCF\xEA\x27\xEA\x97\xE7\x57\xEA\x6A\xEB\x31\xDC\xCB\xDE\x33\xDC\x94\xD0\x35\xDC\x07\xEA\x9B\xDC\x72\xEB\x34\xB3\x0D\xDD\x47\xE9\x0A\x80\xEB\xD6\x66\xBA\x12\xDD\x90\xBB\x32\xE9\x80\xEA\x09\x01\x64\xEB\xCA\xC9\x66\xEB\xCC\xC9\xCF\xE9\x07\xE9\x3C\xE9\x85\xE7\x3E\xE9\x87\xE7\xD5\xE9\x89\xE7\xD7\xE9\xA6\xDF\x47\xEB\x7F\xBA\x5D\xE9\x93\xEA\x33\xCB\x64\x09\x4A\xE9\x30\xE9\xB8\xBF\x77\xE1\xBE\xBC\x4D\xEB\x3C\xEB\x99\xEB\x3E\xEB\x08\xE9\x40\xEB\x9D\xEB\x0B\xE9\x43\xEB\x0D\xE9\x73\xEA\x0F\xE9\xA3\xEB\xEA\xDF\x72\xE1\xD4\xE0\xB0\xB0\x80\xE1\x4D\xDE\x82\xE1\x6F\xAB\x95\xEB\x93\xA8\x1C\xE9\x91\xC9\x0B\xEB\x19\xE7\x02\xDD\x7D\xDB\x84\xC9\x47\xE0\x07\xDD\xC3\xD3\x2C\xDE\xC5\xD3\xB9\xEA\xEB\xC5\x26\xDD\x2C\xE9\x5B\xDD\x45\x0C\xF9\xBB\x5D\xE1\x69\xCA\xF2\xBA\x3B\xD7\x08\x59\xAF\xEB\x3A\xE9\x9A\xEB\xD1\xE9\x3D\xE9\xD3\xE9\x3F\xE9\x9F\xEB\x41\xE9\xA1\xEB\x8B\xE7\xBA\xEB\x61\xC4\x27\xEB\xC4\x84\x8E\xE9\xF4\xC4\xA0\xC1\x91\xE9\x64\x09\x52\xD7\xCD\x84\x9F\xE1\x4B\x72\x94\xC8\xF5\xE0\x01\x01\xC7\xE1\x45\xEB\x5A\xE8\xC2\xE9\x11\xDE\x76\xCF\x13\xDE\xD2\xDE\x41\xE7\xFD\xD4\xE7\xB3\x29\xDB\xAF\xE9\x48\xA9\xB1\xE9\xD2\x66\x03\x01\xF8\xEB\xB8\xEB\x5A\xE9\xDB\xD4\x33\xEA\xAA\xD2\x35\xEA\x04\xD0\xAB\xE9\x0E\xA3\x60\xA6\x82\xE0\x45\xE7\xAA\xAD\xCA\xE9\x84\xE1\xBB\xB7\x26\xBB\xB6\xB8\x85\xD5\x60\xEA\xBB\xDE\x9C\xE0\x49\xD2\x9E\xE0\x43\xDB\xA0\xE0\x8C\xD7\x7F\x5D\x08\xEC\x1A\xEC\x98\xDB\x36\xC4\xCF\xDB\x62\xD2\x51\xBF\x1B\xBB\xA8\xAD\x5E\xDB\x33\xE1\x6D\x61\x09\xEC\xE6\xEB\x43\xE9\x25\xEB\xD9\xCF\xF9\xC2\x67\x95\xEE\x78\xB2\x5E\x32\xEC\x87\xEB\x71\xE7\x89\xEB\xA2\xD5\x93\xC8\x06\xEC\x96\x69\x26\xEC\x39\xC9\x69\xB4\x28\xD2\xFC\xEB\x2A\xD2\x09\xDB\x8A\xDE\xFB\xCD\x70\xD5\xAE\xD2\x0F\xDB\xFF\x00\xB0\xD2\xC0\x65\x21\x0A\x3B\xEC\xCD\xE7\xEE\xEA\x66\xE0\x1E\xE8\xB4\xDB\xCE\xB1\x7A\xEA\x94\xEA\x7C\xEA\x38\xD7\x89\x9C\x7A\xEB\x5D\x6A\x43\xEC\xC4\xD3\x45\xEC\xD1\xEB\xD9\xC9\xA8\xDA\x38\xD0\x88\xC3\x66\xEA\x03\x75\x52\xEC\x27\xEC\x8D\xEA\x70\xE1\x8F\xEA\xB4",
"\xDB\xBD\xD5\x5A\xEC\xF0\xDE\x95\xEA\x7D\xEA\x03\xD3\x5F\xEC\x5C\x7B\x6B\xEC\x44\xEC\xD2\xB4\x03\xC6\xD5\x69\x4B\xA4\x05\xC0\x4D\xA4\xBD\xEB\x8D\xD5\x62\xE9\x0E\xC0\x71\x97\x79\xEC\x62\xEC\x7B\xEC\xD8\xC9\x2B\xC9\xAB\xEA\x07\x9D\x98\xE5\xE6\x5A\x53\xEC\x6B\xE8\x55\xEC\xCF\xE7\xD2\xE8\xF5\x5A\x29\xDC\x8D\xEC\x31\xEC\x6C\xEC\xAC\x8A\xB8\xE0\x92\xDF\x21\xAA\xCC\xEA\x78\xC7\x8F\xEC\x30\xEA\x5C\xEB\x5A\x9D\xDC\xEA\x9B\x7A\x61\xEC\xCF\xEB\x63\xEC\x1D\xEC\x71\xDD\x57\xDF\x25\xE8\x27\x87\x79\xC0\x30\xEC\x9F\x61\x9F\xEC\xA7\xEA\xA1\xEC\xFF\xD6\x16\xD3\x78\xDC\xAF\xB2\xFA\x9F\x86\xEC\xA6\xEC\x88\xEC\x8F\xD2\x89\xB4\xB3\xD3\x80\xDF\x3C\x67\xA5\xEC\x4A\xE0\x1C\xEC\x10\xE9\x95\xB2\xDB\xDC\xDC\xCA\xA0\xDC\x89\x87\x6E\xD9\x8E\xEC\x98\xEC\xB1\x8D\xCF\xE0\x9C\xBB\x39\xEB\x41\xE1\x8D\xD8\x97\xEC\x7A\xEC\x9A\xEC\xD5\xDF\x37\xD1\x49\xEB\xE9\xE8\xC8\xDC\x18\xEC\xB0\xEC\x5B\xEB\x91\xEC\xF0\xDC\xB7\xD6\xC5\xEC\xFE\xCA\x11\xBB\x61\xA5\xBA\x69\xB8\xEC\xC1\xEC\x5F\xDC\xA8\xEC\xD8\x72\xBD\xE3\xB8\xBA\xF6\xDC\xD8\xEB\x21\xB6\x77\xEC\xAC\x76\xE5\xEC\xE7\xDF\x29\xD5\xE8\xEB\x74\xC4\x74\xEB\x8D\xC4\x2E\xE9\x31\xC1\x64\xEA\xA0\xBA\x6A\xBA\xEF\xEC\xE8\x8B\xF1\xEC\x5E\xEA\x0A\xDD\xF4\xEC\x4D\xB3\xBC\xEB\x4E\xEA\x74\xE1\x67\xCA\x14\xE9\x2C\xDD\xFD\xEC\x98\x08\xFF\xEC\x70\xEB\xFB\xE8\x02\xED\x19\xB6\xD3\xEB\x8A\xE1\xEC\xBB\xAB\xD1\xFA\xEC\xE4\xC5\x63\xE9\x04\xD3\x0B\xED\x27\x01\xDB\xEC\xB3\xE7\xB2\xEC\xFB\xDB\x29\xE9\x5D\x6A\xC1\xD1\xD4\xE0\x07\xC6\x37\xD7\x68\xCA\x0A\xC6\x4B\xEC\xAF\xE5\x3A\xEC\xCB\xEC\x8B\x93\xCD\xEC\xA2\xBB\x38\xE1\xDA\xB4\x74\xDD\x05\xBC\xC6\x79\xEF\xEB\xAA\xD4\xF8\xAB\x99\xE1\xBA\x57\x9F\xBE\x1F\x00\x13\xE4\x1F\xE4\x44\x37\x3D\xE4\xFB\x6C\x13\xA0\xDA\xB5\xF0\x25\x97\x59\x9A\x42\x3C\x7B\x21\x00\x3D\xED\x03\x01\xE0\x0D\x9D\xE2\x48\xED\x71\x5E\x02\xE2\x4C\x07\x04\xE2\x5A\x6D\x06\xE2\x1E\x00\xB7\xE3\xBD\x5B\x7E\xAE\x0B\xE2\x1C\x6F\x69\xE6\x54\xA3\x39\xED\xF4\xE1\xC4\xE3\xCC\xC0\x46\xED\x86\x76\x3F\xED\x19\x5C\xFC\xE1\x82\x5A\x44\xED\x5D\xED\x51\x01\x50\xCD\x4A\xED\xDA\x5F\x4C\xED\xC3\xB7\xBF\x71\x50\xED\x52\xED\x07\x5D\x54\xED\x1C\x60\xCB\xB7\x4E\x70\xA5\xE3\xB8\x5B\x94\x65\x7D\x6E\x6D\xED\xBC\xE1\xF2\x05\xBE\xE1\xA9\x5B\xB3\xE1\xF7\xA4\x6F\x38\x4C\xC6\x50\x59\xF1\x88\xAF\x78\x77\xED\x2C\xAC\x2B\xC6\x49\xEC\x47\x4F\x7C\xED\x55\x83\x3F\x04\xC9\xA2\x47\x4F\x68\xE6\x59\xD8\xFD\xC4\x43\x48\x3C\xBD\xEB\xC1\x96\x41\xE1\xB7\xF1\xB2\xD0\x12\xC3\x2A\xDA\x05\xF5\xE1\x9E\xE2\x64\xED\xDE\x08\x81\xAD\xCE\xC1\x94\xED\x43\xE4\xE0\xB7\x68\x0B\x98\x08\x96\xCB\x40\xB2\xBA\x4B\xC3\x2A\xFD\xAC\xFD\x0C\x92\x43\xDB\x60\x2D\xD9\x83\xD8\x3C\x7B\x64\xBE\x63\xCE\xCA\xCA\x2A\xAD\xF5\x58\x68\x0B\xC1\xDD\x96\xED\xA2\xED\x5A\xD9\x62\xE5\xA7\xED\x1B\xE5\x3A\x0D\x4A\x06\xAB\xED\x9D\xD9\xCA\xBE\x06\x01\x75\xBE\xF7\xE3\xD0\xE5\xB9\xD7\x92\xED\xC8\x64\x9F\xED\x45\x7C\x40\x57\xC3\x2A\x98\x08\xC4\xED\xBB\xE4\xA1\xED\x59\x0C\xA8\xED\x46\x10\xAA\xED\x81\xD9\x4A\xE5\x93\x07\x3C\x7B\x2A\x00\x9B\xED\xCD\xED\xB2\xED\xD6\x07\xC8\xED\x28\xE4\x46\x66\xCB\xED\x47\xE6\xCE\xED\x91\xD7\x68\x0B\xD1\xED\x4E\x10\xD3\xED\x02\x10\x1F\xE6\x5D\xBE\xE6\x0D\x27\x00\x9B\xED\xE5\x00\x3F\xE4\xDD\xC1\xC7\xED\xB4\xED\xAB\xDD\xE0\xED\x7C\xE3\x47\xE4\xA4\x51\x2B\x9F\xBB\xED\xC0\x08\x16\x2D\xB5\xED\x17\x49\x27\x43\x3C\x7B\x26\x00\x9B\xED\xB1\xE3\xBA\xD4\x3B\xC0\xD5\x2C\xDD\xED\x08\x1F\xF3\x58\xB7\xED\x80\xE4\xF6\xED\xBA\xED\x3B\xDA\xA2\x28\xE7\xED\x7D\x6C\xB4\xD4\xE6\x0D\xCA\x2A\xEA\x9A\xD9\x00\xEF\xED\xC6\xED\xE8\x63\x06\xEE\xF8\xAC\x0B\x66\xF4\xED\x06\x01\x15\xEE\x98\x82\x0C\xEE\xDA\xB1\xE6\xED\x3A\x0C\xFC\xED\xCC\x43\xD5\x45\x3C\x7B\x1D\x3C\xF7\xE3\xF4\xB7\xBE\xEC\x65\xC0\x05\xEE\xF2\xED\x95\xED\xCF\xED\x6A\x0D\x98\x08\x2A\xEE\xB9\xED\xE4\xED\xF9\xED\x0A\x08\x23\xEE\xD7\xBC\xF7\xCD\xE6\x0D\x9F\xE2\x63\xCE\x3C\xEE\x32\xE1\xA5\xCD\x08\x05\x2E\xEE\xA0\xED\xE3\xED\x59\x0C\x98\x08\x3E\xEE\xAB\xE4\x44\xEE\x6A\x0D\xE5\xED\x08\x1F\x0F\xEE\xA7\xEB\x4B\xD9\xD6\xED\xE6\x0D\xAF\xED\xF8\xE1\x01\x01\x52\xEE\xC5\xED\x40\xEE\x2A\x01\x59\x0C\x24\xEE\xF7\xED\x98\x08\x55\xEE\xE2\xED\xF7\xED\x4B\xEE\x0E\xEE\x38\xEE\x94\xE2\xCB\xD8\x77\xD9\xD7\xED\x9B\xED\xD8\xED\x03\xEE\x2C\xEE\x93\xED\x42\xEE\xC9\xED\x1B\xEE\x09\xEE\xD0",
"\xBE\x90\xD8\x20\xEE\xF5\xB1\x22\xEE\xFB\xED\xD4\xED\x02\xE6\xA2\x02\xE6\x0D\xC2\xED\x63\xCE\x7A\xEE\x3F\xEE\x13\xCE\x42\x62\x19\xEE\x13\xE2\x98\x08\x7C\xEE\x48\xEE\x5F\xEE\x36\xEE\x4D\xEE\xB4\xAC\xB3\xE5\xEA\xED\x27\x01\xEC\xED\xBA\xB7\x8C\xEE\x2B\xEE\x92\xC0\xDC\xED\x6C\xEE\xDE\xED\xB6\xED\x45\xEE\x8B\xEE\x0B\xEE\x35\xEE\x0D\xEE\x69\x0D\x61\x09\x5A\xEE\x49\x45\xFF\xED\x9B\xED\x00\xEE\x69\xEE\x90\xEE\x2D\xEE\x59\xEE\xF3\xED\x6F\xEE\x56\x49\x97\xEE\xD0\xED\x86\xEE\x62\xEE\x10\xEE\x01\x41\x3C\x7B\x13\xEE\x46\xE2\xCA\x2A\xDB\xED\xA3\xEE\x6A\x0D\x5A\xEE\x1C\xEE\xC0\x22\xA8\xEE\x4A\xEE\xAA\xEE\x75\xEE\x2F\xEE\x25\xEE\x05\x3A\x27\xEE\x9B\xED\x28\xEE\x92\xE3\x57\xEE\x23\xBD\x92\xEE\x07\xEE\xA6\xED\xA6\xEE\x02\x01\xC1\xEE\x95\xE4\x49\xEE\x0C\x08\x60\xEE\x9A\xEE\xD1\x06\x84\xDF\x77\xE3\xE8\xE8\xAF\xD9\xEC\x5D\x6C\xE6\xED\xD1\xC7\xCF\x1A\xE5\x36\xBE\x45\x7D\x74\xCD\x49\xBD\xDC\xDD\x06\x01\x6B\xCD\xD1\xDD\x70\xBD\x06\x01\xF4\xD1\x64\xBC\x74\xE4\x70\xE6\x87\x4B\x01\xE6\x1F\x2D\x75\xE3\xD9\xE7\xDE\xC7\xB4\xE3\x62\xE3\x37\xC5\x99\xBC\x1E\xE6\x80\xAC\xCB\x07\x81\xE3\xF6\xCD\xF3\xBC\x49\xE3\xF2\xDA\x02\x5C\x92\xC5\x44\xE2\x4F\x62\xEB\x06\x41\xC7\xBC\x53\xB9\xDD\x50\xE3\x3E\xE4\xFD\xEE\x60\xE2\x15\xE2\xB8\x0D\x3C\x0A\xFC\xEE\x99\xBB\x4B\xE2\x39\xE4\x4B\xE4\x1D\x01\xA2\xE4\x98\x0C\x52\xE2\x36\xE2\xDF\x39\x57\xE2\x0D\xC3\xB3\x07\x3A\xDA\xF7\xE3\xA9\x59\xF2\x5E\xFE\xEE\x11\xBB\x00\xEF\x92\xC5\x2C\xE4\x04\xEF\x4C\xE4\x4D\xE4\x4E\xE3\x03\x01\x2F\x00\xD6\xEE\x80\xBE\xC7\xCF\x01\xD7\x37\xBE\x48\x95\xBA\xE3\xDD\xEE\x0B\xE4\x1E\x8B\x26\xEF\x8D\xED\x70\xAD\x6E\xE8\x43\x6D\x21\x0A\x99\xE2\x48\xE9\x1B\xD9\xBC\xDD\xAC\x6A\xC5\xE5\xF7\xE5\x9A\xD8\xC3\xD8\xE4\xD1\x34\xE6\xAD\xBB\x13\x06\x8C\x5A\xDB\xD8\x3C\xE6\x8C\x06\x3E\xE6\x41\xD9\xC8\xE5\x02\xE7\xF9\xEE\xB4\x2B\x30\xEF\x8C\xBE\x6E\xE6\x8A\xCC\xF7\xBD\x9A\xE3\x48\xE6\xA3\xE3\xC0\x07\x21\x0A\x3C\xCD\x04\xE4\x8B\xE3\xBA\x54\x73\xE6\x41\x77\xBB\xE2\x2B\xDB\x77\xE6\xBB\xE1\x9F\x61\x52\xEF\x11\xE6\x54\xEF\xA8\x07\x56\xEF\x8C\x5A\xB9\xD3\xC1\xE2\xA6\xCC\xAE\xEC\xF5\x64\x62\xEF\x2D\xE6\x2E\x7C\x5C\xE3\x8B\xD8\x67\xEF\x7D\xD4\x61\x40\x84\xE6\x8F\xE6\x5E\xCC\x87\xE6\x96\xE0\xF8\x02\x8C\x5A\x85\xAC\x66\xEF\x07\xD8\xDB\xD7\x82\x58\x8D\xE6\xCC\xD9\x28\xE3\x0F\xD8\x2A\xE3\x93\xBD\x2F\xB7\xBE\xBB\x6D\xEF\xA8\xDD\x64\xEF\xD1\x05\x7D\xEF\x7C\xD4\x9C\xE3\x30\x3F\x97\xE6\xC6\x01\x99\xE6\x12\xE3\x66\xEC\xE5\xE6\x9D\xE6\x87\xEF\xB2\x5E\x89\xEF\xCD\xDD\x4A\x58\x70\xEF\x2F\xE2\x72\xEF\x8F\xEF\x21\x34\xA4\xE6\x28\xD0\xA6\xE6\x43\xDA\xB4\xE6\xA9\xE6\xCE\xE6\x55\xA1\xAC\xE6\xCA\xC5\x99\xEF\x7B\xEF\xA3\xD8\x65\xEF\x71\xEF\x7E\xEF\x59\xEF\xE5\xD3\xD5\xCC\xEC\xD9\x94\xEF\x9B\xE6\xA7\xEF\x00\xCD\xB8\xE6\x6B\xEF\x2D\x69\x9A\xEF\x8E\xCD\x8B\xEF\x75\x07\x8D\xEF\x1A\xD2\x73\xEF\x24\x39\xF7\xD9\xFD\xD7\xA0\xA2\xBF\xE6\x14\xE3\x34\xE3\x9D\xDA\x17\xE3\x08\xCF\x21\x0A\xBD\xEF\xBB\xD4\x9C\xEF\x1B\x08\xC1\xEF\x58\xEF\x97\xE3\x5E\x3B\xCA\xD9\x0D\xD8\x83\xEF\xCE\xD9\xE4\xE2\x11\xD8\xAC\xDA\xD6\xD7\x88\xEF\xAD\xEF\xD1\xEF\x55\xEF\xB0\xEF\x8E\xEF\x7F\xEF\xD6\xEF\x0F\xE3\x1A\xD8\x1D\xE3\xC8\xEF\x0B\xCD\x17\xCD\xDA\xE6\x70\xA0\xCE\xEF\xE0\xEF\xBF\xEF\x11\x02\xD3\xEF\xA3\xD7\xA0\xEF\x74\xEF\x26\xE3\xC3\xDA\xCD\xD9\x1A\xCF\xCA\xEF\x86\x9A\x98\xEF\xE6\x5A\xCF\xEF\xD4\xB9\xE1\xEF\xAF\xEF\x9E\xEF\xB1\xEF\xD5\xEF\xBA\x54\x30\xE3\xE6\xD3\xE3\xE6\xCC\xE6\xC9\xEF\xC1\xE6\x4F\xCF\xF6\xE6\x19\xE1\x91\x09\xF0\xEF\x6F\xEF\xD2\xEF\xE3\xEF\xC2\xEF\xF5\xEF\x24\x39\xFC\xE6\x4F\xC2\xE7\xEE\x7A\xEF\xE9\xEE\xCB\x07\xF3\xEF\xAC\xD7\x16\xF0\x24\x3B\x36\xDA\x69\xE2\xDE\xEF\xAC\xEF\x1C\xF0\x9D\xEF\x3B\xCD\x9F\xEF\xE5\xEF\xBA\x54\xEC\xDA\x09\xF0\xF4\x81\x0C\xE7\x5D\xC2\xE4\xD1\xC5\x36\xFF\xEF\xC6\xDC\x1D\x8D\xB0\xAC\x0C\xBE\x56\x7B\x26\xF0\xA4\xE3\x31\xEF\x6C\xE3\x54\xA3\x33\x00\x71\xE5\xAB\xB4\x9B\x3B\x7E\xBE\xB8\x50\xB5\xD4\x06\x01\x59\xE4\x53\xEE\x58\xE6\x8F\xEE\xC9\xD2\x41\xF0\x65\xD7\x63\x68\x70\x45\x4E\x0C\x62\xE4\xFE\xE5\xC8\xD4\x2D\x02\x07\xE4\x4D\xE6\xF8\xCA\x0A\xE4\xB8\x0D\xB3\x07\x45\xCD\x3B\xF0\x6C\xBC\xB5\xC1\x35\x00\x3A\xED\x57\xE4\x7E\xAD\xBA\xB7\x3B\xEF\x27\xED\x89\xAD\x80\xD8\xCE\xE3\x77\x05\x54\xF0\x3F\xE6\x83\xD8\xD8\xE5\x31\xEF\x7C\x6E\x03\x01\x79",
"\xD7\x39\x99\x7B\xD7\x6C\x05\xEB\x55\x73\xD7\x32\x2C\x40\x3C\x81\xD7\x69\xD7\xBC\x55\x9F\x14\x86\xD7\x2F\x3C\xC0\x55\x25\x03\x76\xD7\x99\xA9\x63\xD7\x8E\xD7\xE8\xBE\xE3\xBC\x96\xED\xB4\x3A\x5B\xF0\xA3\xE7\xBB\x0E\x36\x00\x3F\xF0\xBB\x0D\x63\x09\x64\x56\xCD\x84\x6F\xCD\x44\xF0\xB5\xAD\x78\xAC\x16\xEE\x4C\xAC\x4F\x0D\x8F\xF0\xFC\x57\x6F\xCD\x50\xF0\xA6\xC6\x65\xD8\xC9\x34\x69\xF0\x06\xE6\xE5\xE5\x5B\xE6\x94\xD9\x88\xF0\xB5\x67\xBB\xBB\x37\x00\x86\xE3\x62\x5A\x97\x0B\x75\x44\xF6\x38\xE5\xDA\x0A\xCE\x04\x01\x66\xD8\x22\xEF\x03\xE7\x02\x01\x38\x00\xA8\xF0\x71\xC6\x8A\x0B\x64\xD8\x12\xC0\xB0\xF0\x32\xCD\x85\x96\x5F\xF0\x99\xED\x46\xF0\xD2\xE3\x37\xCB\x13\xA0\x4C\xE5\x04\x7D\xEB\x06\x9F\xF0\xA3\xE5\x07\xE6\xA2\xF0\xA3\xD9\xA4\xF0\xCB\xF0\xD7\x9E\x85\x98\x8C\xF0\x3F\xD8\x1A\x3D\x45\x58\x4C\xF0\x1A\xE2\x55\xA1\x76\xAC\x94\xF0\xA1\xEE\x96\xE3\xF0\xE3\xD0\x0A\x0F\x42\x7E\xBE\xD4\xF0\x9B\xF0\xCB\xEE\x63\xE5\xBF\x0A\xC6\xF0\xF8\xE5\xC8\xF0\x6C\xF0\xCC\xF0\x14\xE4\xAC\xE0\x86\xAD\x99\xBE\x6B\xE6\x5A\xB3\x2D\xE2\x50\x59\x9A\x09\xE4\xE1\x99\xBB\xC9\xE1\xC4\xE9\xA3\x5C\x2F\xAE\x26\x0E\x6C\x0E\x36\x42\xB8\x5B\xBB\x0B\xF1\xF0\x62\x68\xF3\xF0\x7A\xED\x2A\x5D\xF6\xF0\x63\x0E\x30\x10\x31\x62\x42\xBD\x48\xCE\x83\xED\xAF\xE1\x79\xED\x6D\xD5\x88\x5A\x01\xF1\xEA\x5A\x3C\x0E\xF9\xF0\x50\x59\xC0\x04\xFC\xF0\xA2\xE1\x18\xE4\x85\xED\xFE\xEB\x00\xF1\x03\xBF\x26\x0E\x3A\x3E\x0F\xF1\xB8\x0D\x4D\x04\x12\xF1\xAE\xE1\x40\xE4\x15\xF1\xC3\xE0\xA4\x5B\x0C\xF1\xEB\x5A\x4C\x0E\x1B\xF1\xBC\x0D\x57\x07\x1E\xF1\x60\xEF\x08\xF1\x21\xF1\x24\xE7\xA7\x63\x24\xF1\x60\x78\x96\x25\x36\x42\xE7\xF0\xB7\xA0\x15\xE4\x02\x01\x3D\x00\x3A\xED\x43\xC6\x02\x01\x9D\x29\x47\xF0\xC7\x89\x13\xA0\xD8\xC0\x36\x00\x61\xED\x2C\x62\x3C\x7B\x3F\x00\x9B\xED\x49\x00\x50\xCD\x47\xF1\xFC\x5E\x69\xED\x4E\xED\x27\x70\x06\xE2\x3C\x00\x07\xF1\x3D\x68\x59\xBA\x8B\xF0\x70\xED\x50\x9B\xBD\x6F\x57\xED\xA1\x7E\x38\xF1\x86\xC5\xFE\xF0\x0A\xF1\x59\x5C\x88\xED\x48\xAD\xAB\x42\x43\xED\x3A\xF1\x01\x01\x3C\xF1\xD2\xE3\xC7\x89\xD3\xBC\x80\xC1\x09\xF1\x86\xED\x82\x42\x5E\xF1\x28\xD0\x60\xF1\x60\x5F\x98\x08\x40\xF1\x42\xF1\x58\x64\x44\xF1\x46\xF1\xE0\x7A\x5C\xE4\x69\xF1\x16\xF1\xDB\x5B\x6C\xF1\x36\x0A\x6E\xF1\x82\x42\x98\x08\x49\xF1\x97\x5F\x4B\xF1\xA8\x09\xDF\x6A\x4E\xF1\x8C\x5A\x67\xF1\x94\x67\xCA\xE1\x29\x70\x7B\xF1\xDE\x48\x5E\x01\x9A\x42\x3C\x0A\xA1\xB6\x55\xED\x29\x70\xCD\xB7\x76\xE0\xD6\x68\x51\x5A\x12\xEB\xE9\xAB\xDA\xEA\xBD\x7C\xA8\xE9\x87\xD5\x8E\xE0\x2E\xD2\xF9\xDD\xAE\xE9\x83\xE0\xB0\xE9\x85\xE0\x95\xF1\xD2\x53\x97\xF1\xCB\xAE\x99\xF1\x21\xDB\x4C\xEB\x8F\xC2\x5C\xF1\xFF\xEB\x9D\xF1\x80\xE0\x95\xCF\x14\xEC\xA4\xD6\xE8\xE4\x17\xEC\xAC\x70\x96\xF1\xAF\xDB\x2F\xD3\x1D\xED\x1D\xE8\x39\xDC\x30\xDE\x20\xEC\xDD\xE9\x22\xEC\xDF\xE9\xB0\xCF\x51\xEC\xA5\xF1\xB7\xF1\x13\xEB\x49\xE8\x29\xE1\xC9\xA6\x2B\xEC\xE1\xC2\xAA\xE0\x2E\xEC\x7A\xE7\x20\x5C\x51\xC6\xC4\xF1\x98\xF1\xB9\xF1\x96\xE8\x42\x5F\x8E\xE7\xFE\x67\xCF\xF1\xEC\xEA\xB0\xDB\xC6\xF1\x3E\xE1\x2B\xD5\xBD\xDF\x44\x9C\x41\xEC\xA0\x7B\xB6\xF1\xD8\xF1\xB8\xF1\xDD\xEC\xF3\xDD\xC3\xE9\xFF\xF0\x53\x74\x93\xCF\xBE\xB8\x4D\xEC\x2A\xE7\x50\xEC\xBF\xE5\x58\x78\xA6\xF1\x5E\xAF\xE4\xF1\x28\xE9\xC4\xD2\x4B\xEA\x8A\xD5\xD3\xE7\xCA\xD2\xD7\xE0\xCC\xD2\x53\xEA\x81\x6D\xE1\xF1\x1A\xEA\x18\xE0\x88\xEB\x35\xEC\x73\xE7\x95\xEF\xBE\xB4\xE1\xE0\x3A\xE0\xFB\xEC\xC2\xB4\x8F\xA8\x3C\x0A\xFD\xF1\xD8\xEA\x58\xE7\xA8\xF1\x63\xE1\x3D\xA7\xD1\xE7\xE7\xDB\xA6\xDE\xD6\xE0\x88\xC3\xD9\xDE\xEE\xE5\x2D\x69\x6D\xC6\xD0\xF1\xA7\xF1\xD2\xF1\xE6\xE8\x57\xEC\x2A\xB9\xFE\xDB\x1B\xD7\xEB\xBF\x83\xEC\x02\xE1\xCF\x5F\xD7\xF1\xFE\xF1\x26\xE9\xF2\xF1\x33\xE0\x63\xDE\x83\x74\x8C\xEC\x0C\xC6\x6F\xC6\x1A\xF2\xF1\xF1\x00\xF2\x09\xEA\x97\xE8\x28\xDC\xBC\xEA\x25\xF2\x99\x79\xF0\xF1\x1B\xEC\xE7\xEC\xC3\xEC\x8F\xC5\x9D\xEC\xC9\xEC\x9D\x78\x39\xF2\x28\xEC\x27\x5C\x33\xEF\x5F\x72\x0B\xF2\x5A\xEB\x1C\xED\x29\xF2\x1D\xEA\xF0\xEA\xA4\x97\xF2\xEA\x85\xE8\x25\xEC\x38\xF2\x30\xF2\x3A\xF2\x2D\xDE\xE8\xEC\xBC\xEC\x84\xB5\x2C\xE1\x4F\xF2\x2F\xF2\xE2\xF1\xC5\xF1\x0E\xF2\x5A\xE7\x34\xF2\xFF\x00\xD1\xB9\x05\x61\x46\xF2\x06\xEA\x54\xEC\x32\xF2\x01\xEB\xDF\xEC\x4E\xE1\xFB\xE9\xEA\xB9\xC2\xE8\xCA\x9D\xA4\xEC\x50\xF2\x5A\xF2\xD1",
"\xF1\x49\xF2\x5D\xEB\x5E\xF2\xD4\xE8\x34\x5E\x26\xF2\x0C\xF2\x48\xE8\x5C\xF2\x4A\xE8\xDC\xF1\x55\xD7\x39\xD1\xD9\xEC\xB5\xF1\xC3\xF1\x6F\xF2\x1B\xF2\x71\xF2\xA2\xD6\x00\xD7\x23\xE1\xEF\x99\xDE\xDC\x17\xF2\x2A\x79\x41\xF2\x6D\xEC\x87\xE1\xE9\xBB\xF6\xEC\x7F\xC1\xEC\xEC\x18\xE9\xC9\xBB\xFD\xEC\x0A\xF2\x80\xF2\x27\xF2\x3B\xE7\x1C\xF2\x8A\xE9\x57\xD4\x65\xE1\xF9\x98\xD4\xEB\xEA\xD6\x08\xE0\xD4\xBB\x90\xEB\xE7\x95\x92\xEB\xA0\xCE\x40\xF2\x51\xF2\x42\xF2\x7C\xEC\xCE\xD6\xA8\xD1\x1F\xB3\x42\xCB\x33\xCA\x21\xE0\xED\xEC\x86\xBA\x04\xD3\x95\xF2\x65\x51\x8B\xF2\x99\xEC\x2C\xED\x00\xBC\xDE\xBB\x81\xEC\x1C\xD7\x61\xE9\xB0\xF2\x67\x80\x11\x86\xB3\xF2\x76\xED\xA7\xF2\x8C\xF2\x0B\xC3\x88\xE1\x11\xED\x8C\xEB\x51\xE4\xE8\xEF\x75\xE1\xC2\xD5\x79\xE9\x56\x59\x78\x08\x62\xF2\xD6\xE9\x3C\xEC\xD8\xE9\x3E\xEC\xBE\x79\x2E\xED\xD1\xC5\x30\xED\x03\x72\x9A\xE1\x66\xBD\x9C\xE1\x15\x8D\x36\xED\xBE\x80\xE0\xDD\xF2\x82\x23\x00\xB8\xEE\x0C\x08\x6B\xEA\xF8\xEA\xE1\xDF\xA4\xD0\xFB\xEA\xB5\xDE\x6E\xEB\x2C\xDF\x00\xED\x2E\xDF\xFB\xEB\xAA\xF1\x21\xC3\xE7\xF1\x59\x7A\x9C\xDB\x08\xC5\x03\xEC\xA1\xF1\x05\xEC\xA3\xF1\xD6\xC3\xE1\xF2\x1F\xEE\x68\x0B\xE4\xF2\x2E\xEB\xF4\xE8\x76\xDF\x41\xEB\x56\xE9\x0C\xE9\x9E\xE7\xF9\xEB\xC1\xE9\x8A\xE0\x0D\xEC\xDD\xD4\x0F\xEC\xAC\xD2\xF8\xDD\x17\xDE\x17\xC5\x61\xEA\xDD\xF1\x01\xD5\x1B\xC5\xD7\xB1\xFA\xF2\x71\xEE\xFC\xF2\x84\xEA\x49\xD6\x86\xEA\x74\xBF\x88\xEA\x89\xB0\x91\xE8\xEF\xDD\x97\xF2\xED\xEA\x65\xF2\x56\xEC\xBB\xF1\x1F\xEC\x15\xD5\x32\xDE\x18\xE9\x11\xBB\x23\xB4\xF9\xF2\xE2\xF2\x4B\x05\xFD\xF2\x1C\xEB\xB1\xEA\x1E\xEB\xE8\xF2\x2A\xDF\xEA\xF2\xA4\xDF\x33\xEC\x72\xE9\xD3\xF2\xDA\xE9\xF3\xE9\x71\xB8\x9A\xA6\x5B\xDB\x4B\xE9\x9A\x61\x2F\xEC\x14\xD1\x1A\x6B\x2B\xF3\x29\x05\x2D\xF3\x43\xE0\x81\xEB\x59\xDC\x32\xDC\x06\xDD\xFE\xE7\x5D\xDC\xE6\xEC\x53\xF2\x3C\xF2\xDE\x8E\xB3\xE0\x60\x7E\x14\xF3\x34\xEE\x59\x0C\x44\xF3\x98\xE7\x46\xF3\x45\xE0\x48\xF3\xFD\xE7\x5C\xEA\x15\xD7\xEC\xF2\xE8\xDF\x4E\xF3\x45\xB1\xEE\xCF\x78\xDE\x21\x7A\x42\xF3\x35\x05\x17\xF3\x6D\xD6\x19\xF3\x9A\xC4\x1B\xF3\x4C\xB2\x1D\xF3\x5E\xDE\x47\xF2\x94\xE8\x99\xF2\xF5\x94\x08\xF3\xFA\xD4\x0A\xF3\xDF\xD4\x37\xEA\x48\xAD\x39\xEA\xBA\xEA\x8F\xDE\x62\xEB\xE9\x79\x64\xF3\x63\xDD\xC8\xDF\x3D\xDE\xC7\xE8\x9E\xE9\x82\xE9\x66\xE8\x84\xE9\x68\xE8\x86\xE9\x6E\xF3\x88\xE9\x70\xF3\x03\xD6\xF4\xF1\x11\xF2\x05\xA7\xB6\xDB\xF9\xC5\xAB\xB4\xFF\xE0\x5D\xEC\xC7\xC8\xF3\xC5\x4A\xA5\x52\xF3\xE0\xF0\xC3\x2A\x55\xF3\x80\xEB\x2F\xF3\x6B\xEB\x60\xE0\x9C\xE7\x03\xF3\xF9\xE8\x0D\xED\x5F\xEA\x5F\xF3\xFF\xD4\xB7\xEF\xE0\xE0\xEB\xE7\xAA\xEB\x78\xC9\x69\xEC\xAD\xEB\xFB\x79\x7D\xF3\x9A\xF3\xA0\xCF\x2F\xEB\x5F\xE0\x6D\xE9\x61\xE0\x05\xEA\xD0\xF2\x64\xF2\x3D\xEC\x01\xF2\xEB\x79\xD9\xB8\xF4\xC8\xFD\xD2\xAC\xF2\x91\xF3\x74\xEC\x93\xF3\x16\xAF\xD4\xDB\x97\xF3\x84\xEE\x99\xF3\x66\xF3\xC1\xD6\x68\xF3\xEC\xD3\x6A\xF3\x15\xB8\x6C\xF3\x38\xD4\x81\xF2\x31\xF2\xB8\xF3\x33\xF2\x8C\xF3\xFB\xE0\x20\xF2\xD5\xDE\x22\xF2\xBD\xF2\xDD\xD5\x4D\x5D\xDC\x8D\xC4\xF3\x5E\xEE\xC6\xF3\xC6\xE8\x33\xE7\x54\xEB\xA1\xEA\x2B\xEA\xB3\xD5\x5D\xDE\xCE\xF3\x1F\xF3\xD9\xF1\x79\xF2\xC7\xF1\xCD\x74\x09\xE1\xDB\xF3\xAE\xF3\xC7\xF3\x0D\xD7\xC9\xF3\x1A\xE7\xCB\xF3\xE0\xB9\xCD\xF3\x9E\xD4\x63\xF2\x90\xEC\x21\xF3\x92\xEC\x02\xEB\x95\xE5\xC8\x92\x9C\xA7\xDC\xF3\xDA\xE4\x30\xEE\xE3\xF2\xEF\xF3\x40\xD7\xF1\xF3\xC9\xEB\x1B\xE7\x0F\xEB\xEA\xEA\x1E\xE7\x88\xF3\xD9\xEA\x8A\xF3\xA9\xEA\x36\xB4\x3E\xF2\x4F\xC0\xE4\x63\xEE\xF3\xDF\xF3\x80\xE9\xE1\xF3\xE7\xEA\xE3\xF3\x4D\xD6\x58\xEB\xCB\xE7\xF7\xF3\xA0\xEC\x83\xF2\xEF\x82\xA3\xEC\x24\x92\xFF\xF3\x36\xEE\xF7\xED\xAF\xF3\xBB\xC9\x9C\xF3\x82\xEB\x6C\xEB\x84\xEB\x17\xDF\x86\xEB\xB7\xF3\xD2\xF2\xB9\xF3\xD4\xF2\xAA\xEC\x96\xEA\xAC\xEC\xF3\xEA\x9A\xE8\x22\xF4\x99\xEE\x94\xEE\x6A\x0D\x25\xF4\x69\xEB\x27\xF4\x47\xF3\x83\xEB\x49\xF3\x5B\xF3\x2B\xDE\x4C\xF3\xD0\xEB\x54\xF2\x36\xBB\x98\xE8\x04\xEB\xFC\xC3\x36\xF4\x21\xEE\xCA\xED\x16\xF3\x14\xF4\x53\xEB\x82\xF3\x15\xEA\xDF\xE8\x44\xE8\xD6\xEA\x46\xE8\x77\xF2\x7E\xE8\xF9\xF3\xDE\xEC\xDC\xAF\xA1\xC0\xD8\xF0\xB2\xE9\x33\x7A\x13\xF4\xCE\xE9\xDE\xEB\xB1\xEB\x9B\xEB\x09\xE9\xB4\xEB\x42\xEB\xE4\xEB\x70\xE9\x35\xF3\x74\xEA\x37\xF3\x56\xBB\xD5\xF2\x8C\xEB\x29\xEB\x0A\xDF\x16",
"\x79\x5E\xF4\xC5\xEB\x68\xEB\x1E\xE9\x0F\xCA\x59\xEA\x46\xE0\x22\xE9\x82\xD5\x67\xB2\x42\xF4\xA7\xEC\xA4\xF3\x15\xD2\x74\xF2\xF4\xEA\xD1\x74\x71\xF4\x11\xEA\x52\xEB\x13\xEA\x4F\xF4\x55\xEB\xEA\xE9\x57\xEB\x53\xF4\x7C\xE8\x55\xF4\xCF\xE8\x1E\xF4\x1E\xED\xF2\xE9\xF8\xEE\x4A\xEB\x7E\xF2\xEF\xF2\x5D\xF4\xFB\xF2\x54\xF3\x03\xF4\x58\xDE\x05\xF4\xF9\xE7\xCA\xEB\x5A\xEA\x79\xBA\xCD\xEB\x49\xE0\xF2\xEC\x4B\xE0\x7D\xF4\xB4\x96\x6C\xF4\x76\x5F\x88\xF2\x46\xDD\xCD\x6F\x82\xF4\x80\xE7\xF1\xE8\x3D\xEB\x6C\xEA\x3F\xEB\x42\xEA\x01\xF3\x44\xEA\xA0\xF3\x58\xE9\x0A\xEC\x48\xEA\x2F\xF4\xE6\xD6\x8B\xEB\xEC\xDF\x26\xD4\x08\xCA\xD8\xF3\xF8\xDC\xC3\xF3\xAA\xF4\x97\xEB\xC9\xDF\x85\xF4\xD2\xEA\x9F\xE9\x51\xF4\xA1\xE9\x8A\xF4\xCD\xE8\x8C\xF4\xE4\xE8\x0D\xF4\x9B\xEC\x1F\xED\x24\xCF\x48\xE2\x9E\xF2\x3D\x88\xF8\xEC\xE2\xC5\x15\xED\x50\xCA\xE5\xC5\xBF\xF4\x96\xF4\x39\xF4\x98\xF4\xCB\xDF\xC5\xDB\xE0\xEB\x9C\xEB\xE2\xEB\x9E\xEB\xB5\xF3\xA0\xEB\xD1\xF2\xA2\xEB\x6A\xF4\x43\x9E\xA5\xEB\x72\xEC\x92\xD1\x49\xE9\xAF\xF2\x92\xF2\x5D\xB6\xD8\xF4\x15\xF3\x97\xF4\x4D\xF4\xC3\xF4\x41\xE8\x12\xE0\x16\xEA\x54\xE7\xC8\xF4\xE2\xE8\xCA\xF4\xA5\xE9\x8E\xF4\xBA\xF1\x45\xE9\xC6\xF2\xF7\xF1\x39\xE0\x78\xEB\x17\xED\xFD\xEC\x71\x6A\x49\xF4\x73\xEE\x4B\xF4\xF1\xF4\x5F\xF4\xD1\xEA\xF4\xF4\x2B\xE0\xF6\xF4\xEB\xE9\xF8\xF4\xA3\xE9\xFA\xF4\xEF\xE9\xCC\xF4\xD5\xEC\x73\xEB\x04\xED\xA6\xEB\xF7\xC4\xBA\xBA\xD7\xEB\xED\xF4\x39\xD7\x8B\xDE\xDB\xEB\x83\xBB\xC0\xF4\x74\xE8\xAC\xF4\xB0\xEB\xAE\xF4\xB2\xEB\xB0\xF4\x64\xF4\x02\xF3\xB6\xEB\x04\xF3\xB5\xF4\xC9\xEA\xE6\xF4\x8D\xBB\x31\xF4\xC5\xD1\xD7\xF2\x12\x89\xD9\xF2\x65\xCA\xDB\xF2\xDA\xBA\xED\xEB\x90\xE9\x91\xF4\xF5\x5A\xE6\xEE\x44\xD8\x06\x01\xCA\xEE\x7A\xE9\xF9\x7A\xD2\xEE\x49\x72\x79\xE3\xD5\xDD\x47\xE2\x2B\xE9\x5F\xE9\xED\xEE\x4D\xE3\x6D\xE3\x79\xE5\x92\xC5\xAF\xEE\x37\xF4\xFD\xED\x05\x3A\x3F\xC6\x23\xE2\xF9\x12\xB5\xF0\xE7\xD6\x07\x56\x51\xF5\x3C\xF0\xF9\x58\x3C\xF5\x54\xDA\xC7\xE4\xB2\xE3\x01\x41\x52\xF5\xB2\xF0\xCA\x02\x55\xF5\xB9\xF4\xBE\xE3\xA2\xCB\x59\xF5\x3B\xF5\x6E\xE3\xE1\xDA\x8E\xEE\x62\xE5\x49\x45\x60\xF5\x3F\xE3\x08\x05\x63\xF5\x44\xE3\xC6\xEE\x40\x57\x6D\xF5\xD0\xE1\x8F\xCA\x4C\xF5\x50\xC2\x83\xEE\x63\xEF\xE9\xED\x8F\xD7\x83\xE5\x03\x01\x85\xE5\x8C\xC5\x74\xBE\x11\xF0\x67\xE5\x13\xE6\xA1\xE5\x05\xE6\xC7\xF0\xA1\xF0\xE6\xF0\xF4\x5B\x8A\xD8\x2F\xE2\xDF\xA0\x7A\xF5\x6E\xEF\x84\xF5\x4A\xE6\x86\xF5\x5B\xE5\x12\xE5\x24\xE6\x26\xE5\x68\x00\x0F\xEF\xBC\x67\xA4\xE4\xD5\x2C\x19\x3F\xAB\xE5\x09\x01\xC5\xCA\x41\xEF\x67\x65\x83\xF5\x89\xEE\x92\xF5\xD4\xE5\xC6\xE5\xE4\xF0\x89\xF5\xE7\xE4\x0E\xE7\xCB\xE5\x1A\xF0\x12\x81\xA3\xF5\x3B\xE6\x57\xE6\xC3\xF0\xB7\x0D\x66\xE4\x97\xF5\xF9\xCA\xDA\xE5\xAD\xF5\xA4\x81\xAF\xF5\x56\xE6\x85\xF5\xA6\xF5\x3C\xEF\xE4\xE4\x67\xE6\x0E\xE7\xE9\xE5\xEB\xE5\x0F\xF0\xC1\xED\xBA\xF5\x64\xE6\x45\xEF\xB2\xF5\xB3\x0D\xB4\xF5\xB9\xE5\x2C\xCB\xB8\x0D\xF5\xD8\x75\xE4\xA2\xF5\x01\xE6\x3D\xE5\x21\xE6\xB6\xE5\x90\xE5\xE5\xF0\xFA\xE5\x0A\xE6\x09\x01\x2F\xCB\xA1\xF5\xF3\x82\xC6\xF5\x3C\xE5\x65\xE6\xD5\xF5\xE4\xE5\x96\xF5\xCC\xF5\x13\xD9\x09\x01\x18\xE5\x81\xF5\x20\x82\xDE\xF5\xD5\xED\xB1\xF5\xE3\xE5\x23\xE6\x3A\xCB\x50\x59\x25\xD9\x37\xC5\x8F\xF5\x8A\xEF\x7C\xF5\x03\xE6\x4B\xE6\x86\xD8\x55\xF0\x1C\xCB\x43\xE5\x09\x01\x69\xCB\xD0\xF5\xDD\xF5\xD2\xF5\xE0\xF5\xD5\xE5\xBF\xF5\xF9\xE5\x93\xE5\x1A\x8B\x52\xE5\xFE\xF5\xF3\xF5\x9B\xEF\x2E\xE6\xBC\xF5\xD4\xF5\x02\xF6\xB7\xE5\xA9\xF5\x05\xF6\x1A\x8B\x5E\xE6\xB8\xF5\xD1\xF5\xDF\xE5\xC7\xF5\xEC\xF5\x66\xE6\x04\xF6\xE7\xE5\x29\xE2\x5A\xF5\x69\xF5\x3D\xF5\x6F\x65\xEA\xF5\x77\xEE\x27\xC7\x7C\xF2\xDF\xDA\xD2\xBE\xDC\xF5\x68\xEE\x16\xF6\xDF\xF5\x45\xEF\x63\xF0\x94\xF5\x48\xEF\x6B\xF0\xAA\xF5\xD7\xEC\xE7\x0D\x40\xEF\xE8\xF5\x70\xEE\x63\xE6\x2A\xF6\x57\xE6\x2C\xF6\x15\xE6\x6A\xF0\x77\xD9\x8A\xF5\xC2\xB6\x78\xE5\x06\x01\x7A\xE5\x18\xEF\x63\xBE\x43\xEF\xEC\xD8\x39\xEF\x78\xD8\x80\xE4\x37\xC5\x5D\xEE\x37\xEF\x4F\xEE\x18\xF6\xE1\xF5\xEE\xF5\xE1\xD8\xCF\x79\x8C\xF5\x91\xE4\x78\xC7\x4A\xF6\xBA\xDD\x5C\xD9\xFD\xD8\x93\xF5\x3A\xF6\xA0\xF0\xE3\xF5\x08\xE6\x98\xF5\xA7\xE5\x76\x40\xA9\xE5\x0C\x39\x9E\xF5\x06\x01\xA0\xF5\x34\xF6\x03\x01\x55\xF6\x1F\xE0\xCB\xDD\x01\xF6\xA7\xF5\xD6\xE5\xD7\xF5\x11\xF6\x10",
"\xF3\xE7\x0D\xAC\xF5\xDC\xF5\x68\xF6\xAD\xF2\x76\xD9\x96\xE2\x36\xCB\xED\xF5\x32\xE6\x88\xD8\x65\x65\xB7\xF5\x73\xF6\x44\xF6\xAC\xED\x77\xD9\x9C\xE4\x2D\xF6\x88\xF5\x5C\xF6\xC9\xF0\xE2\xD8\x04\x32\x49\xF6\x7F\xF6\xBF\xED\x6B\xF6\xBE\xF5\x0F\xF6\x85\xF6\xF3\x1E\xF8\xE4\x09\x01\x1F\xCB\x7E\xF6\x4A\xD9\x6E\xCB\x0D\xF6\x6C\xF6\x03\xF6\x6E\xF6\x06\xE5\xBC\x0D\x08\xE5\x14\xF6\x78\x65\x8A\xF6\x76\xF6\x39\xEF\x82\xF6\x5A\xF6\x84\xF6\xEF\xF5\xB8\x0D\x17\xE5\x89\xF6\x95\xF6\x2E\xD9\x97\xF6\x8D\xF6\xD6\xF5\x10\xF6\x9B\xF6\xC0\x0D\xF1\xF5\xFE\xF5\x74\xF6\x7D\xCB\x80\xF6\x77\xF6\x84\xD8\x79\xF6\x5A\xE6\x90\xF6\xFB\xF5\x06\x01\xFD\xF5\x9E\xF6\xB4\xF6\x97\xCB\x95\xE2\xA2\xF6\x04\xE6\x83\xF6\xA8\xF5\x8F\xF6\xAA\xF5\x85\xD9\x09\x01\x87\xD9\xBF\xF6\xA0\xF6\x6A\xF6\xC8\xF5\xB9\xF6\xC0\xF5\x95\xD9\x5F\xE5\xA9\xF6\x5B\xD9\xA8\xE2\x8C\xF6\x87\xF5\xC6\xF6\x5D\xE5\x42\xE2\xAA\xE3\x1E\xF6\x5C\xF5\xC2\xBE\xCD\xF6\x57\xF6\x77\xD9\xD2\xB7\xB7\xD8\xFE\xF5\x47\xEE\xCB\xCA\xA1\xF6\xD3\xF5\x3D\xE6\x31\xE6\x3E\xEF\xB3\xE2\x09\x0F\x33\xF6\x1F\xF1\x00\x6C\xE6\xF6\x4B\xF6\x96\xF6\xEA\xF6\x4E\xF6\x4C\xF6\xA9\xCA\x74\xCB\x27\x01\x6D\xD9\x1C\xC5\xF2\xF6\x56\xF6\xD6\xF6\x58\x0D\xDF\xBD\x82\xCB\x6F\x7A\x84\xCB\x03\x36\x80\xD9\xBF\xDB\xA4\xCB\xA2\xE3\xA7\xCB\x83\xD9\x8D\xCB\xFA\xF6\xDF\xA0\xFD\xF6\x69\xF6\xE1\xF6\xB7\xF6\x4B\xE2\x7B\xD9\x9F\xCB\x06\x02\x8F\xE2\x7F\xD9\x83\xD9\x09\xF7\x80\xAC\x93\xE2\x3E\xE3\x1A\xC5\x6F\xE6\xDC\xF5\xDC\xEE\x57\xDA\x1D\xAD\xFD\xC8\x8F\xCC\xAC\xD9\x5D\xEF\x52\xDA\xB0\xD9\x1F\xF6\x02\x01\x21\xF7\x5E\xDA\xF2\x01\xE3\xB7\x09\x01\x5D\xBD\xD2\xB7\x91\xA1\xF7\xBD\x2C\xF7\x76\xDA\x38\x09\x48\xCF\xB1\xD7\xF1\xE6\xB6\xDA\x0B\xF0\xA8\xEF\x9E\xA1\x04\xE7\x05\xD8\x03\x01\x35\xF7\x7F\xDA\x37\xF7\x01\xDA\xAA\xC6\x8E\xE6\xEA\xEF\x39\xD8\xFB\xE2\x68\xC7\xF2\xE2\x27\x01\x42\xF7\x95\xDA\x44\xF7\x61\xBA\x79\xDA\x76\xEF\xB6\xE6\x9E\xE6\x5A\xCB\x4E\xF7\xA1\xDA\x50\xF7\x85\xCC\xEC\xE2\x63\xCF\x13\xE3\xEB\xEF\xF0\xE2\xE7\xD9\x4C\xF7\xC7\x2B\x1E\x5F\xCE\xDA\xE2\xCC\xEE\xE6\xFD\xC1\xA4\xEF\xCB\xE6\xA6\xEF\x96\xEF\xB6\xE6\xBA\xEF\x92\xE6\x01\x01\x57\xF7\xCD\xDA\x59\xF7\x12\xE9\x9E\xA2\xC6\xEF\x9C\xC7\x48\xF7\xD5\xDA\x4A\xF7\x1D\xCF\x3F\xF7\xB5\xE0\x41\xF7\x63\xF7\x72\xF7\x9C\xF2\xAE\x05\xC9\xE6\x85\xE6\x17\xCD\xD0\xE6\x6E\xF7\xE4\x0D\x7E\xF7\x16\x01\xD4\xE6\xE9\xEF\xF9\xEF\xCF\xC7\xFB\xEF\x02\xA2\x08\xCC\x70\xF7\xDC\xDA\x7F\xF7\x46\xF5\x66\xF7\x35\xC2\xE2\xE6\x3A\xF7\xD4\xDA\x85\xDA\xE5\xE2\xFC\xEF\x61\xF7\x06\x01\x91\xF7\xE4\xDA\x93\xF7\x5D\xE2\xEF\xD7\x24\xDA\xD2\xDA\x98\xF7\xE2\xE2\x5E\xF7\xF4\xE6\x18\xCD\x36\xE3\x2A\xF7\x6F\xF7\x88\xF7\x89\xCE\xA3\xE7\x55\xCF\x78\xE6\x2D\x69\x9F\xF7\xEA\xDA\x23\xF7\x4A\xF5\x6F\xF5\x6A\xEF\x86\xF7\xB4\xF7\xB1\x84\xEB\xDA\x09\xE7\xE8\xC7\x0B\xE7\x61\xCF\xA8\xEF\xED\xF6\x1E\xF7\x50\xEF\xDC\xF5\xE0\xEE\x7E\xE3\x9F\xAD\xBA\xF0\xD6\xCB\x85\xC6\xC2\xF7\x28\xF7\x43\xC7\x50\xC2\xC7\xF7\xF0\xED\xC9\xF7\xC9\x34\x69\xEF\xBD\xA1\x11\xE1\xD1\xF7\x17\xEE\xFF\x7B\x6D\x0B\x75\xEF\x77\xF7\x9A\xF7\xDC\xEF\xBC\x0D\x78\xEF\x23\xE3\xCA\x24\x8C\x5A\x6F\xCD\x81\xEF\x30\x99\x8C\xF7\xFF\xCC\x5E\xCC\x91\xE6\xE2\xF7\xDF\xEE\xE4\xF7\x58\x44\x53\x05\x91\xEF\xCC\x76\xC2\xCC\xDD\xF7\xF3\xE6\x79\xF7\x7C\xDA\x9D\xF7\x6A\xCD\xEE\xF7\x2F\x51\xF0\xF7\xE3\xD9\xFD\xA0\xB2\xE6\xA5\xEF\x29\xE3\x8E\xF7\x87\xDA\xC2\xE2\x86\xF7\xD8\xF7\xC3\xEE\xCC\x58\xFC\xF7\x23\xDA\x27\x74\xB5\xEF\xED\xE2\x84\xDA\xF5\xF7\x86\xDA\xFC\xE2\x04\xF8\xEC\xF7\xF9\xF7\xCA\xE3\x97\x41\xC9\x34\xC5\xEF\x6D\x82\xFE\xD7\xD9\xEF\xFA\xEF\x0C\xF0\x55\xA1\xFB\xD9\x1C\xC5\x06\xF8\x7E\xEE\x6E\x7C\xDB\xF7\xE7\xEF\xF4\x07\x11\xE3\x0D\xF8\x07\xE3\xA8\xF7\xF6\xF7\x48\xCC\x08\xCC\x21\xF8\x4B\xC2\x9D\xF0\x58\x2D\x8A\xF7\x37\xA1\xF4\xF7\xFA\xE2\x10\xF8\x77\x9A\x2D\xF8\xFA\xF7\x30\xF8\x09\xF8\x41\xC2\xC2\xDA\x8B\xED\x34\xF8\xAA\xC7\x36\xF8\x55\xB7\x38\xF8\x15\xF8\x08\xF8\x77\x05\x07\xF0\x83\xF7\x5F\xF7\xAA\xF7\x2B\xDA\xE1\xDA\x2E\xF8\x5A\xC2\xFB\xF7\x77\x05\x18\xF0\xD3\x02\x92\xC5\x4D\xF8\x04\xEE\x3A\xF8\x50\xF8\x4A\xEF\x23\xF0\xCC\xEF\xAE\x78\x54\xF8\x6A\xEE\xB9\xF0\xC9\x34\x2C\xF0\xA6\xF7\xEE\xDA\xC1\xF7\x48\xE3\xD0\xAD\x1D\xF6\x78\xF5\x9E\xF6\x25\xEF\x6D\x5B\x86\x02\x21\x0A\x1E\xEE\x90\xD8\xA7\x3F\x6E",
"\xF5\x59\xF8\x2B\x56\x50\xF1\x00\x6C\x69\xF8\x55\x5C\x86\x02\x12\xE2\x87\x58\x58\xF5\x1C\xF6\x68\xF5\x67\xF8\xDC\xF5\x29\xEF\xDE\x5F\x6B\xF8\x9A\x7B\xF6\xED\x6F\xF8\x61\xE3\x53\xF5\x40\x00\x73\xF8\x21\x0A\x7F\xF8\x97\x60\x77\xF8\x19\xE2\x79\xF8\x2F\x3A\xC3\xF7\x11\xF3\x1F\xF7\x66\xF6\x00\x8B\x29\xF0\x00\xE4\x21\x51\x5B\xEF\xB2\xC1\xCD\xF7\x76\xE6\x29\xF7\xDE\xF6\x06\x01\x5B\xCD\xD4\xEF\xDA\xF0\x81\xE2\xA5\xD7\x67\x06\xD5\xF7\x12\xBE\x48\x8A\x95\xF8\x80\xE2\x01\xE4\xDC\xF7\xE8\xF7\x0F\xDA\x1D\xF8\x3E\xF7\x12\xF8\xDB\xE6\x2F\xEF\x04\xF0\xA1\xF8\xAA\xF8\x25\xF8\xD3\xE2\x2D\xF0\x01\xF8\xAE\xF8\xEA\xA0\xF8\xF7\x94\xF8\xB3\xF8\x13\xD4\xF1\xE3\x82\xE2\x0E\x2F\xF1\xF7\x67\xC1\xE2\xC1\x3F\xF8\xCF\xD9\x9B\xF7\xBC\xC6\x7B\xF7\x5B\xDA\x9E\xF8\xA8\xF8\xB4\xF8\xCD\xD7\xFD\xF7\x7F\xC7\xFF\xF7\x69\xF7\xB9\xF8\x3D\xF7\x3F\x9A\xBC\xF8\x7F\x8B\xCD\xF8\xBF\xF8\x62\xCD\xFC\xE3\xFF\x03\xB4\xEF\x68\xF7\x19\xCF\x8D\xF7\xBA\xF8\xF1\xD9\xCA\xF8\x68\xDA\xB2\xF8\xE4\xEF\x96\xF8\xDC\xF8\x02\xE3\x69\x99\xBE\xE6\xAC\xF8\xD8\xE6\x5E\xCC\x1F\xF8\x5A\xCB\x9F\xF8\xF4\xEF\x05\xE4\xE9\xF8\xD7\xEF\x27\xF8\x5C\xF7\x03\xF2\x2A\xF8\x41\xF8\x3A\xB7\x08\xCC\xF2\xF8\x1F\xF0\xF4\xF8\xF2\xE3\xA9\x2D\x32\xF8\xE2\xBD\xED\xF8\xB5\xE6\xE6\xD9\x12\xDA\xD7\xF8\x00\x00\xFE\xF8\xBC\xD7\x08\xD8\xCF\xF8\x0A\xF8\x63\x76\x17\xDA\xF8\xF8\xA6\xF3\x3C\xF7\xE6\xE6\xFD\xF8\xD9\xF8\x94\xD4\xB5\xF8\x0F\xF9\xED\x79\xF0\xE6\xB6\xEF\xD7\xE6\x06\xF9\xA0\xBD\x50\xCF\xB2\xF7\xDE\x8B\x17\xF9\xCC\xD7\xE9\xF8\x51\xF8\x64\x09\x92\xC5\x0B\xF9\xDA\xD7\xE8\xF8\x01\xF9\x83\xE2\xE4\xA2\x53\xF5\xA6\xF8\x0E\x89\x24\xF9\xC0\xF8\xA3\xF8\xB1\x01\x60\xF8\x1D\xF9\x71\x66\x2F\xF0\xAE\x9A\x70\xF6\x2C\xDB\xB5\xE2\xFE\xF5\xC9\xB7\x72\x76\x40\xBD\xC8\xF2\xD7\xCB\x74\xE6\x27\xF7\x9B\xF8\xCF\xF7\xE1\xDA\x40\xF9\xCE\xD4\xB2\xE2\x7D\xE6\xB0\xF8\x89\xDA\x26\x7C\xA0\x75\xC4\x3B\xAB\xF8\x1B\xF8\xE1\xF8\xD5\xF8\x66\xDA\xE4\xF8\xE8\xE2\x06\x01\x4A\xF9\xEA\xD4\x92\x35\xE6\xF7\x67\xA2\x05\xF9\xB8\xEF\xEA\xF7\x08\xCC\x5B\xF9\x05\xD5\x5D\xF9\xB3\xA1\x70\xC7\xB6\xC6\x60\xF9\x6B\xF7\x07\xF9\x55\xF7\x11\xE1\x64\xF9\x1D\xD5\x66\xF9\xC2\xC6\xFE\xF7\x18\xCF\x38\xC2\x0F\xF8\xC8\xF8\x03\xF8\xB9\xF7\x13\xF8\x02\x01\x6F\xF9\x34\xD5\x71\xF9\x3C\xF8\x25\xCC\x74\xF9\x19\xDA\x40\xF8\x77\xF9\x11\xF8\x79\xF9\xB1\xF8\x4C\xEF\x22\xD7\x17\xF8\xFC\xD7\x19\xF8\xC7\xEF\x6A\xF9\x14\xF9\xEF\xF8\x63\xF9\x51\xF9\x7E\xF9\x85\xCC\x82\xF7\x53\xF7\x07\xF9\x85\xF7\x7A\xF9\x01\x01\x7C\xF9\x49\xD5\x93\xF9\x73\xF7\x02\xE4\x34\xCF\x8B\xF7\x54\xF9\xE9\xF7\xB6\xE6\xED\xEF\xFE\xE2\x21\x0A\x9B\xF9\x5D\xD5\x9D\xF9\x80\xF7\x8D\x9A\x4E\xB7\x97\xF7\x38\xF9\x3B\xF7\xFA\xF8\x84\xF9\x1C\xDA\x5A\xF8\xB2\x5E\xA8\xF9\x78\xD5\xAA\xF9\x94\xF7\xD0\xDA\xA4\xF7\x31\xE3\x8E\xF9\xB1\xF9\xDF\xF7\x2A\xDA\x38\xCE\x49\xF9\x92\xF9\x22\x41\x27\xF9\x21\xCD\x42\xF6\x88\xF9\xF2\xD6\xDD\xE3\x58\xF8\x70\xE2\x09\xF9\xB6\xF9\x93\xD5\x92\x35\x37\xF9\x28\xF8\x7F\xCC\x63\xF8\x8D\xCD\x1D\xBE\x49\xDA\x9E\xF6\x5A\xF0\x72\x76\xB3\xE3\xCB\xF7\x3F\xC7\xD5\xF9\x8B\xA1\x9C\xF8\x22\xF9\xBF\x8D\x5E\xF5\x91\x58\x4D\xF9\x86\xF9\x4F\xF9\x47\xCD\xC2\xD4\x01\x41\x53\xF9\xB8\xF8\x84\xEF\x02\xF8\xC4\xD9\x09\xF9\xD9\xF9\x12\x91\x70\x3B\x5E\xF9\x81\xF9\xF9\xE2\x83\xF9\xBF\xF9\x86\xEF\xF0\xF9\xE3\xF9\x89\x55\xC3\xF8\xFB\xC5\xF3\xF7\xBD\xF9\x49\xF7\xFB\xF8\xA1\xBD\x08\xCC\xF1\xF9\xB9\xA9\xF3\xF9\xD0\xF8\xFD\xCE\xD2\xF8\xE0\xF8\xA3\xF9\x07\xF9\xAA\xEF\xCE\xE2\x05\xFA\xB9\xBB\x07\xFA\x1A\xF9\xFD\x83\x0C\xF8\x12\xF9\x1E\xF9\x61\xF9\x6C\xF7\x04\xFA\xFB\xF9\xA4\x50\xAE\x0A\x18\xF8\x2A\xAF\x1A\xF8\xEC\xF9\xDA\xEF\x09\xE3\x9C\xDA\xB8\x0D\xF0\xF8\x11\xE1\x10\xFA\x03\x9A\x12\xFA\xC8\xE6\xD3\xBD\x03\xDA\x96\xF9\xA0\xBD\x98\xF9\x87\xF9\x38\x55\x1B\xFA\xF6\x9E\x1D\xFA\x25\xF8\x0C\xDA\x61\xF8\x0A\xF0\xBE\xF9\x20\xD8\xE8\xBD\xFA\xF9\xAB\x6E\x2A\xFA\xE0\xE6\x3D\xF8\x48\xF8\xA9\xF7\xE7\xE6\x86\xF7\x28\xFA\x5A\x99\x3F\xFA\x9E\xF9\x66\xCC\x2E\xFA\xCC\xBD\x21\xF9\xF7\xE6\x11\x90\x33\xFA\x6F\x06\xC5\xF9\x92\xC5\x46\xFA\x93\x99\xDB\xF9\xF8\xD1\xB8\xF7\xD6\xF7\x0F\xFA\x50\xFA\x16\x07\xD1\xF9\x16\xFA\x39\xF9\xD4\xF9\xB8\xCE\x34\xF1\x25\x8D\x6F\xE4\x65\x02\x4D\xEF\xA6\xE3\xBC\x0D\x0C\xE4\x67\xF5\xDE\xAD\x65\xFA\x62\xFA\x6D\xFA\x2B\xDB\x97",
"\xE9\x8E\xCE\xE6\x5A\x2A\xF1\x21\xEB\x2C\xF4\xF8\xF3\xD1\xF3\xA3\x72\x9B\xF1\x6C\xD0\xAE\xF1\x42\xE7\x9F\xF1\xB1\xF1\x90\x9D\x7E\xCF\xDF\xF1\x01\x9B\xD7\x99\x79\xF4\x81\xB3\xB9\xEC\xD4\xEC\xA9\xF1\x11\xE7\xAB\xF1\x6A\xF1\x40\xE7\x7B\xFA\x01\xEC\x43\xE7\xF5\xF2\x15\xEC\xC9\xE9\x47\xE7\xEE\xF1\x72\xFA\x84\xFA\x9D\xB3\x7B\xF4\xBA\xEC\xD1\xDE\xE2\x92\xBC\xF1\x25\xF3\x21\xEC\x5F\xE7\x44\xDB\xA1\xE0\x44\xE6\x6D\x61\x73\xFA\x33\xF3\x1A\xE8\x1D\xF4\x57\xF4\xD1\xE8\x7B\xF2\xE0\xE9\xA9\xE0\x2D\xEC\x2F\xD5\xCD\xF1\x61\xF2\x06\xF1\x48\xE0\x7A\xF4\xA1\xF4\xC2\xEC\x0F\xED\x22\xC0\x50\xF3\x87\x5F\x83\xFA\xB2\xFA\x85\xFA\x98\xFA\x87\xFA\x0F\xF2\x02\xF2\xE8\xE4\x20\xEA\x71\xFA\xA3\xFA\x96\xFA\x25\xE9\x98\xF2\xFC\xF4\x72\x72\x79\xFA\x32\xBB\x26\xDB\x4C\xEC\xC7\xE0\xAE\xC8\x8F\xA8\xCE\xF2\xB1\xFA\x9F\xF4\xB3\xFA\x5D\xF3\xF3\xEC\x2E\xF5\xA9\xE9\xD3\xDE\xA5\xDE\x21\xF2\x00\xDC\xC0\xEB\x55\xA1\xFB\xF1\xE2\xCD\x95\xFA\xBB\xFA\x97\xFA\xB4\xFA\x3B\xF2\xB6\xFA\xA5\xF3\x17\xFA\xA7\xF3\x68\xEC\x11\x86\xD1\xFA\x05\x99\xC5\xFA\x8C\xEA\xB6\xF2\x21\xE1\x8F\x9D\xD1\xE0\x12\xF2\xDB\xFA\xA7\xDE\xEA\xDB\xEB\xFA\xB2\x5E\xA4\xFA\x33\xEB\xB6\xEA\x05\xF3\xB8\xEA\x44\xF4\xF2\xF2\xFD\xDB\x4C\xA4\xBD\xF3\xEA\x98\xD7\xE8\xF8\xF1\x88\xC3\x84\xEC\xFC\xF1\xD2\xFA\x4A\xF3\x08\xDD\xD5\xFA\xA2\xF4\xE6\xFA\xF2\x5A\xEC\xF3\xB6\x60\xBA\xFA\xD3\xFA\xBC\xFA\xE4\xFA\x4D\xF3\x0F\xFB\x4E\xEC\x95\xEC\x91\xE1\x0A\xFB\x40\xF4\xFF\xE7\xFD\xFA\x00\xEB\x22\xF3\x97\xA6\x10\xF4\x2E\xF2\x00\x00\xFA\xFA\xB3\xF4\x46\xEA\x2C\xF5\x36\xEB\x64\x66\x44\xF2\x88\x5D\x13\xFB\x0B\xFB\xCE\xEB\xBD\xFA\xB7\xF2\xA3\xD6\x01\xBC\x4C\xF2\x16\x70\x4E\xF2\x1B\xFB\xED\xFA\xE2\xFA\xC6\xFA\x20\xF3\x77\xFA\x21\xFB\x1C\xDF\x55\xD6\x12\xFB\x1C\xFB\x85\xEB\x5D\xEA\xA2\xF3\x01\xED\xD7\xFA\x7E\xDF\x5A\xF4\x49\xF0\xBD\x5B\x2E\xFB\x1D\xFB\x4B\xF3\x16\xFB\x43\xF4\xA3\xF4\xD5\xB2\x30\xF5\x49\xC1\x6E\xF4\x8D\x72\x4C\xFB\x43\xFB\x5C\xF3\x45\xFB\xED\xF2\x18\xFB\x2A\xE7\x7F\xF4\xA4\xF1\x39\xFB\x14\xFB\xE3\xFA\x0D\xFB\xB5\xFA\x47\xFB\xEC\x8F\xA5\xD6\x48\xE1\x9D\xDD\xC4\xFA\x3A\xFB\xEF\xFA\xCC\xEC\xF1\xFA\x0F\xC6\xC0\xE8\x42\xBB\xA7\xF4\xB5\x57\xEC\xFA\x91\x99\xEE\xFA\x82\xDB\xF0\xFA\xAB\xE8\xCF\xBB\x7A\xD1\xD4\xE0\x91\xF2\xDD\xFA\x93\xF2\x7F\xEA\xB7\x0D\x74\xFB\xC5\x67\x76\xFB\x97\xDB\xC3\xF2\x29\xEC\x7C\xE1\xCF\xDA\xDC\xC5\x7F\xB7\xA0\xF2\xE1\xC5\xA2\xF2\x31\xB9\xA4\xF2\xB3\x0D\x82\xFB\x02\x01\x26\xFB\x2A\xF5\xA1\xF3\x1F\xFB\x24\xEB\xD2\xF3\xF1\xDC\x75\xE9\x59\xE1\x81\xD8\x29\xDD\xCA\xF2\x90\xBB\xAC\xEB\xB2\x0D\x92\xFB\x01\x01\x94\xFB\x66\xF4\x44\xEB\x29\xFB\x46\xEB\x65\xFB\x11\xE9\x9B\xFB\xF4\xDC\xC9\xD2\x01\xF5\x83\xE8\x03\xF5\x80\xFB\x91\xFB\xF9\xFA\x84\xFB\xB9\xDF\x78\xFB\xBE\xE8\x7A\xFB\xE8\xF4\xB7\xDB\x24\xF7\xD6\xEB\x9F\xFB\xE7\x95\xCC\xF2\xD9\xF7\x12\x99\xB5\xFB\xA9\xE8\xB7\xFB\x8E\xEA\x22\xE1\x70\xFB\xB2\x80\xEC\xEB\x7F\xCA\x50\xD7\x14\xF1\xF0\xEB\x16\xC6\x70\xE0\xDD\xF2\x17\x8D\x6A\xFA\xFF\x00\xCB\x24\x47\xED\x66\xFA\x6E\xFA\x1A\x8B\xBB\x0E\xFE\x21\xB5\x59\x62\xF1\x4E\x08\x9B\xED\x28\x5F\x13\xA0\x55\xBA\x37\x00\x72\xF1\xC8\x7F\x3C\x7B\x70\x2E\xF7\xE3\x6B\x56\x10\xCE\xE9\xFB\x2C\x5F\x82\xF1\xFA\x05\x5C\x71\x06\xE2\x43\x00\x73\xF8\x3C\x0A\x05\xC1\x91\xF1\xED\x71\x57\xF1\x8F\x89\xDB\xFB\x13\xF1\x43\xF9\xA4\xE1\xB6\x70\x8B\xF1\x0C\x01\x79\x01\x1B\x45\x3B\xED\x8C\x77\xDF\xFB\x76\xF1\x38\xAC\x78\xF1\x22\xF1\x58\x64\xFE\xFB\x23\xBD\x00\xFC\xC7\x4E\x98\x08\xE2\xFB\xE4\xFB\x9F\x88\xE6\xFB\x9B\xED\xEB\xFB\x07\xB3\x5B\xF1\x8B\xFA\x7C\x5A\x0A\xFC\x19\x45\x1B\x45\x98\x08\x14\xFC\x88\x60\xED\xFB\x79\x01\xEF\xFB\x50\x59\xE9\x0D\xF1\xFB\xD1\xEC\x84\xED\x37\xC6\x89\xF1\xED\x71\x19\xFC\x0C\xFC\x15\x5B\xF3\xFB\x12\x5C\xF5\xFB\x27\x70\x5F\xBC\x58\xBC\x0E\x1C\xD7\xFB\xCF\xCB\xBE\xB6\xD1\x79\x34\xFC\x06\xEF\x05\xB8\x94\xC8\xA3\xFB\x37\xC6\x10\xEB\xA7\xB1\xB5\xF2\x6D\xFB\x17\xB6\xB6\xE7\xAD\xF1\x26\xE7\xC4\x9B\x81\xE0\x44\xE7\x98\x1D\xAB\xE1\xEB\xB3\xCD\xF2\xB2\x5E\x67\xED\x1A\xF4\x2E\xEA\x1C\xF4\xB1\xEC\xC8\xFA\xDF\x85\x72\xF3\x89\xDE\xFB\xD4\x27\xED\xE0\xD4\xAC\xE9\x91\xE0\xE7\xFA\x92\xFA\x2D\xDB\x0E\x9F\x4D\xFC\x3E\xFC\x4F\xB2\xC2\xF2\xC5\xFB\x6E\xEC\xBD\xC5\x9C\xFA\x72\x6A\x16\xD5\xDD\xFA\x28\xF3\x13\xBB\x81\xFB\x60\xFC\x09\xF4\x11",
"\xEB\x63\xFC\x41\xFC\xB8\xFB\x8F\x9D\x8B\xD7\xCB\x03\xAD\xFA\xF6\xE9\x3F\xF3\x0E\xE6\xE6\x5A\x4E\xFC\x10\xF5\xED\xE9\x12\xF5\x1B\xEA\x53\xFC\x9A\xF2\x06\xDF\x3D\x72\xDA\x72\x28\xED\x7B\xFC\x61\xFC\x5F\xC9\x30\xFB\x4F\xFB\x7C\xF4\x5C\xFB\x1E\xEC\x61\xF3\x81\xFA\xAC\xE9\x9F\x61\x7C\xFC\x86\xF3\xD7\xEA\x0B\xF4\x0D\xF2\x14\xF5\x88\xFA\x2D\xE7\x8A\xFA\x79\xF1\x00\xFB\xAA\xE9\xEA\xF1\xCE\xFA\xAF\xD2\x11\x86\xC4\x05\x21\x0A\x93\xFC\x04\xEA\x87\xF3\x51\xFC\xDC\xEC\xA8\xFA\xF3\xF1\x1E\xF2\xF5\xF1\x40\xBB\x8F\xF3\xFE\xD2\x05\xFB\x92\xF3\x25\xED\xB8\x0D\xDF\xFA\xBB\x0D\x3C\xFC\xA5\xFC\xE3\xEB\xE2\xF4\xE5\xEB\xE4\xF4\xE7\xEB\xAA\xFB\xA7\xE0\x62\xEA\xD1\xDB\xAB\xEC\xE4\xE0\xFD\xEC\xA3\xFC\x15\x72\x88\xFC\xBB\xE8\x98\xC3\x86\xFB\xA2\xC4\x80\x5D\xF3\xFA\x05\xE8\x03\xFB\xDA\x99\x20\xDF\xB2\xFC\x08\xED\x30\x74\xC4\xFC\x6E\xFC\xE5\xF3\xF6\xF3\xB6\xF3\x76\xFA\x2E\xF4\x99\xFB\x6D\xC3\x90\xEA\xD3\x02\x92\xEA\xE9\xF4\x5F\xE9\xD2\xFC\xE9\x9C\x24\xF2\x89\xF2\xA4\xFC\xC7\xFC\x8B\xEA\x77\xFB\x72\xFC\xC6\xFB\x74\xFC\x11\xFB\x1B\xE6\x87\xFC\x6F\xFC\x3F\xFC\x71\xFC\x2B\xED\x6E\xFB\x33\xFB\x1D\xDF\xEF\xFC\x6D\x61\xB8\xFC\xE1\xF4\xA7\xFC\xD9\xFC\xA7\xFA\x3D\xFB\xFA\xF3\x39\xDC\x23\xFB\x7B\x64\xE7\xFC\xF1\xFC\x62\xFC\xCF\xF3\x52\xF2\x50\xFB\xEE\x64\x2C\xFB\x4C\x8D\x92\xFC\xE8\xFC\xBD\xAF\x6C\xFB\xF4\xFC\x79\xFB\x2D\xED\x53\xFB\xB3\xFC\xDA\xA7\x34\xF4\xE6\xFC\xC6\xFC\x05\xFD\x89\xFC\xA0\xF4\x63\xFB\xE5\xFA\xBE\xFC\x10\xA8\x9E\xD3\x47\xF4\x60\xE6\xF0\xFC\xD7\xFC\xB5\xD5\xE7\xF3\xE3\xF1\xAA\xFC\x2A\xF2\x93\xEC\x66\x87\x17\xEB\x0C\xFD\xF5\x64\xFA\xFC\xB5\xEB\xA6\xFB\xB7\xEB\x68\xF4\xB9\xEB\x1F\xFD\x10\xD1\xC8\xFB\x76\x83\x6B\xF2\x11\xAB\xE0\xFA\xF9\xFC\x0E\xFD\xD6\xAF\x10\xFD\x6F\x9D\x32\xFB\x00\xD7\x2B\xA5\xD0\xEC\x51\xF0\x24\xFD\x2D\xEA\x1E\xF3\x7F\xFC\xFF\xF1\xFF\xFC\x58\xF4\xD6\xEC\xD3\xEE\xFF\x00\xA6\xD6\x58\x59\xB7\xFC\x3E\xFD\x21\xB1\x40\xFD\xC8\xB7\x42\xFD\x95\xE1\xA5\xF4\x52\xAB\x61\xF5\xBC\xBB\xC1\xFB\x04\xFD\x25\xFD\xD1\xD5\x4A\xFD\x28\xF2\x29\xFD\x4A\xF2\x9A\xFB\xB9\xF9\x8A\xFB\x75\xEB\xED\xDF\xD2\xD6\x62\xE9\x5F\xE1\x4E\xF8\x3D\xFD\x1A\xFD\xC8\xFC\x08\xC4\xCA\xFC\xA9\xF2\x8A\xF8\x89\xFB\x36\xE0\xBB\xFB\xD2\xF4\x8E\xEB\x43\xD4\x6B\xE1\xA2\xFC\xD6\xFC\x48\xFD\x6D\xF3\xA8\xFC\x48\xF2\x64\xFD\x72\xF2\x9B\xF2\x35\xE0\xA4\xAD\x06\xED\x24\xED\xD3\xFC\xB1\xF2\xD5\xFC\x47\xFD\x4F\xFC\x49\xFD\x96\xFC\x78\xF2\x98\xFC\xBF\xFA\x5C\xE9\x17\xF5\xE1\xFC\x4F\xEA\x74\xD4\x1D\xD7\x8E\xD5\x83\xE1\x6E\xFD\x0D\xFD\x70\xFD\xE9\xFC\x85\xFB\x64\xFC\x8D\xF2\xB9\xFB\x95\xFD\x78\xFD\x6D\xE0\xC9\xF2\x07\xED\x08\x96\xC0\xFB\x2E\xDA\x5F\xFD\x7F\xFD\xE6\xF3\x62\xFD\xC7\xFA\x83\xFD\x84\xF2\x59\xFD\x14\xFD\x14\xE9\x32\xF5\xF3\x90\x43\xF9\x34\xED\xFA\xC4\x8F\xE9\x34\xF5\xB7\xF7\xF9\x58\x9B\x65\x05\x03\x38\xFC\x62\xFA\x9F\xBE\x4B\x00\x39\xF1\x99\xED\xD5\x4B\x63\xCE\x52\x64\x13\xA0\x0F\xB8\x38\x00\x10\xFC\xF7\x9B\x3C\x7B\x4D\x00\x9B\xED\x49\x47\xD5\xE3\xBE\x48\x0F\x5C\x1F\xFC\x2A\x8D\xE8\x4E\x06\xE2\x4A\x00\xF2\xFB\xAC\xBA\x2F\xFC\xEB\x71\xF7\xFB\x29\x69\xC4\xFD\x5A\xF1\xCD\xFB\xFC\xFB\xB8\x6E\x30\xF1\x73\x78\xCC\x03\xB3\x46\x02\xFC\xFD\x17\x9B\xED\x52\x64\x87\xF1\xC7\x06\xE4\xFD\x2E\x71\xE6\xFD\xB0\x9E\xE8\xFD\x10\x5B\x98\x08\xCB\xFD\xCD\xFD\x8C\x62\xCF\xFD\xD1\xFD\x05\xFC\x78\xED\x2D\xF1\x34\xEA\xC6\x5A\xF2\xFD\x0B\xA9\xF4\xFD\xB9\x45\x98\x08\xD2\xFD\xC0\x60\xD6\xFD\x23\x70\xD9\xFD\x86\xF1\x77\xF1\xFE\xFD\x0E\xEC\x00\xFE\x18\xF1\x63\x0E\x03\xFE\xC6\x5A\x3C\x0A\x95\xC9\xDD\xFD\x64\x72\xD8\xFB\x53\x9B\x8B\xFD\xA6\x0A\x71\xF5\x0E\x77\x03\x43\xA5\xCB\x93\xEE\x50\xF5\x8F\xF8\xD7\xEE\x1D\xE2\x4F\x00\x88\xF8\x37\xFC\x98\x82\x49\x45\x5C\xC2\x32\x55\xAF\xF7\x64\xCF\x94\xC8\xC5\xFC\x05\xA2\xCB\xEB\x78\xF4\x6B\xFB\xEA\xFC\x11\xFD\x36\xB6\x43\xFC\xC5\xE9\xE9\xF1\x43\xA9\x12\xEC\xAD\xE9\x7E\xFA\x4A\xFC\xF8\xBA\x9C\xF0\x9F\x61\x80\xF1\x59\xF3\x29\xDE\x4D\xFB\x0C\xFB\x5A\xFB\x5E\xF3\x07\xF3\xE6\xF1\xAC\xF1\x38\xFE\xF3\xF2\x28\xDB\x92\xE0\xB2\xF1\x0E\xE7\xB4\xF1\x55\xF8\x41\xFE\x31\xFE\x5B\xEA\x58\xFB\x41\xF4\x8B\xFC\x99\xFA\x64\xEC\x6F\xB8\xDB\xE9\xBD\xF1\x42\xDB\x9F\xFA\x23\xEC\xDB\x71\xA2\xEE\x30\xA2\x55\xFE\x9E\xF4\x2F\xFB\x1C\xFD\x47\xFE\xD6\xFA\xB7\xF4\x3F\xDB\xC9\xF1\xAC\xFA\x64\xD2\xCC",
"\xF1\xE9\xF0\x36\xC5\x5B\x59\x3C\xFC\x42\xFE\x3E\xF4\x5A\xF3\x57\xFE\x1E\xFB\xA8\xFB\xFA\xEB\x8D\xFC\x53\xB4\x0B\xEA\xB4\xE0\x55\x89\x54\xFE\x9D\xF4\x5C\xC0\x67\xFE\xD4\xFA\x69\xFE\x0E\xFB\x36\xFD\x60\xF3\x40\xEC\xF8\xF2\x22\xF8\xCD\xA1\x65\xFE\x83\xFE\x45\xFE\x8A\xFC\x1D\xFD\x17\xFB\x0C\xEC\x4A\xFE\x17\xFC\xB7\xE7\xCC\xFA\x8C\xDE\x71\xD5\x79\xF3\xE7\x0D\xED\xF1\xAB\xFD\x39\x98\x8E\xFE\xDB\xC0\x90\xFE\x68\xFE\x97\xFB\x71\xEB\x6B\xFE\x42\x8E\x58\xEC\x41\xBB\x90\xF3\xB8\xDB\x5C\xEC\x15\xFD\x94\xF3\x5D\xFD\xF9\xC1\x8D\xFE\x82\xFE\xA1\xFE\x78\xFE\x4E\xFB\x92\xFE\x09\xFD\x88\xFE\x5C\xFC\x3B\xF7\x63\xEA\x06\xF2\x16\xED\xAB\xF3\x84\xB2\xB1\xFE\x77\xF4\x56\xFE\x2B\xF4\x44\xFB\xA4\xFE\x0E\xED\xB8\xFE\x57\xFC\xA6\x62\xEC\xE0\x71\xEC\xA5\xFD\x08\xE8\x16\xC9\xC2\xFC\xF3\xE0\x04\xD3\xCD\x06\xC0\xFE\x43\xFE\xCC\xEB\x84\xFE\x15\xFB\xB6\xFE\x8C\xFC\xC7\xFE\x74\xF3\x4B\x6C\x6C\x82\x6F\xD0\x06\xC0\xBA\xF2\xD7\xF3\x1C\xF5\xF3\xDE\xDA\xF3\x5A\x59\x74\xFE\xA0\xFE\xF5\xF3\x26\xFD\xAF\xFD\x3C\xFB\xDB\xFC\x66\xF2\x29\x6E\xEE\xFC\x52\xFD\xAF\xA1\xE7\xFE\x8A\xEA\x0F\xFD\x34\xFE\x41\xFD\xF5\xFC\x43\xFD\x9A\xD0\xFD\xF3\x59\x59\xE6\xFE\xB2\xFE\xE8\xFE\x61\xFD\x90\xFD\x56\xF4\x4C\xFD\xA9\xFA\x01\xFD\x4D\xC0\x66\xCE\xF8\xFC\x81\xFE\xC1\xFE\x66\xFE\xA2\xFE\x85\xFE\xC5\xFE\xA3\xF3\x0A\xFD\x20\xF4\x96\xC6\x82\xA1\xF2\xFE\x80\xDB\x9F\xFD\xB6\xFB\xEB\xFC\x65\xFC\x13\xFD\xEA\xEB\xCF\xFE\x79\xC9\x9A\xB2\xE5\xFE\xF1\xFE\xFD\xFE\xF3\xFE\x3F\xFD\xF5\xFE\x57\xFD\xF7\xFE\xB4\xEC\x40\xFB\xFB\xFE\x1F\xFF\x09\xFF\x8F\xFE\xB4\xFE\x46\xFE\x0D\xFF\x46\xFB\xA6\xFE\x38\xEB\xAD\xE8\x02\xC7\xD3\xFE\x76\xFE\x44\xFE\x2C\xFF\x91\xFE\x86\xFE\x64\xFB\x30\xFF\x56\xDF\x1A\xFF\xFD\x9F\x55\xFB\x6D\xFC\x12\xFF\x20\xFF\x14\xFF\xF4\xFE\xA0\xFD\x17\xFF\xA2\xFD\x8F\x9D\x44\xFD\xB8\xC5\x5C\x59\xFC\xFE\x2A\xFF\xB3\xFE\xC3\xFE\x59\xFB\x2E\xFF\x5B\xFB\xDA\xFE\x0F\xF3\x8E\xED\xC7\xDC\xC4\xDF\xB0\xFE\x9F\xFE\x42\xFF\x95\xDB\x15\xFF\xC4\xFB\x46\xFF\xC4\xF2\xBF\xE8\x5A\xFD\x2A\xBA\x1D\xE2\x4F\xD1\x28\xE4\x34\xFF\x29\xF4\x3F\xF4\x37\xFF\xA3\xFE\x7A\xFE\x06\xF3\x53\xFF\x42\xBA\x8F\xF2\x7C\xFB\x76\xEB\x8E\xFB\x43\xDD\x6D\xFD\x0F\xB2\xF5\x64\x75\xFE\x67\xFF\x77\xFE\x4F\xFF\x58\xFE\xD8\xFE\x5A\xFE\xFF\xFA\xA3\xC4\x72\xF5\xC7\xF2\x68\xE1\x82\xAB\x6A\xE1\x62\xE9\x90\xFB\xBF\xFE\x59\xFF\x4D\xFF\xFE\xFE\xFF\xD5\x07\xFD\xA8\xF2\x89\xEC\x7F\xFF\xFF\xF4\xD7\xA5\x88\xFD\x88\xC3\xA1\xFB\x8D\x87\x66\xFF\x9E\xF3\x6D\xEB\xFB\xFA\xFE\xEA\x51\xFF\x48\xFE\x6D\xFF\xA7\xD1\xBA\xFB\xAA\xFE\x20\xDF\xAF\xFB\x1B\xFF\x9B\xFD\x75\xFF\xBF\xA1\x13\xFF\x5B\xFF\x44\xFF\x16\xFF\x35\xFE\xEC\xFC\xB8\xF2\xAB\xF2\x04\xFB\xA6\xFD\x5D\x0C\xBE\xFB\x31\xB9\xAA\xFD\x7B\x82\x96\xFF\xB3\xF3\x9F\xF3\x95\xFB\xB4\xF4\x34\xFD\x0B\xEC\x3B\xFF\xE4\xC3\xE0\xEC\xF1\xC9\xB6\xFD\x76\xDD\xD5\xEB\x92\xE9\x9D\xE1\xBE\xED\xBB\xFD\x32\xED\xDB\xF6\xC0\x0D\x35\x6A\x1D\xFC\x18\xFE\x77\xE5\xB5\xC1\x52\x00\xC5\xFD\x5B\xED\x21\x0C\x9B\xED\xD8\x6F\x13\xA0\x17\x9E\xE8\x4E\x4A\xE4\x4B\x5C\x3C\x7B\x1A\x0F\xF7\xE3\xD5\xFF\x3E\x6E\xD7\xFF\x7D\x47\x62\xAC\x42\x62\xB1\x4D\x45\x94\x06\xE2\x51\x00\xDB\xFD\x14\xE8\x16\xFE\xE8\x4E\xDF\xFD\x81\x5B\xD0\xFF\xE2\xFD\xFB\xFB\x28\xFC\x09\x75\x2F\xAE\xD8\x08\x8E\x47\x80\x46\xC3\xE1\xCE\xFD\xDD\xFB\x53\x00\xD4\xFF\xFC\xFD\x26\xFC\xF0\xFD\xCE\x75\xF3\xFF\x09\x08\x75\xFF\x59\x1B\x37\xFF\x7C\x28\x30\x13\x04\xF8\x7E\x61\x2D\xD9\xFF\x2C\xBC\x1B\xFF\x7B\xFF\x7B\xB4\x74\x77\x7D\x83\x7F\x84\x79\x6A\x46\x00\x00\x8B\x35\x02\x00\x87\x66\x20\xDD\x26\x01\x80\xE7\x2D\xE2\xFF\x43\x9E\x24\xFF\x6C\x42\x46\xFE\x7B\xC1\x7E\x01\x7F\x07\x80\x73\xF3\x11\x00\x83\xFC\x54\xFF\x77\x6D\x27\xF1\x21\x45\x00\x74\x27\x3C\x0A\x55\x72\x6A\xFF\x7D\x3B\x29\x23\x70\xB7\x05\xB1\x1B\x2A\x00\xC1\xFD\x67\xC7\x76\xC4\x70\x26\x0F\x0C\x7F\x08\x6E\x46\x1E\x39\x2C\x96\x48\x6F\x1A\x6B\xF8\x72\x84\x7C\xD9\x03\xB3\x74\x12\x01\x4A\x78\xEA\xD7\x37\x00\x9A\x15\x33\xC3\x26\xE7\x75\xA6\x28\x26\x05\x1F\x80\x01\xE6\x35\xAA\x1C\xB2\x5B\x7C\x0C\x55\x24\xAC\x20\xA7\x76\xE5\x1F\xCA\xD4\x5F\xE5\x42\xF7\x21\x51\x0C\xFC\x7C\x70\x79\xB5\x74\x4A\x7E\x54\xF4\x00\xFE\x4D\xD2\x71\xED\x7D\x73\x75\x8A\x7C\x23\x70\x46\x7D\x45\xFC\x3A\xFC\x54\xB8\x4E\xD8\x6A\x72\x76\x9C\x6A\x12\x7A\x00\x36\x55\x00",
"\x82\xD4\x45\xCE\x66\xE5\x75\xC9\x79\xB0\x7F\xDB\x79\x40\x7E\x71\xF3\x15\xFD\x5C\xF2\x73\x2A\x6E\xC9\x7A\x0C\x81\x8C\x56\xCB\x67\xB1\xBB\x0D\x86\x52\xF9\x65\x6D\x7D\x92\x31\x0D\x82\x74\x75\x01\x75\xB9\xFC\x7C\xF9\x63\xD3\x6D\xA1\x75\x4E\x7D\xF7\x7E\xD9\x7D\x33\x7E\xA3\x03\x69\xF8\x7D\xCC\x68\x44\x51\xE6\x7C\x39\x40\x15\x80\x87\x75\x7D\xB3\x60\xFA\x4B\xFE\x67\xE9\x7B\x25\x7A\xB2\x7D\x97\x78\x48\x7A\x2C\xD5\x74\xD3\x4C\x79\x6B\x04\x8E\xE4\x69\xCE\x7E\x18\x65\x88\x7F\x6D\x61\x7E\x00\xA1\xAF\x60\x04\x8B\xCF\x7D\x0D\x81\x3F\x7E\x29\x7E\x5C\x00\x8F\xE9\x43\xF2\x6C\xE8\x5D\x27\x68\xF9\x79\x1F\x80\x48\x80\x25\xB5\x2D\xFB\x58\xF3\x63\x04\x8A\xCD\x7D\x10\x80\x37\x7E\xE4\x78\x8F\xFC\x0B\xFD\x67\x01\x8F\x04\x88\x41\x7C\xCB\x6E\x2C\x81\x74\x7F\x5A\x00\xCB\xE9\x70\x01\x92\x51\x72\x07\x80\x81\x7C\x93\x7F\x0A\x6F\x9F\xFC\x3A\xCF\x48\x83\x69\xE2\x7E\x54\x65\x72\x78\x74\x40\x5E\x80\x56\xEB\x64\xE7\x7F\x02\x9F\xF7\x7E\x06\x81\x71\x7B\x30\x80\x07\x7A\x9D\xB4\x77\xD4\x42\x23\x73\x90\x70\xA5\x71\x3F\x7A\x70\x6B\x5A\x7E\x7C\x00\xE8\x00\xB0\x02\x81\xAE\x52\x09\x85\x54\x75\x35\x80\x06\x7A\xD7\x00\xCD\xE9\x58\x02\x8F\x10\x5B\xEB\x7A\xA0\x7A\xAF\x7F\x95\x3A\xD0\x00\x88\xE9\x52\x03\x8E\xEC\x70\xD8\x7F\x14\x81\x2A\x7E\x81\x7F\xAB\xFC\x5D\xF9\x70\xB1\x74\x82\x6C\xEC\x7B\x4F\x76\xB3\x7E\x19\x7A\x61\xBB\x0F\x51\x6B\x19\x11\x07\x8E\x50\x79\x91\x78\x16\x81\x45\x7A\xC1\x00\xFB\xE9\x69\x02\x9D\xA7\x7A\xA4\x71\x22\x65\xF5\x78\x70\x7F\xDC\xFA\x1C\x01\x85\xAE\x48\xD8\x7C\xD9\x7D\x9E\x32\x28\x81\x6F\x7A\xA4\x00\xB1\xFA\x7A\xF2\x67\xA3\x7C\xCB\x7C\x86\x77\x2D\x81\xF5\x79\x3A\xE8\x58\xC7\x6F\x02\x9D\x05\x83\xAA\x75\x1C\x83\xBA\x74\x4A\x80\x70\xF2\x0B\x02\x93\xC7\x7B\x9F\x7F\x10\x75\x09\x74\xD6\x7E\x36\x2B\x24\x01\xE9\xD5\x66\x04\x8A\xA0\x77\x0E\x87\x92\x7D\x3A\x81\x8A\x7A\xAC\xD0\x05\xFE\x44\x0F\x73\xF3\x72\xEB\x2F\x22\x83\x18\x7A\x70\x7A\x1A\x01\x82\x01\xBB\xF2\x64\x04\x8D\xCB\x7C\xE1\x33\x42\x7F\xB2\x7F\x1A\x8D\x63\x01\x82\xE5\x54\x07\x8E\xDA\x79\x21\x83\x44\x7B\x9B\x80\x4C\xE1\x0B\xD3\x71\xAB\x76\xD9\x7D\xF1\x78\xC8\x7E\x45\x80\xA5\x80\x6E\xB9\x33\x02\xB0\xF1\x6C\xFC\x73\xD7\x7E\xF1\x7D\x03\x65\x95\x70\xF5\xA7\x20\x01\x9F\x86\x3E\x09\x83\xBB\x70\x28\x81\x19\x7B\x8D\x80\xA7\xFB\x3B\xFF\x76\xD2\x7F\x08\x84\x65\x6A\xE6\x7F\xCD\x40\x82\x80\xC6\xF4\x17\xD4\x7D\xF1\x79\x50\x7A\xEE\x78\x7D\x7A\x25\x80\x3D\x79\x67\xF2\x5F\xD6\x5F\x72\x74\x28\x5C\x3C\x6B\xE6\x7D\x52\x81\x98\x80\x08\xF4\x5A\x02\xB2\xF3\x7C\x0A\x81\xDA\x7F\xEB\x7E\x33\x77\xDB\x62\x00\x00\x39\x8B\x4C\xFA\x7F\x0B\x81\x0D\x81\x83\x7B\x5C\x81\xAC\x75\x35\x01\x91\xFB\x50\x05\x93\xEC\x71\x26\x6F\xA9\x7D\x54\x7E\x8B\x6C\x70\x01\xD4\xD5\x4B\xA3\x6F\x0C\x8B\x41\x7E\x1E\x82\x60\x7E\x7C\x80\x2A\xFD\x4B\x3D\x74\xF6\x66\xA5\x71\x90\x73\xA5\x3D\x66\x80\x2B\x80\x9B\x01\x87\x02\x89\xD3\x6E\x0A\x80\xC8\x7A\x25\x81\x87\x79\x0D\x70\x2A\xE9\x1D\xE5\x52\xB4\x6D\x84\x71\xF7\x78\x8F\x61\x84\x43\x81\x80\x8C\x01\xF2\x01\x8E\x06\x8A\x0D\x89\x4F\x7C\x35\x83\x52\x7E\x76\x7F\x3E\xFB\x16\xEA\x40\xFE\x6B\xDC\x79\x16\x71\x54\x7A\x02\x70\x82\x69\xB8\x01\xB0\x02\x8D\x06\x9E\x05\x8C\x14\x83\x16\x83\x50\x81\x5A\x80\x45\x01\xEC\x02\x8A\xAE\x66\x4A\x79\x65\x5D\xE0\x6A\x4A\x6F\xE0\x79\xE4\xBB\x48\x03\xBD\x04\x98\x0A\x86\x98\x5A\x30\x82\x41\x7E\x94\x80\x82\xF2\x2E\x03\x82\xF2\x70\x0D\x80\xD2\x73\xE6\x6A\x93\x74\xDF\x75\x99\xFD\x62\xD2\x64\xFE\x6D\x3B\x47\x1A\x82\x0D\x83\x15\x80\x36\x80\x59\x00\x91\x03\x81\xFC\x60\x0E\x80\xD0\x7E\x9F\x78\xEB\x7C\x03\x70\xEF\xEB\x51\xC0\x55\xD3\x6D\x8D\x6E\xAB\x5D\x30\x62\xEF\x77\xB1\x80\xDC\x01\xA3\x92\x5E\xF6\x69\xFD\x7D\xF5\x7B\xF5\x7C\xC6\x7F\xB7\x7D\x61\xFF\x26\xE4\x0A\xEF\x6F\xBA\x66\xED\x4D\x79\x7D\x6E\x7F\x0B\x63\xC7\xFF\x63\xF8\x0E\x9C\x6B\x1A\x06\xE0\x7D\xF9\x7D\xE1\x5B\x7E\x62\x59\x00\x3A\xDA\x7D\xF8\x46\x08\x0D\x05\x03\xB3\x76\x56\x2F\x09\x50\xFE\xE9\x75\xFA\x52\x9B\x31\x6B\x72\x55\x4C\x67\x3C\x17\x00\x0F\x81\x50\xCD\x21\x04\x89\x00\x9A\x5C\x3C\xB3\x3B\x0B\x03\x66\x77\x31\x00\x50\xCD\x30\x04\xAD\x9C\x23\x15\x72\xD4\x03\xAD\x55\xDF\x3C\x7C\x27\x97\x7B\x1B\xDB\x60\x52\x33\x00\x50\x4A\x28\xAB\x3B\x7F\x66\x51\x14\x0D\x7B\x4C\x10\x7D\x19\x70\xCA\x2B\x68\x05\x47\x81\xD5\x71\xDA\x60\x61\x00\x73\xF0\x55\x65",
"\x35\xC5\x2B\xA0\x1F\x09\x83\xF6\x21\x89\x7B\x32\x2C\x36\x8E\x17\xD5\x6F\xD1\x1F\x0F\x03\x43\x83\x40\x00\x30\x00\x9B\xED\x58\x04\x8D\x00\x93\xDD\x71\xDA\x32\x11\x2F\x6A\x6F\xD3\x1F\x50\x02\xA1\xDB\x12\x09\x8E\xC4\x7C\xA0\x18\x13\x06\x96\x80\x37\x7C\xD7\x43\x1C\x59\x71\x30\x08\xD0\x12\x8C\x36\x50\x00\xCF\x3D\x2F\x00\x9B\xED\x70\x04\x9B\x09\x82\xDD\x72\xC3\x16\x4B\x80\xAF\x76\x75\x2A\x61\x02\xD5\x12\x63\x09\x93\xC5\x25\xA0\x18\x13\x06\x9C\x80\x34\x81\xDB\x43\x6A\x04\x9F\x3A\x0C\x13\x8C\x68\x36\x4D\x82\x79\x07\x33\x81\x63\xCE\x29\xDE\x67\xC5\x6C\x12\x87\x2F\x26\x49\x83\xA1\x23\x3C\x81\x4C\x8D\x7B\x04\xBC\x43\x3B\x1E\x28\x89\x02\x44\x83\x41\x7B\x05\x33\xA7\x3F\x02\x05\x83\x93\x04\x14\x8C\x9C\x36\x50\x83\x49\x01\x3F\x81\x63\xCE\x75\xF0\x57\xFD\x7F\xE2\x7D\x25\x86\x16\x2F\x97\x81\xEB\x21\x90\x02\xE1\xA9\x52\x0A\x97\x43\x27\x3D\x20\x13\x06\xA8\x80\x70\x78\x99\x02\x9C\xC0\x1C\x0A\x8F\x51\x36\x28\x06\x42\x83\x85\x81\x84\x07\x6B\x06\x48\x00\xA2\xC0\x70\xEA\x57\x12\x02\x0C\x01\x0C\x81\x73\x44\x94\xF1\x4F\x01\xA7\x04\x15\x10\x81\x3B\x7A\x56\x74\x6F\x74\x5A\x75\x99\xFF\x6F\xD6\x5B\xFE\x6A\xF3\x77\xB0\x6D\x18\x82\x4B\x78\x62\x70\x98\xFE\x59\xF8\x7B\xF8\x69\x39\x7B\xDF\x68\x50\x7E\x2E\x81\x1E\x43\x21\x0A\x44\x05\xBF\xCB\x70\x59\x71\x33\x7C\xFC\x6D\xB2\x81\x75\x79\x39\xFF\x1E\xFA\x43\x14\x6A\xD6\x7D\x2A\x60\x80\x74\xC3\x6D\x86\x79\x78\x00\x9B\xF5\x51\xF9\x73\xD4\x72\x2C\x84\xFD\x23\x47\x74\x41\x62\xD4\xFE\x32\xFC\x61\xED\x7B\xD9\x76\x17\x83\x32\x83\x25\x80\x55\x7D\x4D\xAE\x5C\xD3\x5F\xF9\x76\x4F\x7C\x24\x6B\x55\x7D\x6A\x41\x6C\x81\xEF\x02\xA7\xBC\x71\x0B\x82\xF6\x74\xA7\x7C\xD8\x7F\xDA\x7E\x7F\x7D\x51\xFB\x0E\xF9\x79\xCC\x70\x29\x6B\x33\x7F\xEE\x71\xEA\x78\x9F\x79\xAF\xFA\x67\xB1\x40\x0C\x95\xA3\x70\x92\x71\xF1\x7D\xC8\x7F\xAA\x7E\x23\xFF\x51\x69\x7E\xEA\x77\x17\x8B\x46\x5D\x3A\x79\xE5\x7F\x61\x81\x01\x03\xFA\xCF\x7E\x6D\x69\x54\x73\xF4\x7A\xE4\x7D\xD1\x7E\x03\x81\x47\xFF\x47\xA4\x5E\x6B\x6C\x4E\x50\xC9\x78\xCF\x47\xC4\x81\x64\x6F\x76\xF4\x03\x06\x8A\xFC\x69\xFB\x7C\xF0\x7F\x60\x80\xC8\x7D\xA7\x44\xE4\x02\xFE\xC0\x4D\xEA\x79\xF4\x7B\x1E\x7D\x5A\x80\xA7\x7F\x08\x43\x9A\x09\x2F\x06\x98\xA9\x75\x18\x82\x33\x83\xE5\x7E\xDE\x7F\x3C\x7F\x6A\x01\xAD\xEA\x46\x02\x8B\xD6\x75\x03\x72\x90\x4D\xBD\x7C\x0A\x79\x8E\xD5\x60\x01\xBF\x22\x42\x1A\x87\x35\x7A\xF3\x73\xE5\x7E\x15\x7A\x05\x03\xD0\xFE\x76\x0C\x98\xDC\x7D\xEE\x7E\xA9\x7F\x80\x79\x76\x80\xB0\xFB\x6F\x01\xA8\xB7\x75\x27\x3A\x2D\x82\x58\x77\x48\x6B\x98\x75\xF7\xE8\x27\xF6\x72\xA9\x69\x1A\x8A\xB2\x7B\x69\x81\xB9\x81\x75\x70\xD4\xDE\x10\x02\xB6\xEB\x62\x4B\x76\x21\x7A\xC1\x7B\x67\x31\xB2\x81\xF9\xEA\x67\xE5\x47\x0B\x9C\x57\x7F\x2D\x84\x66\x79\x47\x80\x9B\x79\x6E\x03\xBA\x06\xB2\x5C\x6E\x83\x65\x4F\x58\x9C\x7D\x3F\x81\x2D\x76\xFF\x00\xF5\xD8\x59\xCF\x7A\x1A\x33\x05\x80\x64\x80\xC5\x80\x78\x81\x35\xFF\x55\xFD\x4B\xFC\x77\xF6\x71\x2E\x83\xD2\x7D\xE0\x81\xA7\x79\x8B\xEC\x04\x4F\x52\x0C\x8E\x1C\x80\x33\x84\x68\x81\xE4\x80\x79\x81\xD6\xFE\x62\xF6\x55\x0E\x97\xF5\x77\x39\x81\x91\x6C\xFF\x78\x34\x4B\x8D\x03\xEE\x05\x8F\x0E\x82\x18\x8F\x39\x84\x60\x81\xA9\x7D\x63\x75\x5B\x03\xA5\xFD\x52\x07\x8D\xC3\x32\xD0\x7A\xFA\x79\x4B\x34\xBC\x81\xE6\xF2\x68\xB6\x5D\x0B\x98\x40\x7F\x3A\x82\x64\x77\xB2\x81\x43\x7F\x46\x01\x90\xFE\x66\x06\x9C\x1C\x83\x34\x80\x72\x80\xDE\x7E\x9B\x7F\x47\x03\xB5\xFD\x63\x0E\x99\xF6\x75\x3A\x87\x78\x69\xCF\x7E\xC5\x81\x99\xB2\x21\xEA\x29\x0E\x8A\x3A\x21\x32\x84\x93\x7A\xC5\x81\x92\x81\x18\x03\xA7\x06\xB6\xFB\x72\xE8\x70\xC0\x5D\x96\x76\x23\x80\xE2\x81\x55\x03\xB1\x06\xAD\x0E\x93\x19\x89\x3C\x85\xE5\x7D\xEC\x80\x63\x7F\xCD\x03\x95\xA4\x60\xC9\x6A\xF6\x34\x35\x84\x87\x78\xD6\x79\xF1\x81\x46\x03\xD9\x06\xBB\xFD\x6B\x1E\x8D\xF7\x79\x61\x81\x2A\x77\xE7\x81\x54\xFB\x3A\xFA\x5F\x0F\x8A\x1D\x8D\x39\x86\x78\x83\xD5\x80\xB4\x7F\xE5\x03\xB8\xFE\x7F\x0E\x9A\xF9\x73\x3B\x86\xCC\x69\xEA\x6F\xA2\x7E\x89\xBE\x6D\x07\x85\x0B\x90\x99\x7B\x37\x81\x5D\x79\xDF\x80\x53\x7D\xA8\x00\xA0\x03\xA5\xF5\x63\x99\x76\x19\x80\x6D\x7C\x3C\x80\xF0\x81\xEE\x03\xD6\x06\xB7\xFE\x78\xFC\x7A\x36\x84\x66\x77\xF9\x80\x87\x7F\x9D\xFF\x1D\x18\x49\x08\x8D\xCE\x42\xB7\x78\xFA\x75\x5B\x30\xDC\x81\xBA\xE9\x7A\xD5\x4D\x10\x92\x99\x7F\x40",
"\x80\x76\x80\xDB\x81\xD4\x7D\xE9\x03\xBD\xBA\x5E\xE6\x62\x8B\x6A\xD6\x7F\x22\x76\xDF\x7C\x77\x76\xB2\xFB\x1A\xEE\x77\x0E\x95\x1E\x87\x40\x79\x12\x83\x34\x81\x49\x80\x75\x01\xA8\xFA\x52\x10\x84\xEC\x76\xD6\x7A\xF4\x78\x34\x7B\xD9\x80\x9F\xF2\x45\x03\x8D\xEE\x67\x0E\x8D\xCF\x71\x68\x80\x06\x83\x05\x82\x9D\xF3\x1B\x08\x98\x0D\x9D\x1D\x85\xA7\x7E\x9F\x7C\x7D\x81\xA6\x7E\xC2\x01\x90\xFF\x78\xEA\x52\xFC\x7E\x58\x6C\xF2\x7F\xD8\x81\x1D\x82\xAB\x03\xA2\x06\xA7\xFE\x77\xFD\x6C\xF5\x7C\x17\x75\x61\x81\xC3\x7D\xCE\xF4\x5C\xFD\x66\x07\x98\xA8\x7F\x95\x72\xF4\x7C\x40\x80\x00\x63\x04\xD3\x4E\x08\xBC\x0F\x85\x1E\x8C\x3A\x87\x78\x82\xE4\x80\x9A\x81\x94\x03\x83\x08\xA2\x0B\x85\x20\x88\x4B\x7C\x3A\x81\x23\x6B\x5D\x04\xFA\x01\xBC\xFD\x56\xD3\x7F\x07\x04\xFB\x7E\x55\x3E\x02\x83\x6D\x81\xB2\xF3\x68\x06\xAE\xA5\x72\xE9\x7B\x52\x7F\x85\x83\x9E\x7F\x10\x82\x75\xC9\x78\x07\x96\xCB\x6B\x10\x85\xD7\x6C\x79\x7C\x6E\x7F\xF8\x75\x9E\xE1\x7B\xBA\x6D\xBC\x78\x82\x77\x12\x02\x46\x83\x0C\x5F\x4F\x5F\x19\x02\xC3\x5A\x76\x0D\x9F\x9D\x1E\x9A\x01\xC0\x34\x8E\x80\x2B\x81\x0B\x47\x28\x04\x9B\xD1\x7F\x22\x80\xA3\x5D\x94\x80\xC7\x30\x7C\x27\x98\x08\x21\x04\x96\xF8\x76\x7D\x26\x22\x82\x95\x82\xD2\x7C\x56\x82\xF9\x02\x3E\xF0\x3A\x2A\x50\x25\x8D\x7D\x73\x89\x2F\x8A\x80\x31\x37\x2D\x02\xAF\x04\x80\x01\x9F\x0F\x84\x4A\x82\x97\x83\x5B\x46\x5E\x82\x00\x89\x38\xD2\x34\x08\x90\xDE\x3A\x39\x1D\xFC\x7E\x79\x06\x2D\x00\x3A\x02\xC3\x09\xA6\x10\x82\x00\x1E\x4A\x85\x36\x3C\x32\x83\xD5\x12\xCA\x04\xB6\xDC\x41\x09\x86\x5A\x41\x0B\x7C\x6A\x50\x19\x01\xE8\x7F\xC3\xE3\x06\x02\x26\x01\x1B\x6C\x71\x0B\x33\x02\x50\x9C\x48\xDB\x27\xAE\xBE\x43\xB7\x3C\xEC\x3F\x74\x6A\xAE\x4F\x0C\x00\x54\x66\x77\x82\x73\x6B\x08\xFC\x4E\x1D\x4A\xE8\x52\xC3\x7E\x20\x00\x3C\x82\x7A\x82\x52\x00\xB3\xBE\x67\xE5\x1C\x30\x49\x96\x77\xFE\x73\xDE\x6C\x03\x7A\xF3\xF3\x52\xE2\x57\x0C\x9D\xAE\x56\xD5\x7A\x63\x81\x44\x5B\x1B\x7F\xE8\xF1\x4D\xFC\x47\xF1\x70\xD4\x7C\x0C\x83\xA1\x63\x12\x7F\x5E\x4A\x21\x0A\x46\x04\xB5\x9B\x5D\x27\x82\x8A\x77\x9F\x83\x26\x7B\x1E\x82\xB1\x00\xCD\x03\x80\x03\x92\x0F\x8B\x05\x83\x88\x82\xC8\x72\x67\x81\xFF\xFD\x50\x05\xA6\x0B\x92\x16\x8E\x50\x03\x8B\x7C\x72\x75\x88\x5D\x7B\x00\xD0\x2C\x51\x14\x9C\x27\x86\xAE\x77\xE1\x69\x80\x80\xFE\x73\xC8\x03\xF2\x07\x88\x0D\x9F\x1B\x89\x46\x79\x86\x80\xD5\x7E\xAE\x73\x47\xB1\x00\x13\x7C\x0B\x80\x3B\x71\x1C\x78\xA2\x81\x2D\x1A\x96\x82\x16\xF4\x2E\x0A\x80\x06\x9E\x21\x8A\x51\x84\x1A\x82\x67\x81\x37\x80\xE2\x01\xF1\xD3\x78\x0B\x96\xF1\x6E\xE6\x7D\x61\x82\x4C\x63\xFD\x80\xB4\x89\x1E\x01\x88\x3F\x62\x2E\x7B\x52\x86\xF2\x40\x45\x83\x5A\x74\x0D\xEB\x43\x0A\x99\x14\x9C\x0C\x80\xC5\x7F\xA8\x82\x35\x81\xA4\x82\x8B\xF3\x2B\x01\x94\xBB\x78\x61\x73\xF5\x77\x33\x32\x44\x82\xEB\x54\x57\x05\x8C\xD6\x56\x14\x97\x45\x7B\x7F\x71\x17\x77\xFC\x61\xB8\x7E\xA8\xB2\x67\x08\x8B\xF3\x71\x91\x69\x0B\x87\xA1\x82\xE1\x43\xAA\x82\xF5\x8C\x69\x0A\x88\xAF\x77\x28\x81\x50\x82\x1B\x62\xE2\x7E\x73\x80\x5E\x05\xE8\x01\xA0\x15\x8E\xE3\x28\x50\x85\x93\x7D\xB4\x80\xBB\x79\x28\xD0\x78\xE6\x55\xC9\x7A\x9B\x7D\xCF\x72\x30\x37\x59\x82\x7E\x57\x7A\x05\xBC\x08\xBD\x15\x9D\x4A\x63\x92\x77\x80\x61\x5C\x82\xAF\x7F\x68\x04\xD3\xE7\x4D\x0D\x9A\xD6\x76\x3D\x79\x22\x83\xC3\x81\xF3\x61\x52\x03\xE9\xBF\x38\x15\x82\xA6\x41\x59\x81\x8C\x82\xF5\x81\xA2\x81\x4E\xFF\x32\x0A\x8A\x0F\x9A\x23\x86\x39\x84\x8F\x80\x9B\x7F\x89\x71\x60\x03\x9B\xFE\x62\x0D\x88\x93\x6F\x53\x86\xAA\x81\x4B\x82\xA1\x6B\x2F\x05\xEE\x0A\x9E\x25\x70\x2B\x89\x04\x64\x74\x82\x6B\x83\x53\x7F\xDA\x00\xBC\xE7\x77\xC7\x63\xE7\x7C\x2C\x6D\x6E\x82\xCA\x75\x84\x00\x8F\x05\xF7\x66\x65\x16\x9D\x1F\x85\x47\x87\x7F\x81\xDE\x7E\xD5\x82\xE6\x03\x8E\x09\xAC\xFD\x76\x29\x82\x52\x83\x1D\x70\x3F\x70\xCB\x7E\x87\xC3\x0E\xAB\x54\x04\x80\x80\x7D\x16\x31\xB9\x83\x32\x5D\xE5\x82\x74\x04\xE2\x08\x9A\xFD\x64\x23\x84\x20\x86\x8C\x80\x66\x83\xB9\x82\x33\xD3\x2C\xE4\x5A\x0E\x85\x2B\x85\x4F\x36\xBB\x82\x94\x5C\xF0\x82\xE1\x03\x9E\x07\xB6\x11\x80\x1D\x83\x39\x82\x74\x80\x6B\x82\xDF\x82\x5D\x03\xED\x02\xA7\x0E\x9A\x73\x63\xB9\x3B\xB4\x82\x95\x46\xF8\x82\x19\x04\xE2\x07\xB3\x17\x8E\x1D\x8D\x42\x86\x77\x83\x07\x83\x97\x7F\xBF\x05\xB0\xBE\x7A\x04\x8E\x85\x6F\x4F\x3E\xBF\x80\xBA",
"\x46\x00\x83\x50\x04\xA8\xE8\x4E\x17\x91\x29\x84\x45\x86\x60\x82\x74\x82\x84\x81\x0F\xFF\x1F\x9A\x4E\xE6\x54\x4A\x65\x5B\x81\xAF\x83\x6D\x83\xC8\x6D\xB9\x05\xA4\x06\xA8\xFE\x66\x19\x8A\xFA\x7B\x7B\x83\x1C\x7E\x04\x81\xA3\x01\xCC\xA5\x65\x84\x63\x25\x8D\x92\x36\xBD\x83\x9C\x5C\x08\x83\x88\x04\xC6\x05\xAF\xA9\x68\x16\x8D\x41\x84\x5F\x7F\x81\x82\xA9\x7F\xD4\x05\xBA\xD4\x46\xD1\x77\x92\x72\xEF\x75\xC5\x80\x50\x82\x43\x7A\xE2\xF3\x4B\x03\xA5\x04\x9F\x21\x80\x58\x84\x16\x82\x15\x82\x5B\x80\xF9\x05\xEB\xBE\x7D\xB2\x62\x76\x70\x7F\x46\xC1\x81\x93\x48\x18\x83\x66\x03\xF5\xD1\x4A\x12\x94\x9D\x72\x14\x84\x23\x80\x51\x80\x8F\x80\x49\x06\xA0\x88\x52\x12\x8D\xA3\x7A\x3F\x86\x9B\x72\x93\x82\xBE\x49\x50\x06\xF9\x06\xBA\x0E\x8B\x21\x8E\x2D\x85\xC6\x82\xE6\x7F\x1B\x83\x9C\xFF\x39\x0C\x9B\xFA\x7F\x07\x0E\xB5\x7C\xBE\x79\x7B\x83\x1F\x83\xC4\xF4\x03\xE7\x6E\x07\x89\x0D\x80\x1F\x80\x21\x80\x47\x82\x61\x80\x83\x05\xEA\x01\x8B\x15\x83\x3D\x77\x19\x81\x2F\x5D\x87\x82\xD2\x82\x1F\x06\xDA\xBC\x5A\x15\x84\x07\x84\x64\x87\x24\x81\x10\x83\x4A\x80\xF6\x02\xF8\x02\x81\xA2\x6C\x4C\x7A\x6B\x6B\xEC\x7C\x98\x3E\x17\x83\xBB\xB5\x61\x0C\xB9\x0E\x93\xF5\x6B\x3B\x85\x58\x75\x85\x82\xAD\x81\x17\x06\xB7\x06\x98\x11\x93\x0E\x83\x43\x84\x73\x7D\xDF\x7C\x89\x80\x19\xE9\x0F\x51\x4E\x16\x90\x33\x8C\x50\x7B\x5A\x74\x6A\x80\x70\x74\x5C\x05\x8F\xFB\x77\x19\x8A\x08\x8E\x51\x83\x96\x74\xE2\x7D\xB2\x7B\x13\xE9\x44\x03\x83\xFE\x66\x0E\x8C\xD7\x7A\xD4\x82\xAC\x2E\x48\x83\x3C\xB9\x12\x0D\xA9\x10\x9A\x1B\x83\x63\x84\x6F\x82\x99\x82\x65\x81\x68\x06\xCC\x05\x99\x19\x94\x4B\x76\xD8\x7C\x73\x7C\x17\x82\xB1\x74\x5E\x04\xB4\x0B\x88\x17\x84\x35\x8D\x8D\x72\x08\x75\x5C\x81\x7B\x7A\xBC\x01\x91\xEA\x7E\x06\x83\xEB\x7D\x6A\x82\x15\x80\x79\x81\xC4\x35\x21\xED\x67\x03\xBF\x85\x69\x0F\x8D\x4B\x78\x8F\x69\x0E\x83\xBF\x40\x5F\x06\xFC\x45\x7A\x1A\x8D\x53\x7A\x42\x85\xD7\x82\x03\x83\x5F\x83\xE0\x02\xF7\x0B\x8C\x0F\x89\x30\x82\xA6\x67\x3E\x83\x59\x71\xBB\x6E\xA7\xFD\x09\xFB\x69\xF6\x7E\xEA\x6A\xC9\x7E\xC7\x82\x6D\x83\xA0\x82\xB8\x05\x83\x0D\x8B\x05\x89\x35\x85\x0F\x86\xC8\x81\x04\x83\x2B\x82\x03\xFF\x0B\x0D\x82\xF0\x46\x4A\x74\x75\x6A\x5B\x78\xF1\x7E\x6E\x79\x11\x02\xD2\xF7\x4E\xDF\x4C\x10\x33\x10\x1A\xE1\x77\xE6\x65\xAF\x6C\x0F\x11\x72\xA9\x27\x89\x62\xE3\x48\x86\x26\x8A\x7F\x3C\x19\x5A\x81\x54\x69\x5B\xEA\x70\xDB\x7B\x75\x56\xB7\x29\x10\x7D\x42\x01\x36\x7C\x6C\xF5\x57\x87\x30\xE1\x6C\xCE\x76\x10\x07\x10\x7E\x7F\x7A\x50\x81\x03\x5E\x0C\xF1\x56\xD5\x64\x13\x89\xCF\x59\xC6\x7B\x3F\x00\x86\x83\x73\xF8\x4B\xC4\x58\x1C\x17\x42\x23\x71\x86\x5D\x5D\xC5\x83\x2F\x80\xC8\x54\x16\x04\x18\xB3\x58\x6D\x0A\x71\x83\x25\x7B\x7C\x59\x8E\x83\x16\x02\x21\x14\x2E\xB7\x68\xF1\x7A\xFC\x1F\x1F\x01\xCF\x82\xE2\x7A\x57\x02\xC0\x0E\xAD\x01\x0C\xC3\x73\x88\x7A\xE4\x83\x11\x3D\xEA\x30\x19\x59\x41\x00\x26\xF8\x6F\x93\x5A\x74\x80\x0F\x7C\x9F\x81\xA6\x23\xFF\x00\x19\xB2\x26\x1C\x9E\xB4\x78\x28\x81\xE5\x82\x85\x00\xAB\x83\x93\x02\x87\x8D\x24\xF0\x5F\xF4\x5A\x06\x02\x49\x81\x57\x67\xAA\x44\x76\x02\xC3\xDC\x7F\x21\x2B\x12\x7A\xB0\x02\xC4\x28\x02\x05\xAB\x83\x36\x3A\x6A\xFB\x70\xE6\x1B\x6C\x79\x06\x04\xFF\x7C\xBC\x7F\x52\x81\x4D\x02\xA7\x05\x8C\x15\x2C\x3B\x8C\xC5\x06\xED\x80\xB3\x02\x32\x81\x42\x00\x18\x11\x35\x1D\x84\x3A\x8C\x54\x22\x53\x82\x04\x17\x59\x81\xE6\x6A\x1E\x05\xAF\x75\x19\x12\x86\x77\x87\x2A\x2C\xA3\x81\x94\x2C\x7A\x07\xD3\x8A\x3C\x1D\x82\x80\x0E\x77\x80\x54\x04\xDC\x83\xC0\x83\x31\xB1\x4D\x0E\x85\x1E\x92\x15\x8C\xA2\x1D\x4D\x82\xCE\x83\xC9\x78\xF9\x04\x91\xE8\x43\x04\x1E\x24\x80\x68\x80\xDF\x80\x88\x82\x7D\x83\x59\x01\x85\x0D\xB4\x04\x81\x2C\x86\x13\x81\xCF\x82\x66\x78\x2F\x80\x3F\xE7\x55\x0B\xA1\x01\x84\xF8\x5C\xE3\x78\x89\x7F\x9F\x7C\x88\x6D\x2D\x03\xBB\x17\x21\x28\x04\x3D\x8F\x5F\x81\xD0\x81\x9D\x5C\xD4\x83\xDD\x01\xAA\x0F\x9B\x05\x80\x0F\x80\x3D\x78\xE0\x80\x3E\x6A\xD8\x83\xD8\xFA\x23\x0A\x8C\xCC\x70\x04\x78\xE1\x6F\xA6\x82\x05\x76\x76\x81\x4D\x06\x9D\x09\x8C\x1B\x80\x50\x78\x87\x72\x33\x80\xAA\x83\x68\x83\x7E\xFC\x53\x0D\xB0\xF6\x75\x36\x8C\x10\x86\x1B\x73\xEA\x67\x9C\x82\x3A\xBF\x6A\xF8\x7D\x0B\x9D\x29\x87\x57\x82\xFA\x83\xBD\x82\x20\x83\x17\xF4\x42\x0C\xB2\x04\x82\x3E\x83\x18\x84\xF8\x80\x42\x7F\x75\x83\xC3",
"\x06\xB8\xE6\x58\x6D\x7A\x99\x73\x2E\x66\x61\x80\x54\x83\x3A\x5C\x11\x03\xEC\x0B\xAD\xA4\x3C\x3D\x8F\x60\x86\xF7\x81\x6C\x6A\xE0\x83\x02\x02\xDE\x03\x9B\xF4\x75\x19\x89\x69\x84\x6B\x81\x70\x81\x7D\x37\x1E\x03\xAC\x09\xBB\x1E\x93\x3E\x8F\xBD\x71\x40\x77\x1F\x81\x35\x80\x81\x00\xA6\x01\xBE\x1B\x97\x07\x86\x7C\x81\x34\x80\x05\x82\x45\x7F\x76\x05\xD1\x0F\x89\x13\x87\x3F\x81\x67\x80\x8A\x7A\xF5\x82\x29\x7A\xD8\x07\xF4\x02\x9A\x1F\x8B\xF7\x78\x64\x82\x25\x45\xCE\x80\x75\x70\xB3\x07\x8D\xBD\x5F\x26\x6A\xA4\x56\x6B\x86\x5C\x2C\xFF\x83\x27\x83\xFE\x07\xB6\xD1\x61\x18\x9C\x98\x73\x50\x80\x7A\x61\x41\x83\x01\x64\x5E\x01\xA5\x2C\x7B\xCE\x75\xDD\x6D\xA4\x74\x8D\x83\x65\x7F\x78\x70\xDD\x06\xD5\x63\x51\x18\x5A\x3D\x86\x7E\x86\xC3\x82\xE9\x82\x41\x83\xEA\x07\x81\x03\xAC\x1F\x9F\x0E\x87\x68\x81\x25\x80\xF7\x83\x95\x80\x17\x08\x93\xF2\x71\x16\x8F\x23\x80\xEC\x6D\x05\x85\x5B\x31\x17\x84\x60\x06\xB1\x10\x99\x15\x89\x42\x84\x54\x84\xDF\x81\x53\x81\x55\x83\x4F\x01\xAE\x0F\x91\x05\x9A\x2C\x80\x37\x84\x5F\x6B\x70\x82\xE0\x79\xAD\xFE\x42\xE7\x44\x4C\x62\x4C\x38\x85\x82\xDC\x82\x16\x85\xB5\x82\x33\x08\xEB\xE6\x75\x20\x84\x49\x77\x83\x83\x7E\x6A\xFA\x78\x08\x79\xD4\xF3\x02\xF6\x67\x21\x8C\xF5\x7A\xD8\x7B\xDC\x7C\xE3\x80\xAA\x82\x45\x08\xA5\x0F\xA8\x1F\x82\x2A\x8C\x85\x83\xAB\x81\x08\x84\xC8\x80\xAC\x07\x92\x03\xA2\x21\x94\x0C\x88\xC2\x37\xDD\x7E\xFE\x82\x00\x36\x6D\x08\x93\x0A\xAF\x21\x8B\x4B\x71\x45\x83\xCA\x80\xEE\x7E\x46\x82\x96\xFB\x41\x0D\x80\x0F\x8C\x37\x88\xB4\x7C\x09\x74\x0E\x60\x1D\x73\x0B\x08\x9C\x10\xA5\x1A\x85\xA6\x7F\x81\x87\x98\x7B\x21\x85\xCE\x80\x13\x08\x9F\x03\x95\x20\x93\x20\x82\xB2\x7B\xC1\x80\x86\x6B\x06\x83\x81\x08\xBD\x0F\x87\x21\x9F\x3D\x85\x88\x84\xD0\x81\x51\x82\x20\x82\x23\x08\xF5\x05\x8B\x22\x9A\x11\x17\x14\x80\x2E\x39\x28\x84\x23\x84\x83\x08\xF9\x0D\xB5\x22\x9B\x37\x87\x8A\x85\xAB\x81\x2A\x84\xA4\x82\x4F\x08\xAF\x03\x82\x1C\x95\xD9\x7F\x51\x3D\x95\x76\x9B\x83\xFD\x83\x0C\x08\xE1\xE8\x5E\xD3\x7F\x09\x89\x11\x87\x2C\x81\x95\x83\xB4\x80\x34\x05\xB5\xFA\x6A\x19\x8B\x2C\x87\xDE\x04\x1D\x69\x8F\x82\x48\x84\xD1\x08\xA5\xEA\x62\xD1\x65\x0B\x85\x8D\x81\xA5\x78\x26\x84\xDD\x7F\xD9\x08\xBC\xFF\x5C\x22\x99\x1F\x6F\xF7\x6C\xC9\x82\x21\x83\x58\x84\xFD\x07\xB3\x11\xBF\x1F\x83\x46\x89\x7A\x87\x16\x85\x91\x83\xE7\x80\x47\x06\xD1\x03\xB1\x1F\x8B\xA3\x79\x62\x87\xB6\x3F\xCF\x7E\x45\x5D\xB2\x5E\x11\x11\xA8\x15\x93\x44\x8E\x88\x71\xE2\x6A\x6E\x83\xCA\x82\x40\xFC\x28\x06\x86\x06\x88\xFA\x7F\xCC\x72\xE9\x7E\x97\x82\x78\x84\x30\x08\xF2\x11\xB2\x20\x80\x40\x80\x53\x87\x8E\x81\x00\x82\xB5\x7F\x05\x08\xB2\x07\xBB\x23\x82\x3D\x7E\x72\x85\xCF\x82\x4F\x83\x0D\x84\xC0\x08\x9D\x10\x87\xD2\x65\x08\x83\x0F\x86\x0B\x86\x73\x80\x2B\x83\xD0\x01\xD8\x0C\x87\x20\x9A\x32\x8F\xFB\x7B\x53\x75\x37\x6F\xD2\x80\xFC\xC3\x02\x12\x90\x16\x84\x48\x87\xA8\x77\x11\x74\x0D\x84\xEC\x81\x04\x05\x99\x06\xB8\x20\x9B\x65\x77\x14\x63\x38\x81\x5A\x7F\x5D\x7A\x5C\xE1\x62\xFD\x4A\x28\x76\x42\x8F\x19\x32\x26\x86\x72\x82\x9A\x84\x1A\xF3\x36\x12\xB2\x21\x98\x49\x86\x83\x82\x27\x86\x1D\x85\xED\x78\xD7\x06\xEE\xAF\x47\x11\x81\xFC\x7D\x92\x72\xAF\x7F\x4B\x75\xFB\x83\xD7\xBB\x06\xFF\x60\x1B\x90\x48\x89\x85\x82\x22\x87\x16\x84\xDD\x80\xCC\x01\xA6\x12\x9B\x14\x89\x44\x83\x1F\x85\x04\x85\x7D\x80\xB2\x70\xC5\x06\xAD\xF7\x67\x8A\x7F\xBD\x46\x70\x6F\x86\x82\x86\x7E\x67\x80\x25\xC0\x6F\x0D\x21\x23\x85\x97\x7B\x6B\x83\xCC\x82\xB9\x82\x16\x82\xE8\x06\xFE\x06\x97\x19\x80\x1C\x8B\x8E\x83\x75\x7D\x5A\x84\xFC\x80\xF7\xC8\x6E\x08\x90\x0F\x9E\x36\x80\x97\x87\xB8\x82\x41\x00\xA3\x84\xDF\x05\xC8\x12\xA9\xCD\x6A\x4A\x8C\x3C\x7B\x0E\x86\x65\x83\xDE\x82\xF0\x07\xAB\x12\x84\x1B\x9D\x0B\x7C\xB9\x7B\xA4\x75\x57\x6E\xFF\x80\x21\xEA\x64\x0D\x33\x25\x9E\x97\x71\x65\x80\x60\x78\x4A\x7A\x59\x7A\xB9\xFF\x28\xF6\x59\x24\x88\x1F\x8D\x97\x84\x98\x74\x9A\x79\x07\x75\x1A\xA6\x4A\x94\x45\x1C\x95\xA9\x77\x70\x87\xA6\x7B\xF2\x7D\x06\x81\x78\xE2\x01\xB7\x1F\x13\x8F\xFF\x76\xBD\x66\xFF\x7E\xF9\x57\x17\x57\x5C\x0E\x5D\x8F\x2E\x01\x14\x25\x8D\xBD\x7B\x9C\x82\xEE\x5B\x58\x30\xEE\xFD\x3B\x11\x36\x26\x96\x7D\x28\x9B\x87\x21\x09\x3A\x25\xDD\x84\x05\x5C\x18\x11\x27\x13\x85\xE0\x29\x4E\x87\x6C\x33\x3A\x83\xCD\x76\xF7\x04\xA3\x05\xB5",
"\x26\x91\xFF\x76\xBA\x55\x38\x84\xCE\x1F\xE3\x84\xB6\x4F\x18\x11\x11\x27\x90\x64\x32\x4F\x86\xF2\x45\x37\x83\x50\x3F\x81\x00\x3A\xDA\x62\x16\x5C\xD9\x30\x12\x52\x5D\x4E\xB2\x3C\x1F\x37\xD6\xAD\x3F\xB8\x77\x57\x1F\x11\x8F\x7F\x05\x36\x3F\x76\x57\x44\x54\x18\x04\x73\x4D\x37\x09\x60\x0F\x36\xDE\x00\x0F\x03\x66\x76\x7D\x3A\x13\xA0\x5B\xED\x3F\x6E\x6B\x4F\x8B\x68\x71\xE3\x00\x78\x66\x51\x33\x1D\x73\x3C\xF6\x1F\xF8\x7A\x14\x72\x10\x06\xDA\x14\x84\x66\x03\x85\xF6\xDF\x6C\x13\xB2\x20\x17\x72\x67\x12\x03\x10\x03\x66\x76\x4C\x00\x50\xCD\x10\x14\x93\x10\x7C\x6D\x63\xF4\x24\x99\x5E\x1C\x68\x7D\x3D\xE6\x0D\x7F\x00\x1B\xB6\x76\x04\x00\xD5\x64\x43\x87\x84\x85\x61\x77\x16\x0A\xC8\xA8\x72\xBE\x70\xF9\x1C\xB3\x39\x0F\x03\x66\x77\x20\x0F\x10\xCE\x28\x14\x89\x28\x8E\xFD\x71\xA0\x86\xBC\x07\x1D\x01\xCD\x76\x8D\x00\x50\x9A\x71\x28\x9F\x50\x83\xEB\x32\x96\x0B\xFB\x4E\x7A\x21\x9B\xED\x0C\x01\x10\x35\x7A\x51\x84\xA3\x86\x36\x3A\x8D\x85\x0D\x44\xF0\x9F\x1B\xDB\x4B\x02\x10\x6A\x63\xA4\x85\x47\x85\x45\x81\xDE\x66\x15\xCE\x40\x14\xBB\x62\x1E\xD9\x3A\x08\x00\xAA\x65\x93\x85\x09\x62\x97\xCE\x02\x24\x1B\xAD\x17\x51\x89\x10\x03\x40\x86\xBA\x4D\x44\x00\x50\xCD\x58\x14\x90\x29\x87\x3B\x8C\xD4\x43\xB4\x56\x92\x85\x9A\x5C\x9B\xED\x08\x01\x10\x35\x62\x53\x86\xA4\x83\xCA\x7C\x85\x67\x4F\x5E\x5F\x0A\xF9\x76\x5B\xB6\x67\x04\x00\xD5\x64\x4D\x87\x96\x85\x4A\x73\x02\x05\x20\xF8\x69\x29\x83\x08\x02\x08\x03\xB3\x74\xF7\x79\x09\x50\x06\xF5\x6A\x13\x8F\x0B\x14\xA1\x43\x21\x74\x67\x3D\x1D\x01\xCD\x76\x0E\xEA\x13\x40\x43\xAF\x6E\x51\x59\x91\x02\x41\x85\x27\x06\x50\x83\x3C\x7B\x05\x01\x1B\xB6\x7F\x3D\x72\xE2\x60\xFE\x72\x3E\x6E\x9E\x41\x86\x0A\xEF\x0F\x13\x39\x20\x39\x66\x93\x75\x80\x26\x39\x5F\x6A\x16\xA0\x37\x1A\x99\x6C\xDE\x08\x48\x40\xC3\x39\x21\x02\xA2\x84\xDD\x5B\x67\xDE\x0D\x15\x82\x7E\x6F\x54\x80\x6D\x41\x52\x87\xFF\x12\x77\x74\x96\x0A\xC3\xDD\x60\xDE\x13\x53\x02\x4F\x2C\x53\x85\xD7\x4F\x84\x00\x7B\x00\x1B\xDB\x74\x6D\x73\x00\x5A\xCC\x68\x8B\x53\x29\x03\x48\x85\xD5\x9A\x7B\x3B\x7B\xEC\x32\xF9\x4B\xD9\x74\xA0\x6B\x04\x50\x49\x6B\xC1\xAB\x05\x15\xB6\xB8\x79\x55\x8C\xFD\x3F\xAA\x65\x86\x85\xCD\x76\x6A\xD2\x13\x40\x61\x51\x61\x56\x8B\x8D\x04\x42\x86\xD6\x4F\x24\x85\xEF\xE3\x5A\xF1\x55\x52\x71\xD7\x1C\xB3\x3E\x0F\x03\x66\x76\xB0\x17\x94\xB7\x24\x15\x82\x2F\x58\x55\x81\xE0\x34\xA2\x55\x95\x85\xCD\x76\x30\xC8\x13\x40\x49\x27\x7C\x4D\x5D\xAC\x80\x44\x86\x6F\x66\x84\x76\xE6\x0D\x74\x00\x1B\xB6\x65\x1A\x6A\x1D\x72\x5B\x87\x58\x48\x6E\x85\x2D\xCE\x27\x02\x3C\x01\x1B\x6C\x72\xF8\x5B\x02\x52\x4D\x60\x72\x85\x10\x06\x70\x15\xB5\xE6\x30\xF7\x5C\xB3\x3A\x0F\x03\x66\x77\x62\x5C\x13\xA0\x09\x75\x76\x2A\x82\x56\x88\x0C\x5F\x3D\x5E\xBA\x4F\xCD\x76\x27\x41\x13\x40\x45\xD9\x43\xDE\x2A\xAF\x87\x9D\x3E\xAB\x84\xF5\x3D\x09\x01\x7D\x00\x19\x09\x93\xFE\x42\x32\x5C\x59\x85\xBE\x85\x61\x77\x1B\x00\xF7\x04\x82\x0C\x07\xFC\x41\x27\x83\xFA\x4F\x34\x58\x09\x59\xDB\x08\x0D\x16\xB3\x07\x5E\x56\x86\x10\x01\x0E\x03\x66\x76\xE8\x54\x13\xA0\x3D\x57\x64\x72\x7C\x4F\x81\x2A\x34\x34\x08\x95\x85\xF2\x28\x9B\xED\x77\xCA\x13\x80\x4F\x45\x56\xB1\x81\x62\x01\x62\x3C\x97\x85\x73\x0A\xFB\x12\x3E\xEC\x36\x18\x53\x01\x51\xBC\x50\xA1\x85\x90\x85\xC3\x0A\x8C\x14\x95\x60\x1B\x6C\x71\x23\x3B\x02\x51\x8C\x4E\x7C\x85\x36\x0B\x9C\xC0\x2F\x54\x0F\x59\x8E\xE3\x63\xD7\x06\x2A\x4B\x09\x50\xC8\x97\x35\x16\x83\x07\x06\x55\x83\xA9\x87\x8B\x71\x9A\x4E\xF3\x06\x6D\x00\x1B\xDB\x5E\x45\x53\x00\x54\x48\x4F\x67\x87\xC5\x85\x59\x37\x6A\xED\x68\x15\x8C\xE2\x5B\x6C\x7E\xA3\x33\x02\x51\x16\x49\xD7\x59\xEA\x05\x66\x15\x90\x2B\x97\x5A\x8D\xA0\x83\xB3\x75\x66\x37\x09\x50\x03\x8C\x20\x16\x90\x18\x0E\x56\x87\x95\x00\x4D\x87\x3D\x64\x0C\x85\x8B\xEE\x3E\xF6\x22\x16\x42\x55\x8B\x78\x46\x5D\x84\xCB\x85\x33\x80\xED\x09\xEF\xF9\x2F\x27\x8D\xF3\x79\x3F\x02\xBF\x10\xAE\x12\xFE\x12\xFA\x0B\x24\x7C\x5A\xB8\x79\xEE\x6F\xAA\x86\x20\x01\x79\x84\x23\x71\x13\x81\x7C\x16\x92\x04\x5E\x5B\x8B\xA7\x81\x68\x84\xC7\x31\xC1\x85\x94\xF4\x51\x04\x24\x9B\x17\x67\x54\x9F\x81\x6F\x86\xEE\x5A\x93\x3E\x92\x0B\xA5\xFA\x14\x2E\x97\x55\x86\xB9\x86\x3D\x85\x9F\x32\x52\x39\xF7\x7C\x09\x17\xB3\x27\x9D\x33\x3C\xB3\x39\x6B\x86\xEE\x5A\xD2\x02\x13\xA0\x62\xFC\x43\x2C\x80\x5A\x88",
"\xAA\x4E\x2E\x0C\xD3\x85\x51\x16\x9B\xED\x33\x0F\x13\x80\x5F\xF3\x72\xB5\x82\x29\x03\xF6\x71\x30\x67\x06\x01\x20\xF6\x3A\xDE\x5C\x51\x03\x01\x50\xE9\x2F\x01\x6F\xCA\x85\x4F\xF5\x4C\x1A\x35\xB4\x69\x38\x8A\xBF\x52\xE6\x75\xE8\x82\xFE\x61\xDB\x09\xC6\x15\x7E\xA7\x71\x4A\x77\x2D\x6C\xDC\x80\xAF\x83\x58\x7A\x70\xEA\x79\x12\x90\x10\x94\x40\x86\x96\x86\x5D\x35\x61\x82\x3A\x80\x87\x05\x91\xD8\x63\x01\x9A\xEF\x6A\x63\x80\xF7\x83\xB5\x80\xA3\x6A\x3F\x9B\x6B\xE8\x13\x2F\x85\x54\x7D\x88\x75\x26\x86\x41\x84\x11\x83\xE4\x05\xA4\x0C\x85\x08\x86\x31\x87\x6A\x5F\x7B\x84\x33\x7E\xE3\x74\x4E\xFE\x39\xFD\x78\x04\x49\x29\x87\x6D\x71\x44\x05\xF4\x84\x3D\x47\xEB\x0B\x98\xE6\x6D\x2F\x89\x4A\x8F\xBE\x87\x26\x87\x88\x83\xEC\x81\x25\x06\xA4\xFE\x5C\x0F\x93\xD9\x74\x51\x68\x8D\x7E\xC9\x78\xF1\x83\x3C\x05\xCC\x0A\x9A\xA2\x7F\x5F\x85\x1C\x49\x80\x87\xD9\x79\x01\x86\x8B\x09\x85\x18\x8B\x25\x87\x60\x89\x93\x82\x7B\x82\x02\x87\x13\x83\x0C\x0C\x81\xE1\x4D\x15\x95\x3F\x8F\x54\x82\x90\x80\x0F\x5B\x84\x07\xF8\xE9\x1B\x49\x69\x2F\x8F\xEA\x36\xC1\x80\x79\x78\x06\x86\xE5\x79\x8C\x09\xF4\xE7\x4E\x26\x89\x48\x84\xBF\x87\x40\x80\x03\x87\x04\x84\xB0\x62\x7E\x17\xAA\x2F\x80\x45\x76\x7F\x75\xA2\x80\x25\x84\x09\x83\x52\x04\x80\x08\x90\x17\x82\x20\x8A\x89\x84\x80\x83\x46\x85\xF4\x73\xBB\xE0\x67\x17\xB2\x6D\x6B\x61\x82\xFC\x3D\x85\x84\xFC\x79\x17\x86\xF2\xF3\x31\x18\x82\x14\x8C\x4A\x84\x87\x86\x29\x85\x55\x70\xFB\x85\x3A\x08\xB9\xFC\x5D\x6E\x6A\x06\x8F\xAC\x7C\x60\x6A\x32\x38\x0A\x86\x43\x94\x4E\x18\x84\xD0\x70\x62\x80\x50\x82\x8A\x86\x5F\x83\x19\x86\xF3\xFC\x35\x18\xA9\x0C\x93\xD9\x7D\xCC\x7C\x49\x77\x1E\x85\xC4\x81\xD8\x01\xC2\x10\x84\x25\x95\x27\x30\xC6\x85\x89\x4E\x18\x87\x4C\x7A\x64\x0C\xFC\x0A\xA6\x31\x94\x2C\x83\xBC\x7E\xBC\x82\x42\x85\xCC\x82\x7B\x06\xEA\xEE\x44\xC8\x68\x9D\x78\x95\x83\x6B\x63\xF5\x72\x3A\x86\x3B\x0C\xB3\xD1\x7D\x30\x98\x2A\x80\x87\x84\x22\x87\x41\x85\x3E\x86\xC9\xFC\x72\x0A\xB4\xF5\x6D\x63\x81\xCC\x4C\x1F\x80\xE8\x7F\x58\x7E\x68\x08\xFD\x10\x8B\xA0\x7C\xDD\x66\xAE\x2D\x8E\x86\x3F\x53\x3B\x86\xDC\xF4\x59\xBC\x74\x22\x80\x4B\x83\x64\x86\x1E\x86\xA1\x83\x5C\x84\x42\x04\xAB\x11\x84\x11\x9A\x07\x8F\x21\x7A\x0F\x84\x37\x80\xE0\x6A\xDE\x00\x90\x77\x5B\x17\x8A\xAE\x4A\xC3\x84\x85\x84\x0F\x86\x46\x74\x14\xE8\x05\x12\x84\x5D\x70\x5F\x87\x8A\x75\x8C\x81\x24\x87\xF3\x82\x74\xFD\x2E\x25\x5D\x0E\x62\x3D\x82\x10\x06\x93\x84\xDC\x52\x50\x86\xE3\x06\xAF\xE9\x6E\xA9\x78\x5E\x84\x63\x81\x34\x87\xDA\x81\x74\x84\x6B\x01\xC7\x18\xBA\xAB\x5B\x2F\x8D\xAC\x71\x20\x02\x31\x86\xF7\x54\xC8\x0C\x8A\x13\xB0\x30\x9A\x60\x8D\x98\x84\x8A\x87\x63\x85\x69\x76\x58\xFD\x1C\xD9\x6E\x22\x92\xF9\x60\x8A\x84\x89\x84\x32\x41\x6C\x86\x5E\x09\x8D\x19\xB4\x23\x81\x3E\x86\xCA\x83\xF5\x83\x31\x85\xAF\x82\xC9\x08\xA4\xDF\x3D\x22\x95\x16\x75\xCB\x85\x89\x87\x2D\x87\xFA\x5C\xA6\x05\x98\x0A\xB6\x22\x82\x4B\x86\x54\x87\x9D\x86\x60\x83\x78\x86\x4A\x05\xF9\x02\x82\xA2\x7B\xF8\x7B\x62\x87\x1D\x85\x42\x01\x6B\x86\x0D\xB3\x68\x19\x81\x23\x87\x3D\x8B\xCE\x81\x00\x87\x12\x85\x01\x84\x79\x04\xC5\x18\xBB\x11\x92\x66\x8D\x89\x86\x4A\x79\x58\x80\x62\x86\xD6\x0C\x89\x19\xA2\x78\x6B\x64\x8A\x56\x87\x87\x85\x0F\x7B\x01\x83\xE4\x03\xC3\x18\x98\x24\x90\x66\x8A\x34\x85\x34\x84\x48\x7F\xA4\x7D\xEE\x08\xEF\xE8\x47\x34\x9A\x68\x80\xF1\x68\x9F\x84\x73\x82\xF1\x82\xD7\x03\x9C\x18\x8D\x25\x9E\x60\x86\x50\x85\xE4\x7E\xD7\x75\x81\x86\x3E\xFF\x5D\x0C\xBA\x13\x85\x66\x8C\xD2\x85\xFE\x70\x2E\x86\xB5\x74\xBA\x0C\x93\xB7\x7C\x32\x9A\x45\x7E\xCB\x82\xAE\x7E\x24\x87\x1C\x84\xF6\xF2\x53\xD1\x73\x72\x65\x3F\x8B\xD2\x86\x96\x86\x22\x87\x9F\x86\xFE\x04\x9E\x1A\xAF\x0F\x80\x69\x81\x3F\x87\xD2\x83\xFC\x80\x75\x83\xF5\x03\xFC\xFC\x79\x01\x87\xDB\x73\x27\x83\x2B\x85\x53\x86\x7B\x86\x4F\x0D\xAE\x1A\xA1\x17\x87\x2D\x80\x3F\x81\xB5\x82\x55\x87\x99\x82\x7B\x09\xB5\x0A\xA6\x34\x97\xE9\x73\x42\x80\xEB\x48\x4C\x85\xD8\x67\x08\x0D\xF0\x6B\x4A\x34\x82\x49\x81\x64\x84\x94\x87\xFA\x83\x76\x86\xC3\x07\xCD\x10\xA1\x07\x80\x68\x81\x56\x81\x2A\x87\xC0\x71\x0D\x5B\x6A\x09\x9D\x6C\x46\xEF\x4B\x5B\x5C\xD6\x7F\x90\x85\x4B\x35\xB8\x86\x71\xC1\x73\x1A\xA3\x22\x92\x33\x8F\x80\x87\x3D\x81\x04\x85\xF8\x80\x64\x09\x9D\x0A\xAA\x32\x92\xED\x7F\x6A\x81\x36\x81",
"\xAC\x82\x2A\x67\xD3\xF4\x72\xFE\x63\x83\x77\xA6\x7E\xC5\x82\xD6\x2C\x62\x87\xF9\x5C\x8A\x0D\xCD\x0D\xB5\xD3\x6F\x36\x8F\x50\x7D\x18\x86\xAA\x83\xC8\x86\x78\x06\xFC\x1A\x98\x03\x80\x48\x5A\x45\x83\x2E\x73\x16\x6A\xD4\x7E\x76\xE1\x06\x1B\x80\xB0\x3F\x6C\x8A\xF2\x59\xB4\x84\xF5\x82\x6F\x74\xA5\x08\xF2\x02\xA6\x36\x9D\x37\x88\x8F\x87\xDF\x81\xF7\x85\x80\x83\x68\x09\x94\x13\x81\x36\x94\x48\x62\x98\x81\x8E\x84\x1C\x83\x7E\x76\x5F\x0C\xBD\x1A\x8B\xA2\x62\x6B\x81\x5F\x86\x7F\x81\x10\x87\xE7\x82\x67\x0D\xAB\x0B\x92\x34\x8D\x2D\x84\xD1\x83\x77\x76\x1F\x83\xFB\x5D\x77\xE9\x62\xD2\x45\x12\x93\x49\x76\x4F\x82\xB9\x86\xC2\x74\x8E\x86\x7B\x05\xEC\x0A\xA3\x0C\x86\x60\x81\xBF\x80\x81\x87\xFC\x85\x0F\x86\xAC\xFF\x33\xF6\x46\xCA\x66\x42\x31\xFC\x7E\x92\x82\xF5\x65\x07\x81\xD0\xFB\x4C\x17\x97\x5F\x3F\xF4\x56\x08\x05\x17\x7A\xF4\x7E\x2C\x72\xD7\xF0\x10\x9C\x49\xD7\x7E\x3C\x8D\x06\x03\x1C\x79\x9B\x7B\x57\x7B\xA3\xF0\x5E\xC7\x67\x8E\x6A\xB9\x01\x73\x87\xE1\x81\x5E\x01\x99\x83\x23\x3A\x35\x0E\xA9\x48\x77\x39\x81\x7B\x87\xB3\x20\xC6\x83\xBB\x7A\x40\xF6\x37\x8A\x43\x1E\x96\xC3\x71\x74\x84\x39\x1E\xE6\x83\xA9\x22\x23\x07\xF9\xC4\x67\x04\x12\x3A\x8E\x5F\x7B\xC2\x85\x6A\x2E\x95\x83\x8B\xEB\x53\x04\xB6\xE8\x16\xAB\x7F\x72\x7A\x4D\x66\xEE\x5B\xA7\x4C\x4D\x49\x2E\x13\x8C\x08\x83\x9E\x5E\x1D\x69\xA8\x5D\x89\x86\xD0\x3D\x9B\x04\xBC\x1B\x17\xA5\x24\xFB\x73\x76\x87\x7B\x73\x49\x00\x37\x85\x48\xDA\x36\x1C\x97\x5E\x2D\x7A\x72\xEE\x75\x9F\x75\xF2\x65\x3B\x27\xFD\x8D\x20\x0D\x8E\x2F\x8E\x01\x8E\xF5\x4D\x06\x83\x01\x70\x60\x2E\x1B\x25\x37\x99\x27\xCC\x7F\x4E\x8C\x2B\x81\x21\x03\x93\x85\xC8\x76\x8D\xEB\x31\xE8\x33\x27\x21\x65\x2B\xE4\x84\xFD\x7D\xB1\x1B\x22\x85\x7B\xF8\x67\x1B\x27\xEB\x4F\xA5\x63\xE6\x77\x5E\x06\x85\x24\x05\x25\x43\xDB\x35\xF8\x78\x36\x13\x71\x8D\xBD\x65\xEE\x4D\xD7\x10\x0A\x3D\xC9\x1C\x31\xF3\x0D\x21\x18\x63\x2A\x85\x5D\xC7\x87\xB7\x83\xE3\x4C\x66\x0E\xF3\x98\x04\xC9\x36\x3E\x06\x24\x3A\xCD\x84\xF4\x04\xB1\x11\x9F\xFA\x23\xFC\x5B\xF5\x51\x30\x4A\x77\x5F\x77\x6C\x3A\x27\xCD\x07\xA0\x4A\x7D\x99\x05\x5E\x6F\x65\x89\xB2\x01\xA5\x24\x04\x87\xD4\x71\xC0\x0D\x32\xA8\x00\x00\x1C\x51\x83\xE4\x83\xCF\x85\xDE\x5A\xA4\x70\x35\x0B\x60\x52\x0D\x21\x0A\x57\x2E\xDA\x1B\xD0\x87\xD3\x81\x88\x44\xA9\x3D\x07\x1D\xA5\xE1\x75\xD7\x2A\xE8\x83\x46\x85\xB2\x5A\x1D\x87\x07\xAC\x3C\x1C\xAF\x38\x8F\x73\x89\x8B\x42\x0E\x79\x0C\x2E\xB0\x14\x80\x0E\xEA\x99\x3B\xC1\x64\x74\x81\xB3\x01\x9F\x25\x21\x86\x49\x64\x67\xFA\x40\x1B\x05\xDB\x1E\x74\x8D\xDB\x7D\x5E\x2F\x96\x87\x4A\x66\x75\x9F\x68\x99\x13\x3A\x8D\x69\x26\x7D\x1B\xD5\x87\xA5\x86\xE1\x01\xAE\x0E\xA6\x18\xB6\x50\x52\x01\x85\x1B\x67\x11\x02\x91\x86\x10\x34\x4D\xAC\x0E\xB0\x3D\x1C\x60\x50\x8C\xD3\x24\x07\x83\x27\x81\x31\x67\x57\x69\x02\x5B\x73\x1D\x16\x58\x2B\x36\x75\x22\x39\xC7\x38\x4C\x04\x67\xD2\x0C\x20\x5D\xCC\x34\x5B\x85\x72\x03\x6D\x87\xBB\x82\x22\x6D\xB3\x07\x2A\x14\xB5\x81\x73\x01\x80\x00\x06\xD8\x86\x28\x82\xF8\x84\x76\x09\x00\x96\x15\x3B\x9D\x63\x31\xA0\x87\x8A\x72\x70\x3B\x5D\x07\xD1\x0E\xDC\xB2\x0D\x60\x34\x76\x8B\xEC\x86\xDA\x84\x4F\x26\x6C\x87\x36\x6F\x5B\x1D\xAA\x2D\x96\x5B\x80\x98\x85\xD6\x58\xB9\x87\x48\x00\xC7\x0E\xE2\x22\x56\x60\x36\x73\x7B\x2F\x16\xD9\x84\x00\x00\x48\x00\x9B\xED\x5B\x82\x2A\xB4\x55\x50\x06\xB2\x22\x87\x83\x37\x73\x7D\x11\x98\x08\x01\xF2\x13\x13\x9E\xCD\x56\xB2\x24\xDB\x86\x62\x3C\x44\x27\xA4\xAD\x47\x04\xA8\xE9\x6A\xD9\x3F\x2B\x86\xDF\x84\x6E\x06\xD2\x02\x93\x00\x1D\x1E\x8E\xBD\x6B\x44\x68\xBD\x39\xE0\x86\x75\x5E\xDB\x26\x8A\x0B\x98\x17\xA3\x3C\x8E\x74\x84\x5E\x1A\xE4\x85\x0E\x7E\x59\x87\x27\x01\x1E\x14\x99\x39\x9F\x07\x02\x29\x6C\xD7\x65\x46\x5F\x41\x50\x92\xE4\x2D\xD2\x09\x8F\x69\xCE\x7A\x7C\x7C\x70\x85\x66\x03\x67\x2C\x8F\xD7\x05\xE1\x4B\x8F\x61\xDD\x12\x78\x6D\xA7\x0C\xE1\x6B\x90\x05\x6C\xD7\x60\xAB\x38\xC1\x7F\xDD\x6D\x77\x68\x2B\x03\xDF\x6A\x0C\x05\x6E\xD7\x65\xA3\x41\x04\x1B\xE9\x5C\x7A\x7A\xBB\x27\x70\x7C\xE5\x7C\xB6\x02\xA5\xE1\x64\x3C\x9C\x09\x2E\xF2\x81\x1F\x49\x52\x42\xF6\x15\x5C\x0E\xD4\x11\x25\x2F\x06\x49\x17\xFD\x0F\x7C\x3F\xC3\x85\xC6\x00\xA0\x0E\x83\x02\x12\x28\x81\x77\x73\xEA\x81\x20\x01\x26\x01\xAE\x87\x83\x9B\x6E\x1C\x81\x04\x0A\xD7\x39\xF5\x87\x94\x4B\xF3\x85\xD8\x67",
"\x38\x0E\xCD\xD3\x72\xD1\x6D\x50\x60\x3B\x79\xC6\x80\x03\x83\xBB\x84\x65\x06\xCE\x19\x9E\x10\x83\x4D\x80\x42\x83\x5C\x80\xF2\x82\xCE\x78\xB3\x07\xF4\xE5\x4F\xF9\x77\x3D\x8B\x72\x72\x89\x85\xBD\x82\x00\x36\x79\x0F\xE3\xD3\x62\xAB\x70\x47\x7E\xFD\x6B\x63\x75\xD1\x79\x00\x83\xF2\x05\x93\x0C\x96\x24\x82\x69\x84\x80\x84\xA4\x85\xDB\x81\x66\x81\x47\xEC\x7D\xC0\x68\x20\x96\x51\x72\xBE\x87\x0E\x82\x9F\x7C\x22\x6D\xFC\x0B\xDC\xE8\x61\x28\x11\x7C\x89\x26\x7C\x53\x74\xE5\x87\xFB\x6F\x2D\xEB\x2E\xE6\x51\x18\x9F\x68\x8A\xF9\x84\xBE\x80\x1E\x82\xFB\x82\xD3\x0D\xF8\x0B\x92\x26\x92\x3F\x8A\xA8\x60\xFC\x80\x48\x4B\x9D\x82\xA0\xFA\x24\xD8\x57\xC7\x4C\x7D\x88\x9A\x80\x6A\x77\xEB\x86\x99\x73\x15\xF4\x0B\x1A\x88\x21\x96\x6B\x8A\x84\x80\xAF\x85\xFB\x82\xBD\x86\xC5\x07\xBF\x1B\xB9\x03\x98\x05\x8B\x30\x83\x4C\x6A\x53\x83\x55\x70\x23\xEF\x72\xFC\x5C\x9E\x44\x7E\x84\xA2\x76\x6F\x78\xE9\x6C\x61\x7A\xE5\xEA\x69\x19\x92\x35\x9A\x20\x86\x89\x84\x83\x82\xE0\x86\x1B\x83\x84\x0F\x88\x0C\x95\x37\x88\x84\x6E\xE7\x78\xCC\x3C\xF7\x86\x1F\x75\xDB\xF4\x49\x19\xA6\xD4\x6B\x66\x8F\x99\x81\x7B\x87\xF9\x87\x33\x83\xE9\x0F\xB8\x0C\xAB\x35\x89\xF4\x71\xAC\x7A\x6C\x78\xE4\x86\x46\x83\x08\xEB\x32\xD1\x5B\x34\x90\x6A\x8E\xC3\x81\xA8\x85\x29\x75\xA1\x86\x6F\x05\xC5\x1A\x97\x16\x9F\x63\x8C\x1A\x58\xA4\x82\x83\x7E\xD9\x83\xA4\x0F\xC9\x01\xB8\xA8\x7B\x3D\x7B\x66\x85\xD3\x7C\x2A\x7A\x00\x00\xEF\x0F\xEA\xD4\x71\x3F\x9A\x66\x81\xC5\x84\x9B\x86\x0C\x86\x6F\x86\x34\x0C\xE8\x1B\xB6\x30\x80\xB8\x64\xC9\x86\x95\x7D\x0F\x84\xEC\x82\x82\xEC\x41\x10\x98\xBB\x52\x6D\x8B\xFA\x80\x00\x8A\xF1\x86\x13\x75\xDB\xE8\x0B\xEA\x62\x36\x8D\xA8\x74\xDA\x86\x20\x81\x9D\x83\xD5\x80\x60\x08\xAD\x03\xAA\x36\x9A\x33\x81\x85\x80\x5D\x7F\x20\x86\x75\x7D\xD4\xDB\x19\x20\x83\xAA\x72\xA7\x71\xFE\x82\xF9\x87\x28\x86\x92\x84\xBB\x01\xB7\x20\xBD\x06\x99\x81\x8F\x1B\x82\xFA\x86\x05\x85\xD9\x6D\xC1\x05\xED\xC1\x4F\xF3\x63\x76\x8B\xEA\x78\x8E\x85\x1A\x84\x2D\x68\x7B\xF3\x1F\xC3\x02\x41\x8E\x49\x85\xA2\x76\x07\x76\xDF\x74\xDC\x74\x74\x09\xD6\x17\xB6\x25\x8C\x66\x8E\x6B\x87\xFE\x84\xB0\x83\xFC\x87\x69\x06\xFB\x1F\x8A\xB1\x69\xF6\x77\x5D\x87\x70\x83\x1C\x76\x3E\x84\xE4\xFC\x19\x92\x40\xD2\x7B\x82\x81\xAE\x75\x0B\x8B\xDF\x78\x9D\x6F\x24\xF5\x61\x20\x8A\x33\x85\x37\x84\x06\x8F\xDC\x82\x19\x89\x74\x83\xB9\x0F\x91\x13\xA7\x25\x96\x61\x70\xDC\x00\xE1\x6E\xFB\x86\x17\x88\x4B\xC8\x02\x20\xAD\x34\x8C\xF9\x5D\x99\x84\x5B\x80\x99\x82\xDE\x81\x05\x06\xD5\x08\xBE\x36\x9A\x47\x8B\xFB\x85\x73\x69\x4B\x81\x4F\x84\xFC\xC3\x74\x20\x87\xAC\x6F\x81\x8E\x05\x89\x06\x88\x8A\x74\xF1\x87\x06\x10\xB8\xD1\x48\x40\x9B\x2D\x8A\x00\x88\x32\x85\x56\x86\x48\x82\x3F\x9D\x63\x19\x9E\xA1\x7A\x51\x3D\x02\x8D\x6F\x76\x27\x89\xBF\x75\x7D\x0F\x8D\x21\x89\x12\x95\x34\x80\xB2\x71\xBA\x85\x74\x82\xCF\x87\x30\x04\x8C\x73\x5A\x18\x83\x5B\x6D\xAF\x52\x13\x8B\xD3\x75\x44\x88\xFD\xE9\x77\x19\x8C\x42\x82\x33\x84\x69\x87\x11\x8A\xA5\x83\x48\x88\x16\x06\xB8\x21\x8F\x12\x9B\x46\x8D\xBE\x53\xCB\x80\x82\x4B\x82\x86\x2A\x0D\x86\x02\x3E\x42\x85\x5B\x72\x52\x7D\xF2\x85\xEC\x87\xCB\x87\xB3\x0F\xD3\x1A\xB5\x3E\x84\x30\x8A\xBD\x86\x85\x82\x32\x89\xE9\x82\x6A\x10\x95\xA4\x5E\x23\x84\xB2\x63\x0D\x8E\x72\x75\x35\x88\xD8\x87\xAD\xF4\x7A\x20\xB3\x3F\x9C\x83\x85\xFF\x85\x99\x87\x39\x84\xD1\x84\xDF\x10\x98\x0C\xA8\x42\x8E\xF4\x6C\xD2\x7B\x95\x80\xC6\x75\xFF\x87\xAE\x10\xA3\xEA\x60\xD1\x62\x47\x83\x8D\x84\x1C\x84\x04\x85\x52\x80\x90\x0D\xFE\x19\xAD\x1E\x9B\x81\x88\x13\x84\x25\x87\x69\x85\xEE\x87\xC7\xEC\x2D\x50\x5B\x3F\x88\x84\x8E\xFA\x80\x06\x8A\x3E\x88\x19\x88\xB7\x0D\xCE\x0D\xB9\x36\x90\x36\x8A\x04\x8A\xDA\x80\x13\x88\x6A\x83\x93\x0D\xAE\x0D\xB3\xC9\x6B\x6A\x81\x97\x81\x20\x01\x39\x88\xE2\x75\x83\xF4\x66\xD3\x45\x41\x94\x6B\x89\x7E\x84\xF9\x85\x17\x85\xDD\x86\x5F\x08\xA8\x1B\xAC\x1A\x99\x88\x86\x6D\x84\xFA\x86\x4E\x7B\x2B\x54\x16\x04\xF2\x61\x6D\x42\x95\x4D\x77\xFC\x85\x97\x81\xE0\x78\x92\x88\x84\x08\xA6\x22\x86\x22\x95\x88\x89\x7D\x87\x22\x8B\xF6\x82\x96\x88\xDD\x07\xA3\xA9\x6D\x24\x95\x83\x82\x9F\x67\xAD\x84\xFB\x6D\x81\x00\x1F\x11\xB0\x51\x5B\x40\x80\x85\x8E\xBE\x83\x97\x84\x79\x87\x5E\x86\xE5\x05\xBF\x19\x8C\x40\x94\xEB\x7A\xCE\x70\x52\x79\x6D\x81\x69\x6B\x6F\xAB\x49\x22",
"\x85\x47\x7A\xA1\x74\x47\x7F\xA5\x84\x59\x86\xAA\x86\x66\x0D\xC8\x21\x98\x1A\x91\x87\x8A\x69\x80\xB8\x85\x16\x83\xD5\x7C\x77\xFD\x17\x19\x87\x39\x93\x35\x8B\x44\x85\xD6\x81\x16\x89\x7A\x32\x5A\x11\xDA\x69\x5C\x45\x87\x5E\x72\x59\x83\x8F\x84\x55\x7F\x0E\x86\x09\x0C\xB5\x1A\x8B\x30\x80\xB8\x69\x2B\x7D\xA0\x77\x6B\x86\x79\x83\xB1\x0D\xC1\x20\x8C\x44\x93\x7C\x8E\x10\x8E\x1A\x89\x3A\x88\xCE\x84\xC4\x10\xC3\xD5\x74\x42\x92\x59\x7D\x0D\x8E\xC0\x80\x1A\x88\x61\x83\x95\x10\xE7\xE9\x64\xF6\x6A\x8B\x88\x03\x74\xA2\x76\xB0\x87\x5F\x6F\xEB\x01\xAC\xE7\x6D\xA4\x31\x8B\x81\x5D\x63\x2E\x88\x78\x87\xBA\x88\x1E\x10\xD3\x18\xB2\x34\x95\x62\x84\xD3\x83\x27\x86\xA6\x7D\x9E\x84\xAD\x0D\xA2\xDA\x59\x37\x8A\x81\x84\x48\x84\xDE\x83\x4C\x5B\x99\x88\x7A\x0F\xA1\x22\xB6\x36\x8D\x40\x85\x7D\x87\xD4\x80\x08\x84\x9E\x88\x22\x08\xBE\x22\xA4\x20\x94\x84\x83\x08\x8A\x28\x8B\x41\x88\x6E\x65\xED\x0D\xB0\x13\xAF\x37\x98\x24\x86\xFC\x78\xA7\x7B\xCD\x2D\x60\x81\xE7\xD4\x64\x14\xB4\x44\x85\x8C\x88\x0E\x89\x0F\x88\x62\x89\x49\x83\x8A\x11\xC6\x21\xB5\x42\x82\x8B\x87\xD5\x81\x10\x8B\x29\x88\xC3\x87\x0E\x10\x90\x00\x90\x40\x90\x60\x76\xC4\x7D\x4F\x7E\xED\x82\x1F\x7F\xCC\xB3\x7D\x55\x4A\x47\x91\x8D\x8B\x4A\x7E\x30\x8A\x73\x88\xD9\x87\x7E\x0F\x95\x11\x8B\x46\x89\x1B\x8F\x07\x8A\x2F\x85\x4A\x84\xBE\x84\x78\xFA\x07\x1F\xBA\xE9\x69\x7C\x89\xBF\x87\xA4\x83\xFE\x84\xE8\x83\xDE\xEA\x4E\x78\x03\x46\x96\x83\x8F\xFD\x80\x70\x78\xF8\x78\x23\x88\xF3\x08\xBA\x22\xBB\x33\x88\x89\x87\x92\x80\x1B\x85\x5A\x86\x6D\x84\xE1\x10\x99\xBC\x7D\x3E\x98\xF9\x5E\x1B\x78\xCC\x7C\x70\x78\x09\x86\xD6\xC3\x63\x23\x92\x3E\x9C\x8F\x8B\x9F\x80\xFC\x87\xF0\x6D\x50\x86\x9A\xF4\x62\x1B\xA3\x11\x90\x8A\x82\xBF\x86\x8F\x86\x1A\x87\x85\x84\x2A\x03\xA8\xC1\x76\xF1\x6F\xF3\x7E\xAA\x7A\xAA\x81\xB6\x86\x5C\x63\x21\x0A\x12\x24\xAD\x3E\x84\x8C\x8D\x09\x8F\x21\x8B\x27\x88\x00\x89\x13\x09\x8D\x1A\x95\x24\x96\x7D\x87\x91\x85\xF3\x87\x81\x88\x75\x84\xEB\x0F\xF0\xB6\x78\xEA\x7C\x3C\x5A\x22\x8D\xF8\x84\x30\x89\xA8\x75\x22\x11\x97\x24\xB2\x3F\x83\x47\x87\x52\x7E\x2C\x82\x39\x84\xB4\x80\x33\xFD\x64\x22\x86\x20\x9D\x8D\x8F\xC3\x75\xFF\x85\xCB\x80\x65\x38\x3D\x12\xDD\x1F\x9E\x46\x84\x80\x8C\xC8\x83\xFC\x86\x80\x83\x6D\x88\x21\x0D\xB6\x21\x84\x31\x8F\x8C\x8B\x89\x81\x3E\x89\x76\x89\x10\x80\xDB\x11\x8B\xE6\x52\x6C\x40\xE5\x7E\xC4\x76\x02\x89\x6A\x6A\xD6\x1A\xFB\x11\xDE\x1F\x95\x48\x9E\x8F\x89\xFC\x80\x27\x8A\x30\x84\x01\x89\xC4\x08\xB8\x23\x88\x22\x82\x88\x8A\x88\x84\x20\x8B\x18\x84\x56\x7E\x8D\xF3\x6E\x18\xAC\x3A\x86\xD8\x71\x35\x84\x05\x8A\x5F\x17\x34\x89\x53\x12\xCC\x1B\x98\x3E\x8E\x6E\x85\xFE\x83\x8A\x80\x75\x88\xB4\x86\xEF\x11\xEA\x1A\xB9\x48\x8F\x2C\x6A\x7E\x70\x08\x8B\x5B\x89\x96\x34\x51\x12\xF0\x1F\x84\x41\x82\x92\x8C\x01\x8D\x8C\x85\x68\x89\x33\x86\x20\x10\xE9\x18\xA2\x40\x8B\x63\x84\x02\x8B\x07\x87\xB2\x7E\xCA\x88\xFE\x00\x81\xA6\x54\x21\x86\x2E\x8C\xDD\x80\x4D\x89\x3E\x88\xF3\x88\xFB\x10\xEA\x21\x84\x49\x94\x7F\x86\x24\x88\x34\x87\x3B\x89\x67\x86\x37\x12\xD1\x19\x91\x46\x9C\x19\x6E\x10\x86\x95\x87\xAF\x86\x20\x84\x42\x09\x97\xD5\x64\xFB\x65\x3C\x51\x29\x8A\x03\x8B\xA4\x89\x05\x6E\x8B\x0D\x9E\x10\xB6\x46\x86\x45\x82\x27\x88\x15\x85\x6F\x86\xEE\x85\xBC\x11\x9B\x0D\xAA\xAA\x6A\x2F\x8C\x94\x5C\x47\x88\xA0\x89\xA5\x88\x30\x12\xDF\x12\x88\x41\x81\x4B\x84\x20\x8B\x2C\x84\x9D\x89\xB2\x84\xC9\x12\xE6\x22\x8A\x19\x9B\x55\x7E\x12\x85\x23\x8A\x7E\x89\x53\x89\xCD\x11\xA9\x25\x8F\x47\x95\x4B\x85\x0C\x88\xF0\x84\x24\x89\xC6\x88\x92\x10\xC8\x25\xAA\x24\x8C\x92\x8F\x40\x7A\x15\x89\x35\x87\x6F\x89\xCB\x11\xAD\x24\xA8\x4A\x90\x88\x84\x1B\x88\xB7\x87\xB0\x88\xDD\x86\xC5\x12\xC6\x11\x87\x4B\x8A\x45\x8E\x04\x8E\xB8\x37\x3C\x86\x28\x89\xCF\x12\xBF\x25\x83\x71\x61\x96\x83\x92\x85\x06\x89\x49\x85\x6A\x89\xFD\x0C\xFB\x25\x88\x23\x80\x8A\x80\x85\x83\x19\x87\xFB\x55\x26\x79\x55\x01\xFC\x87\x7D\x4A\x83\x82\x8A\x50\x7F\x45\x8A\x9B\x88\x86\x86\x70\x12\xF5\x11\xBC\x33\x98\x45\x8A\x1B\x8A\x17\x86\x9D\x88\x46\x84\x96\x10\x89\x1E\x23\x43\x80\xA4\x73\x31\x8C\x0B\x8A\x9A\x89\xEB\x6D\x16\x12\xC0\x25\xB3\x40\x86\x35\x83\x67\x87\xFA\x81\xBE\x89\xD3\x86\xD7\x12\x92\x1B\xBD\x4B\x8B\x65\x89\x45\x7B\xC9\x81\x9F\x77\xFC\x88\x25\x13\xC4\x22\x81\x4A\x83\x86",
"\x80\x1D\x8F\x6C\x83\x7A\x89\x45\x82\x48\x12\x8D\x09\x8A\x49\x9A\x48\x83\x2B\x8C\xE7\x7F\x50\x89\x4D\x88\x6A\xF2\x16\xBF\x48\xB3\x7C\x95\x81\x30\x8D\x62\x88\x2C\x88\x13\x7A\xD9\x10\xE4\x1F\xBF\x4C\x94\x32\x82\x81\x82\x61\x88\x3C\x86\x86\x89\xCA\x08\xBF\xF6\x48\x06\x8A\x0C\x86\x98\x86\x54\x89\xBC\x89\x3B\x88\x9C\xE9\x16\x26\x84\x4C\x95\x6B\x83\x2D\x8D\x94\x87\xC6\x89\x7B\x84\x28\x09\xF9\x11\xAB\x4B\x8A\x96\x85\x19\x85\xEA\x7E\x24\x7A\xE9\x84\x99\x09\xF0\x25\xA4\x47\x81\xA6\x7C\x26\x8E\x89\x7B\xC5\x89\xE5\x87\x65\x13\xF7\x1A\xA7\x4D\x87\x65\x8D\x31\x89\x95\x87\xCC\x88\xCA\x86\x52\x01\xE0\xD6\x65\x10\x93\x5C\x74\xDA\x15\x69\x8B\xDE\x87\xCF\x67\x50\x13\xE9\x23\x80\x31\x85\x94\x82\xC4\x82\x4B\x8B\x48\x87\x58\x89\x25\x0D\x8B\x25\x90\xB4\x68\x8B\x84\x43\x80\x28\x87\x5A\x7E\xD6\x88\x74\xFF\x7D\x91\x69\x48\x86\x9C\x82\x1B\x8A\x18\x89\xE9\x5F\x9E\x89\x52\x06\xD3\x26\x97\x22\x81\x9A\x89\x89\x84\x4B\x8A\x11\x87\xA2\x89\xA4\xEB\x64\xEA\x77\xB3\x76\x4A\x89\xCF\x77\x32\x89\x56\x85\xB7\x55\x39\x13\xC8\x26\x8D\x44\x92\x97\x81\x2E\x8C\x5E\x8A\x34\x84\x07\x84\xA3\x00\xFF\x21\x81\x05\x95\x9A\x89\x36\x8B\x12\x8B\xDA\x88\x6D\x89\x94\xFD\x57\x1B\xAE\x36\x96\x0E\x82\xFB\x7B\xA8\x6D\xB2\x82\xA8\x68\x85\x13\xE0\x25\x88\x3F\x96\x9B\x83\x36\x8D\x24\x89\xDE\x89\xE6\x87\x7B\x13\xEE\x19\x96\x4D\x9F\x67\x88\x35\x8B\x3C\x82\x7D\x81\xBF\x84\xDF\x0E\xA1\xFF\x56\x46\x82\xA8\x79\x19\x8B\x01\x6B\x9F\x88\xE5\x89\x36\x11\xFF\x23\xB7\x4D\x87\x82\x86\x30\x89\x09\x8B\x63\x86\x3B\x83\x2A\x11\xE1\x10\x9F\x4C\x9C\x18\x87\x3D\x8A\xB8\x85\xBF\x86\xD6\x84\xB1\xFF\x30\x1B\x8B\xCB\x6E\x8D\x82\xB0\x43\x73\x88\xF8\x89\x16\x74\xAB\xE7\x2B\x26\xA4\x22\x97\x97\x84\x11\x8F\x7C\x88\x0E\x89\xF4\x89\x3A\x10\xD5\x27\x81\x34\x8E\x98\x83\x21\x8C\x9D\x82\xFB\x88\x27\x77\xC2\xFF\x0E\x00\x8E\xEF\x79\xEB\x62\xBF\x72\x93\x80\x55\x34\x38\x7D\x89\xFA\x2D\xD2\x1A\x29\x9F\x9A\x8D\x1F\x88\x0F\x8A\xB8\x88\xF4\x88\xB2\x10\xB2\x0C\xBD\x41\x98\x4B\x8D\x1E\x8B\x7B\x84\xBF\x89\x6C\x89\xC7\x07\xDF\x24\x96\x1C\x80\x03\x81\x01\x8E\x0E\x81\xC1\x5F\x1E\x7F\xF7\xBA\x61\x23\x97\xC7\x53\xA0\x83\x37\x8F\x1C\x8B\xF2\x89\x79\x7A\xFA\x13\x8C\x1B\xB9\x4E\x8E\x6C\x80\x10\x88\x7D\x89\xCC\x89\xD4\x86\x02\x14\xC4\x01\xA1\x3E\x94\x87\x76\x58\x82\xF9\x81\xE9\x87\x09\x76\xB6\x07\xA8\x1F\xB8\x47\x91\x9B\x8C\x42\x8D\x80\x8B\xCE\x89\xCF\x89\xE4\x12\xD1\x23\xA6\x4B\x87\x86\x88\x2E\x89\x19\x88\xE4\x89\xCF\x87\x92\x13\xFC\x1F\x8B\x48\x81\xDA\x6E\x75\x70\xF8\x85\x23\x80\x12\x49\x45\x14\xAB\x24\x94\x48\x88\x99\x85\x37\x88\x86\x89\x44\x89\xD1\x86\x13\x11\xA5\x1B\xAF\x4C\x9C\x6D\x8D\x3B\x8A\x5D\x88\x7C\x88\xD4\x89\x87\x00\xBE\x1E\x9B\xA6\x57\x7E\x80\xE7\x79\xFB\x87\xB3\x86\xFE\x61\x59\x14\xBE\x24\xB3\x4E\x80\x9B\x80\xAD\x72\x6C\x89\x0C\x8A\x61\x89\x2D\x13\xB7\x23\xBE\x4F\x8B\x82\x80\x40\x8D\x09\x88\x08\x8B\x27\x88\x20\x01\xED\x1F\x9C\x37\x51\xA3\x82\x25\x88\x5A\x8B\xF8\x89\x00\x89\xCF\x13\xA7\x22\xA3\x51\x89\x89\x87\x43\x8B\x25\x8B\xDF\x88\x8D\x88\xEB\x00\xAB\xB6\x42\xEB\x71\xA0\x80\xC0\x34\x90\x8A\xA4\x88\xA7\x89\x60\x10\xE3\x25\xA2\x41\x85\x97\x8B\x41\x89\xF0\x87\xAB\x89\xC1\x87\x43\x13\xA4\x13\x9E\x49\x9B\xA1\x81\x2F\x78\x7C\x86\x0F\x8A\x09\x88\x77\xF3\x14\x20\x9C\x23\x8F\x62\x7F\xB6\x56\x92\x8A\xAF\x88\x4C\x8A\xF9\x13\xDF\x28\xB4\x40\x81\xA3\x86\x03\x8B\x8F\x8A\x45\x89\x3E\x8A\x18\x11\x8F\x29\xAD\x44\x8D\x08\x89\xAD\x7A\xFA\x73\x9E\x88\xE2\x82\xDF\x00\xFE\x24\x9E\x36\x7C\x9C\x85\x1E\x8D\x76\x8A\x1D\x8A\x59\x8A\x2C\x13\x8D\x1B\xB4\x19\x96\xA5\x8D\x13\x88\x97\x8B\x4F\x88\x5D\x8A\x41\x11\xCD\x24\xBE\x40\x93\x42\x83\x98\x83\x98\x7C\xA9\x86\xE4\x89\x03\x01\x2E\x29\x94\x4C\x87\x9C\x86\xA5\x71\x16\x89\x62\x88\x9F\x89\xD2\x11\x8C\x23\x9D\x50\x9E\x86\x8F\x44\x89\x17\x89\x14\x8B\x35\x88\x13\x63\x42\x04\x74\xEB\x7D\x2C\x83\x37\x84\x35\x88\xA9\x88\xC2\x89\xD9\x14\xC4\x29\xB4\x4D\x96\xA0\x86\x3B\x8C\x1F\x88\xEE\x88\x8C\x80\xBA\x13\xD6\x11\xBC\x4E\x86\x90\x89\x28\x88\x41\x8B\x39\x8A\x64\x7F\xE9\x14\xA1\x64\x76\x4A\x8C\xA7\x80\x35\x83\x44\x7A\x1C\x88\x4D\x74\xDA\x14\xA6\x26\x87\x51\x8A\x03\x6F\x4D\x89\x74\x89\x38\x8A\xF6\x88\x9F\x14\xE8\x1F\xA1\x52\x85\x7C\x89\x20\x8C\x37\x49\xE6\x81\x66\x89\x85\xA7\x09\x2A\xBA\x4C\x86\xA4\x8D\x3C\x89\x27",
"\x89\x22\x8B\x9D\x88\xCC\x14\xB9\x23\x8E\x53\x9B\x8D\x8F\x3B\x8B\xFA\x86\xD6\x88\x6A\x86\x83\x14\xF2\x29\xAE\x50\x81\x9F\x8D\x26\x8D\xA3\x8B\x9B\x89\x8F\x8A\x03\x12\x8B\x29\x85\x48\x89\x92\x85\x4E\x8B\x19\x89\x45\x8A\x20\x5C\xB5\x03\x9F\x12\x86\x04\x1A\xA8\x82\x3B\x8C\x45\x88\x1D\x8B\x2F\x88\xB1\x14\xF5\x25\x92\x44\x9C\x9F\x82\x46\x89\xA4\x8B\x9C\x89\xE9\x89\x03\x11\xB9\x28\x85\x7D\x62\x1E\x8B\x42\x8A\xA5\x89\xC2\x75\x8E\x74\x74\x11\xF9\x19\x93\x16\x97\x8B\x83\xD3\x81\x2F\x8A\x69\x89\x2D\x7F\xF0\xC4\x6D\x1A\x83\x75\x70\x86\x88\xBE\x83\x98\x8B\xFD\x89\xDB\x74\x41\x15\xB7\x27\xB5\x46\x99\xA3\x84\x2C\x8E\xA8\x8A\xB1\x89\x32\x8A\x1F\x14\xA5\x2A\x80\x52\x9A\x2F\x80\x16\x85\xF8\x55\x46\x8A\xA7\x8A\x8A\x10\xBE\x1A\x82\x4A\x91\x9A\x87\x25\x8F\xB9\x84\x85\x83\x43\x89\xD2\x0D\xA6\x27\x93\x34\x88\xA3\x8C\xAF\x46\x2D\x81\xBF\x54\x9E\x8A\xBF\x10\xF3\x28\x95\x50\x81\x9B\x8F\x34\x8B\x87\x78\x5D\x8B\xCC\x87\x76\x15\x9B\x1F\x8E\x4E\x96\x91\x8D\x4F\x88\x47\x88\x5F\x8A\xD3\x84\x7A\x01\x85\x28\x89\x44\x97\x4D\x6C\x79\x50\xB0\x88\x35\x89\xA7\x8A\xC6\xEB\x1F\x23\x92\x55\x96\x8B\x83\x20\x85\x43\x8A\x54\x89\x0F\x89\x80\x0C\xAA\xC2\x5E\x4F\x6A\xAE\x50\x48\x7E\xB2\x8A\x39\x88\xCC\x8A\x73\xF4\x51\x2A\x9E\x45\x9A\x67\x81\x27\x8E\xAC\x8A\xBE\x88\xB4\x8A\x0B\x13\xD0\x29\x8D\x4C\x9E\x1A\x8F\x12\x88\xAA\x7D\x4C\x89\x7B\x88\x21\x0A\x26\x2B\xA0\x44\x85\xA6\x8F\x42\x8B\x24\x8A\x4B\x8A\x8C\x89\x30\x15\xAD\x2B\xB5\x50\x9F\x9F\x8D\x48\x8A\x7D\x8A\x52\x8A\x1E\x88\x04\x14\xDA\x28\x85\x45\x8E\x34\x8C\x6B\x6A\x20\x02\x6E\x8A\xA5\x88\x02\x13\xCF\xB9\x47\x52\x91\x91\x89\x31\x8C\x9D\x85\xF4\x89\xBC\x86\xA8\x0C\x88\x0D\xBB\x22\x8A\x34\x81\xDC\x86\xAE\x7D\xE5\x89\xAD\x70\x97\x13\xB9\x25\xB0\x7F\x77\xA6\x89\x51\x79\xB7\x88\x5C\x8B\x60\x88\x61\x0D\xBC\x26\x89\x51\x80\xA7\x8B\x44\x8B\x3A\x89\x13\x8B\xB1\x88\x35\x15\xE0\x21\xBF\x53\x92\x21\x84\x39\x8C\x73\x7C\x5F\x68\xB7\x88\x04\xF5\x32\xBD\x0F\x57\x9B\x8A\x8C\x51\x8F\x8E\x89\xC1\x88\x5A\x8A\x07\x13\xB2\x2A\x96\x4B\x88\xAA\x85\x27\x8F\xB8\x89\x41\x89\xC9\x84\x83\x03\x9D\xC0\x51\xD3\x65\x8E\x8F\x5E\x67\x3A\x83\x15\x89\x11\x70\xD4\xDB\x7B\x2B\xB2\x45\x9D\xAF\x88\x4C\x8B\x7F\x88\x59\x8A\x7C\x89\xAE\x15\xB0\x26\x84\x58\x98\x96\x8A\x56\x8C\x15\x85\x77\x8A\x0E\x70\x69\x11\xB0\xF9\x6E\xEE\x7B\x9E\x80\xBB\x7D\x7B\x8A\x1E\x6A\xAF\x8A\x14\x14\xEB\x24\xB4\x53\x87\xA6\x82\x54\x88\x8C\x88\x51\x8B\x5A\x8A\xC3\x15\xFC\x28\x85\x57\x81\xA0\x82\x5B\x89\x6B\x8B\x59\x88\xEC\x89\x0B\x16\xF9\x03\x8C\x86\x6E\x9D\x8A\x4C\x53\xBB\x84\x72\x69\x22\x87\x5F\x15\x9E\xD5\x5E\x51\x8D\xB1\x83\x4B\x8F\xC5\x89\x80\x8B\x0C\x8B\x64\x14\xFC\x29\xAA\x4D\x87\xA3\x8C\x2E\x8B\x69\x5D\x3F\x84\x05\x81\x6A\xE0\x72\x1B\xA9\xC3\x53\x69\x74\x1C\x8B\x2D\x85\x4C\x76\x6F\x79\xF4\xEB\x4F\x24\xB2\x7A\x2F\x72\x8D\x42\x88\xB5\x88\xDF\x87\xC4\x89\x19\x14\xFF\x1E\x9D\x52\x87\x97\x83\x4E\x8E\x31\x8B\x44\x8A\xF5\x87\x26\x08\xF2\x23\x8C\x0D\x9B\x19\x84\x52\x87\x61\x50\x0A\x8A\x87\x82\x3F\xFE\x57\x63\x5C\x59\x86\xA2\x84\x61\x8C\xC8\x89\x32\x8B\x19\x8A\xCB\x14\xB1\x2C\xB7\x52\x93\xB1\x8E\x47\x8D\xC3\x8B\x7C\x48\x35\x8B\x6F\x03\xF4\x23\x8F\xEA\x6B\x7C\x82\x44\x8E\x8B\x7D\x7E\x89\x39\x8B\xCA\x15\x8B\x2A\xB3\x05\x6D\xA8\x8E\x99\x85\x55\x8A\xFD\x87\x88\x8A\xF8\x0F\xE7\x2C\xBA\x3F\x93\xAF\x8E\x7C\x85\x90\x7D\x22\x81\x07\x86\x42\x0E\xE3\x0F\x90\x48\x87\xA7\x68\x68\x8A\x8E\x8A\x4F\x8B\xC1\x8A\x75\x14\x85\x2B\x9D\x45\x83\x6B\x8C\x5A\x8A\x63\x88\xC2\x88\x8E\x89\x23\x15\x9E\x26\x86\x58\x97\x93\x8D\x03\x8D\x11\x3F\x88\x88\x36\x8A\x25\x12\xEE\x28\x93\x15\x85\x3C\x5D\x69\x8D\x90\x89\x74\x8A\x99\x6E\x15\x16\xB2\x28\xB8\x53\x94\xA1\x8B\x3B\x89\x20\x8B\x86\x8A\x99\x89\x7F\x14\x9E\x2C\x84\x42\x8A\x11\x7D\x0A\x80\x90\x79\xAD\x8B\x4B\x8A\xDC\x14\xAF\xD5\x58\x50\x8C\xB4\x8E\x08\x8D\xBD\x8A\x38\x8A\x48\x8B\x67\x10\x92\x2D\xA9\x41\x94\xB4\x8A\x30\x86\x49\x8A\xE3\x87\x37\x74\x2D\x69\x47\x2D\xAF\x52\x89\xB6\x80\xAC\x72\x93\x8B\x1E\x89\xEB\x85\xED\x10\xE5\x20\x90\x5B\x80\x84\x8A\x57\x8C\xBA\x85\x9A\x8A\x11\x8A\x38\x07\x97\xFD\x67\x52\x85\x19\x63\x01\x8B\x19\x80\xE3\x86\x33\x89\xA5\x12\x82\x02\x1A\x5B\x9B\xA6\x8D\x39\x89\xBD\x88\x12\x8B\x4D\x8A\x4A\x14\xE3\x2C\x8C\x51\x85\xB3\x89\x2E\x89\xAD\x88\x93\x8A\xB6",
"\x89\xD9\x00\xAD\xF9\x6B\x14\x19\x62\x7E\x06\x88\x1E\x70\xF5\x73\x58\x86\xD6\xE7\x1C\x19\xAD\x85\x33\xB7\x8A\x50\x8D\xCE\x8A\x58\x8A\x7B\x89\x17\x16\xFD\x27\xBA\x59\x8D\xA6\x8C\x67\x89\x97\x89\xB0\x8A\x9A\x89\xB4\x15\xD3\x29\x81\xF3\x74\x42\x83\x5B\x80\x9B\x8A\xBC\x8B\xF3\x8A\x40\x12\xB3\x23\x8F\x5C\x83\xAA\x81\x71\x8D\xA8\x8B\xC4\x8A\x91\x8A\x15\x17\xCF\x29\x97\x5C\x80\x9C\x84\x86\x81\xC1\x8A\xB2\x7E\x4B\x86\x22\x16\xCD\xFD\x62\x4A\x95\xA6\x80\xED\x79\xBF\x8A\xB9\x2C\x86\x8B\x1B\x15\xB7\x2D\x8B\x75\x7F\xAD\x88\x37\x8D\x7C\x88\xB5\x88\x01\x8B\x09\x13\xB0\x2B\x97\x4D\x95\xB1\x86\x3D\x8C\x97\x89\x0D\x71\x36\x88\xA0\x12\x88\x07\xB3\x5C\x86\x6E\x89\x38\x67\xA0\x88\xD0\x79\x80\x00\x38\x17\xBD\x2A\x9B\x51\x87\x5E\x8D\x45\x8E\xB7\x8A\x7F\x8A\xB2\x89\x3E\x17\xE6\x26\xA7\x5A\x88\x9B\x8A\x64\x8E\x77\x8B\xBF\x8A\xE0\x89\x68\xBF\x21\x02\x84\x59\x71\xBA\x81\x58\x8F\xD3\x8A\x8A\x8A\xC2\x8A\x99\x14\xCB\x2D\xA0\x4E\x8D\xB4\x85\x8E\x86\x55\x88\xE9\x88\x74\x84\xF1\x15\xF2\x21\x8C\x43\x94\x87\x85\x8A\x6D\x5B\x89\xD7\x89\x8F\x8B\x41\x16\xE4\xD5\x54\x4A\x8C\x8A\x84\xC0\x86\x29\x8B\x06\x87\xF2\x86\x78\x11\xE7\x1B\xBA\x45\x80\x61\x80\x70\x68\xF6\x52\xC1\x7E\x0E\x83\x4E\x0E\xA0\x2E\xB5\x44\x98\x9F\x87\x13\x8C\xE7\x88\xF9\x88\x00\x8B\xE6\x13\xA7\x2E\x87\x55\x82\xBA\x84\x3D\x8C\xE8\x88\xC1\x42\xA6\x8A\xB1\xCF\x64\x2E\x97\x56\x91\xAB\x8B\xDC\x82\xBD\x88\xBE\x8A\xF6\x8A\xFA\x16\xEE\x2B\xBC\x5B\x8E\xA2\x8D\x58\x8A\x56\x89\x93\x8A\x7E\x84\xCE\x10\xAA\x0C\x8E\x23\x9E\x96\x8A\x79\x8F\xB4\x88\xE7\x8B\xEF\x86\x54\x12\x9D\x1A\xA1\x42\x8D\x2B\x83\x0A\x88\x21\x86\xA6\x89\xC1\x8B\xE9\x0D\xF8\xFD\x43\xAC\x7C\x31\x83\x76\x8A\xF1\x88\x73\x89\xDE\x8A\x7B\x17\xD1\x25\xAA\x33\x95\xAE\x8E\xD0\x86\xF9\x84\x13\x85\xEC\x8A\x4E\x08\xAB\x2D\xA0\x4C\x9D\x9E\x66\xB1\x76\x1E\x8A\x65\x59\x7A\x32\xAD\x17\xBB\x2B\xB3\x53\x88\xBB\x81\x56\x8E\x9E\x8B\x58\x8A\x65\x8A\x2E\x13\xC8\x2C\x8C\x52\x9F\xB5\x88\x43\x8E\xF2\x89\x5F\x87\xE4\x8A\x9E\x16\x9F\xE3\x3F\x23\x9D\x5F\x87\x12\x01\xFA\x88\x74\x8A\x58\x8A\x8D\x17\xD7\x2E\x8E\x4F\x99\xBA\x8A\x37\x8B\xEB\x88\xDF\x89\x54\x8B\x7E\x13\xAB\x2E\x90\x52\x8C\x09\x83\x5A\x88\xD2\x6A\xB1\x8A\xDF\x8B\xB4\x13\xC0\x2F\xAA\x4C\x99\xB5\x88\x47\x88\xFB\x8A\x1E\x8A\xC9\x8B\x67\x15\xDD\x2E\xA6\x51\x8A\x94\x8F\x58\x8C\x51\x89\x47\x85\xDB\x8A\xCF\x17\xD9\x2D\xB8\x5F\x9F\xA9\x8F\x0A\x89\xED\x88\x36\x88\xC5\x89\xB4\x0F\x89\x2B\xB4\x48\x9C\x7C\x81\xD1\x85\xDC\x8A\xEE\x87\xD3\x8B\x9B\xC1\x4F\x2C\xA4\x10\x86\x8A\x8F\xCD\x6E\xFC\x88\x7F\x8A\x9D\x8B\x68\xE7\x7C\x2F\xBF\x57\x86\xB2\x81\x79\x8D\xD7\x8A\x0D\x8A\xEE\x8B\x8E\x14\xF2\x2F\xBB\x52\x97\xB1\x86\x44\x87\xA8\x78\x55\x84\xDA\x80\x35\x04\xF7\xD6\x70\xEE\x79\x9C\x8A\x19\x88\x80\x36\x07\x8D\x09\x8B\x20\x18\xFF\xD3\x76\x59\x96\xB0\x8E\x7F\x8D\xAC\x88\x00\x8D\xD7\x8A\x02\x18\xFE\x2D\x84\x60\x98\xC0\x8B\x48\x6E\x27\x87\xEA\x88\xC6\x7D\xEC\xD6\x4C\x08\xA4\x57\x9F\x8E\x61\xA2\x07\x06\x8D\x67\x88\x87\x8B\xD6\x17\x90\x2E\xBD\x60\x98\xB0\x8F\x83\x8A\xC3\x88\xE5\x8B\xA4\x8A\xDE\x17\xAB\x1B\x92\x46\x82\x9E\x84\x0D\x77\xD8\x80\x6B\x89\xE3\x89\xE5\x15\xE5\x2F\x8B\x60\x80\xB5\x80\x54\x89\xFD\x8A\x08\x8C\xAC\x8B\x90\x17\xBF\x2E\x9A\x5F\x93\xA9\x82\x34\x89\xEE\x89\x59\x88\x93\x8A\x2C\x18\xAE\x2E\xBE\x85\x7B\x95\x72\x0A\x4F\xD5\x84\x5E\x64\x13\x8B\xF2\xDF\x09\x2F\xB9\x5D\x84\xA4\x76\x75\x8F\x0C\x8F\xFA\x8B\x34\x8C\x5A\x17\xC0\x2E\xA8\x5A\x89\xB9\x84\x52\x8F\xEB\x88\x1C\x8C\x4E\x83\xEE\x06\xB9\x2C\x9B\x86\x71\x37\x87\x99\x86\xC4\x84\x80\x53\x26\x8C\x63\x18\xE7\x2E\xA1\x5A\x8E\xC0\x86\x35\x7B\x50\x89\x73\x82\x09\x8C\xDC\x10\xA3\x2F\xB0\x57\x85\xBD\x81\x39\x8D\x00\x8C\x5B\x86\x0D\x8C\x11\xC6\x2A\x13\x8E\x50\x83\xFE\x7B\x40\x8B\x32\x75\x03\x8B\xCA\x74\x1A\x8B\x10\x28\x8F\x3E\x81\x51\x08\xE5\x85\xCB\x8B\xEB\x8A\xA8\x8A\x9A\x15\xAB\x2B\x93\x55\x9D\xAC\x86\xDE\x86\x43\x8B\xA6\x89\xCC\x6D\x27\x08\xFA\xC1\x6B\x5B\x94\x3D\x84\x2D\x85\x7C\x85\xE3\x87\x0C\x84\xF9\x11\xAD\x31\xB4\x59\x99\xC1\x84\xBD\x84\xCB\x6B\x7A\x8A\x87\x8A\xCE\x16\x90\x2A\xAF\x5D\x90\x87\x8E\x86\x8B\x49\x8A\xF7\x85\x5C\x8C\x4A\xEC\x4B\x1A\x4C\x1F\x8E\x98\x75\x6D\x8F\xF9\x82\xA1\x8B\xB8\x89\xC2\x18\x89\x2D\x90\x61\x8A\x95\x8D\x0F\x8D\x48\x89\xDB\x8B\x47\x8B\xCB\x18\xB0",
"\x25\x9C\x62\x90\xA2\x8E\x89\x8A\x8A\x8A\xA5\x8B\xA2\x42\x9E\xFA\x56\x28\x8F\x48\x81\xD5\x71\xFB\x61\x1B\x8D\xF8\x8B\x93\x89\x54\x17\xAB\x2C\xA2\x5A\x8A\xAD\x84\x6A\x8B\x16\x8E\x00\x84\xDE\x82\xE0\x0C\xB6\x1A\x9E\xA8\x6E\xB5\x82\x07\x58\xD6\x88\x1E\x7F\xFC\x83\x80\xF4\x6E\x31\xB6\x5A\x88\xBF\x82\x3E\x8E\xF1\x88\x22\x8A\xF6\x8B\xD0\x13\xEE\x2F\x92\x4F\x97\xC2\x85\x60\x89\x0B\x8C\x72\x8B\x40\x8A\x37\xEC\x79\x05\xBC\x0F\x62\xC8\x88\x6C\x8D\xDE\x8B\x00\x89\xB9\x8A\x10\x18\xDA\x21\x98\x62\x99\x92\x88\x57\x8F\x16\x89\x33\x8C\xA2\x89\x44\x18\xC8\xD6\x75\x15\x91\xB3\x8D\x8E\x89\x12\x8C\x17\x8A\x79\x8C\x94\x18\x9B\xE7\x47\x56\x84\x94\x82\x3A\x8E\xFC\x87\xB8\x8A\xF7\x88\x4B\x16\xC3\x30\x8F\x63\x80\xB4\x82\x38\x85\x84\x8B\x16\x87\x76\x8B\x5D\x0C\xB6\x2E\xAA\xF7\x46\xC9\x81\x8F\x8C\xFA\x8A\x19\x8D\x1D\x8C\xBA\x16\xD4\x11\xB9\x53\x87\x92\x87\x8D\x84\xA6\x8B\x38\x8C\x73\x8A\xE5\x18\xE8\x29\x90\x9C\x2A\xA7\x8E\x38\x7F\x04\x89\xC1\x8A\x71\x7E\x99\x0C\xD8\xC1\x4A\x5C\x9F\x0C\x34\x91\x8B\xDB\x8A\x45\x8D\x45\x88\xF7\x16\xDF\x2D\xA3\x41\x81\xB7\x8E\x07\x8F\x25\x8E\x07\x8B\xD8\x8A\x2A\x18\xD1\x29\xAD\x4D\x92\x42\x8B\x71\x8C\xE6\x89\x15\x85\x47\x89\x00\x6C\x55\x32\xB4\x5B\x9C\xAD\x8C\x52\x8C\x79\x8A\xFA\x8A\x8F\x8A\x08\x19\x8A\x29\xAB\x61\x83\xB0\x8C\x90\x8C\xC3\x8A\x21\x8D\xB5\x8A\x5C\xA7\x7B\x01\xB9\xA9\x6F\xCA\x8F\x83\x87\xE0\x89\x85\x79\xB7\x55\x6A\x19\x8D\x2E\x84\x63\x8C\x5F\x89\xCB\x85\x29\x8A\x50\x87\xA7\x88\x44\x0D\xD1\x22\x86\x35\x80\x66\x88\xD4\x85\x8F\x75\x2B\x87\x3F\x76\x53\x10\xCA\x61\x51\xF3\x71\xCA\x8C\x2C\x6B\x96\x87\xE3\x73\x06\x5F\x3C\x19\xFA\x14\x95\x5D\x81\xBE\x83\x5D\x8A\x5A\x89\x5C\x8C\x90\x8A\x55\x18\xC9\x2C\x86\x65\x91\xC9\x8E\x4F\x89\x29\x8C\xC4\x7C\xB1\x8B\x01\x19\x99\x33\xAB\x2C\x89\x99\x83\x30\x8F\x2D\x8F\x4B\x8B\xCF\x8C\x31\x15\xF3\x32\x81\x5D\x81\xC2\x80\x96\x8E\xCF\x88\xCB\x8A\xFA\x8B\xDC\x12\x98\x21\x84\x59\x61\xCC\x89\x73\x8C\x20\x8D\x4B\x8A\xD7\x8C\xC0\x15\xB0\x33\x82\x57\x86\xC1\x84\x5C\x88\x05\x8E\x71\x8A\x87\x8C\x07\x16\x99\x5D\x79\x54\x8C\x6A\x86\x10\x04\x37\x8E\xD4\x8A\x78\x8C\x9A\x19\xA8\x32\x95\x5F\x9C\xC6\x87\x4F\x8A\x28\x8C\xAF\x8A\x7D\x8A\xBE\x16\xF5\x32\x80\x5B\x96\xCD\x8F\x41\x7B\x17\x8A\x65\x63\x7E\x55\xCE\x19\xE5\x2E\x93\x5D\x91\xCE\x8E\x93\x8D\x20\x8C\x70\x8D\x9E\x8B\x80\x18\xED\x2F\x82\x62\x9C\xBA\x83\x9A\x8E\xEB\x8A\x4C\x8C\xB0\x8B\x4E\x16\xA9\x2F\x82\x57\x7C\xAA\x8B\xC4\x81\x21\x01\x78\x8D\xCD\x8B\xE8\x15\x97\x32\x9E\x5E\x9A\xCA\x8C\x49\x8C\x2B\x8C\x07\x8A\xAF\x8C\xE4\x14\xC7\x32\xB6\x54\x94\xB6\x8E\x8B\x8B\x64\x8A\x26\x75\xFB\x8C\xAE\x17\xF9\x33\x98\x65\x8C\xA8\x8B\x76\x8D\xD9\x89\xE8\x8B\x67\x8B\xE1\x18\xA0\x29\x9F\x64\x82\xA5\x86\x9A\x8E\x89\x77\xFA\x81\x92\x8C\x7B\x18\xC1\x24\xBB\x5F\x80\xCA\x8D\x7F\x88\xCF\x89\xF6\x8B\xD0\x8C\xDB\x17\xDA\x33\x9D\x5F\x81\xCB\x83\x5B\x8A\x34\x5E\x56\x8B\x60\x74\x4A\x13\x8A\x22\x85\x9E\x48\xD0\x82\x7D\x8B\xA5\x88\xE3\x8A\xF3\x8C\x7E\x18\xF0\x32\xA9\x67\x89\xC8\x8B\x9E\x8F\xFD\x88\x21\x8C\x55\x8B\xC8\x19\xAC\x2D\xB5\x4C\x8A\x6A\x84\x5A\x8F\x40\x8E\x6A\x8D\x65\x6E\xAC\x19\xD2\x2B\x86\x64\x94\xAE\x81\x5C\x8E\xD4\x89\x8D\x8D\x85\x8C\xB4\x19\xC3\x2E\xA4\x68\x96\xB1\x80\xAC\x7C\x06\x78\x36\x76\xB8\x89\x94\xF4\x2C\x31\xBF\x68\x93\x5D\x83\x89\x8B\x3A\x8E\xB7\x8B\x75\x88\xE0\x16\x8E\x2D\xAE\x43\x91\xD0\x82\x51\x8B\x42\x8C\x45\x8A\x02\x8D\x22\x04\xA0\x31\xA1\xD2\x43\x9C\x8A\x39\x88\x33\x8D\x86\x8C\x91\x8B\x51\x18\xA4\x2E\x93\x61\x92\xB8\x84\x9C\x8A\xC6\x8A\x71\x8C\x1A\x8B\x4B\x1A\xC5\x2E\xB1\x61\x90\x35\x88\xD6\x7B\x9D\x77\x55\x89\xC2\x86\xD4\xDB\x2C\x34\xA7\x5F\x9C\xB6\x87\xAF\x77\x4A\x8F\xAA\x88\x76\x88\x5A\x1A\xE2\x2D\x9C\x69\x91\xB4\x8E\xA5\x88\xCD\x89\x48\x8D\xD4\x89\x46\x18\xFB\xA2\x59\x36\x8A\xC2\x85\x98\x81\xDE\x8A\x81\x5F\x29\x8D\x6E\xA7\x52\x33\xBF\x64\x83\xB9\x8E\x62\x8D\xE4\x88\x8C\x8B\x36\x8D\x7B\x16\xEF\x34\xBD\x59\x97\xCB\x82\x6C\x88\x11\x8C\x8E\x8A\x24\x82\x04\xD7\x2E\xE5\x6D\x25\x88\x54\x8E\x4E\x78\x2D\x8E\x94\x8D\x33\x8D\x9E\x13\x8C\x34\x87\x63\x8C\xBB\x83\x94\x8E\xED\x89\x51\x8D\x36\x8C\x02\x1A\xF2\x2B\x95\x68\x97\x0A\x79\x1A\x8A\xDB\x80\x1D\x8D\xFE\x62\x9F\x05\x82\xB8\x47\x37\x8B\xC2\x85\x30\x6E\x4C\x8D\x8A\x8B\x93\x8C\xE5\x19\xBF\x33\xB1\x68\x8F",
"\xCD\x83\xA3\x8A\x2E\x8C\x88\x8C\x36\x8C\xA5\x13\xD2\x2D\x90\x46\x87\xD4\x86\xDD\x85\x56\x8E\x0F\x84\xCB\x84\x78\xE9\x74\x27\x9B\x51\x47\xD5\x8F\xAB\x8D\x27\x8D\x95\x8D\x49\x8D\x69\x1A\x95\x35\xAB\x69\x86\xB9\x88\xA9\x8C\xE2\x8A\xA6\x8C\x8B\x8B\xDC\x19\xAB\x30\xBE\x46\x91\xAC\x8A\x5C\x89\x38\x88\x8B\x87\xA8\x6B\xCF\xFB\x14\xD3\x51\xEF\x64\x8D\x38\x1C\x89\x3F\x88\xA3\x86\x57\x8C\x0A\x1A\xF2\x2A\xBB\x67\x98\xD2\x8B\x95\x89\x50\x8D\x57\x8D\x41\x8D\xD1\x16\x85\x35\x93\x5A\x87\xB7\x84\x4A\x8B\xC9\x7D\x42\x82\x64\x80\x26\x14\xB5\x0F\x8C\x14\x8C\x7C\x86\x06\x81\x6E\x8B\xBB\x8D\x61\x8C\xBE\x19\xEE\x32\x83\x6B\x81\xCE\x85\xAC\x88\x34\x8D\xB7\x8C\x94\x8B\xDF\x1A\xAA\x2E\xA1\x6B\x9B\xD4\x20\x8D\x8F\x8A\x7E\x34\x8C\x2D\x7E\xCD\x07\xD5\x31\x9D\xF1\x72\x98\x71\xFB\x67\x60\x8E\x36\x8D\xC1\x8C\x02\x0C\x85\x33\xBD\x5D\x87\xCC\x8F\x77\x8C\x43\x89\x2D\x8D\xCF\x8A\xB7\x18\xA1\x2B\xAE\x44\x93\xA2\x8A\x2F\x85\x8A\x89\x95\x87\xE0\x87\xB2\x0B\xAA\x1F\xA7\x04\x1E\xD8\x8F\x8E\x8A\xD1\x89\xB5\x61\x8C\x8C\x52\x13\x8F\x2A\x80\x4D\x8F\xD5\x89\xAC\x8A\x5F\x8F\xB4\x8B\x59\x8D\x1A\x1B\x83\x53\x6F\x5A\x84\x61\x88\xFD\x85\x87\x59\x6F\x46\xFE\x61\x34\x1B\x83\x32\xBC\x69\x96\x7C\x85\x89\x8B\x25\x8F\x25\x8C\xC6\x89\xD0\x0D\x9D\x32\x9B\x49\x8A\xD6\x8D\x25\x88\x68\x8D\x9F\x7F\x88\x8C\xDB\xCF\x48\x36\x90\x6A\x88\x5A\x8D\x80\x8E\x4A\x8E\xDA\x8B\x55\x8D\x0E\x1A\xFE\x33\x9E\x52\x98\xD7\x84\x6E\x8C\x6A\x8F\xE9\x88\x66\x8D\x4F\xBF\x49\x18\x80\x63\x86\xD8\x8B\xB5\x8E\x6B\x85\x19\x8C\x18\x8D\x1C\x1A\xA3\x30\x96\x6A\x87\xB2\x87\xAC\x8C\x2E\x8D\x92\x8D\xCA\x8B\x71\x1A\xF1\x00\xBD\x6B\x96\xF4\x74\xC4\x7E\x26\x8E\x0A\x85\xAF\x80\xBD\xE7\x26\x35\xB3\x6C\x8D\xDB\x8D\xBB\x83\x5E\x88\x8B\x8A\x4A\x8D\x45\x16\xF3\x36\xA5\x60\x98\xCE\x87\x82\x8A\x44\x8D\x0A\x8D\x89\x8D\x25\x1A\xF9\x32\x91\x41\x84\xB8\x89\x74\x8F\x0D\x8A\x15\x88\x4D\x86\xBB\xDB\x1D\x1B\xA6\x6B\x29\xDA\x85\x91\x8C\x2D\x8F\x8B\x8C\x61\x8D\x71\x1B\xE8\x30\xA4\x60\x8A\xC3\x85\xB7\x8B\x36\x8D\x7B\x8D\x01\x8C\xA5\x19\xE8\x36\xBF\xF2\x70\x2D\x85\x96\x8C\xE9\x89\xC7\x8B\x30\x8C\x09\x01\x1C\x37\x96\x65\x9E\xDC\x80\x56\x88\x5B\x8C\x75\x8D\xEB\x8B\x1E\x1A\xFF\x2F\x8F\x6C\x93\xBC\x87\xB7\x88\x0B\x8D\xDE\x8D\xEF\x8B\x46\x17\xE5\x10\x87\xC8\x5F\xA5\x84\x99\x8A\xB8\x6B\x3B\x8B\x32\x8D\xB1\x1B\x84\x37\xAF\xBE\x52\xD4\x80\xB7\x88\x71\x8F\x9D\x8B\x5D\x8B\x79\x16\xBB\x37\x81\x60\x87\xDD\x82\x84\x89\x75\x8C\xC0\x8A\x3B\x75\x01\xFB\x10\x33\xAF\x31\x8B\xBA\x8F\x60\x8F\xBC\x06\x65\x8C\xF2\x8B\xC9\x1B\xA8\x35\xB6\x5B\x8A\xD5\x8F\x79\x88\x19\x8F\x83\x8C\x65\x8C\x3C\x1B\xF0\x2E\xB1\x6A\x92\xBB\x87\x53\x8F\x6A\x8D\x21\x88\x56\x75\x44\xD6\x32\x37\xAB\x65\x93\xBE\x87\xAD\x8D\x79\x8D\xB6\x8D\xC4\x8D\xDB\x1A\x97\x35\x8C\x6E\x85\xCE\x8E\xB8\x8F\x38\x8F\xEF\x8C\x2D\x8C\x31\xFF\x28\x2A\x9C\x9E\x52\xDF\x82\x98\x89\x61\x8F\x90\x8A\xE7\x8D\x3C\x18\xB9\x37\xBE\x60\x92\xDE\x80\x84\x8C\x7A\x8D\x6D\x8C\x4E\x8D\x18\x17\xED\x75\x4B\x67\x9A\x40\x81\xEA\x82\x7C\x8E\x7E\x8D\xAC\x8C\xF4\x1A\xFD\x33\xB6\x6B\x9F\xCF\x84\xB6\x88\x26\x8E\x7B\x8C\xEB\x8D\x38\x8B\x5E\x33\x8F\x63\x7D\x57\x54\xC0\x8D\x37\x8F\xD2\x8D\x6B\x88\x4D\x1B\xB8\x36\xB5\x55\x90\xDA\x87\x57\x8F\xBD\x89\x75\x88\x0B\x8C\x82\x10\xD7\x37\x99\x60\x92\xCF\x80\xB9\x5C\x3E\x8F\x65\x8D\xF0\x8D\xD5\x1A\xE4\x33\xB5\x6F\x80\xDD\x88\xC0\x89\x28\x8E\x3F\x89\xEB\x8C\x44\x19\xFB\x29\x8E\x70\x8A\xD2\x80\xB9\x8C\x49\x8C\xEA\x6F\xB6\x8A\x98\xBB\x05\x4F\x65\x70\x8F\xCE\x86\xB3\x8E\x74\x61\x98\x8A\xF5\x88\x3A\x1B\xD4\x26\x99\x67\x9D\xDD\x8D\x90\x8F\x7F\x8F\x43\x8C\xB6\x8A\x36\x13\xD6\xDC\x67\x53\x6B\xE2\x82\x9E\x88\x3A\x8F\x6A\x8D\xCD\x8C\x1B\x1A\xBD\x38\x9D\x68\x90\xDE\x8F\xA1\x8C\x81\x8E\x15\x8C\x2A\x8E\x76\x19\xEF\x33\x87\x62\x86\x88\x84\xAE\x8F\x1D\x8F\x64\x8B\xBE\x80\x03\x1C\xCA\x37\xB2\x2D\x8F\xDB\x8C\xC3\x8F\x7E\x8F\xF3\x8C\xEB\x8C\xD1\x1B\xFB\x37\xAE\x69\x9D\xDF\x80\xA7\x8D\x88\x8E\x9C\x8D\x6D\x89\xF5\x5A\x6D\x0C\x9E\x4B\x9C\xE2\x88\x9F\x89\xE4\x89\xAA\x8D\x45\x8B\x0D\x1A\xB3\x21\x91\x71\x83\x9D\x89\xBE\x8C\x19\x8F\xFA\x8D\x37\x8C\x78\x19\xD2\x29\xA4\x66\x6F\x9B\x85\xC1\x7E\x7A\x60\x21\x8F\x04\x8D\x86\x1C\xE3\x37\x88\x72\x80\xDB\x8A\xC8\x89\x19\x8F\xCE\x8C\x21\x8E\xB0\x1A\xA4\x33\x8E\x56\x8A\xDD\x81\xC6\x6F",
"\x44\x8D\xDC\x7C\x0E\x8C\x20\xD7\x02\x02\x17\x72\x8D\xD1\x8E\x65\x88\x71\x8A\x61\x8A\x15\x8E\x88\x15\xAC\x38\x8A\x56\x92\xDA\x8F\x38\x8F\x91\x8E\x33\x8C\xF8\x8C\xAC\x0D\xF5\x2B\x83\x37\x9E\x2B\x53\xD8\x87\x84\x68\x9E\x8C\xC1\x8D\x38\x1C\xF0\x35\x99\x72\x97\xE0\x84\xBE\x8C\x3F\x8D\xBE\x8A\xB1\x8D\x64\x16\x80\x34\xA6\x59\x9E\xD9\x8B\xAC\x8A\x86\x8D\x11\x8D\x4E\x83\xBB\x1C\x9A\x7F\x6E\x31\x44\xFC\x7C\x1A\x8A\x2B\x85\x1E\x8D\x0A\x8E\x39\x1C\xDF\x38\x8C\x6F\x95\xE3\x87\xBB\x8A\x0A\x8E\x02\x8E\x2A\x8C\x66\x1C\xA2\x33\xA1\x72\x9F\xE0\x83\xCA\x8E\x99\x8D\xBB\x83\x4F\x8D\x2F\x18\xDA\xA8\x44\x4F\x92\x9F\x80\xBA\x7F\x6D\x57\x2A\x8F\x3D\x8D\x57\x19\xF2\x35\x98\x70\x9F\xD3\x89\xA5\x8F\x1B\x8F\x96\x8D\x46\x8E\xE2\x18\xA2\x39\xA6\x5E\x86\xE7\x88\xA8\x8E\x59\x8C\x0A\x89\x5B\x8D\x1E\xD7\x6E\x39\xB2\x71\x88\x5B\x8B\xCD\x8A\x61\x8D\xE8\x8D\x3F\x8C\xA3\x1B\x81\x31\xB2\x66\x83\xC4\x81\xB1\x8D\x10\x8E\x1A\x8F\x48\x8E\x08\x16\xA0\x2C\xB6\xA5\x60\x24\x8B\x63\x8A\xA0\x7A\x8F\x8B\xAF\x6E\x83\x1B\x96\x38\x8B\x68\x9B\xE4\x85\xBE\x8C\x55\x8C\x10\x8E\x57\x8D\xA0\x1C\xBD\x36\xB6\x72\x80\xC9\x8C\xCF\x8D\x1F\x77\xD1\x89\x2E\x8E\xE6\x1A\xFC\x89\x4E\x08\x95\xB2\x8D\xE5\x83\xA6\x7A\xB8\x31\x76\x8D\x71\x13\xB4\x1D\x88\x6C\x87\xE1\x87\x18\x8F\x6B\x8D\x47\x8F\xB0\x8D\x1B\x1C\xE3\x36\xB8\x73\x92\xD0\x83\xD2\x8C\x42\x8C\xCE\x80\x9A\x8C\xA3\x0F\xDC\x23\x81\x6C\x9D\xC5\x8B\x66\x85\x60\x8D\x94\x8C\x08\x56\x03\x1D\xBB\x82\x5D\x53\x80\xB3\x8C\x6C\x8D\x93\x8F\xF9\x8D\x4F\x8E\x53\x1C\xC3\x38\xB8\x6D\x9E\xE3\x8A\xB7\x89\x73\x86\x84\x6E\x63\x80\xFF\x1A\xF5\x00\xB4\x1E\x86\x29\x8A\x20\x8B\x63\x8F\x56\x44\x79\x41\x32\x1D\x9F\x36\x86\x70\x9D\xC3\x87\xD0\x8A\x46\x8D\x42\x8E\xF5\x8C\x0B\x1D\xEC\x33\xA3\x73\x88\xDD\x85\xCE\x88\x97\x8C\x47\x85\x2E\x7F\x9D\xFA\x0D\x24\xAA\x63\x99\xA8\x6C\x8E\x88\xE9\x72\x8B\x5F\xA4\x8E\x8C\xC1\x29\x2B\xB1\x62\x95\xC7\x8C\x59\x8F\x1E\x8D\x29\x89\x7C\x8C\x7B\x11\xAA\xD8\x74\x9D\x74\x3F\x8A\xB5\x6E\xFE\x80\x8F\x8A\x30\x64\x26\x12\xE0\xFC\x21\x75\x95\xD9\x8B\x8D\x8E\x4F\x8D\x37\x8C\x56\x89\xF6\x1C\x82\x35\xBB\x74\x9D\xD2\x8D\xD3\x8F\x4B\x8E\xD5\x8D\xD8\x5D\x38\x0C\xE4\x7B\x61\x28\x0B\xEC\x8A\xB4\x89\x9E\x8D\xE7\x8B\x79\x8E\x8F\x1D\x80\x35\x91\x76\x97\xD7\x83\xD9\x8C\x50\x8D\x65\x8E\x43\x8D\x25\x1D\xE9\x36\xA3\x64\x8A\xA1\x81\xFB\x64\xB3\x8D\xE7\x8C\xFA\x8D\x74\x1C\x86\x3A\xA2\x71\x92\xDB\x89\xBF\x8C\x6E\x8D\x38\x8F\x10\x8D\x68\x1C\xDB\x33\x90\x70\x9F\x28\x8B\xB7\x8B\x0E\x83\xFD\x84\x2D\x86\x7F\x1B\x84\xD8\x7B\xA8\x60\xE6\x86\x10\x06\xB5\x8F\xEC\x8C\xD8\x8E\x5D\x1B\xB6\x37\x8E\x76\x95\xCE\x8F\xC3\x89\x8F\x8D\x10\x8F\xA8\x8E\x6B\x1D\xD5\x37\xAD\x75\x8B\xE3\x84\x65\x40\xD5\x7F\x2B\x7E\xDF\x79\x55\x10\xDC\x37\x98\x6E\x9C\x2A\x6A\xB9\x8D\x2D\x32\x71\x8F\xF9\x8D\x2E\x1A\xB5\x37\xB6\x6F\x9D\xE6\x8A\xA6\x8F\x9B\x8C\x9B\x8C\x3D\x8E\x99\x1A\xFC\x38\x9B\x6A\x8F\xE8\x8D\xA9\x8A\x92\x8E\xAE\x7F\xD6\x8D\xDD\x1B\xE7\x32\xBA\x64\x9F\x0C\x3F\xDD\x8D\x80\x8C\x4D\x8F\xF3\x88\x0F\x18\xCF\x38\x8B\x4E\x8D\xC9\x86\x28\x8E\x85\x8C\xA2\x88\x7D\x8E\x9D\x18\xA4\x39\x81\x75\x85\x0F\x8C\x94\x8B\x0A\x6B\x5E\x8D\xCA\x8D\x06\x17\xFC\x24\xB4\x0D\x8F\x5B\x55\xDF\x8E\x84\x8E\x67\x8E\xD8\x8B\x18\x19\xFA\x3B\x91\x60\x92\xE5\x83\x81\x8B\xB1\x89\x05\x8C\xB3\x8D\x7B\x15\x82\x3C\xBA\x62\x96\x2E\x8F\x10\x86\x56\x8D\xB8\x7E\xB7\x84\x7E\x08\xDC\x82\x0A\x76\x98\xEB\x8E\x29\x61\xB3\x89\xEC\x8B\xF0\x86\x71\x08\xDD\x19\xA3\x46\x9F\x66\x87\xC8\x73\x63\x80\x77\x8B\x61\x8B\xF9\x58\x06\x21\x9C\x37\x4D\xF0\x8C\xC4\x8D\xB1\x8E\x4D\x8E\x63\x8E\xA0\x17\xC8\x39\xBB\x5B\x8A\xE6\x8D\x6F\x8F\x81\x8C\x7B\x8F\x08\x8E\x80\x1C\xB5\xE4\x76\x5D\x91\x86\x83\x10\x04\xC6\x8D\x17\x8F\x26\x8E\x56\xD1\x4E\x36\xB0\x34\x88\x2D\x8F\x57\x86\x46\x8D\x43\x8E\x1C\x8D\x56\x1C\xC9\x33\xBC\xD2\x53\xE0\x86\xD0\x85\xB8\x8C\x89\x8E\x5A\x64\x5F\x16\xAF\x39\x92\x78\x9A\xC8\x84\xE1\x89\x13\x8C\x8F\x8E\xD2\x8B\x00\x1E\xE4\x31\x94\x0F\x78\xBC\x86\xD7\x88\x00\x02\x91\x8F\x42\x8E\x8B\x17\xE2\x3B\x9C\x73\x8B\xEE\x88\xBB\x8C\x8C\x8E\xEE\x8C\xF4\x8E\xDE\x1A\xEA\x3B\xA0\x6B\x9B\xED\x83\x7F\x8A\xA0\x85\x9A\x88\x88\x89\xD2\x03\x9C\x4F\x67\x79\x98\xE4\x89\xE6\x8A\xC8\x88\x59\x8F\xD9\x8E\xA2\x1B\x8A\x37\xA4\x6E\x97\xED\x88\xAC\x8A\x7D\x8D\x98\x8E",
"\xA4\x8C\x1A\x1E\xAD\x65\x59\xA2\x6F\xBA\x86\xE6\x8F\xCA\x8C\x18\x68\x65\x8B\xF9\x1D\xCD\x3A\x9A\x50\x9A\xF1\x82\x7A\x8F\xCB\x8F\x26\x8D\x43\x8F\x03\x1A\x97\x3B\xAB\x52\x97\xD0\x85\xE6\x8B\xCF\x8C\x2B\x8F\x57\x8C\x26\x1E\x91\x3C\x92\x7A\x82\xB3\x84\xE9\x88\x42\x8D\x69\x8F\x7C\x8D\xA7\x1D\xFB\x35\x89\x7A\x8B\xA0\x6F\x1B\x89\x9C\x74\x5F\x80\x3F\x6B\x7A\x1E\x8E\x3D\x8D\x42\x70\xF4\x89\xC2\x8B\xCB\x8D\xCE\x8C\x4F\x8E\x52\x1C\x8D\x37\xB9\x76\x83\xD1\x84\xD5\x88\x78\x8C\x16\x8E\x1E\x8D\xF6\x17\x9A\xD1\x5E\x7A\x90\xE7\x84\xBB\x8E\xCF\x8C\x67\x8D\x21\x8D\x9E\x19\x8D\x36\xB1\x66\x85\xDD\x8C\xD0\x8A\xCE\x8E\xC4\x8C\x3A\x8F\xE2\x1A\xEE\x3B\x8E\xDF\x5E\x48\x86\x3D\x63\xD8\x8F\x07\x8D\xB1\x8E\xC7\x1E\xE7\x33\x8F\x5E\x87\xEB\x84\xA3\x89\xAD\x8E\x93\x8E\x67\x8F\x0E\x1D\xA0\x38\x94\x77\x91\xCF\x87\xD2\x8E\xF6\x3C\x99\x8D\x1A\x8C\x9B\x1D\xB2\x3D\xBB\x55\x74\xF5\x8A\x92\x88\x96\x8C\x4B\x8D\x45\x8E\x2E\x19\x9D\x38\x9F\x65\x84\xE2\x80\xED\x8A\x2C\x8D\x1F\x82\x68\x8E\xEF\x13\x96\x5B\x7D\x72\x9C\xA5\x72\x5E\x8E\x2C\x68\x83\x8E\x75\x8F\x91\xDC\x5D\x2D\xB7\x78\x99\xE0\x87\xCC\x89\xA7\x8D\x32\x8E\x79\x8F\x01\x1A\x98\x3D\xB2\x6A\x8B\xF5\x84\x5F\x8F\xAC\x7D\x88\x8A\xEC\x8E\x49\x04\xEC\x22\x89\x61\x98\xAF\x8C\xAB\x89\x4E\x36\xB5\x8E\x1C\x8C\xD8\x1E\xE1\x38\xB6\x71\x89\xE0\x8E\xE6\x8B\x81\x8C\x9C\x8E\x88\x8D\xE0\x1E\xD0\x3C\xBD\x7A\x80\xE0\x87\xCE\x8F\x80\x8A\x22\x8D\x91\x65\x6C\x09\x8E\x2C\x9B\x77\x90\xB0\x84\xDC\x8D\xC8\x8C\xC0\x8E\x63\x6F\xEC\x1E\xDE\x29\x89\x72\x93\xF4\x86\xF0\x8B\xC7\x8C\xC2\x8F\x65\x8E\xA9\x1E\xBF\x36\x8C\x7C\x94\xD5\x89\x88\x88\x54\x8F\x88\x8B\xDF\x75\xA4\x1A\xC3\x89\x73\x77\x95\x27\x37\xF1\x8F\x09\x8C\xC8\x8D\x0B\x86\x22\x1B\x99\x18\xBE\x5D\x8A\xF1\x80\x78\x8D\xAA\x8A\xE0\x8B\xAB\x8A\x7E\xFF\x00\xBB\x3D\x45\x8F\xD6\x8B\x1A\x8D\xDF\x8E\xA4\x5A\x69\x8D\xB6\xB5\x69\x3D\x9A\x74\x92\xE7\x85\xCC\x8C\xE0\x8D\x8E\x8F\x9A\x8F\x95\x1E\xB7\x3E\xBD\x78\x94\xF7\x8F\xE3\x8F\x36\x8E\x9D\x8F\x81\x83\xC6\xF2\x2B\x13\x99\xD4\x62\x0D\x65\xFC\x7E\xCA\x88\xB6\x79\x97\x8E\x77\x0F\xE5\x3C\xA2\x3B\x99\x4D\x5E\x6D\x3F\xC1\x8C\x2C\x8D\x13\x8F\xA0\x11\xCB\x3E\x9F\x40\x8B\xF1\x81\x02\x88\xF7\x88\x5D\x5C\x2C\x86\xC3\x68\x5A\x18\x8A\x3E\x96\x70\x5A\x65\x8E\x5C\x2F\xDC\x8F\xDC\x5D\x75\x1F\xC5\x3D\xBA\x5D\x9A\xF8\x84\xDE\x8A\x5B\x8E\x79\x8E\x6E\x8D\x1F\x1F\xBC\x37\x92\x75\x9E\xDD\x83\xF2\x88\x55\x68\x50\x8F\x0D\x8F\x82\x16\xB0\xE3\x41\x51\x9A\x03\x83\x44\x8F\xA8\x8D\x42\x01\xC3\x8F\x03\x9A\x09\x3F\x88\x77\x8E\x91\x83\x8F\x8B\xAF\x8D\x73\x87\xA7\x8D\xFC\x1D\x8D\x27\xB4\x72\x8C\xAC\x8A\xF0\x8C\x7D\x8C\x98\x8C\x75\x81\x70\x1D\x8E\x18\xA9\x63\x8F\xD9\x87\x45\x8B\xF8\x50\xE8\x8E\xAD\x4C\xA2\x1F\xE1\x3B\x86\x7B\x8C\xFC\x8C\xE6\x8E\x9B\x8D\xC7\x8E\x70\x8E\x91\x1F\xD3\x37\x91\x77\x9E\xF1\x82\xEE\x88\xA2\x8C\xEF\x86\x7E\x8C\x6B\x14\xC4\x36\xAD\x51\x86\xDA\x8D\x0A\x75\xF0\x53\xED\x8F\xC9\x4C\xB9\x1F\xAD\x39\x8B\x75\x9A\xF2\x83\xEA\x88\x8A\x8C\xAE\x8E\x46\x8E\x21\x1D\x86\x3D\xA4\x73\x9B\xE7\x8E\xD6\x89\x72\x53\x8E\x88\xE7\x8F\xA5\x76\x22\xEB\x36\x78\x91\xF4\x83\xF3\x8C\xD4\x8C\xD8\x8E\x53\x8F\xD9\x1F\x8E\x39\xAD\x7E\x90\xE4\x8D\xDE\x8B\x2C\x8F\x87\x74\xFF\x87\x21\x0A\x4F\x3F\xA9\x63\x51\xFE\x80\xEA\x8A\xAF\x8C\xDE\x8F\xCD\x8A\x97\x12\xFC\x18\xB3\xF8\x65\x8D\x8F\x94\x82\x55\x63\x08\x64\x7F\x8D\x3D\x14\xEC\x2C\x88\x16\x96\x51\x0A\x58\x85\x88\x7B\xCF\x80\xEA\x6D\xF2\x1F\xF8\x47\x74\x7F\x91\xD7\x8F\xD9\x8D\xEB\x8C\x3D\x8F\x7A\x8D\xA3\x1D\x9C\x38\xA7\x7A\x85\xDB\x8C\xCC\x8D\x6A\x8F\xCE\x8F\x30\x89\xD8\x06\xCC\x63\x66\x40\x9B\xDE\x81\xA5\x73\xA8\x6D\x68\x82\x99\x8D\x9F\x1F\xE1\x3F\x8A\x35\x28\xF2\x82\x4D\x6F\xF4\x8F\x92\x8F\xB2\x86\x4D\x1E\xC8\x34\x93\x7E\x95\xE2\x85\xF9\x8A\xCA\x8F\x5B\x8F\xAF\x81\xF0\x1D\xAB\x3E\x88\xC8\x6D\xF9\x82\x10\x01\x01\x93\xA2\x51\x05\x90\xC3\x1C\x9B\x3A\xB7\x6C\x96\xF5\x8B\xC2\x89\xF5\x8D\xD4\x8C\xFF\x8E\x79\x15\x98\x3C\xA6\x5B\x97\x00\x9A\x6E\x8A\x78\x8F\x3A\x8A\xB9\x81\x05\x15\xEE\x29\xAF\xAD\x56\x01\x9E\x7D\x50\x07\x91\x9F\x8F\xC5\x8F\xAD\x19\x8B\x36\xA8\x67\x9C\xF6\x86\xAC\x8C\xD0\x8E\xDD\x8D\x15\x90\x69\x1C\xC5\x3F\xAD\x7F\x81\xB8\x85\x2B\x8A\x7B\x8C\xF1\x8C\x38\x88\x95\x19\xE5\xF9\x5E\x4B\x8C\x02\x98\x7F\x56\x09\x93\xEF\x8B\xB6\x8C\x07\x1C",
"\x9B\x3E\xBE\x70\x9E\xC6\x8D\xAA\x88\x1C\x8F\x04\x90\x0F\x8E\x6C\x1D\xDC\x3F\xA3\x7B\x8D\x3C\x78\x9A\x8A\x13\x74\x19\x91\x29\x34\x66\x20\xF9\x2F\xA8\x81\x9F\xF3\x8A\x06\x93\x8C\x8C\x1E\x8F\x32\x8E\xC1\x1F\x8D\x38\x83\x7F\x84\xFB\x8A\x05\x90\xC8\x8F\x11\x8E\x4F\x84\x3E\xC9\x44\xAC\x77\x81\x8C\x76\x89\x70\x39\xE3\x8D\x14\x91\xB2\x8E\xC4\x1A\xD4\x40\x8E\x6C\x81\x04\x97\xC6\x88\x0B\x92\x6E\x8F\xB2\x8F\x75\x1E\xAD\x11\x97\x84\x6E\x02\x68\x78\x8E\x20\x03\x22\x90\x7B\x87\x8D\x20\xF7\x3B\x97\x50\x84\xFF\x8C\xC9\x8C\xE6\x8D\x04\x90\x9D\x8E\xE9\x1F\xF9\x39\x9B\x7F\x81\xF0\x8D\x86\x74\xCC\x8E\x52\x53\x4F\x90\xEC\x0E\x96\xEC\x12\x7F\x91\xF9\x8C\xD4\x8D\xFC\x8E\xF5\x8F\xA7\x8E\xB9\x1E\xFC\x37\xBB\x7A\x8F\xDC\x85\xEF\x89\x72\x8C\x1B\x8E\x9C\x86\x66\x19\xB6\x38\xA0\x6F\x9E\x04\x92\x02\x92\xEC\x24\x09\x90\xA9\x74\x38\x1E\xE6\x37\xA5\x7A\x88\xDF\x89\x0A\x94\xA7\x8F\xFA\x8F\x5B\x8E\x73\x20\xCC\x2F\xBB\x18\x97\x68\x8C\x3F\x60\x16\x92\xB6\x86\x59\x90\xF5\x1F\xD9\x3C\xA3\x5A\x86\x01\x9F\x15\x88\x4B\x89\x55\x87\xD5\x8F\x17\x1E\x95\x40\xA7\x6D\x89\xED\x89\x09\x6E\xAF\x8B\x75\x58\x6B\x90\xDC\x7F\x79\x40\x8C\x60\x84\xFD\x89\x92\x8A\xE6\x8D\x29\x90\xF3\x8F\xA7\x20\x87\x3E\xAF\x81\x93\xF7\x83\xD5\x8D\x17\x92\x11\x8E\x18\x7A\x34\x1C\xC9\xFE\x3A\x34\x80\xFF\x87\x52\x3A\xFC\x8F\xD1\x8E\x17\x86\x49\x1F\xDB\x19\xBA\x7D\x82\x8D\x8D\xF4\x8C\x34\x8A\x55\x8B\xFE\x8F\x15\xEB\x01\x39\x9C\x44\x97\xBB\x81\x10\x00\x1D\x91\x0D\x40\x75\x90\x64\x18\xC9\x3B\xA3\x77\x9D\xFD\x85\xDE\x8F\xF7\x8F\x79\x8F\xE7\x8E\xBA\x1E\x96\x41\xBC\x7A\x96\x07\x9F\xC7\x8A\xDA\x8E\x89\x50\x6A\x8F\xE7\xD4\x0E\x42\xBB\x2A\x50\x08\x92\x89\x89\xB6\x8D\x1A\x91\xC6\x8F\xF8\x1B\x8F\x3F\xBA\x6F\x98\x08\x9A\x0B\x92\x23\x90\x2F\x90\x4C\x90\xD1\x1E\xF8\x41\xA5\x7B\x8D\x8A\x6C\x5C\x8A\x20\x76\x48\x91\x05\x2C\xC6\x20\xE3\x3F\xB5\x7A\x95\xFE\x8B\xDF\x88\xDE\x8D\x7F\x8E\x4D\x8C\x2F\x1C\xC2\x40\x97\x60\x84\x07\x93\xD0\x71\x51\x8C\xDC\x7F\x18\x8C\x9A\x0D\x8E\xC3\x79\xAD\x75\xF8\x82\xEB\x2F\x26\x92\x06\x2B\x50\x90\x76\x1F\xA1\x3D\xB3\x6B\x8F\x00\x9A\xC1\x89\x1E\x92\xCD\x8F\x79\x90\x09\x1F\xAB\x41\xA2\x79\x84\x0A\x93\x39\x8E\xE1\x8F\x86\x65\x45\x8D\x14\x1F\x8D\x35\xB0\x53\x95\x01\x95\x0C\x97\x80\x3A\x4E\x91\x76\x8F\x3C\x20\xB1\x39\xBE\x80\x8D\xE1\x80\x14\x97\xBF\x8E\x56\x90\x44\x8F\x5C\x21\xB8\x6C\x5F\xFE\x71\xB9\x8D\xD2\x8E\x73\x57\x17\x8D\x25\x90\x65\x21\xA6\xC0\x6B\x83\x86\xDC\x85\xFA\x8F\xFE\x8E\x2C\x8D\xBE\x8E\x0F\x0D\xF8\x31\xAD\x78\x81\x67\x89\x46\x85\xB2\x35\xB6\x82\x1F\x84\xE8\x01\xBC\xE5\x56\x7D\x91\xDD\x72\x16\x90\x79\x8C\x31\x91\x7E\x90\x23\x20\xE7\x42\xAE\x83\x97\xE9\x8E\xD4\x8B\x19\x90\x54\x8F\x8C\x90\x83\x20\xF5\x41\xB0\x84\x96\xF7\x89\xCB\x88\x9D\x8F\x1E\x4B\xAA\x8F\x20\x1E\x86\x30\x4E\x62\x80\xD6\x54\x6E\x19\x2F\x93\xF6\x73\x27\x90\x7C\x18\xD9\x3D\x92\x81\x9B\xF6\x82\xE8\x8A\xA1\x8C\xB3\x8E\xB5\x8E\x22\x1D\xCF\x41\xA4\x74\x9D\xFE\x86\x34\x8D\xD5\x8C\xF0\x7E\x4A\x82\x57\x16\x8A\x0E\xB0\x4F\x90\x6F\x8A\xAE\x8A\xCA\x8B\x88\x7B\xF8\x63\x69\x0F\xBB\x25\xBF\xB4\x41\x3D\x39\xC5\x58\xEE\x85\xDD\x86\x8D\x45\x85\xBE\x55\x1E\xB4\xEC\x3B\xE3\x61\x44\x28\x1D\x79\x43\x56\x4E\x00\x26\x0F\xBC\x39\x8F\x35\x0A\x5A\x2C\x04\x7C\x5F\x85\xF7\x7D\x5F\x78\x04\x0A\xB0\xCC\x77\x12\x82\x7B\x8D\xD3\x04\x3A\x90\x15\x72\x7B\x32\xFA\xC1\x7C\x29\x1F\xC3\x6E\x05\x81\x1E\x90\x43\x06\x7F\x87\x4C\x7B\x00\x0E\xA3\xB2\x4A\x15\x53\x6E\x5D\x78\x87\x70\x70\x06\x02\xEF\x90\x41\x0F\x81\x7A\x58\x08\x61\x69\x54\x84\x7D\xAB\x05\x68\x57\xD0\x36\x69\x4E\x53\x04\x1A\xB9\x67\xF1\x58\x58\x5A\xC3\x12\x42\x56\x23\x56\x2A\xEF\x3A\xC4\x52\x16\x7E\xD8\x30\x89\x6C\x3F\x90\x23\x57\x34\x72\x50\xC2\x08\xF6\x32\x99\x7E\x7A\x81\xF7\x8A\xA9\x52\xCC\x87\x0A\x78\x2A\xF0\x65\xA7\x47\x83\x95\x5E\x89\x0C\x96\xA3\x8E\x73\x8E\x90\x8E\xD0\x1D\xB1\x43\xAF\x85\x99\xF4\x8F\xD3\x88\xDD\x89\x83\x87\xBE\x8D\x42\x1D\xBC\x31\xA4\x01\x9E\x19\x8F\x8B\x8C\x24\x8D\x99\x8F\x07\x91\xA0\xF8\x52\x15\xA4\x51\x7F\x07\x9F\xC4\x81\x20\x91\x07\x89\x81\x90\x98\x12\xFC\x3E\xB7\x5E\x90\xFA\x8E\x2E\x7C\x92\x8B\xC8\x6C\xAC\x8E\x01\x20\x99\x3F\xA8\x0B\x87\x7D\x8C\xF9\x8F\x1A\x8E\xE7\x8E\x83\x00\x28\x22\xF3\xF1\x63\x28\x9E\xA3\x62\x19\x95\x16\x93\x3B\x91\x5B\x90\x96\x21\xB9\x41\xBB\x71",
"\x9B\x05\x9E\xBF\x8D\x05\x92\x8E\x8D\x8C\x8B\xE7\x18\xFD\xDB\x32\x75\x94\xFD\x8B\x8E\x8A\xF8\x85\xEC\x67\x20\x91\xFF\xF8\x43\x44\xA1\x01\x33\x10\x96\x8C\x8C\x32\x92\x29\x91\x36\x90\xF7\x1C\xCD\x41\x94\x76\x92\x0D\x9E\xD3\x89\x2E\x92\xFE\x85\xE0\x78\x43\x1B\x85\x3B\xA5\x30\x88\x2A\x40\x90\x8A\x13\x74\x96\x90\x86\x7C\x11\x22\x95\xA8\x6C\x88\x83\x63\x8E\x22\x96\x52\x88\x8C\x90\xFD\x8F\xF3\x02\xF5\x10\x94\xAC\x7D\xF2\x39\xD9\x88\x45\x89\xCC\x87\x99\x7C\x49\xD4\x12\x44\x85\x89\x94\xFE\x86\x0B\x95\x27\x93\xF5\x8F\x78\x8F\x58\x21\xB8\x3E\xA4\x89\x96\xEC\x84\x04\x93\xAB\x87\xE8\x73\x49\x8A\xAB\x18\xFF\x44\xBE\xE2\x74\xA4\x6B\x22\x96\x11\x92\x90\x8C\x6D\x8F\x07\x19\xCA\x3D\x83\x67\x94\x04\x92\xCE\x8A\x43\x91\x1C\x90\x56\x90\xE5\xF1\x3D\x3B\xB8\x88\x86\xA5\x82\x00\x93\x4C\x88\x17\x87\x50\x7E\xD4\xDB\x6F\x44\xAB\xE4\x65\x80\x72\x28\x93\x4E\x90\x1E\x87\x3A\x91\x7A\x0C\xF9\x3F\x94\x55\x86\x08\x9F\xF4\x88\x21\x91\x5A\x62\x81\x8B\xDB\x00\xB7\x25\xBE\x65\x9D\x93\x83\x95\x8D\x9E\x32\xAA\x91\x20\x80\x71\x22\xC4\x44\xAE\x8A\x98\x90\x89\xC7\x82\x43\x8B\x78\x82\x93\x8D\x81\x17\xB6\x31\xBE\x7D\x9C\x94\x82\xD8\x88\x06\x91\x81\x78\x77\x80\x6F\xAB\x3F\x45\x96\x60\x60\x81\x7A\x23\x6B\x50\x93\x36\x90\x4B\x8C\x27\x20\xE0\x22\xA9\x80\x98\xAE\x8D\x37\x8A\xBB\x8B\xFA\x89\x17\x8F\x92\x1B\xB8\x45\x82\x17\x9F\x02\x97\xB9\x88\xC1\x4B\xF1\x8C\x74\x8F\x92\x22\xE7\xF1\x6C\x8A\x92\x13\x96\x29\x90\xD7\x88\x24\x90\x86\x8D\x92\x20\xCB\x3D\x96\x81\x86\xDD\x89\x19\x94\xF2\x8C\x47\x91\x01\x8A\xC1\x1B\xAE\x2E\x88\x5D\x94\x0B\x9A\x74\x8D\x03\x93\x66\x87\xA6\x8B\x27\xE8\x7C\x87\x52\x8B\x85\xC1\x64\x2D\x90\x6F\x6B\xB0\x91\x21\x89\xA1\x1D\xF5\x39\xA0\x89\x92\xEC\x82\x26\x96\xB4\x8F\xA2\x90\xD4\x8E\xB4\x21\xB9\xD0\x57\x54\x97\xDB\x52\x30\x90\x50\x93\xB4\x84\x5B\x69\xD6\x22\xF4\x31\x9C\x83\x85\xB5\x86\x5D\x8A\x21\x8C\xB7\x90\xF8\x8B\xDE\x22\xCA\x2F\xAC\x4F\x87\xA9\x87\x09\x89\x11\x90\x20\x7B\x81\x91\x32\xD8\x05\x46\x96\x52\x67\x18\x95\x29\x89\x56\x93\x9D\x91\x59\x91\x2C\x1E\x86\xF5\x44\x86\x94\xEF\x44\xE5\x8E\x52\x49\x88\x04\x94\x91\xD0\xF0\x41\x45\x9B\x89\x99\x18\x96\xFA\x88\x5B\x91\x37\x91\x8D\x8C\xDF\x20\xC0\x40\x9E\x64\x99\xF9\x8D\xCC\x89\x84\x8E\xDC\x68\x13\x7B\xD7\xB1\x38\x46\xB6\x00\x9A\x19\x92\x20\x6C\x67\x92\x5F\x90\xBE\x8E\xB2\x22\xB4\x31\x89\x8B\x88\xD9\x8B\x2C\x90\x44\x8A\x7A\x86\x9C\x7E\x16\xED\x42\x41\x9E\x35\x80\x12\x96\x31\x95\x52\x92\x28\x91\x7A\x8A\x28\x21\xF7\x38\x8D\x77\x80\x04\x9C\x12\x93\x49\x92\x4B\x91\x26\x91\xF7\x22\xBE\x3D\x81\x79\x9F\x07\x06\xA0\x8C\xD1\x8E\xD2\x91\x6C\x78\x2A\x22\xE5\xA6\x6C\x8C\x9C\xBB\x8A\xF4\x8C\x64\x8C\xD3\x8E\x64\x91\x4E\x1F\xCA\x45\xB4\x88\x9A\x6A\x8B\xE9\x8D\xA5\x7D\xA6\x60\x5F\x91\x5D\x23\xF2\x46\xAD\x8B\x9B\xB9\x88\x29\x94\x48\x8E\x70\x8C\x23\x8D\xDE\x1E\xAA\x40\xB5\x8B\x8C\x01\x99\x36\x94\xE4\x8E\xEF\x7E\xDB\x90\x26\x13\xEF\x38\xB0\x7A\x85\x3C\x5F\x36\x95\x85\x69\x28\x7C\xAF\x91\x51\x21\xF6\x3F\xA2\x7A\x85\x14\x93\xE1\x8B\x2D\x93\x2C\x8E\xA1\x91\x53\x1B\xE2\x41\x99\x78\x86\x13\x9E\x47\x7B\x21\x90\x91\x8E\x81\x00\x95\x23\xD1\x15\x94\x8A\x82\x1C\x9F\x35\x97\x70\x8D\x1F\x90\xDA\x8E\x2A\x21\xB6\x3B\x9C\x8A\x98\xED\x87\x36\x95\x8F\x8D\xE3\x91\x2B\x8E\x4D\x1A\x93\x39\x8F\x69\x95\xE4\x87\x4E\x69\x75\x93\x9F\x71\xCB\x91\xAC\x23\x99\x47\x9A\x83\x9A\x18\x9E\x33\x94\x63\x91\xF1\x8B\xEB\x8A\xCF\x0F\xC8\x2F\xBB\x35\x82\x19\x90\x2E\x97\x17\x91\x9A\x88\x71\x76\xD1\x22\x81\x47\x8A\x51\x6D\x1D\x9D\x17\x93\x73\x93\x91\x90\x43\x91\xB8\x20\xD8\x3F\x99\x88\x9A\xFE\x8F\x29\x93\x2B\x91\xC4\x91\x66\x8D\xBA\x1C\xF9\x3D\x9A\x85\x7B\xF7\x81\x94\x81\x34\x92\x2F\x7A\x1A\x90\x01\x01\x3E\x47\xBF\x8F\x6B\x17\x92\x2C\x93\x70\x91\x08\x8D\x77\x91\x53\x20\xAD\x43\xA8\x75\x8F\x0D\x9F\xED\x8C\x49\x92\xED\x91\xCD\x90\xBE\x20\x91\x3A\x96\x36\x95\xD3\x8A\xA8\x8C\x75\x88\x35\x7B\xC3\x8E\x78\xC9\x56\x39\xBB\xAD\x69\x08\x0A\x3E\x92\x44\x84\xFB\x91\x9D\x91\x73\x23\xC2\x2F\x96\x49\x8A\x0B\x9E\x13\x92\xF5\x8C\xE8\x91\x5A\x8E\x0F\x23\xAA\x3D\xA4\x8E\x8D\xF8\x86\xF2\x8E\xE7\x8E\xDB\x8E\xD4\x75\xEC\xF4\x66\x47\x99\x07\x83\xFA\x8D\x92\x35\x80\x92\x36\x78\x2D\x91\x4D\x23\x89\x48\x9D\x66\x83\xBE\x85\xA4\x8D\x63\x93\x91\x8D\x8F\x91\x37\x1A\xF1\x2F\x8E\x89\x8B\xBE\x8F\xCC",
"\x8D\xE7\x8D\x3A\x8F\x82\x7D\xC5\x0D\xF1\x3B\xB8\x61\x83\x20\x9C\x35\x93\x52\x90\x05\x6B\xF6\x91\xD4\x23\xED\x41\x86\x89\x9E\x12\x90\x0F\x93\x61\x90\x69\x8F\x86\x91\xA8\x1E\x91\x48\xBA\x7C\x93\x20\x9C\xF3\x8E\x33\x93\x1F\x82\x5A\x44\x1B\xF5\x1A\x48\x8F\x86\x78\xFA\x88\x38\x5F\x66\x92\xF4\x91\x56\x91\xEE\x23\xBA\x30\x80\x7A\x88\xE8\x82\x3F\x95\xDB\x8C\xFD\x90\xC5\x91\x9E\x22\xD2\x3B\xB2\x81\x86\xFE\x88\x7A\x8B\x26\x91\xD3\x6A\xDC\x90\x6F\x1F\x92\x04\x8B\x62\x85\xC5\x8D\xF6\x8D\xA5\x8D\x37\x45\x4F\x5F\x90\xED\x6B\x98\x41\xEF\x72\x29\x04\xEB\x75\xD4\x75\x16\x06\xCC\x76\xF7\x0D\x8F\xEE\x6C\x89\x69\xC8\x6B\x1D\x96\x15\x78\xB1\x76\x52\x77\x77\x02\xB6\xDD\x49\x65\x70\xA7\x79\xEB\x71\x79\x87\xA1\x77\x3A\x6C\x0B\xD9\x37\xED\x6E\xB6\x7B\x6C\x71\xDB\x76\xB3\x75\xB1\x77\xC5\x85\x38\xF4\x0C\x10\x23\xB6\x60\xC4\x63\x21\x76\xD9\x74\x6F\x77\x25\x04\x0C\x16\xFF\xED\x5F\x2A\x1C\xD9\x39\x60\x7B\x8E\x92\x98\x73\x9B\x89\x47\x0A\xC3\x9E\x00\xBA\x71\xB5\x25\xE9\x71\xC7\x70\xE6\x78\x4C\x77\x80\x0B\x8F\x49\x9C\x04\x0E\x78\x8B\x5B\x79\xDB\x5E\x79\x06\x14\x7B\x63\xCE\x5A\xDB\x46\x92\x98\x23\x9A\x76\x82\x8F\x92\x4B\x73\x6C\x7A\xCD\xEE\x3A\xDD\x49\xC7\x04\x25\x97\x61\x7A\xD1\x75\x53\x33\xF6\x76\xD2\x04\xE6\x14\xBF\xB9\x67\x24\x91\xE8\x76\xC2\x84\x2C\x93\xA5\x02\x8E\x24\xFA\xDB\x73\x92\x91\x3C\x8E\xDF\x76\xBC\x04\xA8\x77\xFB\x71\x02\xEE\x75\x48\xA6\x47\x7A\x24\x9C\x4B\x94\x93\x91\x8C\x77\x3C\x6C\x7D\xF3\x41\x49\xB7\xB8\x7B\x75\x7C\xEA\x76\xFC\x1E\xAB\x77\xCD\x76\x20\x07\x98\x49\xBA\x92\x8C\x26\x9C\x4A\x95\xCD\x77\x77\x76\x64\x77\x01\x01\x59\x49\x85\xCF\x60\x25\x97\x29\x87\xD9\x75\x6F\x76\x62\x92\xBE\xEE\x66\x1B\x3F\xD4\x79\x0E\x90\x00\x03\xC6\x76\x36\x93\x2E\x7C\x18\xEE\x4D\x49\x8E\x7A\x0E\x25\x9D\x4E\x91\x9A\x92\x2C\x93\x4D\x77\x39\xEE\x40\x3F\x7B\xB8\x7B\x6C\x76\x6E\x7A\xD6\x77\x9A\x77\x6E\x92\x20\xFE\x4C\xDD\x4B\x15\x06\x72\x76\x4F\x96\x8F\x93\xAA\x76\x27\x77\x4D\xBE\x51\xDC\x5B\xB6\x7D\x72\x7E\x4F\x91\xBE\x74\x40\x93\xB9\x7A\x6E\xEE\x1D\x49\x86\x04\x00\xB6\x71\x0E\x87\x9B\x91\xAA\x76\x83\x92\xD4\x24\x88\x4A\xB1\xFA\x47\x25\x97\xE6\x71\x97\x90\x3C\x93\x5D\x92\x0F\x25\x88\x49\x81\xD0\x63\x28\x91\x5A\x45\xA0\x91\x28\x92\x61\x92\xF8\x24\xB8\x09\xB5\x92\x86\x25\x92\x58\x79\xCE\x5E\x47\x93\x31\x7F\x0E\x25\xED\x48\xB9\x91\x80\x27\x9F\x5F\x7C\x8F\x91\x2C\x92\x8C\x92\xC3\x24\xAA\x4A\xB7\xD8\x76\x25\x9E\xB8\x83\xB3\x77\x5A\x7B\x77\x92\x30\x25\xF1\x49\xA1\x94\x9D\x25\x97\x4B\x97\x97\x91\x4A\x02\x69\x92\x7F\x24\xA2\x4A\xBD\xBA\x78\x3A\x86\x4C\x97\xD3\x77\x4B\x92\x5C\x78\x42\x25\xB2\x4A\xAD\x92\x94\x29\x97\x4C\x93\x6A\x79\x1F\x93\x93\x92\xD3\x24\xB9\x4A\x95\x93\x89\xAC\x27\x4D\x92\xF7\x59\xAC\x77\x55\x92\x52\x25\xDE\x49\x89\x92\x84\x29\x93\x29\x0E\xA4\x91\x39\x92\x51\x92\xEC\xBA\x22\x1C\x81\x01\x1F\x75\x7A\x7B\x5B\x9D\x91\x43\x93\xA8\x92\x0C\x08\x35\xDD\x74\x94\x8B\x27\x90\x40\x7A\xA0\x93\x51\x93\x7B\x92\xD0\xEE\x79\x49\x96\xF3\x4E\x23\x7D\x20\x96\x7A\x63\xDA\x86\xBE\x74\x0D\xE0\x23\x3F\xBC\x85\x9A\x21\x94\x28\x97\x7A\x91\xE7\x91\x06\x92\x3F\x20\xED\x42\x81\x81\x82\x1D\x93\x04\x93\x26\x8E\x87\x91\xE4\x83\xA5\x22\xDD\x23\x93\x48\x64\x5F\x85\xD4\x88\xFE\x8F\x49\x01\xBF\x92\x7D\xE7\x69\xBC\x4F\xA5\x62\x21\x98\xEC\x8C\x84\x93\xE1\x90\x13\x92\x89\x23\xA8\x48\x8F\x79\x8A\x21\x97\x3B\x97\xF5\x83\x63\x92\xC4\x87\x36\x19\xC7\xD3\x5D\x75\x88\x29\x8D\xF9\x8C\x92\x89\x88\x04\xCC\x92\x40\xF5\x72\x68\x69\x9E\x71\x22\x95\x8C\x8D\xD5\x68\x55\x91\x82\x8F\x56\x21\xE1\x3E\x89\x8A\x83\xFB\x8A\x19\x95\x10\x92\xD9\x8F\x95\x8D\x51\x22\xC4\xF2\x61\x1F\x99\xB4\x81\xC1\x85\xAE\x8E\x52\x52\xD8\x92\xC0\xE7\x32\x4B\x9B\x96\x94\x2D\x94\x98\x88\xA8\x86\x61\x8D\x03\x88\x88\x19\x89\x20\x8A\x66\x8B\x80\x80\x5A\x88\xBD\x81\xA4\x7C\xA1\x8D\xFD\x18\xCA\x3F\xB1\x5A\x8C\xFE\x80\x16\x44\xBB\x44\x72\x92\xF9\x73\x37\xE9\x7A\x40\x9F\x6E\x92\xED\x8F\x3A\x91\xD0\x8D\x6D\x8F\xC5\x8D\x65\x23\xE9\x3B\xB6\x8F\x8B\xEF\x8E\x5B\x91\x13\x90\x44\x8C\x3E\x69\x64\x05\x80\xE9\x5F\x97\x8E\x40\x7D\x97\x71\x07\x90\xD7\x8E\x8E\x8E\x15\x22\xB8\x3A\xB9\x96\x88\xFF\x8B\x3D\x92\xFD\x8F\x86\x91\x85\x8F\x44\x24\xC1\x36\xB3\x0A\x70\x14\x98\x6D\x88\x80\x37\x7C\x92\x15\x74\xF5\x25\xA8\x43\x9A\x68\x8F\x04\x93\x45\x96\xAC\x8D\x15",
"\x93\x2A\x90\xB3\x23\x85\x3D\xBE\x97\x9D\x1E\x90\x17\x91\x54\x92\x55\x8F\xFE\x75\xA3\x22\xBF\x3B\x9C\x6E\x61\xEE\x89\xD4\x84\xB1\x80\x53\x90\x73\x2D\x07\x26\xF2\xD0\x41\x96\x9A\xFD\x80\x05\x97\x52\x93\x6A\x91\x4C\x91\xF1\x22\x9B\x45\xA9\x97\x91\xF3\x8B\x5E\x93\xCE\x8C\xFE\x91\x7B\x90\x5C\x20\xBD\x29\x84\x39\x57\xEE\x8F\xFA\x7A\xE6\x8A\xBF\x90\xA5\x90\x8F\xD5\x5D\x3B\x9F\x86\x21\x31\x98\x88\x73\xC4\x93\x2C\x90\x81\x8F\xA4\x20\xBC\x48\x88\x89\x87\xFF\x8C\x0C\x95\xBF\x92\x2A\x90\x0A\x93\x1C\x22\x81\x4C\x97\x3E\x6E\x16\x94\xC8\x80\x80\x93\x0E\x68\x6B\x8A\x8D\x21\xE8\x45\x89\x04\x1C\x31\x9D\x89\x76\xC7\x91\x36\x90\x57\x8E\xD7\x22\xCA\x3C\xBF\x8C\x9D\xF2\x8C\x91\x8F\x81\x90\xEB\x8F\xFF\x92\xAE\x1F\x9A\x3D\x99\x75\x92\x31\x9E\xCC\x7C\x03\x90\xC2\x8B\x98\x5C\xE7\x22\xDE\x27\x93\x99\x9E\x1A\x73\xE5\x69\x1B\x77\x19\x91\xF1\x92\x27\x21\x94\x42\x8E\x7E\x96\x08\x90\xF9\x8B\xC5\x90\xC8\x8F\x16\x93\xCF\x1E\xAF\x4C\x9D\x84\x95\xEE\x8F\x98\x8E\xDB\x7C\x20\x76\x0F\x8F\x9E\x05\xF6\x30\x8F\x99\x9E\xDE\x82\x06\x94\x21\x90\x00\x00\x2A\x93\xB0\xE8\x61\x4B\xBB\x85\x86\xA6\x85\x3D\x93\x2A\x91\xC2\x90\x08\x90\x3E\x24\x92\x40\x80\x91\x94\x00\x94\x34\x96\x02\x92\x92\x92\xCC\x8E\x75\x20\x8C\x3D\x88\x9A\x85\xD8\x71\x8B\x74\x01\x90\x84\x8E\x47\x93\xCC\x1D\xEC\x40\x9F\x74\x8E\x03\x93\x69\x90\x0E\x92\x16\x92\x50\x91\xD1\x20\x81\x38\xA5\x8C\x9B\x84\x64\x64\x6B\xD3\x90\xAA\x84\x2B\x93\x9E\x26\xF7\x3E\x96\x8F\x82\x32\x98\x3D\x91\x49\x92\xF6\x90\xCC\x90\x59\x24\xC4\x3F\x93\x77\x9C\x22\x9B\xAC\x76\x5D\x88\x0F\x6F\x43\x93\x6C\x26\x93\xCF\x73\x96\x99\x21\x9E\xB5\x89\xC8\x91\x7E\x93\xCA\x90\x44\x26\x97\x43\xAD\x84\x8B\x1C\x99\x05\x93\xD7\x92\xBF\x88\x57\x90\x7E\x25\xC1\x4D\x9A\x96\x82\x3E\x72\x5E\x92\xCD\x8C\x79\x93\xB0\x91\x1C\x1F\xFF\x40\xAF\x79\x96\x33\x92\xF9\x8C\xD9\x93\x25\x91\xF6\x92\x31\x21\xE4\x3D\x90\x8E\x84\x8A\x88\xE7\x88\x25\x3E\x77\x92\x69\x93\xC1\xE7\x70\xBE\x4A\x98\x88\xD3\x88\x6D\x93\x0D\x90\x64\x8F\x48\x93\xA8\x20\xC6\x4C\x8E\x83\x80\x33\x9C\xFE\x8E\x10\x92\x01\x82\x24\x8E\x79\xDC\x05\x4F\x6E\x9A\x95\x54\x80\x6B\x96\xBE\x91\x03\x90\xFC\x92\x5E\x1F\xCA\x41\x89\x9B\x8A\x12\x9A\x5E\x95\x76\x90\x7B\x92\x67\x93\xF6\x26\xA8\x8B\x68\x34\x80\x2A\x95\x60\x97\xB5\x90\xBA\x92\xE5\x92\xD4\x26\x8B\x4D\xBA\x5F\x8C\x30\x95\x5E\x94\x8A\x93\x79\x93\x41\x8F\x11\x26\xD7\x40\x9E\x9B\x9B\x08\x9A\x67\x90\x5F\x92\x89\x8C\x31\x8D\x28\x1A\xBC\x1B\x17\x7E\x7A\x37\x9F\x70\x97\xC4\x5B\x72\x92\x62\x93\xCA\x1D\x83\x3E\xB7\x96\x9F\xFA\x8B\x5F\x95\xC8\x90\xAE\x92\xEE\x91\xA7\x26\xDE\x47\xA9\x9A\x93\x66\x80\x14\x76\x21\x84\xE7\x53\x7D\x93\x77\x0B\x8A\x4D\x91\x84\x8C\x07\x95\x6C\x93\x27\x90\xE7\x90\x2E\x8F\x9E\x23\x95\x3C\xA0\x83\x98\x7D\x80\xC3\x8F\x3A\x89\xFB\x8C\x47\x91\x07\x18\xDD\x1A\xB2\x44\x97\x2C\x95\x72\x92\xC0\x6E\xBA\x93\x37\x93\xD6\x26\xF1\x4C\xAA\x9C\x8F\x34\x95\x15\x90\xDE\x92\x3C\x91\x52\x93\xF4\x20\xF6\x45\x9D\x9C\x8A\x1B\x9E\x3C\x90\xFB\x6F\xB9\x8E\x35\x93\x06\x01\x38\x4E\x94\x24\x7D\x34\x9E\x6F\x97\xD3\x90\x68\x8F\x50\x93\xEF\x26\xA3\x4D\xA1\x89\x92\x37\x93\x26\x94\xDE\x90\x34\x90\x5E\x93\x2D\x24\xDE\x42\x9E\x1A\x97\xD3\x88\x39\x8F\x6D\x56\xD8\x93\x0B\x85\x3A\x27\xA5\x42\x92\x84\x8B\xF3\x83\x75\x90\xED\x92\x68\x8E\xAB\x93\x57\x21\xD8\x4E\x99\x85\x88\x32\x90\x60\x97\x7B\x92\x5F\x85\x16\x8C\xB2\x01\xAF\x48\xAB\x45\x90\xE8\x64\x6B\x85\xF0\x7E\xDD\x93\xA6\x93\xAD\xDF\x6E\x4C\x95\x9B\x9B\xFD\x84\x71\x95\xDD\x92\x1F\x91\xB1\x91\xDB\x26\x98\x44\xAF\x9C\x93\x30\x91\x73\x95\xC2\x93\xCC\x93\x7E\x8E\x2E\x24\xD5\x03\xA2\x6A\x8A\xF9\x8D\x45\x6F\xF1\x92\x53\x75\x88\x93\x3B\x27\x83\x4B\xBD\x9C\x88\x0B\x9C\x13\x97\xB0\x93\xA1\x91\x9F\x90\x96\x1E\xC1\x42\x8C\x96\x83\x0A\x96\x78\x95\x9E\x77\x64\x88\x7E\x91\x72\xD0\x31\x48\xB2\x80\x8C\x0C\x9F\xEA\x7F\x02\x8B\xDD\x93\x04\x8F\x64\x27\xEB\x4D\x87\x72\x9B\x01\x9D\x7A\x90\xE8\x90\x62\x92\xB6\x90\xB1\x27\xEE\x42\x84\x9E\x81\x33\x9D\x28\x92\x7A\x75\xE8\x93\x23\x92\xE3\x8C\x49\x48\x81\x7D\x9C\x6D\x07\xD1\x8E\x0A\x6A\xC3\x93\xD3\x93\x4F\x27\x93\x4F\xA5\x98\x8E\x17\x9D\x60\x91\x12\x93\x83\x93\x49\x90\xDC\x26\xC2\x3F\xB9\x9A\x84\x04\x98\x70\x97\xB7\x92\xC9\x74\x2F\x92\x73\xDD\x60\x48\xAE\x74\x82\x23\x96\x70\x84\x8C\x90\xC2\x82\xE3\x88\xC8",
"\xFF\x26\x44\x7C\x4E\x2F\xF1\x53\xE8\x58\x41\x91\xB8\x6C\xBA\x87\x80\x25\xE7\x5B\x7C\x95\x8B\x50\x78\xA0\x86\xEA\x67\x78\x4C\xA9\x15\x9A\x0E\xC7\x43\xAB\x0C\x92\x6F\x55\xF8\x8D\x2D\x31\xFF\x92\xB1\x8E\x28\x27\x93\x42\xBD\x9D\x8D\xF3\x8A\x6D\x96\xE3\x8D\xF8\x92\x41\x90\xE3\x27\xBD\x4B\xA5\x9F\x9D\x02\x87\x5A\x93\x3E\x89\x6A\x92\x01\x76\x8B\x0F\xE0\x23\xB7\x6B\x63\x3E\x57\x80\x94\xB1\x8C\x67\x93\xC2\x91\xC9\x1E\xA9\x4C\x88\x8E\x97\x22\x92\x5A\x91\xE4\x8C\x69\x93\xAD\x93\x84\x05\x95\x36\x9B\xFB\x78\xE2\x7B\x7C\x80\x63\x8C\x35\x8D\x25\x93\x46\xE7\x3E\x44\xAE\x96\x87\x09\x0D\x81\x95\xB3\x8E\xE2\x8F\xD4\x90\xBC\x1F\x8B\x50\xBE\x7E\x8D\x40\x90\xFC\x8F\x01\x95\x25\x91\x8D\x93\x2F\x21\xE0\x4D\x9C\x86\x8F\x01\x98\x53\x84\x41\x8B\xBE\x80\x2A\x91\x74\x1D\xD6\x44\xA5\x79\x95\x41\x9F\xDA\x8C\xC4\x90\x0E\x95\xCA\x93\x72\x26\xA9\x42\xB4\x99\x8B\x09\x9A\x79\x93\xD9\x91\x04\x94\xAD\x93\x42\x28\xF9\x47\x87\x7F\x98\x2E\x99\xFC\x8A\x4D\x91\xD1\x8C\x14\x86\x3E\xB4\x1A\xD1\x4C\xA1\x87\xEE\x8E\x84\x93\xC1\x92\x89\x92\xF8\x91\xAC\x21\x97\x4E\xAE\x86\x93\x17\x9D\xEC\x88\xCF\x91\xB8\x8F\x09\x94\xE1\x26\xF4\x40\x82\x52\x9C\x3C\x53\x86\x90\xBC\x8F\x8F\x93\x3E\x8D\x3A\x28\x95\x42\xBC\xA0\x97\x08\x95\x85\x96\x6C\x90\x10\x94\xB4\x91\x28\x28\xB8\x47\x9E\x84\x97\xBB\x66\x59\x91\x21\x01\x1D\x94\xFB\x8E\xC2\x23\xD8\x4C\x84\x8F\x9A\x32\x96\x3C\x93\x46\x8A\x97\x8E\xB1\x8F\x60\x1E\xEE\x4E\xB3\x86\x81\xA1\x82\x2A\x97\x59\x81\x11\x91\x14\x84\x9A\xFE\x2B\x29\xB0\x5B\x83\x0B\x91\x10\x07\x10\x96\x83\x8F\x1B\x94\x66\x28\xDC\x4F\x95\x9C\x8E\x30\x9A\x86\x93\x7E\x90\x1B\x94\xD8\x90\x30\x27\xBA\x4D\x9B\x91\x9B\x02\x98\xBD\x89\x4F\x8A\x7D\x78\x72\x91\xDA\x1D\xD2\x32\xBA\x98\x95\x27\x3E\x89\x95\xC6\x8F\x07\x95\x13\x93\x86\x23\x9A\x45\xA3\xA0\x87\x45\x95\x3F\x96\xE0\x92\x8B\x93\x2C\x94\x30\x26\xAF\x0B\x8C\x99\x8E\x94\x8C\x41\x90\x80\x35\x2D\x95\x23\x8F\x4E\x23\xB3\x4D\x87\x9B\x9F\x12\x9A\x76\x94\x61\x90\xDB\x92\x87\x91\x92\x28\xE5\x44\xB5\x9E\x95\xC9\x86\x99\x34\x3D\x43\xF0\x8C\x5D\x91\x0A\x1E\xCA\x40\x94\x6F\x67\x46\x98\xE6\x88\xEA\x90\xE5\x93\x33\x94\xDD\x27\xF0\x45\x9F\x9F\x92\x17\x99\x71\x94\x5E\x93\x15\x94\xC6\x91\x81\x28\xAE\x40\xB4\x4A\x99\x43\x8E\x05\x90\x1B\x94\x30\x8A\x59\x86\x85\x26\xA7\x47\x9D\xA2\x8F\xF9\x8F\xED\x6D\xA6\x8E\xB1\x93\x80\x93\x16\x22\xE4\x46\xBD\xA1\x85\x38\x9F\x87\x97\x7E\x90\x30\x95\x3D\x93\x8D\x08\x99\x4D\x9E\x4B\x9C\x46\x9C\xE7\x8E\x1B\x97\xF6\x92\xC2\x91\xB8\x28\xA1\x50\xA3\xA3\x8A\x31\x9B\x8F\x94\xC5\x92\x2F\x95\x3C\x93\xFF\x28\x9E\x4E\xAB\x8D\x9A\xD8\x74\x64\x6C\x20\x97\xA7\x8F\x58\x93\x52\x21\xE7\x4E\x8C\xA0\x98\x3C\x9E\x80\x95\x21\x97\x9D\x93\x87\x94\x6F\x28\xAB\x51\x89\x9C\x93\xF2\x8E\x6B\x93\xA7\x87\x3C\x95\xAD\x8F\xFF\x26\xC4\x4F\xBF\x9C\x97\xF5\x89\x3D\x90\x51\x92\xE0\x92\x45\x91\xD1\x28\x8C\x45\xAD\x82\x82\xE1\x8D\xAD\x71\x6E\x8A\x45\x94\x62\x8F\x82\x25\x8C\x4D\x84\x96\x99\x32\x9E\xEE\x88\xF5\x8F\xF1\x93\xCF\x91\x8A\x25\xC3\x46\x82\x91\x85\x1A\x9F\x79\x96\xA4\x8F\xB8\x93\xE7\x8C\xE5\x26\xE9\xFD\x1C\x37\x57\x49\x97\xED\x89\x01\x94\xDF\x93\x7B\x94\x2B\x27\x82\x4E\xAD\x9C\x8A\x36\x9E\x87\x97\x1C\x95\xB3\x92\x91\x94\xE6\x27\xBF\x3D\x93\x83\x8E\xAB\x8C\x3F\x64\x29\x94\xC6\x8E\xA7\x94\xD7\x26\xD1\x50\xA2\x8D\x82\x35\x97\x21\x94\xD4\x93\x33\x95\x20\x92\x31\x29\x90\x46\x85\xA5\x9D\xAB\x8D\x8E\x84\xE1\x90\x08\x90\x83\x00\x5E\x29\xC6\x3E\x8C\x97\x81\xD9\x8E\x5C\x93\x64\x8C\x74\x93\x92\x8D\x89\x19\x9E\x2B\x8B\x66\x93\x8A\x8D\x98\x8F\x3D\x64\xFA\x93\x9C\x70\xFB\x20\xDD\x52\xB4\xA3\x9C\xFC\x66\x8F\x96\xE7\x92\x61\x92\xE3\x93\xAF\x27\x8E\x48\x81\xA5\x81\x1D\x95\x69\x93\x1C\x93\x34\x95\x3B\x6E\x0D\x09\x89\x03\xA0\xF9\x31\x4B\x94\x91\x74\x4B\x92\x6D\x92\xAA\x93\xB8\x25\x80\x4F\xBA\x96\x8F\x49\x9C\x5B\x90\x0B\x94\x1C\x95\x21\x94\x48\x0C\x95\x08\x8A\x9D\x98\xAD\x84\x83\x93\x30\x97\xD9\x75\xE1\x91\x3D\x23\x8C\x51\xB6\x63\x81\x0C\x9F\xD7\x8B\x30\x92\x3E\x8D\x25\x79\x7B\x01\xF9\x81\x68\x8F\x80\x00\x04\x99\x93\x81\x37\x2D\x94\x34\x94\x28\x26\x8B\x52\xBB\xA2\x85\x47\x9D\x86\x90\x24\x96\xC8\x8F\xD2\x92\x4F\x22\xF3\x34\xBB\x8F\x8F\xF8\x85\x63\x92\xB0\x87\x53\x07\xE3\x5D\x75\x27\xDB\x51\xA6\xA6\x98\x5C\x73\x0A\x96\x30\x94\xAD\x92\xD7\x93\x2D\x29\xB0\x4F\x90",
"\xA2\x97\xF4\x89\x96\x92\x82\x93\x63\x94\xB9\x90\xAA\x13\xFD\x47\x88\x61\x8F\x5C\x7C\xA8\x8D\xF7\x93\x99\x89\x02\x85\xCB\x29\xC1\x34\xA2\xA2\x96\x3C\x90\x3B\x93\x0A\x96\xEC\x90\x1F\x94\x9D\x22\xA9\x51\xA4\x9F\x98\x4A\x9E\x5E\x92\x38\x94\x81\x8E\x05\x8B\x16\x24\xF5\x42\xA9\xAE\x62\x34\x98\x70\x6A\x39\x94\x4A\x94\xB3\x93\x0E\x20\x98\x53\xAC\x9C\x9A\x4C\x9C\x5F\x93\xF3\x93\x91\x93\xCE\x93\x49\x26\xD7\x53\x9D\x01\x4E\xFD\x70\xCD\x78\x86\x90\x89\x8B\xD1\x7F\x6F\xAB\x35\x53\xB4\xBF\x20\x45\x9C\x6E\x92\x2C\x95\xB6\x92\x8E\x94\x3D\x28\x9E\x52\x9D\x9B\x96\x4A\x9F\x6D\x97\x33\x96\x16\x95\xCE\x90\x15\x24\x8A\x4F\xBA\x58\x92\x3E\x99\xAB\x8C\x9B\x60\x13\x92\x7C\x5A\x21\x0A\x0A\x54\x9D\xC7\x25\x43\x9D\xA0\x91\x0F\x97\x9C\x93\x3D\x94\x75\x26\x92\x54\xA2\x9F\x8A\x4F\x92\x81\x94\x3D\x95\x1C\x95\x19\x8E\x7F\x29\xAF\xDA\x6A\x9F\x97\xED\x73\x1C\x89\x5D\x8F\x29\x8D\x75\x8D\x0C\x04\x50\xB2\x32\x36\x00\x06\x9E\x63\x60\x7A\x64\x57\x45\xF0\x56\x48\xD2\x71\x3A\x87\xA1\x87\x74\x85\xFB\x8A\x8D\x92\x08\x87\x34\x91\x76\xE7\x6B\x44\xB9\x11\x59\xE3\x75\x5B\x8F\xB3\x40\xA5\x69\xB9\x6A\x51\x26\xBB\x06\xA5\x40\x83\xB8\x89\xEA\x78\xF7\x91\x82\x8F\x77\x94\x09\x17\x84\xA6\x7F\x38\x81\x88\x24\x4D\x8E\x75\x8C\x9F\x86\xA4\x70\xC9\xFE\x71\x06\x80\x9A\x8D\xA7\x8B\x18\x91\xCD\x93\x50\x37\xEB\x6A\x1D\x1E\x88\x43\xA9\x40\x8B\x0C\x9F\xBD\x8B\x00\x95\xBD\x2C\x19\x8F\xD2\xB7\x14\x52\xA3\xDB\x78\x25\x7E\xA4\x7D\x25\x34\x8F\x95\xF8\x8E\x5A\x23\xC4\xB4\x6D\x8D\x95\xAD\x8C\xE9\x8B\x1D\x78\xC8\x93\xCA\x6F\x22\x27\xCB\x26\xA4\x47\x62\xE4\x8A\xF5\x85\x4F\x78\x94\x8C\xE9\x71\xEB\x0D\xBA\x77\x75\x84\x82\x43\x35\x15\x8F\x28\x92\xE5\x88\x1B\x82\xD3\x27\xC3\x12\x84\x4C\x70\xCB\x2B\xB7\x7E\x49\x77\x7D\x8A\xC7\x93\x8F\x0E\xE5\xC4\x77\x9E\x90\xF8\x81\xAA\x88\x04\x73\xA8\x8D\x0E\x95\xA0\xAB\x5F\x54\x9A\xAA\x9C\xC2\x83\xA6\x94\xCE\x58\xD0\x8E\x50\x95\x13\x6D\x22\x55\x96\x92\x9E\xE7\x8C\x97\x88\x5A\x8E\x76\x87\x0F\x95\x18\xE3\x58\x46\xAD\x58\x09\xE9\x8E\xBE\x73\x8C\x90\x6F\x91\x1B\x95\xBE\x21\xF2\x02\x3A\xA8\x98\xA0\x32\xC5\x58\xA6\x8F\xB0\x7C\x4D\x61\x90\x0C\xFB\x52\x95\x97\x84\x40\x67\x61\x90\x89\x76\x6F\x8F\x2C\x86\x0A\x05\xDE\x23\x83\x6C\x9A\x40\x91\xDE\x6B\x09\x34\x1A\x86\xC2\x80\x8C\x19\xFF\x9F\x45\x98\x97\x11\x96\x89\x90\x44\x92\x98\x88\xC9\x92\xD3\x18\xE9\x05\xA5\xB1\x71\x41\x9C\xB1\x8E\x90\x7D\x5B\x30\xDB\x8B\xD0\x2A\xFC\x52\xBC\x24\x9C\xF2\x7F\x7D\x86\x08\x96\xCB\x8C\x22\x95\x55\x22\xB1\x36\x87\x74\x2F\x56\x9E\x7E\x85\xF1\x7F\xB8\x95\xB1\x54\x22\x12\xD9\x4B\x9E\xA1\x8B\xFE\x80\x86\x97\x68\x8F\x40\x7F\x4C\x89\xE1\x2A\xC3\x55\xBD\xA5\x82\xA4\x30\x5F\x92\x22\x8F\xBD\x94\x19\x91\xF9\x2A\xA9\x36\x96\x97\x90\xF2\x7B\xDA\x8B\x03\x97\xC1\x7F\x07\x62\xC1\x2A\xD4\x4B\x82\xAC\x84\x56\x96\x23\x97\xAA\x8D\xB5\x95\x63\x80\x5A\x1D\x9C\x4C\x89\x83\x6D\x06\x8E\x9D\x97\xCD\x66\xB9\x2C\x70\x95\xED\x2A\xDD\x02\xAF\xAB\x9A\x30\x92\x2E\x94\x07\x86\x99\x92\x54\x6F\x09\xF2\x50\x88\x49\xAC\x86\x85\x8E\xE2\x8F\x0E\x85\xEE\x91\xF7\x8E\xCF\x22\xE1\x06\xB8\xEB\x77\x58\x93\xB2\x90\xB0\x8C\xE1\x8B\x75\x6F\x7A\x19\x91\x33\x82\x89\x58\x64\x80\x06\x96\x78\x8F\xCA\x95\x6F\x95\x2D\x2B\xAE\x53\x81\x76\x83\xF5\x6C\x8E\x96\xCF\x92\xCC\x95\x68\x5B\x34\x2B\xE5\x45\xA1\x81\x8E\xBA\x84\xCE\x70\x5F\x95\xC6\x95\xA3\x86\x1B\x2B\x9C\xD0\x0E\x22\x82\x8E\x70\xB0\x97\x68\x95\xB4\x95\xD3\x88\x74\x17\xF2\x54\x9F\xED\x65\x08\x91\x33\x91\x66\x7F\x6B\x94\x35\x47\x35\x23\xBF\xD9\x79\xA5\x87\xD9\x82\xAC\x93\x61\x94\x65\x62\x9A\x94\x29\xE6\x38\x56\xBB\x7F\x87\x08\x9B\x27\x90\xEC\x7F\x9F\x94\x92\x70\xAB\x17\x89\xF6\x4D\xAD\x90\x7E\x8F\x7E\x86\xE8\x93\xEB\x8E\x03\x90\x6C\x23\x8B\x3D\x85\xAD\x8B\x5B\x9A\x3C\x91\xFA\x85\x94\x8F\xE0\x94\x6B\x23\xFD\x54\x98\xF4\x74\x5B\x9D\x2D\x91\xF9\x89\x8E\x8C\x16\x92\xB5\x21\xED\x38\x88\x44\x8F\xF5\x83\x8C\x71\x68\x7C\xDF\x94\x90\x91\x7E\x2B\xF7\x56\x80\xAE\x95\x68\x8A\x10\x95\x47\x8F\x41\x34\x76\x95\x6C\x2B\xEE\x55\x90\xAD\x90\x57\x99\x74\x93\x92\x79\xA9\x78\x60\x95\x63\x2B\xB5\x45\xA5\xAD\x87\xDE\x76\xCA\x89\xBF\x63\xD7\x93\xD7\x2C\x08\x2B\x99\x57\xBA\x8D\x96\x15\x9E\x28\x79\x3B\x96\xA3\x94\xF0\x8A\x90\x2A\xA8\x55\xB8\x10\x91\x52\x90\xBA\x95\x25\x34\xC6\x95\xC8\x95\x1A\x2B\x93\x57\x92\x7D\x95\x54\x9E",
"\x83\x87\x52\x95\x35\x8F\x9B\x95\x98\x2B\xF9\x44\x96\x31\x9A\x8E\x76\x15\x76\xED\x7F\xA6\x95\xE2\x94\x28\x1F\x9E\xF7\x6C\x73\x87\xAF\x40\x86\x89\x92\x7D\xE8\x94\xDD\x95\xFC\x1F\x9B\x57\xB7\x17\x73\x0B\x9C\xA9\x97\xE7\x8C\xB7\x83\xC5\x90\x33\x24\xAE\xFA\x6E\xAE\x99\x59\x92\x33\x97\x6A\x96\x5F\x87\x64\x7F\x13\x1D\xC8\x48\x85\x4F\x9F\x17\x95\x7D\x90\xAA\x93\xF4\x94\xD1\x95\x54\x23\xFB\x46\xB3\x43\x99\xAA\x87\xB6\x94\x8A\x34\xAD\x95\x9C\x7A\xED\x27\xB7\x55\x99\x12\x9D\x8E\x68\xBB\x2A\xB6\x06\xEB\x4B\x5E\x95\x7D\x25\xA4\x05\xAD\x85\x38\x13\x91\x3A\x84\x5E\x83\x09\x95\x88\x94\x3A\x14\xC5\x55\xA2\x3E\x98\xFC\x87\x81\x93\xA1\x81\x06\x95\x14\x8A\x06\x2B\xF7\x0E\xB3\xAF\x90\x19\x9D\xF7\x8A\x7C\x94\x76\x89\x4A\x94\x21\x05\x97\x51\xBD\xAF\x9A\xFC\x83\xB0\x8D\xD0\x89\xB7\x95\x25\x81\xB2\x5E\x74\x57\xB5\x17\x96\x5F\x91\x32\x97\x6F\x97\xC8\x90\xEF\x83\x45\x28\xD4\x28\x88\xC5\x5E\x4E\x79\x84\x92\x5D\x94\xA0\x7F\x7A\x32\x12\x2C\xB7\x1F\x94\xB0\x89\x5C\x9B\x42\x97\x82\x97\xC9\x95\x55\x7D\x48\x2A\xF5\xD3\x67\xCC\x6C\x52\x9C\xD3\x7F\x33\x31\x08\x97\x1A\x89\xE1\x20\x8D\x53\xA3\x8E\x82\x50\x97\x9A\x8B\x0E\x97\xC1\x95\x96\x34\x2F\x2C\x94\x30\x84\x9D\x82\x0A\x91\xC3\x8C\x86\x97\x6A\x93\x01\x93\x3B\xFC\x11\x58\x84\xB0\x93\x11\x9D\xFF\x88\xF0\x8E\x63\x8C\x80\x8D\x37\x19\xA9\x29\xAE\x5B\x8A\x06\x7C\xD8\x7B\x80\x96\xD4\x91\xBC\x91\xE1\x2B\xA4\x57\xA8\xBC\x56\xEE\x8E\x94\x88\xC1\x8C\x54\x8D\x9A\x95\x90\xBB\x1F\x40\xA1\xB6\x2E\x61\x93\xC4\x91\x60\x95\xD5\x90\x95\x8D\x50\x22\xA8\x56\x8D\x99\x90\x16\x9F\x88\x57\xC5\x7C\x5E\x94\xE9\x92\x7A\x29\x8A\x56\x9F\xB1\x83\x58\x97\x31\x6B\xB3\x83\x35\x94\x82\x8A\xDD\x00\xFF\x32\xA5\xB1\x82\x62\x9F\xC4\x94\x56\x93\xE8\x94\xE5\x95\x00\xBC\x68\x54\x83\x54\x88\x02\x91\xC7\x92\xBB\x81\x3C\x95\x5F\x95\x20\x2C\xDD\x58\x8E\xAD\x82\x57\x92\xBB\x92\x69\x96\x40\x95\x1B\x73\xE6\x5A\x39\x58\x96\x78\x9B\x61\x93\x7B\x95\x87\x97\x5A\x95\x72\x90\x02\x1C\xB7\x58\x80\xB0\x2A\x64\x93\x74\x93\x84\x97\xF2\x90\x0B\x96\xCD\x23\xED\x25\x9B\x82\x87\xBC\x8F\xAF\x97\x8C\x94\x29\x89\xE9\x92\x24\x2B\x91\x6A\x73\x33\x9C\xE1\x74\xC9\x96\xCB\x91\x0C\x97\xA1\x94\x96\x26\xBE\x58\x92\xED\x79\x07\x93\xC6\x69\x6D\x95\x0B\x97\x40\x96\x75\x2C\xD5\x56\x99\xF9\x65\x59\x90\x95\x83\x47\x8F\x56\x95\x24\x8E\xA2\xFA\x5C\x58\xB1\xB2\x85\x60\x92\xC5\x94\x21\x86\x39\x90\xC7\x83\x74\x2C\xFE\x3A\xA0\xB2\x8E\x59\x99\x7B\x8B\xB6\x7C\x2B\x96\x1B\x3F\xE3\x17\xCB\xF6\x75\x5E\x94\x5E\x96\xB5\x93\x67\x97\x46\x88\xC7\x95\x7A\xFC\x4E\x58\x82\xB3\x89\x63\x91\xCA\x96\x7A\x94\x70\x92\x12\x7B\x56\xFF\x3C\x47\xB3\xED\x61\x66\x9C\x9A\x93\x98\x96\xCE\x95\x97\x95\x37\x0D\xCF\x47\x9E\x0F\x5D\xEB\x79\xC8\x92\x90\x94\xEC\x94\xA4\x95\x85\x2C\x84\x8C\x61\x8F\x99\x9E\x85\xCF\x6C\xEE\x93\x62\x90\x1A\x8C\xDE\x2B\x93\x59\xA6\xB3\x95\x5B\x9D\xB6\x94\x96\x95\xEF\x94\xCF\x7F\xA6\x2B\x96\x55\xA0\x85\x98\x54\x94\x30\x6E\x8C\x97\xDD\x91\xAD\x95\x53\x23\xDD\x56\xAB\xB1\x94\x8A\x84\xA0\x94\x0A\x8A\x3A\x8F\xD1\x93\xDB\x2B\xB8\x4C\x85\xAF\x80\x0F\x9F\xC8\x80\x7C\x96\x40\x96\x03\x96\x47\x27\xCE\x4F\x86\x91\x98\x46\x9A\x7B\x90\xC1\x49\xF4\x95\x65\x92\x0D\x2D\xC8\x57\xA4\xAD\x9C\x5D\x92\x96\x3D\xA0\x96\x64\x8D\x1A\x8C\x5C\xDD\x51\x35\x98\x26\x85\xFD\x72\xCF\x93\x97\x94\x11\x96\x3C\x96\x57\x23\x9D\x57\xA6\xAF\x93\x51\x99\x40\x88\xA4\x96\x4D\x7B\x55\x6A\x38\x2A\xED\x04\x3B\xAA\x81\x05\x40\xBF\x91\xCB\x8B\xB5\x8A\x4B\x56\xAB\x29\xC6\x2F\x90\x34\x8C\x64\x92\xC3\x95\xB1\x92\x85\x93\x86\x95\x18\x26\x8F\x56\xA3\x99\x9B\xC5\x83\xF8\x8D\x42\x6A\x51\x8F\x8F\x92\x00\x6C\x63\x1B\x9E\xB2\x8F\x5D\x94\xCF\x92\x72\x94\x84\x6E\xFD\x95\x3C\x14\xA4\x45\xBA\x88\x99\x56\x9C\x23\x90\x14\x5D\xEA\x86\xED\x4F\x39\x2D\xC8\x47\x87\x5F\x9D\x5B\x97\xC9\x92\x71\x96\x09\x97\x41\x94\x65\xDE\x32\x3F\x93\x89\x88\x57\x9D\xC1\x96\x1C\x61\x56\x96\x8F\x91\xC9\x23\xDC\x5A\xB6\xAD\x85\x61\x99\xC9\x93\x0B\x94\x0A\x96\x79\x95\x49\x2A\xDF\x50\xB5\xC0\x76\x57\x9C\xC4\x7E\x5C\x2E\x52\x97\x7F\x96\x68\x2C\xDC\x56\xAA\xB1\x90\x68\x9F\xB6\x92\x91\x74\xD6\x8D\xB0\x96\x10\x2C\xF6\x5A\x9B\x48\x80\x68\x90\xC5\x97\xA1\x95\x2F\x97\x10\x89\x6A\x1B\xA6\x44\x9E\xF5\x60\x0C\x9A\xD3\x92\x30\x91\xF5\x94\x21\x7E\x2A\x28\xA4\x28\xA1\x88\x92\x58\x9D\x50\x80\x4A\x95",
"\xC5\x94\x92\x96\x67\x2D\xA7\x48\xA9\xB5\x88\x5C\x9D\xD5\x94\xAD\x96\xC9\x94\xDD\x79\x54\x2C\x9F\x56\xBC\x8A\x9D\x67\x92\xEB\x2F\xAE\x97\xDE\x8E\xAA\x95\xBC\x2C\xA8\x5A\x85\x5E\x96\xC7\x53\xC6\x92\x65\x97\x23\x54\x69\x7F\x8C\x2D\xDA\x5A\xBB\xB4\x96\x64\x9B\xD6\x90\x38\x97\xE2\x94\x0B\x94\xD5\x28\x9A\x40\xB8\xA9\x7F\x59\x90\xEB\x81\x68\x95\x2C\x95\xE2\x82\x11\x86\x30\x5B\x91\x8D\x93\x66\x9A\xD7\x95\x9A\x96\x33\x97\x96\x8B\x20\x16\xFB\x45\x8D\xAF\x96\x31\x97\x66\x93\xA8\x6D\x9B\x95\x2D\x96\xF5\x64\x26\x5B\x84\x84\x98\x1B\x96\xC7\x91\x8A\x96\x6A\x97\x89\x6A\x4B\x2B\x81\x5B\xAD\x85\x32\x6E\x91\x23\x90\xB5\x97\x49\x96\x8E\x96\x30\xE1\x10\xC9\x66\x8C\x9A\x6E\x9F\x19\x34\xBB\x95\x29\x97\xC5\x94\x10\x24\xD5\x53\x83\x91\x8A\x65\x98\x53\x8D\x24\x96\x24\x97\xCC\x96\xA1\x25\x9B\x5B\xA9\x90\x95\x60\x9E\xD5\x94\x23\x70\xB4\x93\xC5\x80\xC3\x2D\xDD\x59\x94\xB3\x84\x66\x93\x02\x8E\x98\x95\x8C\x94\x3C\x95\xAE\x2C\xB6\xF9\x65\xB6\x83\x6C\x99\xD7\x91\xA0\x97\x5E\x97\xC3\x96\xF6\xFC\x27\xFE\x42\xB0\x85\x6F\x94\xE0\x97\x93\x97\x7E\x97\x6F\x96\xC5\x2C\xA7\xB8\x5F\xC9\x7E\x1B\x96\x76\x68\xBE\x94\x09\x94\xF9\x96\xA3\x25\xF4\x5B\x9E\xB6\x95\x65\x97\x7E\x97\x28\x95\x17\x8E\xC9\x91\x85\x2B\xA8\xFE\x42\xB6\x87\x16\x94\xD8\x95\xBA\x96\x61\x97\xEB\x96\x12\x2E\x84\x55\x96\xAC\x9B\x6E\x9D\xE0\x94\xA9\x96\x5A\x97\x7A\x96\x33\x23\x81\x19\x8D\x0C\x60\x09\x9F\x82\x7C\xC1\x94\x89\x97\x02\x97\x85\x2D\x87\x5C\xA8\xB8\x81\x9C\x81\x9B\x91\x6C\x75\x3F\x76\xE1\x96\x2F\x23\xA6\x5A\x9E\xB1\x9C\x6B\x92\x66\x93\x91\x63\xDB\x7E\x27\x75\x9F\x06\xAA\x57\x95\xC1\x5C\xD5\x80\xE4\x96\x6E\x93\x69\x96\xEA\x96\xB2\x2C\xFC\xFE\x76\xB3\x9D\x68\x97\xE4\x95\x76\x97\x3E\x97\xDB\x95\xAF\x2D\x83\x5C\xB7\xB8\x8E\x70\x95\xDC\x94\xBF\x94\xB3\x91\xCA\x86\xEF\x29\xC4\x53\x85\xA8\x91\x24\x99\xF2\x89\xA1\x97\x0E\x71\x85\x96\x4D\x2E\xF7\x52\xB8\xB5\x9C\x72\x96\xE0\x96\xB8\x94\x38\x97\xC2\x90\xD8\x2B\x9C\xF7\x49\x86\x95\xC3\x8E\x64\x97\x7C\x63\x45\x96\x88\x92\x16\x2E\xBC\x51\x98\x91\x8C\x51\x9E\x99\x96\x45\x94\x68\x95\x92\x8F\x72\x18\x95\x13\xA0\x86\x91\x54\x9D\x1F\x83\x34\x93\xBB\x43\x3C\x97\xBC\x29\xA8\x51\x9C\x9E\x8A\x45\x98\x6A\x90\xEE\x91\xE0\x95\x3B\x95\xB5\xFD\x2C\x5A\xAE\x37\x90\x37\x8E\x7E\x92\xC5\x85\x25\x82\x88\x46\xED\x2B\xFF\x05\x75\xB4\x9A\xE1\x7D\x32\x81\xCD\x96\x9D\x90\x27\x97\xD3\x2D\xA5\x5C\x91\xB9\x94\x1F\x86\xCF\x96\x88\x94\x81\x3F\x64\x95\x93\x25\xA0\xE3\x53\xAC\x90\xB3\x8C\xDA\x89\x2E\x6F\xEC\x8A\xF3\x96\xF3\x2C\xAF\x5C\x8E\xB5\x9B\x03\x78\xC0\x97\x01\x8A\x02\x97\x10\x91\xAA\x25\x95\x2D\xAC\x96\x92\x41\x91\x27\x5D\xDC\x61\x8A\x8F\x27\x97\xA2\x2E\xA9\x5B\xA0\xB7\x9C\xFD\x61\xFB\x8F\xD2\x8B\xEC\x8E\xB2\x96\x9C\x61\x6C\xF8\x7D\xBA\x8C\x34\x6F\xEB\x91\xD4\x94\x8E\x96\x13\x97\x3A\x2E\xC3\x5D\xA6\xF1\x6A\xA3\x82\x2E\x63\x5E\x97\x76\x93\x7A\x95\xCD\x1F\xA2\x02\xA4\x1A\x6D\x76\x9D\xDD\x90\xCA\x96\xB0\x97\xF4\x79\x1C\x2E\xB0\x3C\xAC\x02\x91\x2F\x9B\xD8\x96\x2E\x96\x28\x89\xE8\x92\x6C\x2E\xB9\x5C\xAE\xB9\x91\x70\x9B\x8F\x8A\x92\x88\x25\x64\x4F\x97\x2E\x23\xA0\x5D\x9D\xBB\x81\x76\x9F\xDD\x90\xDC\x96\xFF\x8F\x00\x68\x7C\x1B\x90\x56\xA1\x2F\x88\xA5\x89\x58\x82\x95\x88\xDC\x95\x4D\x94\xEC\x01\xCF\x4B\xA7\xBB\x8B\x6A\x9C\xCC\x93\x96\x95\x8C\x96\x56\x86\x1D\x2B\x94\x37\x96\xA9\x97\x62\x92\xB4\x91\x98\x89\x96\x96\x73\x2D\xC6\x22\xB1\x1A\x9E\xB7\x83\x72\x98\xE0\x93\xB5\x95\x2F\x5B\x2E\x95\xF1\x1D\xAF\x37\x88\xD7\x2F\x75\x9D\xE2\x95\xE0\x96\x94\x97\x83\x97\x50\x10\x9D\x56\x9F\x4A\x8B\x78\x9D\x97\x89\x1B\x95\x99\x95\xDB\x80\xB2\x5E\x11\x5E\x8C\x79\x90\x5C\x9D\xD4\x91\x76\x94\x56\x8A\x8E\x95\x5D\x20\xBE\x56\xA2\xB6\x86\xA8\x81\x30\x94\x3C\x90\xC7\x97\x2D\x97\x2E\x2E\x9C\x5B\xB5\xB6\x89\x47\x98\xB7\x93\x59\x8B\xFB\x8D\x16\x79\x36\x2F\x82\x5E\xB4\x5E\x88\x77\x99\xF3\x93\xBE\x94\x09\x96\xDB\x96\x5F\x2D\xF7\x4D\x88\x82\x8C\x35\x96\x3B\x83\xDB\x96\x23\x87\x65\x96\x0E\x2D\xD1\x5D\xB6\xBB\x89\xE7\x39\xB5\x90\xE8\x7C\xA5\x62\x6E\x97\xE7\x2D\xC9\x4F\x8B\x96\x9D\x69\x94\x7B\x97\x8E\x37\x3C\x86\x78\x97\x2A\x2F\xA8\x40\xAC\xBC\x92\x75\x9E\xF2\x91\xEA\x8F\x66\x62\x59\x95\xFC\x01\xB3\xE8\x77\xEC\x61\x7A\x96\xEE\x93\xE8\x94\xC1\x97\xA8\x97\xEB\x2E\xFD\x5B\x92\xB8\x9B\x53\x95\xE3\x94\xD9\x97\xD3\x96\xA2\x97",
"\x1E\x2F\xA4\x5D\xA0\xBC\x84\x19\x99\xC5\x8F\xFA\x68\x66\x80\xA1\x97\xB0\x2E\xC2\x5C\x83\xB2\x9A\x57\x99\xB4\x93\x26\x0D\xA2\x95\x1F\x4C\x81\x29\xEC\x5E\xB5\x8D\x8A\x73\x90\xEC\x97\xD9\x97\xA8\x96\xAC\x86\x53\x2E\xE1\x5B\x87\x10\x96\x39\x96\x15\x85\x25\x35\xD8\x96\x6D\x91\x63\x2F\xBA\x5E\xB0\xB8\x96\x66\x91\xC6\x93\xDA\x8C\x02\x8C\xA4\x80\x6D\x2F\x81\x5F\x84\xB7\x8D\x73\x9E\xE5\x96\x6A\x91\xA1\x78\xB4\x97\xC8\xC5\x28\x39\xB5\xFE\x60\x7C\x9D\xF1\x90\xEE\x95\xE9\x96\x30\x96\xEE\x29\xCF\xE9\x6E\x60\x9A\xA5\x78\xBA\x92\x06\x8F\xC6\x7E\x78\x96\x17\x04\xA1\x5F\xAD\xBE\x9A\x68\x9A\xB9\x92\xDA\x97\xF2\x95\x7C\x96\x56\x2E\xFE\x47\x89\x85\x9B\x01\x72\x40\x97\xC2\x3F\xCD\x96\x89\x97\xDE\x2E\xF5\x5D\xB7\x05\x9F\x6C\x9A\x3F\x91\xCC\x97\x61\x7F\xBF\x88\x93\xFF\x28\x5E\x90\xBC\x98\x7A\x91\xEB\x92\xF3\x97\xAC\x96\xFB\x81\xE9\xEC\x1E\x5A\xB3\xAC\x8E\x5E\x9A\x18\x92\x89\x93\xAE\x8C\xD6\x95\x79\x76\x47\x5F\xAB\xBC\x86\x5A\x97\xCE\x97\x69\x97\xCB\x97\xC7\x68\xBF\x2B\xE3\x5C\x9B\xA8\x86\x73\x97\x20\x7D\x35\x8B\x48\x96\xF7\x5C\x29\x2F\xD4\x5F\x82\xBE\x85\x7F\x94\xC8\x97\xFC\x96\xE1\x96\xD4\x97\x69\xE0\x22\x31\xA8\x62\x94\x74\x9A\xBE\x94\xCC\x95\x6E\x91\xE3\x04\x33\x2D\x9E\x15\x5B\xBA\x80\x6E\x0A\x8A\x8F\xE1\x3D\x86\x88\xF9\x97\xA3\x2F\xEA\x5D\xAF\xBE\x8D\x80\x85\xEB\x92\x3B\x8B\xAD\x97\x6B\x95\x43\x1D\xA3\x44\xBE\x62\x87\x6A\x93\x35\x85\x58\x90\x02\x98\xFD\x96\x5D\x2E\x90\x5C\xBF\x7D\x91\x6C\x98\x01\x93\xD1\x6D\x9B\x8A\x20\x8A\x0D\x2C\xBD\x44\x8F\xB0\x8D\x17\x85\x97\x93\xF1\x97\xC0\x97\x35\x97\x45\x2F\x99\x5C\x87\xBD\x9C\x79\x97\xDB\x92\xB5\x8D\xB9\x94\x0D\x96\x3A\x05\xC8\x50\x89\xBB\x8D\x92\x68\x2D\x47\x00\x9B\xDD\x97\xB7\x97\xBC\x2F\xF7\x58\xBE\xBE\x88\x6C\x93\xD8\x8C\x61\x82\x76\x93\x7F\x8C\x89\x1D\xD3\x07\x91\x35\x82\x7F\x92\xF6\x94\xFC\x95\xCB\x96\x74\x96\xF6\x2F\xCD\xD2\x3D\x89\x98\x73\x96\x01\x9F\x06\x98\x0A\x99\xBC\x97\x90\x2F\xFB\x5E\x98\xB0\x8F\xFF\x8D\x32\x81\x39\x81\x09\x98\x81\x90\xF2\x2E\xD9\x5E\x93\xA7\x92\x3D\x9C\xF5\x96\x91\x97\x69\x75\xCB\x8F\xD1\x18\x96\x7F\x7D\x0C\x9E\xC5\x80\xF0\x90\x20\x86\xB9\x2C\x14\x8F\x4E\x30\x8D\x5F\xA9\xBB\x90\x76\x91\xF7\x97\xCB\x94\xF4\x72\x32\x93\x7A\x12\xEE\x51\x85\x6F\x99\x62\x92\xFD\x95\x2D\x30\x1A\x98\x19\x89\x19\x2D\xF5\x57\xBA\x89\x9B\x81\x91\xC2\x87\xE2\x95\x0C\x90\x04\x4B\x1A\x2F\xB0\x74\x5F\x86\x37\x83\x94\x7C\x8E\x11\x95\x97\x92\xF4\x96\x5F\x26\xCB\x4F\xB5\x9B\x99\x4A\x91\x2E\x96\x15\x94\x6F\x6A\x98\x8B\xCB\x2D\xA1\x25\xB7\x98\x9B\x01\x76\xA6\x92\x01\x85\x13\x98\x3C\x98\x50\x2F\xB9\x60\x96\xB7\x9C\x83\x9D\x29\x8E\x8F\x76\xCC\x96\x58\x94\x93\x30\xED\x5F\x8F\xB7\x83\x99\x56\x03\x98\x13\x98\xDE\x96\xD7\x97\x1A\x30\xEE\x60\x94\xC7\x67\x64\x97\x29\x85\x14\x99\x21\x99\x3C\x98\x13\x2C\xFB\x60\x93\xBD\x92\x7C\x9B\x6A\x92\xDF\x7F\xE6\x80\x58\x91\x97\x2F\xDE\x41\xA1\x45\x86\x65\x9C\xD3\x90\x95\x96\x63\x95\x47\x96\x3D\xF2\x6E\x5B\x9A\xBB\x8E\x85\x95\x42\x97\x78\x90\x5A\x97\xAD\x96\xD6\x2F\xE5\x5E\xB2\xD3\x20\x5B\x96\xFF\x34\x18\x9B\x67\x92\x63\x98\x9A\x2D\xC8\x61\x86\xBD\x9D\x6C\x98\xF4\x95\xAD\x95\x17\x92\x0F\x97\x02\xF5\x79\x54\xA4\xC2\x97\x84\x9F\x0A\x99\x13\x9A\x1E\x99\xDD\x95\xB3\x30\xAC\xD1\x61\xF4\x7C\xBD\x8E\xEA\x94\x1B\x99\x31\x98\x43\x98\x41\x23\x88\x61\xA7\xB2\x8A\x6F\x94\x94\x96\xD1\x94\xE3\x95\x7A\x88\xCA\x24\x9B\x5E\xA6\xC3\x8F\x86\x98\x0E\x9B\x17\x9A\x3A\x99\x5E\x98\xEC\x30\xA9\x59\x80\xC3\x9F\xC4\x87\xCC\x91\xE4\x90\x50\x3C\x41\x95\x7F\x2F\xB8\x61\x97\xC0\x8D\x6C\x9D\x9A\x97\xB1\x97\x9B\x97\x95\x7E\x6C\x06\xA6\x47\x98\xB6\x93\x87\x9A\x8B\x90\xB4\x93\x85\x96\x69\x98\x2A\x30\xD4\x61\xAC\xC0\x89\x7A\x9E\xD6\x97\x23\x93\xE7\x96\x79\x98\x02\x31\xE9\x60\x8E\xBB\x8B\x83\x9F\xF8\x96\x3A\x89\xE4\x96\xB3\x95\xFD\x30\xA7\x39\x8B\xAA\x9F\x46\x8E\x0C\x9D\x21\x98\x34\x99\xF8\x96\x10\x31\xA6\x50\x9A\xB8\x95\x86\x9C\xFC\x97\xDE\x8F\x3A\x97\x93\x8F\xD2\x21\xE8\x23\x08\xA7\x8F\x67\x90\x34\x82\xD6\x2C\x21\x99\x73\x98\xB0\x30\xA2\x58\xB2\xC2\x8B\x7E\x91\xEE\x96\x53\x8C\xE2\x93\xCB\x86\x47\x18\xCA\x08\x93\x7C\x9C\x67\x9D\x44\x86\x26\x99\xDE\x8F\x2C\x98\xD5\x2F\xD3\x61\xBB\xBC\x98\x5F\x9E\x38\x90\x7C\x93\x44\x97\xE1\x89\x08\x2D\xC3\x57\xB1\xE4\x4B\x68\x92\x47\x87\x0A\x9B\x8B\x90\xA4\x98\xF3\x2F\xC7\x60",
"\xA6\xBF\x86\x7B\x9A\xCE\x97\x29\x98\x1F\x96\xCC\x7E\xDD\x2F\x84\x5D\x84\x26\x97\x6C\x90\xFF\x97\x0C\x9B\x51\x98\xC6\x97\x1B\x31\xA9\x60\xAA\xC4\x8B\x81\x9C\x14\x9A\x10\x95\xF3\x97\x0C\x90\x58\xDD\x1F\x43\x94\x74\x9C\x50\x94\x9F\x92\x57\x8E\xFB\x96\x43\x97\xB4\x0C\x8C\x62\xA2\xA0\x8E\x88\x9A\xE7\x95\x04\x96\x1B\x95\xDF\x94\x13\x31\xD6\x61\xB0\xA8\x98\x86\x9B\xBE\x71\xCA\x88\xFC\x92\xF6\x93\xBB\x21\xAC\x3A\x81\xAF\x81\x23\x9A\xBA\x01\x00\x98\xEE\x51\x01\x98\x0D\x91\x14\x91\x55\xC5\x8D\x11\x96\x15\x9F\xD3\x94\x5A\x99\x79\x97\x8E\x2F\xDF\x5D\xBC\xC4\x97\x77\x96\xBC\x03\x7F\x95\x18\x99\x47\x70\xAC\xE9\x44\x3A\xAB\x52\x94\x80\x9E\xF0\x85\xB9\x93\x10\x98\xD6\x97\x38\x2F\xD0\x60\x9E\xC4\x87\x28\x8C\x01\x9F\x01\x99\xDD\x79\x1F\x8A\x56\x89\x2F\x50\x88\x9D\x9C\xC9\x77\xD5\x95\x99\x5C\x00\x36\x84\x91\x7E\x27\x8A\x46\x8D\xA3\x9F\x21\x97\x96\x94\xD2\x92\x2F\x99\x19\x96\xFB\x30\xE6\x31\x85\x5B\x86\x76\x93\xD6\x94\xB8\x90\xCC\x8D\x17\x5D\xA6\x31\x85\x20\xA8\xC6\x88\x7E\x94\xEF\x94\xE2\x97\x8E\x97\x48\x8A\x6F\x2D\xDD\x50\xB1\xB5\x94\x57\x93\xD7\x91\xDB\x97\xD4\x3F\xE4\x98\x55\x12\xC4\x60\x98\xBE\x86\x82\x94\xF6\x90\x09\x98\x57\x98\x25\x98\xDF\x1F\xEC\x07\xB4\xA5\x87\x8D\x9A\xFB\x91\x35\x98\x2A\x98\x83\x98\xEC\x2E\xD0\x63\xAA\xB6\x44\x30\x9D\x5F\x83\x3C\x9A\x72\x99\xF2\x98\xCC\x31\x99\x63\x8A\xBF\x89\x34\x85\x25\x16\xD4\x95\x1B\x97\xC8\x92\xEC\x16\xCA\x58\xB9\x64\x9C\xD5\x84\x84\x80\xE9\x8D\x65\x99\x78\x97\x97\x31\xDA\x60\xBB\x96\x91\x44\x9A\x08\x9F\xED\x90\x2B\x94\xE0\x82\x09\x2F\xD5\x54\x91\xC2\x9D\x17\x9D\xDC\x97\x5F\x92\x16\x96\xDB\x98\xD8\x31\xB2\x2F\x8B\xC7\x83\x7F\x97\xB8\x92\x29\x9B\xE6\x97\xE3\x96\x81\x0C\xB7\xD4\x2D\xB6\x92\x2D\x83\x84\x82\x72\x65\xCB\x91\x5C\x98\x40\x23\xF6\x61\x9A\xBD\x82\x4A\x99\x0F\x9F\x17\x9A\x3B\x98\xDC\x96\x61\x2E\xE2\x54\xAA\xA9\x96\xF6\x6D\x20\x98\xC7\x91\x25\x99\x1C\x86\xEE\x31\xD9\x63\x93\xC8\x85\x82\x95\x21\x99\x22\x9B\x52\x98\x0B\x95\xC1\x28\x88\x64\xB1\xBC\x85\x1C\x8F\xED\x7D\x54\x95\x1F\x96\x9A\x97\x98\xEA\x43\x07\xBE\xC7\x84\x8F\x96\x02\x9E\xED\x97\x13\x99\xF3\x98\xCD\x2C\x87\x62\xA2\x15\x9F\x07\x00\xA7\x92\x48\x98\x40\x91\xFF\x98\x20\x32\xDC\x4C\xA9\xC3\x83\x91\x9C\x98\x97\x37\x9A\x4F\x97\xE0\x98\x32\x89\x52\x56\xA4\xC0\x94\x8C\x94\x24\x98\x0B\x99\x80\x99\xA4\x98\x36\x32\x97\x64\x8A\xC9\x84\xF8\x7B\xC9\x93\x27\x83\x5B\x81\x18\x99\x12\x32\xF0\x63\x94\xC8\x93\x78\x93\xF8\x96\x6B\x97\x78\x2F\x79\x86\x93\x31\xF4\x44\x90\xC9\x83\x88\x92\xDB\x96\xB1\x95\x92\x99\xF4\x98\xA2\x01\xA1\x62\xA8\xAD\x97\xE8\x7B\xFA\x93\x48\x9B\x7B\x99\x22\x99\xA2\x2F\x98\x60\xA4\xBE\x89\x85\x96\xFA\x96\xE4\x7F\xEE\x8A\x6A\x90\xD7\x31\xE8\x64\xB7\xC4\x94\x87\x99\x13\x98\x86\x94\x3E\x99\x02\x99\x93\x28\xA7\x64\xAC\xA5\x8B\x38\x9A\xC5\x8C\x98\x82\xB6\x65\x0F\x99\x74\x32\xC7\x61\xB3\xB6\x9B\x89\x94\x1F\x9D\x27\x99\xD7\x93\x87\x55\x89\x2F\x98\x02\x51\xC8\x8B\x94\x96\x12\x9D\x1E\x9B\xB6\x90\x0C\x97\x6B\x31\x92\x62\xAD\xC5\x8A\x47\x94\x73\x95\xFE\x8A\xCE\x74\xF1\x98\x7E\x32\xB2\x64\xAA\xC9\x94\x91\x9C\x26\x9C\xFE\x94\xE1\x97\x74\x96\xD7\x25\x9E\x5F\xA3\xA6\x86\x5D\x65\x4F\x30\x37\x9B\x46\x94\xB2\x94\xFA\x28\xE6\x52\xBE\xA7\x93\x37\x90\x29\x9A\x1A\x94\x96\x98\x56\x8F\x82\x2B\xC6\xD9\x63\xB3\x8F\x44\x5D\x1F\x9F\x49\x99\x97\x99\xAB\x98\x5F\x32\xD9\x62\x9D\xC7\x9B\x8A\x98\xFD\x92\xA2\x97\x4F\x98\xFE\x91\xA7\x2B\xE4\x47\xA1\x57\x9E\x7E\x9F\x0F\x00\xF7\x95\x8C\x33\x51\x99\x67\x31\xA7\x60\xAA\xC1\x8A\x8B\x9F\x17\x9F\x7E\x94\x8E\x98\x80\x94\x18\x2A\xDE\x2B\xB6\x57\x97\x72\x9B\x18\x95\xF8\x94\x2B\x88\x45\x99\xE1\x32\xC6\x64\xA3\xCB\x8A\x8D\x95\x74\x97\x23\x9B\x68\x7E\x52\x95\x3E\x08\xDE\x30\x8B\x86\x8B\x68\x9D\x2C\x9C\x4B\x9B\x9F\x98\x2F\x99\xE2\x32\xE9\x62\xB4\xCB\x9C\x61\x9E\xB6\x95\xC8\x97\xE3\x7F\xE7\x93\x14\x2D\x87\x54\x94\x21\x97\x73\x92\xE0\x30\x5C\x98\xFE\x8F\x20\x97\x09\x30\xEC\x60\x8B\xC0\x84\x68\x9C\xBC\x90\x78\x94\xFC\x89\x40\x82\x16\x1D\xB0\x55\xB4\x33\x90\x97\x9F\x30\x98\x2B\x99\xC4\x99\x8E\x98\xF5\x32\xD2\x60\xA3\x6B\x90\x74\x9E\x49\x49\xB7\x94\x56\x6E\xB5\x8F\x35\xD7\x2F\x5A\x8B\x2F\x87\x8C\x9D\x18\x98\xB7\x06\x6C\x07\xBD\x54\x90\x31\x84\x50\xB7\xB4\x8F\x7F\x9F\xF8\x84\x5A\x95\x02\x96\x6B\x95\xAF\x31\xD8\x55\xA1\xC6\x92\x80",
"\x95\x59\x95\x65\x80\x20\x6D\x4A\x64\x9B\xFC\x19\x4C\x88\xAB\x88\x62\x99\xEB\x92\xC0\x92\xC6\x45\xDA\x98\xF2\xBA\x3F\x8A\x59\xB0\x8D\xD9\x8B\xC1\x97\x37\x79\x59\x96\xFF\x7A\xCD\x22\xF3\x0F\xBE\xC0\x96\x76\x90\x04\x9A\xD6\x8B\x89\x89\x57\x71\xF5\x64\x58\x5B\xA1\xC7\x81\xCF\x75\x14\x70\x03\x86\x62\x97\x14\x63\xAD\x31\xB8\x66\x9E\xC0\x83\x00\x96\xAA\x06\xDF\x94\xDD\x8B\x32\x98\x05\xE7\x6F\xD8\x53\x6E\x8A\x90\x96\x31\x9F\x4A\x97\x1C\x99\x2C\x95\xFD\xEC\x38\xC7\x7C\xC0\x83\x46\x9E\x58\x69\x10\x9A\x2B\x3C\x98\x95\x51\x10\xA3\x5E\x8B\xC8\x96\xDC\x8F\xDB\x96\x66\x95\x57\x62\x73\x2D\x78\x33\xD9\x37\x9F\xC2\x92\x83\x98\xC5\x90\xE6\x57\x1F\x96\x44\x95\x7C\x22\xAC\x61\x87\xC1\x69\x08\x92\xE4\x8A\x37\x8D\x9D\x94\x36\x66\xE2\x0C\xE5\x64\x8C\x18\x84\xE3\x54\x6E\x7E\xD3\x7A\x7F\x96\xC2\x98\x04\x0D\x81\x5C\x88\xCE\x82\x87\x98\x6F\x96\x96\x77\x98\x66\xC6\x99\x13\x2E\xCE\x2F\x89\x20\x6B\xBA\x65\xBE\x97\xF5\x45\xA8\x98\x3F\x95\xBE\x2C\x93\x5F\x92\xA6\x90\x12\x61\x35\x9E\x49\x8C\x4C\x89\x5D\x99\xA3\x33\xB7\xC2\x65\xCE\x8A\x54\x93\x55\x7C\xC6\x86\xDF\x96\xC8\x99\x85\x21\xFC\xD8\x2C\xB3\x91\x82\x58\x14\x96\x36\x83\xDF\x98\xFF\x65\x60\x2E\xB2\x5F\x89\x9E\x92\x35\x8C\x78\x95\x2D\x88\x51\x98\x5E\x8D\x77\x33\xC1\x67\xAA\x11\x91\x8B\x91\xF9\x78\xFA\x95\x17\x83\x08\x43\xC9\x33\xF0\x5C\x81\x54\x82\x73\x96\xD0\x96\x40\x97\xA9\x95\xBA\x98\xC1\xEB\x3F\x67\xB9\x31\x6A\x9E\x96\x18\x93\x8D\x82\x65\x7E\x57\x95\xAC\x11\xDD\x57\xB3\xC8\x24\x9D\x9A\x27\x9B\xA5\x96\x61\x99\xD7\x84\xE7\x1A\xAB\x3A\xB6\xA8\x8B\x5F\x91\xD3\x96\x2F\x02\x63\x98\xC9\x46\x31\x33\xF5\xB5\x05\xC0\x80\xBA\x7B\x01\x98\x0C\x9A\xC5\x8C\x10\x5C\xA9\x2E\xEF\x2C\x84\x82\x6B\xDB\x86\x9A\x7E\x55\x42\x7D\x98\x8F\x5F\xF5\x11\xBF\x58\x87\xCD\x8D\x2D\x9F\x67\x72\x64\x98\x58\x96\x06\x75\x62\x2D\xC3\x54\x86\xC7\x85\x52\x9A\xB5\x60\xF6\x97\x09\x96\x34\x91\x70\x2D\xAA\x58\xAA\xF1\x6C\x61\x9B\xB0\x6E\x80\x99\xD8\x8A\x1B\x96\x93\xF8\x2A\x61\xB2\xB8\x94\x4A\x3C\x1E\x9C\xEF\x79\xFD\x99\x0A\x94\x6B\x16\x98\x51\xA3\xC1\x95\x80\x89\x0D\x71\xA5\x64\x1B\x97\x29\x95\xB9\x22\xF0\x58\xB0\x32\x80\x59\x94\x30\x6E\x15\x3E\x03\x9B\x03\x9A\x1A\x32\xC4\x51\xBC\x6A\x9E\xDD\x5F\x42\x9C\xCF\x92\xC8\x96\x48\x98\x6D\x33\x8C\x5E\xBD\xCD\x98\xF6\x65\x42\x9E\x82\x99\x8C\x93\xA3\x8B\x69\x2A\xFF\x39\x9F\x78\x82\x8B\x93\xC0\x69\x48\x99\x06\x9B\x42\x99\x0A\xEA\x4C\x25\x94\x8C\x9B\x38\x8C\xF9\x92\x2B\x95\xE3\x99\xF1\x96\x6E\xD8\x72\x5E\xA3\xEA\x35\x7A\x9C\x4E\x92\x94\x97\x7D\x97\x18\x7D\x78\x32\xE7\x3E\x8C\x23\x96\xE8\x7B\xF6\x96\xE7\x82\x09\x9A\xBA\x7E\xDE\x03\xFE\xEB\x75\xD0\x8A\x38\x9D\xF7\x92\xA5\x56\x0B\x9A\x36\x96\x87\x2F\xAB\x50\x69\x68\x94\xAC\x8C\x5D\x7B\x8C\x99\xC8\x88\x60\x8F\xAF\x32\xCC\x68\x98\xC8\x8D\xB5\x88\xCD\x94\x92\x8D\x85\x5C\x74\x73\x48\x34\xBC\x5C\x92\x56\x8B\x96\x94\x30\x6C\x86\x98\x1B\x97\x46\x95\x48\x2E\xEE\x59\x9C\xCB\x9E\x96\x9B\xBC\x5D\x89\x9A\x4F\x98\x75\x99\xD1\x1C\xF3\x8B\x53\x73\x8D\x3C\x98\xE5\x95\x8F\x9A\xAC\x2E\x37\x9A\x5B\x18\xAC\x55\x96\xB1\x9D\xDC\x7B\x4E\x7F\x53\x94\xF6\x99\x50\x95\x01\xC6\x66\xB5\x10\xD2\x91\x3B\x99\xA1\x90\xA0\x7A\xC2\x98\xB3\x8C\x0C\x33\xFE\x68\x94\xCC\x89\x7F\x95\x3D\x98\xF6\x7C\xC6\x98\xD8\x7D\xE2\x33\x87\xD8\x52\xD1\x90\x4D\x95\x40\x8F\x7C\x94\x6F\x7F\x94\x99\xAD\x09\xB0\x5A\xB9\xAA\x81\x09\x0F\x3E\x9C\xAF\x49\xFC\x98\x7F\x62\x94\xC8\x3E\x77\x44\xB9\x9D\x10\x9D\x00\x98\x4C\x8A\x6B\x99\xB1\x99\xB0\x31\xA2\x63\xB0\xAD\x84\x8D\x93\x3E\x9A\x19\x99\x92\x7F\x5E\x9A\x23\x14\x9D\x60\xAC\xA0\x90\x8D\x9C\xD5\x8A\xD7\x97\x7D\x88\x5E\x97\xC0\xDA\x57\x5F\xBC\x8D\x9B\x56\x9C\xB2\x8E\xCB\x7F\xB9\x95\x05\x9A\xE9\x2A\xB9\x1E\x80\xB0\x3B\xA5\x97\x69\x90\xF6\x8D\xF5\x86\x16\x76\x24\x12\xD5\x66\x9C\x97\x9A\x7E\x8C\x51\x64\x9B\x98\x7B\x96\xF7\x8D\xC4\x16\xE4\x5D\x86\xDE\x66\xA7\x97\x2C\x9A\x80\x98\x21\x95\x96\x81\xBA\x34\xC5\x58\xA1\xCD\x9A\x77\x9B\x8B\x8C\xB2\x97\xBB\x8B\x08\x43\xF6\xEB\x03\x5A\xBB\xAB\x88\xA1\x9B\xA9\x04\x6D\x9A\xFA\x96\x49\x98\x2D\x32\xBB\xC0\x4F\xC8\x9C\x4E\x62\x4D\x9B\x7C\x96\xCA\x6C\xB2\x8C\x29\x2B\x9C\x64\xB4\x83\x72\xF5\x2C\x4E\x9A\x52\x99\xA0\x8A\x10\x8B\x2A\x32\xC2\x68\x81\x9A\x95\x73\x96\x17\x9F\x45\x98\x18\x77\x5B\x99\x49\x30\xA7\x5D\x82\xCE\x9C\x91\x9F\x67\x93\x45",
"\x9B\x10\x9A\x25\x97\x21\x1E\x92\x1E\xBD\xCF\x9E\x8E\x95\x2D\x9D\x0E\x66\xE2\x99\xA0\x71\x05\x35\xF3\x2E\xAB\x20\x8B\x7A\x96\x0B\x99\x22\x71\x43\x9B\x03\x99\x0A\x06\x92\x67\xAF\x22\x9C\xAE\x7F\x52\x9A\xC5\x6B\x15\x9A\xF7\x77\xC6\x34\x86\x6A\xA7\xBD\x8A\x69\x99\x35\x92\x73\x99\x01\x9B\x9C\x9A\x2A\x35\x80\x37\x96\x34\x9C\x4A\x9E\x52\x9D\xE2\x96\xA1\x99\xB6\x94\x95\x32\xB8\x6A\xA4\xD4\x93\xA6\x93\xD7\x4C\xA7\x9A\x1F\x37\x64\x96\x1E\x34\xEE\x64\xB8\xCA\x95\x6C\x95\x73\x93\x75\x9B\x7D\x5F\x9A\x9A\x8C\x30\x87\x68\xB3\xB8\x97\x88\x9D\xFC\x70\xA8\x99\x44\x97\x66\x88\xFF\x2D\x81\xFF\x5F\xAE\x8A\xA5\x92\x55\x99\xA3\x9A\xA5\x80\x99\x67\xB3\x2F\xBF\x12\xB5\xBE\x83\x7E\x9D\xFE\x94\x90\x9B\x45\x9B\xB2\x9A\xDF\x31\xAA\xE5\x55\xB9\x96\xEC\x76\xBB\x95\x5D\x98\x3E\x9A\x86\x9A\x46\x35\xDC\x67\xB1\xB9\x89\xA4\x94\x49\x98\x83\x92\x25\x9A\x8A\x9A\x85\xAB\x0B\x5A\xB9\xD3\x98\xAA\x9D\x9E\x97\x90\x9A\x44\x8E\x39\x97\xDB\x06\xE1\x62\xA0\xD4\x8E\x8D\x65\x0E\x76\x5C\x2C\x61\x9B\x17\x95\x9C\x34\x81\x5D\xBC\xD5\x80\x9F\x9B\x18\x91\x95\x9B\xB0\x39\x94\x9A\x5F\x35\xCD\x6A\xB3\xCE\x8C\xB5\x57\x3E\x9B\xC5\x86\x4A\x8F\x4B\x82\xEB\x33\xFE\x5F\x8C\xC6\x80\x80\x9E\x32\x9F\x26\x3B\x2D\x9B\x87\x73\x33\x33\xC2\xD8\x7A\xC0\x96\x77\x9F\x3F\x98\x7F\x86\xFF\x94\xC2\x8F\xA9\x35\xEF\x6A\xA7\xB8\x9C\x5D\x9D\x5A\x9A\xF0\x8D\x00\x9A\x67\x9A\x03\x34\xD0\x69\x9B\x94\x3D\x7D\x91\x0E\x9B\xDA\x95\xB1\x96\x74\x8C\xC5\x31\xA0\x55\xAB\xF1\x74\x81\x93\x15\x73\xB5\x9B\x66\x98\xA5\x99\x99\x00\x84\x3B\x93\xC7\x97\x76\x95\x1D\x9D\xBB\x93\x8F\x79\xCF\x30\x52\x2F\xC7\x6B\x89\xCE\x98\xA0\x9B\xFA\x76\x5C\x2D\x74\x9B\x4E\x99\xF7\x2C\xB3\x63\x9E\xCD\x8D\x75\x97\x23\x7B\x13\x98\x6B\x9B\x79\x9A\x43\x2D\xF8\x63\x89\xB1\x9D\x77\x9B\xC4\x94\x62\x96\xED\x99\x8C\x76\xC9\x2B\x9C\x61\x81\xCE\x8E\x84\x94\xA5\x94\xC6\x93\x3F\x9A\x06\x99\x2C\x34\xFD\xD9\x79\xD3\x97\xAE\x9B\x5D\x8D\x25\x9A\x30\x94\x84\x9A\x1B\x32\x9C\x2E\x91\x18\x48\xAF\x9B\xD1\x95\xB7\x9A\xBC\x7C\x4F\x89\x38\x34\xEF\x6B\xBC\xCD\x81\x85\x96\xD1\x76\xA2\x98\x1E\x76\x70\x98\xD2\x35\xEA\x66\x9B\xD4\x98\x2B\x66\x38\x83\x92\x99\x76\x82\x20\x99\xC2\x21\xD5\x6B\xAD\x85\x34\xAF\x9F\x2D\x96\xBE\x9A\x05\x6F\x89\x91\xC3\x0C\xB9\xD8\x56\xD7\x8D\x83\x99\x47\x98\x21\x9A\x96\x99\x42\x76\x08\x36\xD8\x6B\x94\xBD\x82\x86\x91\x11\x74\xC2\x98\xF3\x91\x5B\x55\xCC\x30\xCE\xE3\x46\xD7\x82\xB1\x92\x3B\x9D\x7C\x99\x4F\x9A\x3E\x99\xB7\xEC\x21\x6C\xB5\xD7\x9E\x94\x9A\xF4\x93\xA8\x98\x2E\x96\x09\x9B\xD0\x35\x9C\x6C\x9B\xD2\x8D\x95\x9D\x7C\x89\x1E\x99\x65\x36\xDE\x9A\x09\x36\x9C\x57\x9B\xD6\x8A\xA3\x91\xA8\x92\x45\x8E\x86\x9B\x09\x9B\x3A\x36\xEC\x58\x89\xFD\x76\xAA\x96\xC9\x71\xC7\x9B\xC4\x99\x7D\x95\x4D\xC4\x30\x67\x8B\xB1\x20\xB2\x9C\x62\x98\x24\x99\x58\x9A\xD2\x80\x23\x31\x9D\x59\x94\xD9\x93\xB1\x99\x5D\x9E\x5A\x98\x22\x9A\xF1\x91\xE8\x11\x6B\x6A\xBE\xCE\x98\x68\x72\xEB\x2E\xC4\x98\x26\x96\x0B\x9B\x91\x35\xF4\x34\x94\xCF\x9F\x68\x9B\x78\x97\x3B\x37\xE0\x55\x46\x9A\x0A\xED\x65\x6C\x89\xD9\x83\xA5\x98\x2F\x9E\xB2\x7E\xBE\x98\x6E\x99\x0B\x2D\xFC\x6B\x9B\xD9\x95\xB0\x94\x63\x9E\x25\x9A\x57\x98\x1F\x99\x60\x31\xF4\x5C\x9C\x4F\x9B\xAF\x92\x67\x9F\xC9\x99\xE1\x96\xD2\x0E\x53\x1F\xDF\x67\x83\xBA\x8B\xAC\x95\xE8\x92\x7B\x77\xDE\x95\xFE\x9A\x41\x36\x99\xFE\x57\xD9\x9E\x8F\x39\xF6\x8B\x14\x8E\x02\x8B\xFE\x97\x17\x24\x8C\xE4\x19\xBA\x88\xED\x37\x5A\x9B\x7E\x99\x91\x79\x82\x98\x77\x32\x9F\x68\x88\xD3\x89\xB7\x82\x36\x9B\x99\x9A\xCE\x99\x69\x81\x3C\x33\xA3\x63\x94\x22\x7A\xB3\x93\x28\x98\x3D\x9A\xA8\x9A\xA8\x96\xA5\x14\xB0\x5E\xBB\xBB\x81\xD8\x8D\x4C\x9E\x68\x98\x55\x34\xA4\x99\x07\x36\xDE\x59\xAE\xDA\x9A\xA0\x94\x47\x99\xBE\x90\x71\x98\x05\x9A\xC2\x35\x9A\x2D\x86\x97\x8F\x5C\x90\x6A\x9E\xE0\x96\x21\x9B\x03\x9A\x4B\xDE\x5E\x90\x42\x39\x94\xA0\x98\x17\x75\xD5\x99\xA8\x9A\x5E\x9B\xEE\xFE\x5B\x66\x8B\x7C\x39\x80\x9B\x6B\x9D\xC3\x9B\x06\x9A\x37\x78\x5F\x33\xF3\x56\x8F\xB8\x95\xB6\x91\x40\x58\xBC\x99\x8E\x90\xBF\x8D\x99\x28\xFF\x5D\xBF\xCA\x72\xF5\x20\x32\x9C\x60\x9A\xBD\x99\xFF\x9A\xA1\x2D\xA0\x61\x81\xD4\x8D\x7F\x93\x50\x99\xD7\x9B\xB6\x9B\x67\x9B\xD6\x36\xBD\x6D\xA2\x8B\x78\x78\x9B\x7B\x91\x10\x98\xB0\x78\x6A\x9B\xF0\x36\xBB\x6C\xA8\x96\x86\x99\x99\x58\x6F\x11\x9B\x81\x8E\x92",
"\x97\x0F\x36\xDA\x51\xB2\xCA\x64\xB7\x9A\x19\x9D\xCA\x9B\x14\x97\x3E\x93\x1C\x35\xBC\x5B\xBB\xD8\x5E\x6D\x94\x60\x9B\x90\x83\x28\x98\xD9\x9A\xE5\x36\x8D\x59\x85\xCC\x8D\x3E\x96\x52\x98\xC3\x9A\xCD\x68\x2C\x79\x12\x33\x84\x65\xBA\xDB\x8C\x47\x85\x0B\x98\x75\x82\x8A\x9A\x05\x98\x1A\x37\xEC\x58\x86\x5E\x86\x93\x9D\x64\x9D\x9E\x31\xC4\x9B\x2E\x98\x13\x37\xB3\x52\x87\x8D\x9B\x30\x8A\x65\x9E\xD9\x9A\xB1\x9B\x39\x9A\xE0\x17\xDD\x1F\x89\xA5\x8F\x56\x58\xC1\x77\xE4\x9A\x95\x99\xAE\x97\x0E\x35\xA7\x1A\xA2\x4C\x92\x5B\x95\x73\x9D\xE0\x98\x97\x9A\xD0\x99\x7A\x2B\xDA\x6D\xB8\xDB\x8F\xB9\x93\x26\x99\xE6\x9A\xB2\x98\xA8\x9A\xAA\x35\xA0\x6E\x9C\xDB\x8A\xB2\x91\x99\x94\x6B\x89\x71\x9A\xA5\x9B\xF9\x36\xA2\x6E\xA4\xF1\x54\x71\x9F\x27\x7A\xD7\x99\xD4\x9A\xBA\x7E\x69\x34\xE1\x00\x63\xD5\x8D\xD9\x75\x6C\x9F\xE3\x97\xB1\x9B\xB7\x98\x52\x09\xE9\x6A\xB6\x69\x9D\x9D\x98\x15\x89\x64\x96\xB9\x2C\x9B\x9B\x25\x32\xC0\x63\xB9\xDC\x9D\x0A\x97\x2D\x9B\xCD\x9B\xF6\x97\x38\x58\xD2\x31\xD7\x12\x80\xD6\x95\x0A\x5E\x2E\x99\x2A\x78\x00\x36\xB4\x9B\xC5\x32\xB2\x52\xA7\xD3\x99\x7E\x95\x31\x9A\xC0\x9A\x3A\x7A\xBF\x9A\xA4\x27\x81\x23\x83\xDC\x87\xBB\x9E\x73\x9C\xCF\x99\x97\x9A\xD4\x88\x08\x33\xAA\x68\xA4\xE6\x22\xB4\x95\x62\x8B\xDC\x98\xE1\x9B\xF9\x98\x3F\x37\xC5\xE5\x49\xDE\x8A\x8D\x83\x17\x9C\xFD\x96\x45\x76\xCB\x9A\xD2\x2B\xF7\x6E\x85\xDE\x87\xB1\x9D\x67\x9F\x1A\x99\xB2\x98\x7F\x65\xAE\x34\xF1\x4F\x89\xC6\x81\xAD\x99\x69\x9B\x80\x2B\xA6\x9A\x93\x3A\x59\xD7\x3E\x55\xB3\xA0\x94\xB3\x38\xF8\x88\x1B\x90\x46\x94\xCD\x91\xA0\x26\xBF\x65\xA9\x9D\x85\x4B\x9B\x76\x93\x58\x99\xDB\x93\xBC\x9B\x6A\x29\xDF\x60\xA0\xD0\x8F\xA8\x98\xEB\x90\x03\x94\x6C\x9A\xFE\x99\xAB\x37\xA8\x6F\xB2\xD9\x24\x09\x90\xAC\x8B\x87\x8D\x58\x94\x13\x95\x52\x28\xA8\x54\x94\xA1\x82\x96\x96\x85\x94\xCF\x94\x3A\x95\x55\x99\x99\xFC\x53\x55\x8E\xAC\x97\x99\x94\x4F\x9A\xBC\x99\xD1\x98\x18\x94\xD6\x18\xA3\x60\xA7\x53\x7A\x4F\x83\xFF\x8E\xF5\x99\xD9\x92\x59\x93\xB1\x37\xBB\x50\x90\xA8\x9C\x43\x9C\x7C\x9D\x2A\x96\xF3\x9B\xAB\x94\x8D\x2E\xB0\x6A\xA2\x64\x8F\x81\x9C\x34\x99\x06\x98\xB2\x97\x71\x39\xCA\x2E\x8D\x4E\x86\xDC\x34\xFB\x8E\x7D\x9A\xF8\x92\x26\x8E\x95\x94\x87\x29\xAC\x52\xB6\x9A\x8E\x49\x9D\x1B\x9E\xD4\x90\xA3\x96\x99\x93\x6B\x37\xC2\x63\x91\xC7\x95\x76\x9B\x5C\x9A\x9C\x98\xB6\x96\xE7\x9A\x85\xA7\x5C\x6F\x8A\x80\x95\xBF\x96\x90\x97\x09\x94\x38\x95\x51\x94\xDE\x27\xA5\x51\x96\x91\x9D\x8B\x98\x2A\x9D\x5C\x9B\x4A\x99\xC0\x98\x68\x36\xC4\xAA\x52\xDB\x9A\x44\x7A\x80\x9F\x06\x90\x03\x9C\xED\x93\x0E\x38\xE3\x53\x8E\xA8\x8E\x37\x9F\x77\x93\x37\x9A\xA4\x93\xFE\x9B\x59\x27\xCF\x6F\xA7\xCB\x92\x48\x9A\x55\x9C\x83\x99\x21\x94\xE1\x9B\x12\x91\x44\x6F\x96\x6B\x86\x09\x9C\x07\x94\x3C\x96\x79\x93\xD8\x91\xE8\x25\xAA\x54\x90\xA0\x87\xBF\x95\xA1\x96\xCF\x95\xB2\x7C\xFB\x99\x2B\x28\xA3\x1C\x64\x49\x8C\x8F\x7F\xB6\x55\x03\x9D\x13\x91\x0F\x9C\x12\x27\xFB\x40\xAA\x86\x98\x4D\x99\x8B\x93\x2F\x9B\x49\x99\x87\x98\x9B\x32\xB2\x6C\x86\xDE\x85\xDB\x5B\x83\x82\xE1\x97\xDE\x98\xB7\x99\x85\x33\xD2\xD4\x42\x53\x90\xC1\x94\x7F\x98\x2A\x90\x83\x95\xE1\x93\x4E\x1C\xC5\x4F\xBA\xDF\x83\x38\x97\x6B\x95\xF9\x9B\xA2\x97\xF5\x94\xE9\x37\xA3\x52\x84\xA1\x9A\xB8\x89\x50\x9A\xBF\x98\xF5\x6C\x23\x9C\x65\x20\xC8\x70\xA9\x9E\x9A\x49\x9B\x7A\x93\x32\x93\x32\x95\x1E\x92\x26\x38\xF1\x4D\xB6\xDE\x90\x46\x98\x7B\x9E\x3A\x95\x3B\x9A\xC9\x96\x29\x32\xE6\x10\xAA\xDB\x92\x63\x93\x9B\x90\x0E\x9C\x1E\x90\x39\x9C\x7A\x27\xBC\x4E\xA9\x9C\x90\x4A\x9A\x9F\x92\x2A\x94\x7F\x94\x97\x93\x66\x38\xFF\x53\xBF\xDF\x9E\x3C\x91\x80\x9A\x29\x8E\x81\x34\xC2\x81\x0C\x36\xBD\x64\x9E\xD4\x93\xA8\x92\x50\x7F\xE1\x9A\x9F\x90\xD6\x9B\xA1\x1F\x88\x71\x85\xDF\x94\xC1\x9B\x84\x99\x1C\x95\xFC\x90\x09\x9C\x10\x26\xE8\x53\xB4\x8E\x9D\x47\x97\x70\x96\x07\x9D\x8E\x98\xEF\x8F\x16\x37\x89\xBE\x5D\x55\x9C\xC2\x9D\x7A\x9E\x0B\x9D\x4E\x95\x89\x93\x0F\x38\xB6\x70\x96\x9C\x98\xC1\x98\x71\x92\x15\x9E\x84\x92\x49\x9C\x68\x38\x80\x70\xAA\xDF\x8F\x87\x95\x77\x8E\x71\x98\x07\x9C\xD3\x90\x30\xE7\x76\x6F\x84\x73\x80\x38\x91\x95\x91\x1F\x95\xE6\x93\xF2\x9B\xFC\x28\x94\x54\x9C\x9C\x90\xBE\x9D\x02\x98\x67\x54\x15\x9A\xD1\x82\xF3\x37\xB5\x71\xA6\xDA\x3D\x41\x79\x84\x98\xCE\x91\x0D\x9D\x11\x9C\x97\x27\xC0",
"\x65\x8F\xE3\x95\xBD\x91\x89\x9C\x58\x98\x80\x95\xC2\x93\x5E\x2F\xB7\x6A\xBF\x88\x8D\xAA\x30\x19\x91\x27\x93\x6D\x94\x53\x9C\x69\x28\xBC\x71\xAB\xA1\x89\x74\x9D\x8B\x94\x15\x9F\x2F\x95\x15\x9C\x5C\x27\xB2\x42\x98\xCE\x94\x42\x8A\x0D\x9A\xB3\x8D\x36\x9D\x50\x9C\xB6\x38\xA4\x54\xA0\xE1\x89\xF2\x8D\x93\x91\x5B\x92\x2E\x99\x53\x99\x29\x31\x96\x70\xAC\xC5\x98\xC7\x9D\x14\x9B\x52\x9B\xCE\x9A\x91\x7E\x80\xF4\x06\x71\x8C\x82\x9B\xC6\x96\x99\x90\x63\x6D\x6E\x98\x48\x93\x79\x38\xD7\x4E\xA8\xE0\x83\x3C\x97\x8E\x9C\xF9\x91\x37\x9A\xB8\x95\x41\x37\xF9\x23\x92\xE4\x80\x05\x94\x91\x99\x19\x95\xF8\x9A\x3D\x94\xE3\x37\xA9\x54\x90\xE3\x8E\x48\x96\x8F\x98\x22\x94\x43\x9C\xB7\x98\xE2\x26\x9F\x6F\xB1\x27\x60\x71\x9C\x26\x7C\xBB\x47\x48\x9D\x58\x90\x01\x39\xF7\x50\x8C\x6D\x8C\x3D\x9B\x92\x95\x07\x93\x4F\x94\xA1\x93\xBC\x30\xB4\x5B\xA2\xC9\x99\xA2\x96\xCB\x96\x38\x66\x42\x99\xFA\x8C\xB4\x38\x80\x72\xA5\xE4\x8F\xC7\x90\x81\x9A\x1C\x94\x2A\x9C\xF0\x93\x3A\x38\xBF\x50\x92\xE3\x81\x42\x9F\x92\x9C\x55\x98\xEB\x50\xD1\x94\x96\x2B\x91\x45\xA0\xE2\x98\xFD\x82\x8A\x9B\x06\x9F\xDE\x93\xE3\x9B\x8C\x38\x97\x72\x95\x9D\x99\xC8\x91\x78\x93\x23\x9C\x4C\x95\x3E\x9C\xEB\x2D\xFF\x70\xB9\x59\x73\xB4\x92\xF6\x7D\x76\x98\x04\x6A\x0A\x3B\xED\x38\xE6\x42\x8C\xE5\x9A\xC5\x94\x8A\x92\x1E\x9E\x29\x94\x7A\x9C\x7B\x2E\xE7\x70\xAD\xA8\x89\xC3\x99\x55\x98\xEC\x9B\x5F\x87\xA9\x84\xB4\x2F\xDA\x65\xA9\xAE\x97\xA4\x9F\xB7\x78\xFC\x94\x0D\x92\x76\x9C\x8A\x74\x5D\x72\xBA\x70\x84\xC5\x99\x83\x91\x2C\x9E\xEC\x9B\x12\x9C\xB4\x37\xCE\x51\xBB\xE1\x88\x4B\x98\x96\x9D\x1D\x9B\x30\x9C\xA7\x98\x6D\x37\xDF\x42\x82\xBF\x9D\x4E\x96\x3B\x99\x4E\x37\x4D\x9D\x6B\x90\x39\x39\xD7\x4C\x93\x7F\x9C\x49\x99\x16\x97\xDD\x8D\x62\x95\xC4\x92\x54\x32\xE9\x5B\x95\xE6\x9A\x87\x95\x89\x9D\x0E\x4A\xF6\x96\xA0\x95\xA2\x35\x80\x6F\x96\xDE\x83\x24\x8B\xD0\x96\x33\x9C\x32\x9C\x6E\x9C\x73\x38\xB8\x71\xA2\xE0\x88\xBE\x93\x96\x93\xF6\x99\xB0\x98\x72\x9C\xE6\x37\xFA\x72\xBD\xB9\x9C\xCB\x95\x58\x99\x78\x8A\x24\x9A\x80\x9B\x89\x35\x8C\x6F\x88\xA8\x8F\xC3\x97\x9B\x9D\x22\x9D\xA6\x6F\xC7\x9C\xBA\x31\x91\x73\xBC\xC6\x93\xCC\x9E\x1B\x99\xED\x9B\x95\x99\xD6\x9C\x14\x24\x92\x6B\xA0\xD9\x94\xAC\x9C\x2D\x98\xF3\x98\x88\x95\x7F\x9C\x5C\x39\xA1\x73\xAF\xDE\x88\x4D\x9F\x34\x93\x63\x90\xA2\x96\x5F\x9C\x1A\x27\xD3\x72\x80\xA2\x94\xC6\x94\x11\x9E\xF3\x98\xC9\x98\x4A\x9B\x2E\x24\xA8\x66\xA8\xC5\x71\xA5\x9B\x32\x98\x7D\x99\x3D\x63\xD3\x9B\x03\x01\x39\x01\x06\x87\x82\x40\x9A\x3B\x92\xC3\x85\x88\x39\x38\x61\x72\xB7\x6F\x73\x41\x1D\x72\x6D\x0D\xE9\x65\x0D\x7B\xD3\x76\xD3\x6C\x50\x0E\xC3\xF2\x4C\xDF\x64\xC3\x7E\x59\x40\x3C\x7C\x79\x69\x99\x7B\x62\x68\x6B\xF3\x78\xE8\x62\x64\x8A\xA3\x7A\x61\x70\x70\x07\xF0\x7B\x41\xA9\x74\xF3\x42\xE9\x6B\xC1\x7B\x7E\x79\x43\x9F\x59\x7D\xE7\x6B\x69\xF9\x22\xF3\x6D\xE2\x76\xCA\x79\x8C\x7E\x29\x7F\xC2\x6C\xD1\x77\x36\x0A\x5F\xF1\x75\xE5\x75\xC1\x72\x9B\x79\x5E\x70\xF3\x77\x3E\x87\x7F\xF9\x0B\xF0\x6A\xE8\x82\xCC\x77\x8C\x78\x3F\x7E\xFD\x6A\xEB\x6B\x30\x3A\x85\x99\x45\x8C\x72\xCE\x79\x8F\x79\x40\x7D\x8B\x9D\xF3\x06\x26\xFA\x5E\x68\xB6\xE3\x6D\xD1\x76\x8C\x7B\xFB\x77\x8E\x7C\x8B\x71\x58\xF9\x0B\xBD\x43\xE4\x7C\x15\x55\xA4\x9B\x44\x7F\xB1\x6D\xA3\x5B\x38\x3A\xC8\xC2\x7E\x3C\x61\x37\x78\xFF\x72\x44\x9E\x3B\x7C\x5B\x73\x44\xFA\x11\x5C\x47\xE1\x6B\xD2\x71\xA7\x6A\x09\x7D\x70\x7C\xE1\x6F\x2B\x37\x99\xE0\x6E\xBB\x70\xC9\x79\x92\x3D\x4B\x7F\xBF\x67\x3F\x51\x3A\xF9\x12\x99\x75\xD2\x80\x00\x0D\x0B\x03\x3F\x9D\xF3\x7E\xDC\x2D\x2A\xBE\x16\xBA\x77\x0A\x99\xC7\x22\xDB\x07\x17\x02\x9B\x9C\xFE\x9C\x0D\xC3\x63\xCB\x21\x34\x5B\x74\x87\xDE\x02\xB6\x04\x5C\x3F\x4E\x9B\x94\xC8\x7D\x65\x87\xA4\x8F\x1F\x90\x8F\x99\x37\x97\x53\x9C\x72\x94\xE8\x39\xE6\x51\xBC\xE0\x93\xC6\x95\x95\x99\xFA\x98\x17\x7A\x9B\x99\xB6\x2E\xA5\x6D\x97\x6C\x88\xB5\x94\x59\x92\xD5\x99\xEE\x82\x59\x2F\x25\x2A\x8E\x73\xA2\xDF\x82\xC7\x9D\x91\x93\x25\x9F\x47\x95\x96\x9C\x21\x29\xC4\x73\xB5\x9E\x7E\xB6\x92\xD5\x93\x81\x97\x8E\x91\xCD\x8F\x56\x2D\x84\x68\x98\xE3\x9E\xC6\x95\x8A\x9D\x29\x9F\x29\x9C\xBB\x9C\x13\x38\xF8\x72\xBE\xC5\x9E\x4D\x96\x2E\x9E\x15\x9C\xBA\x99\x35\x9C\xC1\x25\x8A\x01\x81\xDB\x85\x2E\x9A\x84\x92\xA7\x8B\x37\x95\xDD\x9C\x9A\x3A\xA8\x72\x9C\xEA\x91",
"\x50\x9E\xA9\x9B\x42\x97\xA2\x9C\xAA\x9C\xB6\x3A\xAC\x70\xAE\x7F\x88\xFE\x84\x80\x9A\x82\x9B\xB2\x9B\x36\x91\xCF\x08\x80\xD8\x19\xEA\x8E\x4E\x97\x87\x9B\xC8\x93\x54\x94\x82\x93\x2C\x39\xEA\x73\xBE\xA3\x8D\xD4\x95\x8D\x9A\x16\x70\x75\x9B\xBD\x7A\x39\xDA\x03\x72\xA5\x80\x85\x1E\x97\x9E\x99\x2A\x9D\x7A\x94\xE1\x9C\x2A\x38\xC9\x75\xB9\xE3\x95\x88\x9F\x4E\x99\xB6\x9B\xBB\x98\x56\x9D\x8D\x39\xD4\x75\xB8\xA3\x9A\x2F\x9F\x88\x9C\x2A\x95\x34\x9D\x63\x9D\xEB\x39\xDC\x75\xBC\xA4\x5B\xBD\x94\x8D\x90\x02\x9B\x78\x9A\x02\x90\x66\x33\xAB\x6A\x83\x77\x8D\x2C\x88\xA9\x9A\x5C\x9C\x32\x91\x79\x9D\xC8\x26\xD7\x75\xA5\xE1\x81\xCE\x90\x8C\x9B\x2F\x9E\x30\x9C\x35\x9C\xEB\x28\xEE\x58\xB3\x98\x95\x62\x98\x9C\x9C\x45\x99\x7C\x9A\xFE\x98\x05\x3B\xF7\x6F\xA1\xE1\x9D\xC9\x9C\x40\x97\x34\x9C\xF2\x93\x2D\x98\xCA\x27\x9D\x72\x8B\xC2\x85\xCE\x9B\xAC\x9A\x8C\x96\x0C\x9A\xC3\x9C\xFE\x38\xF0\x75\x90\xA1\x9C\xCD\x9F\xA0\x93\x58\x9C\xF9\x9A\xE0\x9C\xF7\x3A\xE8\x75\xA8\xDF\x8F\xD8\x9D\x97\x9F\x87\x9A\x11\x91\x32\x93\x83\x38\xF7\xF5\x73\x31\x98\xCD\x66\xB0\x9C\x42\x90\xC2\x9C\x66\x94\xD2\x39\xA7\x70\x94\xE7\x9E\xBF\x91\x8C\x9C\x12\x9F\x65\x9D\x10\x9A\xC9\x2D\xC1\x68\xBC\x65\x81\xB8\x9C\xA6\x97\x70\x9A\x19\x98\xEF\x6C\x3D\x3B\xDD\x44\x95\xEB\x95\x35\x94\x86\x9C\xFF\x9B\xD0\x9D\x14\x9C\x33\x3B\xC6\x76\x90\xEC\x9A\xC0\x91\x8B\x98\x39\x9A\x12\x9D\x78\x9D\x3C\x39\xF9\x6F\xBE\xE4\x9E\xD8\x90\x94\x91\x35\x9D\x22\x98\x91\x9D\x06\x32\xDB\x76\x84\xE3\x9F\xB0\x96\x29\x9A\x5A\x9D\xD4\x9D\xCB\x94\x62\x39\x99\x53\xA4\xE5\x9B\x4C\x96\x96\x9D\x33\x95\xBA\x9C\x51\x9D\x7F\x2E\xE7\x37\x57\xE3\x99\x7D\x91\x75\x97\x1B\x9C\xCB\x9C\x12\x9C\xD1\x39\xBF\x73\x92\xE6\x85\xC7\x97\x7B\x98\x6D\x9D\xA4\x99\x67\x93\x29\x36\x98\x1A\xA1\xA2\x88\x48\x9C\x84\x9A\x21\x97\xA1\x9C\x86\x94\xC5\x3A\xAB\x54\xB2\xEC\x9D\xC1\x98\xB7\x9F\x42\x97\x60\x98\x99\x9C\x26\x13\xB3\x6E\x9E\xED\x8A\xD9\x99\x8B\x98\x1C\x9D\x79\x94\xE5\x9B\xE7\x29\xE6\x75\xAB\xE2\x9A\xD6\x9D\x8A\x9D\x72\x9F\x2B\x9C\x1E\x9B\xB7\x2C\xF9\x4D\xA4\xC4\x9F\xDA\x9B\xB2\x99\x58\x9F\x89\x95\x94\x9C\xCB\x37\xB0\x76\x99\xEB\x98\xD7\x9B\xAD\x9A\x5D\x9D\x43\x9C\x48\x96\x94\x32\xB7\x67\xBE\xEA\x83\xD4\x92\x45\x96\x55\x9D\x3C\x9C\xF3\x94\x39\x38\x91\x77\xBB\xE0\x93\xDC\x9C\xA8\x9E\x76\x9C\x4C\x9C\xF7\x9C\xE2\x2C\xC8\x6E\xBC\xCA\x9C\xD9\x9A\xB1\x9C\x20\x9D\x69\x9C\x9F\x94\x64\x3B\xC0\x72\xB7\xC3\x82\xCA\x98\x59\x9D\xAF\x96\xC0\x9D\xC6\x95\xC1\x1E\xD1\x75\xBA\xE6\x8C\xDC\x95\xA8\x9D\x09\x9E\x6E\x94\xBE\x98\xB2\x3A\x95\x70\xB4\xEA\x97\xC0\x9C\x9E\x9A\x30\x99\x68\x94\xB7\x89\xBB\x23\xF7\x68\x8C\x67\x9F\xD5\x9C\xBD\x9E\x77\x9E\xA1\x9C\x58\x9D\xA9\x38\xA2\x77\xBF\xE2\x86\xC7\x93\x89\x99\x40\x96\x5A\x9D\xFB\x81\x6C\x39\xD8\x0C\x5B\xDD\x89\xD9\x9D\xB7\x9D\x55\x9C\x5D\x9D\x08\x9C\xF0\x3B\xD0\x72\x82\xEF\x92\xCA\x94\xBB\x9D\x74\x9C\xCD\x9C\x92\x9D\x7E\x36\x99\x73\xB3\x9D\x84\xBB\x9F\xCB\x8C\x60\x9E\xB9\x2D\x69\x9D\x61\x3B\xCF\x53\x88\xA6\x91\x4E\x9A\x98\x96\x6C\x9F\x3A\x99\xD5\x9C\x26\x32\xC7\x76\xB6\x9E\x86\x0A\x9A\xCF\x93\x33\x9D\x58\x90\xB2\x98\x37\x1C\xFD\x77\xA0\xED\x96\xC3\x9F\xB3\x98\x0F\x9D\xD0\x9C\x3D\x9C\x84\x3B\xFC\x70\x86\xEE\x86\x96\x98\x9D\x9D\x88\x91\x27\x9B\xE6\x99\xEB\x1C\x80\x23\x82\x57\x6B\x68\x92\x98\x30\x82\x9C\x09\x9F\x66\x9C\xF4\x3A\xF3\x76\xBD\xA7\x89\xE1\x94\x99\x9B\x85\x9E\xDE\x9B\xFB\x9D\x7C\x37\xA4\x69\xAC\xD9\x95\x8C\x87\x3D\x9B\xEE\x99\xAA\x95\x9D\x9D\x6E\x3B\xCD\x77\xA3\xEB\x8A\x4D\x91\xDB\x92\x53\x9A\x9D\x98\xA2\x9B\x44\x39\x9F\x2C\xBC\xDB\x8E\xBB\x90\x9B\x9B\xFD\x96\x54\x99\xA1\x6E\xDE\x39\x90\x86\x61\xEB\x8A\xE2\x97\xB0\x98\x87\x9D\xC2\x9D\x7A\x9D\xD8\x3A\x9F\x75\xA4\xEE\x97\xC7\x96\xBC\x9E\x2A\x9E\x51\x94\xCC\x9D\x44\x11\xA1\x6F\x88\xC6\x8B\xFB\x8A\x32\x9A\xB7\x7C\xCB\x98\xD2\x9A\xBC\x0D\x32\x1B\x03\x03\x17\xD3\x98\xA7\x9D\x61\x62\x1B\x5F\xA2\x7A\x0A\x3C\x82\x24\x51\xB1\x58\x6D\x09\xC7\x5A\x20\x01\x7A\x68\xE7\x7F\x71\x3C\xA7\x02\x05\x03\x14\xE3\x9B\x05\x7A\xB9\x73\x31\x73\x42\x7C\xC0\x0D\x32\x1B\x07\x03\x04\xE4\x95\xC7\x99\x62\x5F\x81\x7B\x9A\x78\xA5\x35\x89\x02\x09\x03\x0C\xE4\x9D\xA3\x92\xCA\x7B\x40\x01\xCB\x72\x56\xCF\x19\xEB\x52\x18\x5B\xAC\x76\x19\x25\xB3\x7A\xEB\x77\xE8\x02\xC5\x38\x83\x02\x25\xD9\x60\x16\x8B\xA6\x9B",
"\x19\x00\x25\x9F\xAC\x87\x91\xF6\x06\x02\x13\xDA\x64\x8F\x6D\x69\x7F\x49\x95\x22\x9E\x20\x56\x39\x0E\xB6\x5A\x80\xDF\x9A\xCA\x99\x53\x32\xAC\x70\xEA\x93\x44\x9C\xAA\x27\x8B\x71\xB2\xEB\x9E\xE2\x90\xB4\x9A\x70\x9F\x74\x9C\x1E\x9E\xD5\x39\x98\x78\xAA\xDD\x9E\xDD\x40\x84\x98\x10\x9D\xCE\x99\x08\x98\x95\x3A\xC3\x69\xAF\xE0\x99\x68\x56\xCB\x99\xFB\x91\x37\x9C\x11\x9E\xAD\x3B\xBB\x79\x8D\xE2\x8E\xC6\x9D\xA9\x9A\x76\x9E\x18\x9F\x02\x9E\x64\x3C\xA6\x77\x86\xC4\x45\xE6\x9A\x4C\x9B\x52\x9D\x49\x83\x8C\x8D\xD8\x37\xDE\x3A\x82\x04\x1F\x51\x97\x4E\x69\x3D\x85\x45\x92\x63\x59\xA7\x21\x8D\x70\x8B\xEE\x84\xD4\x9E\xBE\x9E\x7B\x9F\xE3\x9D\xDD\x94\x89\x3A\xBD\x53\xA0\xEA\x80\x8C\x95\xBE\x99\x03\x9F\x55\x9C\xF6\x9B\xD6\x34\xCD\x66\x8E\x48\x8F\x9A\x93\x7C\x56\x9C\x9F\xB2\x97\xC1\x58\x60\x29\xD2\x4E\xAE\xEE\x89\xBE\x90\xBB\x99\x74\x9F\x00\x9F\x73\x9D\x0D\x3B\xC3\x73\x87\xF0\x90\xAC\x9B\x7E\x9A\x6A\x9A\xF5\x87\x1F\x98\x2B\x2C\xB7\x1E\x9A\x7F\x48\x9D\x9E\x52\x32\x6B\x5A\xD4\x87\x59\x8B\xFC\xC3\x7E\x79\xBB\x87\x8E\xE6\x99\x9B\x9C\x75\x9D\xE7\x9D\xBF\x9D\xE1\x38\xBE\x73\xA3\xE3\x83\xDC\x9C\xB0\x9C\x7E\x9D\xD1\x9C\xFB\x9D\x2D\x3C\xF5\x76\x5F\xEB\x9A\x44\x7A\xD1\x9B\xB5\x6F\x2D\x9F\x51\x9C\x5F\x39\x82\x7A\x92\xF3\x91\xDB\x9B\x9F\x92\x87\x9C\x24\x9D\x92\x9E\x85\x3B\xF5\x77\xA8\xE3\x89\xE9\x91\xCE\x9E\xDD\x95\x01\x95\xCF\x30\x2D\x3D\x9A\x16\x9C\xF4\x98\xE5\x94\x87\x9A\x97\x9D\x04\x9F\xA9\x9D\xD0\x29\xFB\x6F\x92\xA7\x83\x90\x94\x9D\x92\x98\x9F\x75\x9C\x62\x9E\xFC\x3A\x83\x3C\x87\xF3\x9F\xD7\x95\x36\x9D\xBC\x99\xE6\x5E\x94\x9D\xB0\x1B\xB5\x79\xA0\xC3\x6F\xE9\x9E\x95\x9A\x11\x9E\x02\x95\x81\x9E\xBD\x39\x90\x73\xBE\xF2\x82\xDA\x90\xCC\x9C\x68\x9E\xC3\x9C\xAD\x9D\x35\x3B\xAD\x51\xB0\xC1\x8F\x45\x94\x38\x9D\xE1\x94\x1D\x99\x5E\x91\x2D\x69\x41\x7A\xAA\x1D\x9C\xEA\x9B\x98\x99\xA6\x9E\xDF\x9C\xB0\x9E\x2D\x3B\xA2\x7A\x95\xF3\x84\xE9\x91\xB3\x99\xA1\x9F\xDD\x9D\x85\x9E\x79\x3B\xE9\x28\xAC\x6E\x8D\xC3\x96\x96\x89\x10\x99\x9C\x34\xB9\x9E\x62\x25\xED\x10\x52\x9E\x8F\xE6\x9C\xBE\x9C\x9D\x9F\xFF\x9C\xA7\x9C\x01\x3C\x88\x75\xB2\xEF\x89\xCF\x98\xCD\x9E\x25\x9D\x19\x9F\x9E\x97\x36\x34\xEC\x6B\xBF\x32\x1F\xB7\x97\x85\x9A\x87\x99\xC3\x9B\xB4\x97\x01\x01\xB3\x53\x88\xF6\x81\x28\x93\x3E\x41\xA0\x9F\x5D\x9F\x99\x9E\xD0\x39\x98\x72\xA7\xF0\x9A\xC8\x97\xB5\x9C\x23\x9E\x4E\x9E\x8F\x9C\x7B\x37\xD5\x6F\xBA\x8B\x8A\xDA\x9E\x60\x9B\x4D\x94\xB7\x98\x4F\x9C\x4C\xCF\x7B\xCC\x35\x95\x85\xED\x99\x88\x93\x34\x9F\x22\x95\x82\x9C\x5B\x26\xC1\x4E\x8F\xA2\x8C\xEA\x9C\x05\x9F\xE6\x9A\x17\x98\x0D\x9E\xDE\x3A\xCA\x68\x99\xD8\x84\xB2\x63\xDA\x98\xA2\x90\xE3\x85\x64\x9C\xEA\x3C\xB6\x78\xBB\x90\x88\xEA\x93\xC1\x9A\xA9\x9D\x05\x9E\x90\x9D\x5B\x2F\xC6\x7B\xA9\xDC\x91\xED\x90\xB7\x94\x6D\x9E\x3C\x95\x75\x33\x90\xB3\x73\x72\x9E\xEE\x97\xC1\x90\xBC\x9D\x17\x9F\x64\x9E\x45\x9D\xC4\x3B\xC8\x75\x9A\xF3\x8A\xD6\x9A\x9C\x8C\xC4\x9A\x9F\x83\xAA\x56\x5E\xEE\x74\x7A\x9A\x73\x81\xD6\x80\x96\x98\xB5\x9F\xA6\x9C\xBD\x9E\xC4\x3A\xD6\x79\x86\xEB\x89\xEF\x99\xAF\x9F\xB2\x9F\xFF\x32\x75\x9C\xC1\x37\xCC\x79\x9B\xF5\x83\xEA\x90\xD3\x9E\xAB\x9F\x53\x94\xFB\x9E\xC2\x3A\xF8\x7B\xAF\xEC\x9C\xEB\x93\xBB\x9C\xBF\x9D\xED\x9D\xF5\x9E\xEB\x3A\xC8\x77\x93\x05\x8D\x46\x80\x63\x9F\xBB\x9D\x73\x9E\xA5\x92\xBC\x3D\xDF\x70\x9C\xF1\x9E\xD9\x9C\xCB\x9E\x84\x9F\x58\x9E\x14\x9E\x38\x3D\xAA\x78\xAF\xF6\x83\xD9\x9C\xD0\x9C\x18\x9C\xDD\x96\x0B\x9F\xF6\xED\x72\x7B\x80\x69\x80\xE3\x81\xCD\x9F\xA8\x9D\x09\x9E\x6B\x9D\x60\x3C\x8B\x76\xBD\xF5\x86\xE9\x97\xD6\x98\xA5\x9C\x72\x9E\xC8\x94\xBF\x2C\xE5\x3C\x97\xF8\x8E\xF9\x3F\x7D\x99\x23\x95\x7E\x94\x9A\x9E\x8E\x38\xB6\x7A\xB6\xEB\x8D\xF0\x9E\xD7\x99\x6B\x9E\x8D\x9E\xB5\x9D\x67\x3C\xEF\x73\xBE\x23\x87\x9D\x9C\xE8\x8B\xC7\x9D\xF0\x40\xD1\x9C\xB4\x20\x85\x4B\x92\xF0\x83\xC3\x9A\xB0\x9E\x6A\x9D\x59\x9E\xAC\x9D\x94\x3B\x80\x7B\x96\xEE\x8A\x35\x9E\x2A\x98\x81\x81\x46\x9F\x14\x9F\x04\x3E\xDD\x7A\xB9\xF2\x9F\xEA\x98\xE0\x9F\x75\x9E\xCB\x9C\x95\x9C\xFA\x3D\x92\x77\x85\xF9\x99\xF2\x98\xD6\x98\x81\x9C\x7E\x47\xEA\x30\x72\xF6\x1D\xF1\x42\xF8\x84\x74\x71\x53\x37\x24\x03\x34\x3D\xC5\x99\xB0\x3C\xA3\xE8\x42\x0C\x1D\x29\x3E\xB9\x81\x41\x9D\x36\x66\x68\x13\x09\x7C\x36\xEF\x60\x87\x2B\x2A\x3D\xE7\x9E\x48\x96\xE2\x62",
"\xAB\x32\x38\x02\x3A\x4C\x1B\xF4\x9C\x29\x38\xDB\x02\x01\x50\x05\x40\x22\x6D\xF4\x9F\x5B\x08\x44\x69\x76\x18\x5F\x81\x40\x14\x5F\xA5\x5E\xC9\x62\x4E\x3E\x8B\x5A\x78\x6E\x21\x60\x57\xD6\x60\xD3\x9C\x98\x9F\x72\x3D\xB8\x5B\x2E\xF7\x1E\x8A\x7C\xD3\x9F\x0F\x02\xB3\x32\xA7\x9F\x76\x78\xB8\x5B\x27\xCB\x3E\xD8\x63\xFE\x6A\xCD\x91\x6E\x89\xA6\x9E\x39\x59\xBD\x3D\xD1\x7C\xA4\xE6\x82\xC3\x93\xB6\x9C\x82\x9C\x6A\x9C\xEC\x9E\x24\x32\xCE\x7A\xB8\xDC\x97\xF1\x9B\x14\x6B\xC8\x9B\xAF\x6E\x3D\x9D\xA7\x3E\x85\x44\x9C\x61\x2F\x2F\x30\x27\x66\xD3\x7B\xAB\x9E\xA8\x3F\x4C\xED\x74\x84\x6F\x9A\x87\x6F\x5B\xBF\x99\xAB\x9F\x9C\x9F\xF8\x9E\x61\x3E\xF5\x7A\x86\xF8\x95\xEF\x9E\xE2\x9D\xC3\x9C\x8C\x9E\x21\x9F\x61\x3C\xFB\x7B\xAB\xF9\x85\xDE\x90\xE1\x9F\x76\x9D\x51\x90\x7C\x8F\xBB\x33\xC8\x1D\x87\xA7\x84\x6C\x89\x9C\x92\xB4\x9F\xA7\x9F\xA6\x73\xD1\x3D\xEF\x76\x96\xE4\x89\xED\x93\x96\x9B\xB5\x9D\x59\x9D\xD6\x9E\x67\x39\xBE\x78\xB9\xDE\x9C\xF5\x93\xA0\x93\xAE\x98\x5F\x8D\xBA\x9A\xDC\x32\xF5\x6E\xBD\x6A\x90\xEF\x9B\xDB\x9A\xC5\x9C\x95\x8C\xC6\x9C\x2D\x3E\xB7\x78\x93\xF3\x99\xE1\x9E\xEE\x9C\x6E\x9C\xBC\x9E\xBB\x9D\x46\x3E\xBB\x7A\xB4\xFB\x8E\xCD\x9D\x77\x9D\x94\x9B\x05\x92\xBB\x90\xFB\x32\xEF\x56\x47\xFB\x9A\x8C\x52\xDE\x98\xA4\x9F\xE7\x9D\x82\x9E\xC1\x3B\xE9\x7C\x83\xEF\x9B\xF6\x9A\xDE\x9A\xCB\x9F\xE9\x9C\xD0\x93\x7F\x36\x9B\x71\xA3\x5F\x4F\x5E\x9C\x2D\x9C\x61\x9B\x61\x9F\x73\x9F\x8B\x3D\x9D\x7A\x9C\xEE\x80\xD6\x95\xE6\x9C\xA0\x9F\x99\x9F\xD8\x9D\x0C\x3E\xD7\x79\x8E\xF8\x86\xE0\x9D\xE6\x9D\xC4\x9C\x66\x9C\xED\x9C\xE1\x3E\xE3\x48\xA7\xD2\x9B\xF8\x79\xC5\x9F\x49\x76\x6E\x9E\x3D\x9F\xD1\x3E\xF3\x7B\x86\xDF\x92\xE9\x95\xED\x9B\xE0\x9F\x17\x9E\x6C\x9F\x32\x3E\xC4\x7C\xB4\xF8\x8A\xE8\x95\xF3\x99\xB0\x9D\xFA\x75\xFC\x9D\xF2\xC4\x12\x5D\x82\x47\x9C\x7F\x9A\x18\x98\x81\x8B\x2D\x40\xFC\x9C\x75\xC6\x27\x79\xA4\xC2\x78\xDD\x27\xE9\x99\x3A\x71\x24\x9E\x83\x00\xD1\x00\x5A\x7E\xA9\xDE\x80\xF0\x9E\x20\x73\x4D\x9F\x34\x00\xB1\x9F\x8D\x3C\xAA\x5B\x59\x64\x25\xF1\x70\xA0\x9F\xDC\x6B\x8A\x7F\x01\x9D\xF3\xB7\x68\x7E\xA0\x1E\x9C\x39\x8D\x6D\x7C\x6B\x98\x7F\x7A\xC8\x93\x6D\xC7\x6B\x1D\x83\xD5\x7B\xDD\x5A\x37\x73\xCC\x65\xBD\x77\xAF\x63\xF3\xBC\x58\x7E\x81\x04\x17\x7A\x75\xC8\x9F\x40\x9D\xF4\x65\x9B\x62\x84\x3F\xD9\x44\x87\x90\x97\x80\x7D\xBC\x7B\x41\x9E\x77\x7C\x8D\x45\x5F\xEF\x14\x7A\x83\xFE\x8F\x22\x90\xF3\x1D\x14\x7F\x37\x51\xC4\x9F\x70\x22\xA0\x48\xA4\xEC\x12\xD0\x9F\x9A\x79\xF3\x7A\x5D\x7C\x1B\x9D\xEA\xB6\x08\x98\x58\xFE\x8B\x15\x90\x3C\x96\x00\x7A\x2D\x7D\xA3\x7B\x00\xFA\x78\xEE\x42\xE8\x7D\xD0\x97\x9E\x78\x05\x7A\x0D\x93\x17\x6A\xB3\xEF\x1F\x74\x96\x67\x61\xD1\x91\xA2\x7C\x03\x7C\x89\x9C\x3D\x51\x09\xF9\x23\x7F\x80\x8B\x9A\xFC\x9A\xF2\x18\x45\x9C\x7E\x05\x0D\x9D\x02\xFA\x0E\xF4\x78\xD1\x9A\xFD\x93\x2D\x94\x69\x93\xE6\x9F\x58\x73\xF5\xF9\x0E\xF0\x6C\xE8\x80\xFD\x97\xDE\x05\xED\x79\x66\x7C\x00\x00\xC4\x3F\x84\x46\x86\xFF\x9D\xFD\x9B\x98\x7F\x43\x7D\x63\x7C\x2B\x9D\x1F\xF9\x4C\x7B\x41\xE9\x83\xFE\x94\xF9\x99\xF4\x75\x09\x7C\xEC\x77\xB5\x3F\xD5\xF2\x40\x34\x70\xD1\x7D\xFA\x9F\x92\x9D\xF7\x9E\xFB\x77\x45\xF7\x50\xBE\x37\xE8\x7D\xFC\x97\x7A\x7E\x47\x9C\xF3\x9E\x84\x7C\xB4\xF9\x66\xB5\x11\xFF\x89\x19\x93\xFD\x9D\x30\x1E\x85\x6C\xD7\x7C\x3C\x3A\x93\xF2\x55\xE8\x84\xD1\x78\xAC\x6E\x3C\x7F\x48\x9A\xD7\x9F\xEA\x22\xA5\x7F\xB1\xFE\x93\xD0\x7B\x52\x04\x23\x7D\xFE\x9E\x1F\x88\xFB\x3F\xCF\x74\xA0\x88\x4E\x80\x77\x03\x78\x00\xA0\x84\x90\xDE\x9F\x85\x39\x52\xF4\x50\x09\x73\xFF\x99\x33\x90\x02\xA3\x2D\x21\x5D\x81\xFE\x39\xF1\x7F\xAD\x85\x34\x00\xAB\x34\x96\x02\xA1\xBC\x1C\x33\x9D\x58\xD8\x18\x4A\x69\xE9\x8E\x08\x52\xF8\x98\x00\x02\x38\x92\xEC\x7D\x10\x0E\x83\x02\x01\xD9\x7F\x9C\x92\x88\x7C\xF0\x82\xD8\x82\x44\x9E\x58\xFA\x5B\x0E\x9F\x88\x6D\xC4\x70\x77\x86\xAD\x39\x09\xA1\x64\x92\x16\x02\xA9\x80\xA1\x6D\x52\x2C\x68\x03\xA2\x3E\x7F\x57\x7A\x18\xA0\x71\xF8\x40\x05\x1C\xF8\x6F\x89\x95\x03\x46\x4A\x7D\x09\xA1\x6E\x00\x72\x3F\xEF\x74\x98\x98\x66\xAF\x75\xA8\x97\x95\x9D\x42\x01\x6F\x00\x49\x40\xED\xA3\x52\xF4\x85\x05\x52\xA3\x3D\x8E\x7F\xCF\x87\x49\x22\xDF\x21\xCB\x1E\x8C\x55\x47\x7A\x84\x11\x01\xE9\x86\x1F\x78\xB0\x29\x89\xD7\x33\x6A\x26\x3A\x84\x3E\x04\x07\x7E\xEF\x6A\xF8\x64\x9B\x5E\x61\x40",
"\xEE\x0A\x17\xF4\x94\x7A\x8C\xE4\x85\x4F\x9D\x1B\x19\x28\xA0\x73\xED\x50\xB2\x17\x93\x65\xFB\x9F\xF5\x9B\x20\x03\x38\x00\x38\xA0\x28\x40\xF0\xEB\x57\xF6\x0E\xE5\x99\xF0\x02\xB6\x07\xD0\x82\x5B\x81\x3A\x40\x81\x02\x2B\x00\xB8\xF3\x95\xDF\x76\x05\xA3\xC9\x21\x0C\x87\x59\x07\x9B\x1C\x83\x01\xB2\x3B\x97\x27\x85\xAE\x78\x4E\x40\xD9\x06\xE7\x00\x78\x80\x8D\x3A\x83\xA7\x96\x76\x6A\xCF\x86\x13\xA0\x83\x00\xE9\x00\x12\x81\x82\xA0\x9D\x32\x73\x6D\x79\xF9\x7D\x1F\xA1\x93\x00\xEB\x00\x1A\x81\x82\xF7\x7A\x03\xA9\x10\x02\xA5\x71\x86\x7F\x40\x9E\x09\x01\x6D\x01\x22\x02\xA7\x79\x78\xEE\x64\xB0\x72\x73\x90\xE0\x06\xC2\xF5\x77\x6E\x6B\xE9\x8F\x07\x0B\x0A\xA1\xEE\x86\xCB\x76\xFA\x6C\x1D\xF7\x75\xB5\x1D\xBC\x73\xFB\x98\x0A\xA1\xCB\x79\x1E\xA1\x56\xA0\x7F\xF5\x12\x8B\x7B\x37\x94\x53\x9E\x68\x7A\xDB\x79\x8F\x30\x4B\x9E\x96\xE5\x37\x8A\x43\x03\xB3\x9B\x6F\xDF\x87\xD8\x7A\x69\x72\x77\x5D\x9C\x3C\xC8\xC9\x1E\xF2\x81\x80\x70\xCA\x98\x95\x70\x94\x61\x65\xA0\x48\x23\xCD\x81\x86\x03\xAB\xD9\x61\xE7\x9E\xEE\x9E\x2F\xA0\xFC\x7A\x95\xF5\x5A\xED\x7C\xD9\x7F\x38\x82\x0C\xA0\xDA\x7A\x86\x7B\x00\x87\xAA\xAD\x31\x81\x97\x03\xA6\x07\xAA\x69\x79\xC1\x70\x6F\x07\xE7\x7A\xE1\xDA\x58\x81\xAC\xDC\x88\x0F\x9E\x0C\xA0\xD6\x79\xC2\x07\x56\x9E\x72\x3E\xAC\xED\x58\xDB\x7A\x06\xA7\x61\x77\xD4\x79\x86\x73\x78\xA0\xEC\x40\xE9\x43\xB8\x6E\x32\xB5\x70\x10\xA1\xC3\x79\x3B\xA1\xE6\x7A\xBC\x0D\x44\xB2\x6B\x03\xA6\x08\xA9\x1E\x90\x27\x43\x23\x9F\xAA\x87\xF2\x40\xBC\x21\x99\xDB\x70\xB2\x72\x61\x7D\x13\xA1\x41\xA0\x7B\x7B\xBA\xF6\x30\xEC\x51\xEC\x52\x6D\x00\x27\x48\x50\x9D\xCB\x80\xC1\x34\x02\x39\x9B\x7C\x92\xED\x8F\xF1\x94\xB5\x9D\xCA\x9F\x52\x9E\xCE\x94\x04\x32\xF2\x7D\xBE\xE1\x9A\xBD\x93\x6A\x9F\x43\x92\x6C\x9E\x53\x9D\x28\xE7\x29\x6D\x8A\xF3\x9F\x08\xA2\xEB\x29\x24\xA3\x32\x9C\xFC\x9B\x53\x3E\xB5\x7D\x96\xF7\x97\xF5\x94\xDC\x99\x64\x9F\x88\x9F\xB4\x9D\xBC\x1D\xB0\x6D\x80\x80\x85\xD5\x9D\x7B\x9B\xD0\x8B\x99\x91\x5B\x9B\xAA\x3A\xDB\x46\xA6\xF6\x9E\xDF\x93\xDE\x9B\x17\x9D\x79\x9F\x79\x9C\xF1\x3C\x8A\x5D\x9C\xFC\x9D\xEF\x9D\xED\x9F\x78\x9C\xAE\x9D\xE1\x98\xC0\x35\xC0\x6D\x97\xD2\x83\xAE\x9E\x2F\x84\xD1\x8E\x4D\xA0\x1D\x90\x1B\x3B\xE2\x76\x9D\xEC\x96\xF5\x9F\xB1\x9D\x27\xA1\x76\x9E\xEB\x9C\xBB\x3E\xC8\x7C\xAE\xC0\x8E\xE8\x90\x4E\x9E\x1F\x8F\x0A\x96\x68\x9D\x14\x1C\xCB\x82\xA3\xF0\x93\xEE\x94\x12\xA1\xA9\x9D\xD5\x9D\x93\xA0\x75\x3B\xA9\x82\xBF\x04\xA7\xDC\x9A\x16\xA2\x47\x8B\x4A\x9F\xF5\x9D\xB1\x3E\xC0\x4C\xAD\xFC\x81\xEB\x91\xB8\x9B\xA4\x9F\x2F\x9F\x10\x9F\x3D\x3C\xFB\x82\xAC\xF0\x8B\xF8\x9E\x4E\x99\x62\x5D\x07\x9A\x65\x83\x73\x29\xB1\x65\xA9\xC9\x80\x94\x9B\xFB\x97\x1B\x99\x7A\x9B\xEF\x9A\xDC\x3C\xBF\x69\xA6\xDA\x99\x8F\x94\x5E\x9B\x3F\x98\x56\x9E\x2D\x9E\x2D\x69\x5F\x82\xB7\x97\x98\x09\xA4\xDD\x9C\xCA\x9D\x8C\x9E\x2B\x9F\x88\x41\xC1\x79\xAA\x04\xA9\xCB\x9C\xD3\x9D\xD4\x99\x98\x94\xCE\x82\x5F\x31\xB8\x25\x9C\xCB\x8D\xB7\x99\xDB\x9E\x24\x9E\x46\x95\xFB\x9E\x62\x3D\x86\x83\xA4\xF5\x89\x0D\xA6\xD6\x9C\xE9\x9F\x91\x9F\xB4\x9E\x57\x41\xD6\x7B\x74\xDB\x80\x84\x9B\x85\x9A\x2E\xA1\xC0\x9E\xBA\xA0\xD6\x3E\xA5\x82\xA7\x06\xB8\x0B\xA7\xF0\x9A\x2F\xA3\x49\x9E\x85\x9F\x7D\x41\xFD\x75\xB0\xC5\x9D\xB7\x9B\xDB\x93\xE6\x96\xC0\x9A\xE4\x86\x35\x41\xBA\x72\xA8\x70\x85\xFA\x90\xE4\x9C\x9A\x9D\x7E\x9F\x98\x9F\xDA\x3E\xCB\x7E\xBF\xF5\x8D\xFA\x9B\xE5\x98\xB2\x93\x6C\x9F\x3D\x96\x80\x36\xB2\x83\x84\xD1\x84\x34\x94\xB4\x95\xCA\x8E\x71\xA1\x8F\x9E\x78\x3D\x80\x77\xAA\xF6\x9F\xF0\x9C\xDA\x9F\xCA\x9E\x6B\x9F\xE7\xA0\xB0\x3D\xC0\x78\x89\xCC\x39\x6E\x90\x18\xA2\xC3\x9F\x4D\xA1\xB0\xA0\x39\x41\xE3\x82\xBB\x04\xA5\x0B\xA8\x12\xA5\xA9\x9F\x6A\xA0\xCB\x9C\xD1\x41\xB8\x7C\x91\xB2\x9D\x04\x9F\x1E\xA4\xE5\x9C\x77\xA0\x76\x9F\x72\x3B\x85\x7E\xBB\xF0\x9C\x0D\xA8\xE5\x9C\xDB\x9E\xC7\x9F\x5B\x9D\x31\x35\x95\xF2\x1C\x82\x8F\x44\x8E\x9C\x9C\xF9\x6C\x84\xA1\x9A\x9E\x12\x42\xB7\x7A\xB3\xF8\x99\xE9\x98\x1F\xA4\xC4\x9D\x13\x6E\xB2\x9F\xC3\x20\x8D\x84\xAD\xEF\x8F\xEC\x9F\xAA\x9F\x29\xA3\x5D\x9D\xA8\xA0\xF5\x38\xE3\x78\x96\xF6\x95\x0A\xA6\xC6\x9F\xE9\x9F\x3E\x9D\x60\x90\x3E\x35\xAB\x75\x91\x06\xAE\x96\x9F\x2F\x98\x5A\x99\xC0\x98\xCC\x98\x1C\x31\x9B\x6F\xA7\xD9\x9D\xBC\x92\x0D\x95\x1B\x84\xCF\x9A\x9B\x91\xB6\x41\xBF\x7C\x9F\x08",
"\xA1\xF2\x91\x22\xA3\xC8\x9E\xCC\x9F\xA9\xA0\x0F\x3E\x97\x84\xAC\xF7\x8F\xA3\x95\xAF\x29\x24\x9F\x77\x9E\xD1\xA0\x29\x29\x80\x84\xA5\x06\xBA\x09\xA7\x17\xA7\xBA\x9E\x59\xA1\x5C\x9F\x07\x42\xAC\x73\x8C\x06\xAB\x65\x90\xF5\x9D\x1C\x3E\xF2\x9D\x77\x9D\x3B\x42\xFE\x65\xB2\xCA\x94\x0C\xA6\x1E\x9A\x13\x9B\x6C\x9A\xFF\x9A\xDD\x03\xCD\x6E\xAF\x4B\x98\x12\xA8\x9F\x94\x19\x9E\xD1\x9F\x5E\x9E\xBA\x41\xA0\x7C\xA3\x08\xA2\xF1\x95\x22\xA0\x28\xA2\x9B\x9F\xE0\xA0\x16\x31\xD2\x6C\x9B\xCC\x95\xF8\x91\x1F\xA1\xA4\x9D\x6E\xA1\xBD\x9E\x87\x41\xFB\x84\x89\x06\xBD\x13\xAC\x17\xA0\x38\xA3\x4B\x7A\x17\x9B\xB4\x33\xDC\xFA\x76\xCE\x8A\x86\x34\x27\xA0\xFC\x9B\x6D\xA1\x04\x9F\x87\x42\xDF\x83\x89\x0A\xAA\xFA\x94\x22\xA5\xC6\x9C\x74\xA0\x47\xA1\x80\x2E\xEA\x6C\x9F\x57\x82\xCC\x96\xFB\x94\x0A\x86\x5B\x9B\xBF\x91\xA1\x41\xDA\x83\x85\xA6\x8F\x10\xA8\x1B\xA5\x30\xA0\xA2\xA1\xDD\xA0\x8A\x42\xAA\x83\x8A\x06\xBF\xE1\x9D\x1A\xA6\xCB\x9A\xA8\xA1\x75\x99\x1E\x3C\xC7\x67\x9F\x06\xA0\x9A\x99\x2A\xA0\xCA\x9E\x60\xA0\x56\xA1\x98\x42\xAE\x85\x9A\x0A\xB0\x15\xAC\x29\xA4\x4F\xA2\xA7\xA1\xFC\xA0\xB5\x42\x88\x6F\xA1\xFC\x96\xB3\x9E\x3C\x98\xD9\x81\x71\xA1\xC0\xA0\x78\x28\x85\x85\x97\xFC\x8F\xF9\x96\xD0\x9A\xE3\x9C\x01\x9F\x99\x9F\xD9\x3C\xD2\x84\x91\xF8\x91\xA4\x93\x79\x99\x3D\xA0\x31\x7C\xC5\x9A\x84\x39\xA8\xF3\x33\xA2\x9D\x15\xA3\x9E\x9A\x11\x95\x6A\x94\xE0\x9E\x8D\x28\x8D\x65\xBA\xB0\x94\xDE\x9E\x55\x9E\x7A\x9F\xEC\x95\x86\x9F\x43\x3C\xBA\x7E\x95\x74\x88\xA5\x9A\x31\x99\x4E\x35\xA5\xA0\x1F\x9F\x76\x42\xDD\x83\x84\xFC\x94\x0F\xAF\xEE\x9E\x3E\xA1\xBC\x9F\x59\xA1\xF3\x3E\x89\x84\xBD\xFA\x90\x14\xAC\x59\x9A\xFF\x95\xFB\x98\xD3\x60\xA3\x37\x8C\x28\xAC\xCF\x93\xA5\x95\x02\xA5\x1E\x01\x2D\xA0\x31\x87\xDC\xF6\x7D\xF0\x78\x09\x6B\xD3\x97\x0F\x07\x61\xA1\x2C\x9E\xDE\x06\xEE\x98\x77\x7C\xAE\x1C\x9C\xF4\x90\x00\x05\x7A\x7C\x20\x9E\xE0\x06\xA6\x3E\xE9\xCE\x04\xFB\x89\x08\x01\xB7\x87\xC7\x67\xAA\x94\x0E\x40\xCA\x3E\xFC\x4D\xBA\x9F\x90\xFB\x9E\x7B\x5E\x62\xA3\x32\x79\x20\x73\xFC\xF5\x7C\x80\xB4\xE9\x89\x98\x0E\x32\xA5\x80\x54\x54\x2C\x1E\x05\xFC\x00\x51\x43\xA4\xD3\x9A\x7E\x87\x91\x2F\x0C\x01\xCC\x2A\xFD\x28\x36\x4D\x3E\x20\xAA\x5C\x2A\x6A\x21\xEB\x80\x4B\x7D\xCE\xA0\xC3\x62\x5C\xC2\x0B\xB2\x04\x0D\xA7\x52\x97\xA8\x03\x46\x2A\xA2\x05\x9E\x2B\x4B\x43\xBB\xEE\x43\x0D\xB0\xC8\x20\x3C\x71\x21\x01\x3F\x00\x70\x82\xD1\xAD\x7D\x93\x1B\xB6\x6C\x00\x05\xD8\x6C\x6B\x3C\xD7\xA1\x08\x5E\xD0\x12\x07\xA4\x16\x3C\x8A\xBC\x27\x79\x02\xCB\x77\x89\x28\x9E\x3D\xFE\x00\x1B\xDB\x69\x0D\xBD\x14\x7B\x36\xA2\xD7\x48\x60\x01\xA9\xA1\xEF\x4A\x63\x86\x9A\x48\x26\x1B\xA2\x38\x29\xED\x9F\x4B\x7D\x7E\x62\x27\xED\x40\x54\xAE\xEB\x5D\x19\xA0\x79\x87\x4E\x83\xD9\xA1\x2B\x72\x81\x5B\x46\xC4\x41\xAD\x1E\xB1\x97\x92\x2E\x52\x29\xE3\x29\x48\x65\x25\x59\x16\x03\x18\x22\x03\x1C\xA2\x56\x77\x44\x2A\xE1\x83\x0B\x1D\x88\x07\xA4\x7B\x93\x49\x31\xD8\x58\x33\xA3\xEA\x82\x41\x01\xB6\xA1\x8D\x43\xF5\x86\x94\x65\x37\x4A\x35\xF1\x05\x67\xA3\xCF\xA1\x99\x2B\x41\x43\x8F\x44\x70\x0D\xBA\xEE\x61\xAE\x4E\x01\x4B\xD1\xA1\xFB\x5E\x98\x43\xE0\xE1\x67\x48\x29\x1A\xAD\xAF\x1F\x40\x2A\x15\xA1\x48\x05\x77\x03\x6F\xA3\x14\x0D\xB2\x1A\xAE\x3A\xA6\xE5\x82\x00\x04\xC6\xA1\x64\xBC\x30\x17\xBF\xCC\x96\x1B\xAF\x31\xA1\xE1\x05\xE5\xA0\xBC\x63\xB8\x43\x84\xDD\x53\x49\x2E\x7E\x7C\x48\x91\x70\x28\xE4\x29\xAA\x2C\x9C\x43\xCD\x86\x9C\x0D\x17\x8F\x24\x38\x00\x68\xA1\xD4\xA0\xEB\x5E\xA3\x43\xB6\xEF\x65\x0E\xBB\xDD\x57\x3A\xA5\xE4\x99\x4B\x35\xE0\xA1\x5E\xEE\x43\x87\xAF\x0B\x05\x1E\xAE\xE8\x0B\x75\xA2\xDC\x5A\xA5\xA1\xB3\x43\xF1\x55\xB0\x0E\xBE\x1A\x02\x3B\xA7\x5D\x26\xD0\xA1\xDA\xA1\xBB\xF0\x7E\x1B\x00\x62\x7F\x3B\x3C\x46\x05\x67\xA3\xA4\x04\xBA\xA1\xB7\x52\x06\x1E\x87\x76\x77\x1F\x73\x3F\xA1\xA5\x85\xB1\x94\xF7\xA1\x0E\x3D\x70\x87\x98\x64\x2B\x21\x7C\x3D\xA6\x4D\x2B\xAD\x29\xC7\xA1\xA4\x3E\x79\x14\x36\x4B\x29\xDB\x75\xA2\x28\xBE\x70\xD2\x00\xDE\xA1\x57\xFA\x21\xFD\x1C\x00\x1A\x19\xA5\xDE\x43\xAE\x71\x9D\x71\xBA\x72\x67\x03\x3D\x87\xA6\xE1\x71\x70\x8E\x5F\x7D\x7E\xA1\x2E\x97\xF7\x72\x75\x0A\x2C\xCC\x51\xEB\x85\x25\x98\xEE\x5E\xAF\x7A\x40\x00\xC0\x7A\x11\xE1\x16\x88\xA3\xF4\x70\x2B\x29\x41\xA1\xBC\x74\x64\x7A\xD2\x7A\xF6\xF5\x5F\x81\x8D\x95\x61\x07\xA4\x11",
"\xA7\x18\xA2\x78\x97\x64\xA0\x25\xFC\x75\xC9\x22\x10\xBE\x56\x95\x40\xA5\x84\xA2\x27\x93\x47\x84\x1C\x44\x8F\xB3\x7D\xD6\x7B\x07\xA4\x0F\xA4\x13\x6F\x97\x7B\x8B\x1F\x61\xF6\x46\x81\x32\x01\x03\xB3\x72\xCA\x9F\x1B\x53\x0C\xA2\x4A\x7D\x24\x44\xAB\xCC\x66\x10\xBB\x20\xAB\x52\x91\x85\xA3\x0E\xA3\x62\x7B\xFC\x40\xCE\xCC\x54\xA5\x35\x9C\x9C\x51\x67\x88\xA1\xA2\x78\xB4\x11\x36\x44\xD4\xCC\x5F\x23\x99\x21\xA5\x9B\x31\xC7\x78\x93\x73\x1D\x7B\xB7\xF6\x3D\xEC\x54\xA5\x3D\x06\xAE\x2C\x76\x8A\xA1\x34\x97\x1A\xA2\x4A\x44\xB7\x88\xA0\xEB\x88\x21\xAA\x43\xA2\x1F\xA0\x14\xA3\x1E\xA2\x14\x41\xE3\x81\x9D\xB8\x66\x22\xA0\x88\x6F\xBF\x73\x2B\x93\x14\x7B\xEB\xF5\x0C\xEC\x5A\x87\x8E\xB0\x7E\x6A\x7D\x1E\xA0\x3A\xA1\xA0\x63\xEA\x40\xF7\x7B\x66\x11\xA8\x64\x99\x44\xA6\xC8\x72\x1A\xA3\x13\xA2\xB0\xF5\x7A\x88\x88\xC1\x7C\x23\xA2\x5E\x7E\xD4\x7B\x3B\xA0\xFE\x72\x82\x44\xF5\x88\xA1\x99\x60\x30\x78\x47\xA2\xC4\x78\x9E\x7A\x86\xA0\x7E\x44\x88\x82\x80\x37\x18\x07\xA1\x42\xA2\x92\xA1\x91\x72\xA4\x01\x1A\x44\xAC\x0C\x89\x12\xA5\xAD\x7E\x46\xA4\xD4\x7B\x44\xA0\xAB\x65\x4B\x40\x86\x02\x27\xD7\x7D\x24\xA2\x65\x77\x93\xA2\x62\x73\xE6\x76\x88\x44\xDC\x88\x97\x12\xB8\x08\xA7\x4F\x70\xA5\x71\x29\xA0\x3A\xA2\xAD\x44\x85\x89\xA0\x12\xAB\x22\xA2\x4A\xA2\x96\xA0\xAE\x7A\x4C\xA2\x3A\xCB\x6F\xED\x65\x11\xBE\x24\xAA\x4B\xA7\x95\xA0\x63\x73\x26\xA2\x6D\x44\xF5\xED\x4C\x12\xB8\x79\x7E\x48\xA0\xB8\x06\x42\xA1\x48\xA2\xB9\x44\xE8\x88\x86\x12\xBA\x22\xA8\x43\xA0\x99\xA3\x67\x6C\x5A\xA2\xE7\x40\x85\x27\x38\x6E\x2C\x16\x28\x3D\xA2\xF2\x9E\xA9\x02\x62\xA2\xD2\x44\xC8\x06\x09\xDB\x66\x08\x0B\x6C\x7D\x8A\xA0\x38\xA2\x0C\xA2\x69\x44\xD4\x89\xAB\x11\xA3\x25\xAE\x44\xA5\x94\xA3\x17\xA3\x2D\x7B\xC6\x40\x9C\x81\x8F\x01\xB8\x25\xA6\xD4\x7D\x98\xA3\x73\x73\x63\xA2\x3B\x25\xA4\x89\xBB\x11\xB8\xB4\x75\x0C\xA5\x85\xA3\x46\xA1\xA1\x01\xBB\x43\x88\x88\xA4\xF1\x5C\x26\xA1\x50\xA5\x8E\x99\xBD\x2C\xD1\x7D\x05\x45\x82\x8A\xA4\x47\x67\x09\x29\x00\x03\x7D\xA0\x52\x71\x34\x05\x72\x53\x1F\xB2\x2B\x29\x0F\xEC\x68\xBB\x28\xA9\x29\x43\xA3\xD7\x4C\x27\x61\x10\x8A\xAC\x5D\x2C\x07\x77\xD0\x1F\xB1\x6F\xB8\x87\x0E\x71\x0A\x00\x0E\x8A\xA3\xAA\x80\xF7\x91\xB0\x48\x8B\xA2\x5D\x72\xF2\x68\xA4\x05\x03\x89\xAC\x02\xBD\x05\xA8\x3B\x01\xA1\xA0\x11\x5E\x17\x71\x06\x01\x55\x87\x87\xD1\x9F\x1A\xA0\x89\x6F\x44\x28\xF2\xA0\xA4\x39\x9E\x43\xCD\x87\xA0\x0E\xAF\x1E\xA2\x2E\x71\x7A\xA1\xA6\x67\xE9\xA1\x1D\xE2\x32\x8A\x91\x84\x74\x29\xA9\x39\xA0\x72\x28\xEB\xA1\x3B\x27\x3E\x45\xAC\xFC\x7D\xC0\x90\x1B\x5D\x33\xA5\x7C\xA2\x76\x6E\xF0\xA1\xE6\x43\xFF\x89\x87\x12\xAD\xD3\x71\x08\xA6\xFD\x58\x94\x60\x58\xA2\x4C\x44\xF9\x89\x9D\x10\xBB\xC5\x7E\x0A\xA6\xBF\x78\x56\xA3\x5E\xA2\xD6\x44\xB3\x89\x8B\x13\xBA\xB3\x70\x55\x76\x85\xA3\xE9\x80\x4C\x9E\x11\xE1\x5F\x8A\xAD\xED\x9E\x25\xA3\x6A\x7F\x9D\xA1\xA9\x7A\xBB\x28\x9A\x3C\xCF\x04\x11\x03\xA8\x1F\x33\x0D\xA1\xFE\x74\x1D\x56\x6B\xA0\x9E\xF6\x6A\x8A\x93\x3C\x8C\x23\xA7\x4D\xA3\xAC\xA1\x46\xA1\x37\x7B\xF3\x0C\xF2\x66\xB7\x11\xB6\xB1\x79\x47\xA2\x9F\xA2\xD1\x77\x75\x7B\x49\xEF\x69\x95\x47\xF2\x9E\x2A\xA8\x4F\xA5\xB0\xA1\x3B\xA3\x7D\xA2\xAD\xF6\x0D\x89\xB1\x11\xB2\x03\xAD\x67\x7F\x88\x9A\x5E\xA2\xEE\x82\xF5\xF5\x49\x89\x8B\x12\xBC\x27\xAD\x47\xA3\x1B\xA3\xAC\x61\x40\xA2\xDC\xF5\x17\x8B\xA5\xC5\x8B\xB0\x76\x58\xA1\x22\xA3\x77\x8D\x53\xA2\x73\xCB\x7B\xCB\x52\xDA\x77\x29\x62\x5A\xA7\x69\x9D\x66\xA3\xBE\xA2\x9C\x45\x92\x8B\xA8\x12\xB9\xAE\x76\x10\x03\xBB\x7A\x65\xA3\xC6\xA2\x96\x44\xBF\x89\x98\x13\xA7\x08\xA5\x5E\x7A\x95\xA0\x6B\xA2\xDC\xA2\xE9\xF6\x1B\x8B\x91\x16\xAF\xB2\x76\xB5\x66\x96\xA2\x41\x00\x53\xA0\xA1\x45\xC0\x8B\x97\xDB\x6F\x23\xAD\x4F\xA6\x6A\x66\x30\xA2\xA4\x83\x94\x44\x84\x8B\xB9\x16\xBF\xC5\x67\xF4\x77\xB8\x73\x8B\x7B\x8A\x72\xB8\x0D\x4F\x89\x89\x17\xA0\xB0\x7F\x6C\x78\x98\xA3\x64\xA2\xDC\x06\x0F\x41\xB7\x8B\x9C\x17\xAD\xB2\x7E\x57\xA1\xDA\x7A\x3C\xA2\x83\x00\x60\xE5\x79\x8A\x8A\x17\xBD\x2E\xAB\x5B\xA5\x21\xA3\xAC\x60\x6F\x30\x2E\x45\x8A\x8A\xBD\xE7\x9F\x07\x03\x95\x68\xD7\x87\x0D\x72\x88\x83\xF7\xC6\x04\xEE\x4B\x2E\x79\xB8\x75\xF7\x48\xE1\x7A\x9D\x76\xD2\x65\x0C\xF7\x28\xB1\x25\x39\x97\x2F\xAA\x97\x6A\x86\x16\xE7\x64\x39\x00\x85\x3A\x17\xEE\x7D\x17\xBC\xB8\x7B\xBC\x9F\x9B\x72\x7F",
"\xA3\x86\x61\x75\x59\x71\x8B\xBB\x47\x75\x2A\xA3\x08\xA3\x73\x98\x1D\x93\x9D\x6C\x11\xF7\x46\xEC\x54\xA5\x3A\x54\x67\x53\x64\xB4\x75\xA7\x94\x67\x7B\xE4\x45\xB1\x8B\x84\x17\xB6\x82\x79\x88\x6F\x85\xA3\xE0\x9F\x6F\x50\x1E\x46\xB1\x73\xB7\xDB\x65\x2D\xA1\x10\xA1\x93\xA1\x5C\xA3\x77\x03\xA8\xE5\x25\xC9\x6A\x96\x7F\xE4\x95\x77\x01\x94\x9E\x40\x01\x51\x9E\x5E\x34\xF4\xB2\x74\x2A\x79\x30\xA1\x5C\xA6\xB4\xA3\x08\x8E\xD4\xA2\x88\xD8\x53\x88\xB4\xA9\x90\x2E\xAB\x99\x6A\xD5\x78\x96\x7A\x9F\x72\x88\x45\xD7\x8B\x9B\xD8\x63\x23\xAB\x58\xA6\xD3\x79\x8A\xA3\x4C\x9B\xF4\xF6\x42\x8B\xBC\x10\xAD\x2E\xA4\x62\xA2\x8E\xA3\x40\x00\x1F\x71\xDC\xF5\x4F\x8C\xA6\x91\x91\x32\xAE\x63\xA3\xB9\x79\x97\x7B\x43\x7B\x06\x01\x43\xEB\x51\xD1\x85\x32\xA5\x6D\x7A\xD8\x79\x8F\xA3\x16\xA3\xCD\x44\x89\x1E\x30\x03\xB9\x32\xAC\x99\x68\xDD\x7B\x72\xA2\x53\xA2\x51\x44\xA9\x8B\xB4\x16\xA3\x08\x06\x5B\xA2\x8E\x9B\x85\xA2\xC6\x6C\x3C\x46\xEF\x8C\xAE\x15\xA0\x32\xA3\x8F\x6E\x1F\xA0\x13\xA0\xFF\x7A\x5A\x46\x8B\x63\x8C\x13\xBA\x33\xA0\x0E\xA0\x9E\xA1\xD2\x64\xE3\xA2\x03\x01\x48\x8B\x87\xD1\x81\x34\xAA\x51\x97\xC8\xA2\x3B\xA3\x42\xA3\x6F\x45\xCE\x8B\xBB\x01\xAE\x32\xAD\x66\xA0\xC4\xA2\x22\xA2\x2F\xA2\x90\x46\xDF\xB1\x42\x65\x79\x2E\xA2\x64\x74\xD2\xA2\x91\xA3\x40\x7B\xC4\xF6\x70\x8C\xB0\x11\xB3\x2D\xAC\xDB\x05\xBE\xA3\x7D\x5E\x46\xA3\x7F\x37\xAB\x8C\x80\x2E\x66\x70\x84\x06\x00\x2C\x6C\xA5\x1C\x05\xA3\x07\xF7\x0C\x8C\x88\xBA\x6E\x30\xAB\xA7\x19\xC0\xA2\x41\x01\x7D\x7B\x5A\xCB\x28\x8D\x80\x92\x83\x34\xA0\x70\x7C\x00\x70\xE7\x64\x03\xA3\x7C\xD9\x05\xEE\x7C\x17\xB1\x35\xA6\x70\x7E\x36\x99\x93\x5C\x84\x7B\xE3\x44\x83\x02\x25\x13\xAB\x34\xA5\x69\xA1\xCF\xA0\x7B\xA3\xF2\xA2\xD9\x44\x91\x76\x53\xD8\x6C\x33\xAF\x69\xA7\xD6\x79\x5B\xA3\x4C\xA3\x71\x46\xC1\x8C\x92\x15\xAE\x1C\x02\x61\xA0\x95\x9C\x8A\xA0\x23\x71\xD4\x45\xC9\x8C\xBC\xD8\x7A\x08\xA8\xBE\x9A\xC6\x7B\xA4\xA3\xAA\x87\x98\x46\xAB\x88\xAE\xD8\x63\x37\xAF\x66\x7A\xBE\xA2\xBB\xA3\x77\xA3\xF0\x46\xF1\x8D\xB2\x1B\xB3\x37\xA4\x6F\xA5\xDE\xA2\xBD\xA3\x7B\xA3\xF8\x46\xF9\x8D\xBA\x1B\xBB\x37\xAC\x6F\xA5\xDF\xA2\xBF\xA3\x7F\xA3\x33\x78\x00",
};

		void WfGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

		extern void SetDefaultClassMember(vl::collections::List<vl::Ptr<WfDeclaration>>& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
		extern void UnescapeFormatString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
		extern void UnescapeString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class WfTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(WfClassMemberKind& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Static") { member=WfClassMemberKind::Static; return true; }
					else if(token->GetValue()==L"Override") { member=WfClassMemberKind::Override; return true; }
					else if(token->GetValue()==L"Normal") { member=WfClassMemberKind::Normal; return true; }
					else { member=WfClassMemberKind::Static; return false; }
				}
				member=WfClassMemberKind::Static;
				return false;
			}

			bool SetMember(WfPredefinedTypeName& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Void") { member=WfPredefinedTypeName::Void; return true; }
					else if(token->GetValue()==L"Object") { member=WfPredefinedTypeName::Object; return true; }
					else if(token->GetValue()==L"Interface") { member=WfPredefinedTypeName::Interface; return true; }
					else if(token->GetValue()==L"Int") { member=WfPredefinedTypeName::Int; return true; }
					else if(token->GetValue()==L"UInt") { member=WfPredefinedTypeName::UInt; return true; }
					else if(token->GetValue()==L"Float") { member=WfPredefinedTypeName::Float; return true; }
					else if(token->GetValue()==L"Double") { member=WfPredefinedTypeName::Double; return true; }
					else if(token->GetValue()==L"String") { member=WfPredefinedTypeName::String; return true; }
					else if(token->GetValue()==L"Char") { member=WfPredefinedTypeName::Char; return true; }
					else if(token->GetValue()==L"Bool") { member=WfPredefinedTypeName::Bool; return true; }
					else { member=WfPredefinedTypeName::Void; return false; }
				}
				member=WfPredefinedTypeName::Void;
				return false;
			}

			bool SetMember(WfMapWritability& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Readonly") { member=WfMapWritability::Readonly; return true; }
					else if(token->GetValue()==L"Writable") { member=WfMapWritability::Writable; return true; }
					else { member=WfMapWritability::Readonly; return false; }
				}
				member=WfMapWritability::Readonly;
				return false;
			}

			bool SetMember(WfFunctionAnonymity& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Named") { member=WfFunctionAnonymity::Named; return true; }
					else if(token->GetValue()==L"Anonymous") { member=WfFunctionAnonymity::Anonymous; return true; }
					else { member=WfFunctionAnonymity::Named; return false; }
				}
				member=WfFunctionAnonymity::Named;
				return false;
			}

			bool SetMember(WfClassKind& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Class") { member=WfClassKind::Class; return true; }
					else if(token->GetValue()==L"Interface") { member=WfClassKind::Interface; return true; }
					else { member=WfClassKind::Class; return false; }
				}
				member=WfClassKind::Class;
				return false;
			}

			bool SetMember(WfConstructorType& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Undefined") { member=WfConstructorType::Undefined; return true; }
					else if(token->GetValue()==L"SharedPtr") { member=WfConstructorType::SharedPtr; return true; }
					else if(token->GetValue()==L"RawPtr") { member=WfConstructorType::RawPtr; return true; }
					else { member=WfConstructorType::Undefined; return false; }
				}
				member=WfConstructorType::Undefined;
				return false;
			}

			bool SetMember(WfEnumKind& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Normal") { member=WfEnumKind::Normal; return true; }
					else if(token->GetValue()==L"Flag") { member=WfEnumKind::Flag; return true; }
					else { member=WfEnumKind::Normal; return false; }
				}
				member=WfEnumKind::Normal;
				return false;
			}

			bool SetMember(WfEnumItemKind& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Constant") { member=WfEnumItemKind::Constant; return true; }
					else if(token->GetValue()==L"Intersection") { member=WfEnumItemKind::Intersection; return true; }
					else { member=WfEnumItemKind::Constant; return false; }
				}
				member=WfEnumItemKind::Constant;
				return false;
			}

			bool SetMember(WfAPConst& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Readonly") { member=WfAPConst::Readonly; return true; }
					else if(token->GetValue()==L"Writable") { member=WfAPConst::Writable; return true; }
					else { member=WfAPConst::Readonly; return false; }
				}
				member=WfAPConst::Readonly;
				return false;
			}

			bool SetMember(WfAPObserve& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Observable") { member=WfAPObserve::Observable; return true; }
					else if(token->GetValue()==L"NotObservable") { member=WfAPObserve::NotObservable; return true; }
					else { member=WfAPObserve::Observable; return false; }
				}
				member=WfAPObserve::Observable;
				return false;
			}

			bool SetMember(WfForEachDirection& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Normal") { member=WfForEachDirection::Normal; return true; }
					else if(token->GetValue()==L"Reversed") { member=WfForEachDirection::Reversed; return true; }
					else { member=WfForEachDirection::Normal; return false; }
				}
				member=WfForEachDirection::Normal;
				return false;
			}

			bool SetMember(WfLiteralValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Null") { member=WfLiteralValue::Null; return true; }
					else if(token->GetValue()==L"True") { member=WfLiteralValue::True; return true; }
					else if(token->GetValue()==L"False") { member=WfLiteralValue::False; return true; }
					else { member=WfLiteralValue::Null; return false; }
				}
				member=WfLiteralValue::Null;
				return false;
			}

			bool SetMember(WfUnaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Positive") { member=WfUnaryOperator::Positive; return true; }
					else if(token->GetValue()==L"Negative") { member=WfUnaryOperator::Negative; return true; }
					else if(token->GetValue()==L"Not") { member=WfUnaryOperator::Not; return true; }
					else { member=WfUnaryOperator::Positive; return false; }
				}
				member=WfUnaryOperator::Positive;
				return false;
			}

			bool SetMember(WfBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Assign") { member=WfBinaryOperator::Assign; return true; }
					else if(token->GetValue()==L"Index") { member=WfBinaryOperator::Index; return true; }
					else if(token->GetValue()==L"Union") { member=WfBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Intersect") { member=WfBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"FailedThen") { member=WfBinaryOperator::FailedThen; return true; }
					else if(token->GetValue()==L"Exp") { member=WfBinaryOperator::Exp; return true; }
					else if(token->GetValue()==L"Add") { member=WfBinaryOperator::Add; return true; }
					else if(token->GetValue()==L"Sub") { member=WfBinaryOperator::Sub; return true; }
					else if(token->GetValue()==L"Mul") { member=WfBinaryOperator::Mul; return true; }
					else if(token->GetValue()==L"Div") { member=WfBinaryOperator::Div; return true; }
					else if(token->GetValue()==L"Mod") { member=WfBinaryOperator::Mod; return true; }
					else if(token->GetValue()==L"Shl") { member=WfBinaryOperator::Shl; return true; }
					else if(token->GetValue()==L"Shr") { member=WfBinaryOperator::Shr; return true; }
					else if(token->GetValue()==L"LT") { member=WfBinaryOperator::LT; return true; }
					else if(token->GetValue()==L"GT") { member=WfBinaryOperator::GT; return true; }
					else if(token->GetValue()==L"LE") { member=WfBinaryOperator::LE; return true; }
					else if(token->GetValue()==L"GE") { member=WfBinaryOperator::GE; return true; }
					else if(token->GetValue()==L"EQ") { member=WfBinaryOperator::EQ; return true; }
					else if(token->GetValue()==L"NE") { member=WfBinaryOperator::NE; return true; }
					else if(token->GetValue()==L"Xor") { member=WfBinaryOperator::Xor; return true; }
					else if(token->GetValue()==L"And") { member=WfBinaryOperator::And; return true; }
					else if(token->GetValue()==L"Or") { member=WfBinaryOperator::Or; return true; }
					else { member=WfBinaryOperator::Assign; return false; }
				}
				member=WfBinaryOperator::Assign;
				return false;
			}

			bool SetMember(WfRangeBoundary& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Inclusive") { member=WfRangeBoundary::Inclusive; return true; }
					else if(token->GetValue()==L"Exclusive") { member=WfRangeBoundary::Exclusive; return true; }
					else { member=WfRangeBoundary::Inclusive; return false; }
				}
				member=WfRangeBoundary::Inclusive;
				return false;
			}

			bool SetMember(WfSetTesting& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"In") { member=WfSetTesting::In; return true; }
					else if(token->GetValue()==L"NotIn") { member=WfSetTesting::NotIn; return true; }
					else { member=WfSetTesting::In; return false; }
				}
				member=WfSetTesting::In;
				return false;
			}

			bool SetMember(WfTypeCastingStrategy& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Strong") { member=WfTypeCastingStrategy::Strong; return true; }
					else if(token->GetValue()==L"Weak") { member=WfTypeCastingStrategy::Weak; return true; }
					else { member=WfTypeCastingStrategy::Strong; return false; }
				}
				member=WfTypeCastingStrategy::Strong;
				return false;
			}

			bool SetMember(WfTypeTesting& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"IsType") { member=WfTypeTesting::IsType; return true; }
					else if(token->GetValue()==L"IsNotType") { member=WfTypeTesting::IsNotType; return true; }
					else if(token->GetValue()==L"IsNull") { member=WfTypeTesting::IsNull; return true; }
					else if(token->GetValue()==L"IsNotNull") { member=WfTypeTesting::IsNotNull; return true; }
					else { member=WfTypeTesting::IsType; return false; }
				}
				member=WfTypeTesting::IsType;
				return false;
			}

			bool SetMember(WfObserveType& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"SimpleObserve") { member=WfObserveType::SimpleObserve; return true; }
					else if(token->GetValue()==L"ExtendedObserve") { member=WfObserveType::ExtendedObserve; return true; }
					else { member=WfObserveType::SimpleObserve; return false; }
				}
				member=WfObserveType::SimpleObserve;
				return false;
			}

			bool SetMember(WfModuleType& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Module") { member=WfModuleType::Module; return true; }
					else if(token->GetValue()==L"Unit") { member=WfModuleType::Unit; return true; }
					else { member=WfModuleType::Module; return false; }
				}
				member=WfModuleType::Module;
				return false;
			}

			void Fill(vl::Ptr<WfClassMember> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->kind, obj->GetMember(L"kind"), tokens);
			}

			void Fill(vl::Ptr<WfType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfAttribute> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->category, obj->GetMember(L"category"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->classMember, obj->GetMember(L"classMember"), tokens);
			}

			void Fill(vl::Ptr<WfPredefinedType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfTopQualifiedType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfReferenceType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfRawPointerType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->element, obj->GetMember(L"element"), tokens);
			}

			void Fill(vl::Ptr<WfSharedPointerType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->element, obj->GetMember(L"element"), tokens);
			}

			void Fill(vl::Ptr<WfNullableType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->element, obj->GetMember(L"element"), tokens);
			}

			void Fill(vl::Ptr<WfEnumerableType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->element, obj->GetMember(L"element"), tokens);
			}

			void Fill(vl::Ptr<WfMapType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->writability, obj->GetMember(L"writability"), tokens);
				SetMember(tree->key, obj->GetMember(L"key"), tokens);
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfFunctionType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->result, obj->GetMember(L"result"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfChildType> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfNamespaceDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->declarations, obj->GetMember(L"declarations"), tokens);
			}

			void Fill(vl::Ptr<WfFunctionArgument> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
			}

			void Fill(vl::Ptr<WfFunctionDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->anonymity, obj->GetMember(L"anonymity"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
				SetMember(tree->returnType, obj->GetMember(L"returnType"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfVariableDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfEventDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfPropertyDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				SetMember(tree->getter, obj->GetMember(L"getter"), tokens);
				SetMember(tree->setter, obj->GetMember(L"setter"), tokens);
				SetMember(tree->valueChangedEvent, obj->GetMember(L"valueChangedEvent"), tokens);
			}

			void Fill(vl::Ptr<WfBaseConstructorCall> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfConstructorDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->constructorType, obj->GetMember(L"constructorType"), tokens);
				SetMember(tree->baseConstructorCalls, obj->GetMember(L"baseConstructorCalls"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfDestructorDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfClassDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->kind, obj->GetMember(L"kind"), tokens);
				SetMember(tree->constructorType, obj->GetMember(L"constructorType"), tokens);
				SetMember(tree->baseTypes, obj->GetMember(L"baseTypes"), tokens);
				if(SetMember(tree->declarations, obj->GetMember(L"declarations"), tokens))
				{
					SetDefaultClassMember(tree->declarations, tokens);
				}
			}

			void Fill(vl::Ptr<WfEnumItemIntersection> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfEnumItem> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->kind, obj->GetMember(L"kind"), tokens);
				SetMember(tree->number, obj->GetMember(L"number"), tokens);
				SetMember(tree->intersections, obj->GetMember(L"intersections"), tokens);
			}

			void Fill(vl::Ptr<WfEnumDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->kind, obj->GetMember(L"kind"), tokens);
				SetMember(tree->items, obj->GetMember(L"items"), tokens);
			}

			void Fill(vl::Ptr<WfStructMember> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
			}

			void Fill(vl::Ptr<WfStructDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->members, obj->GetMember(L"members"), tokens);
			}

			void Fill(vl::Ptr<WfVirtualDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expandedDeclarations, obj->GetMember(L"expandedDeclarations"), tokens);
			}

			void Fill(vl::Ptr<WfAutoPropertyDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				SetMember(tree->configConst, obj->GetMember(L"configConst"), tokens);
				SetMember(tree->configObserve, obj->GetMember(L"configObserve"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfCastResultInterfaceDeclaration> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->baseType, obj->GetMember(L"baseType"), tokens);
				SetMember(tree->elementType, obj->GetMember(L"elementType"), tokens);
			}

			void Fill(vl::Ptr<WfBreakStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfContinueStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfReturnStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfDeleteStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfRaiseExceptionStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfIfStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->trueBranch, obj->GetMember(L"trueBranch"), tokens);
				SetMember(tree->falseBranch, obj->GetMember(L"falseBranch"), tokens);
			}

			void Fill(vl::Ptr<WfWhileStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->condition, obj->GetMember(L"condition"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfTryStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->protectedStatement, obj->GetMember(L"protectedStatement"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->catchStatement, obj->GetMember(L"catchStatement"), tokens);
				SetMember(tree->finallyStatement, obj->GetMember(L"finallyStatement"), tokens);
			}

			void Fill(vl::Ptr<WfBlockStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->statements, obj->GetMember(L"statements"), tokens);
			}

			void Fill(vl::Ptr<WfVariableStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->variable, obj->GetMember(L"variable"), tokens);
			}

			void Fill(vl::Ptr<WfExpressionStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfVirtualStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expandedStatement, obj->GetMember(L"expandedStatement"), tokens);
			}

			void Fill(vl::Ptr<WfForEachStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->direction, obj->GetMember(L"direction"), tokens);
				SetMember(tree->collection, obj->GetMember(L"collection"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfSwitchCase> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfSwitchStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->caseBranches, obj->GetMember(L"caseBranches"), tokens);
				SetMember(tree->defaultBranch, obj->GetMember(L"defaultBranch"), tokens);
			}

			void Fill(vl::Ptr<WfCoProviderStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfCoroutineStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfCoPauseStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfCoOperatorStatement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->varName, obj->GetMember(L"varName"), tokens);
				SetMember(tree->opName, obj->GetMember(L"opName"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfThisExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfTopQualifiedExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfReferenceExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfOrderedNameExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfOrderedLambdaExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->body, obj->GetMember(L"body"), tokens);
			}

			void Fill(vl::Ptr<WfMemberExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfChildExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfLiteralExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfFloatingExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfIntegerExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfStringExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				if(SetMember(tree->value, obj->GetMember(L"value"), tokens))
				{
					UnescapeString(tree->value, tokens);
				}
			}

			void Fill(vl::Ptr<WfUnaryExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
				SetMember(tree->operand, obj->GetMember(L"operand"), tokens);
			}

			void Fill(vl::Ptr<WfBinaryExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
			}

			void Fill(vl::Ptr<WfLetVariable> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfLetExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->variables, obj->GetMember(L"variables"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfIfExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->condition, obj->GetMember(L"condition"), tokens);
				SetMember(tree->trueBranch, obj->GetMember(L"trueBranch"), tokens);
				SetMember(tree->falseBranch, obj->GetMember(L"falseBranch"), tokens);
			}

			void Fill(vl::Ptr<WfRangeExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->begin, obj->GetMember(L"begin"), tokens);
				SetMember(tree->beginBoundary, obj->GetMember(L"beginBoundary"), tokens);
				SetMember(tree->end, obj->GetMember(L"end"), tokens);
				SetMember(tree->endBoundary, obj->GetMember(L"endBoundary"), tokens);
			}

			void Fill(vl::Ptr<WfSetTestingExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->test, obj->GetMember(L"test"), tokens);
				SetMember(tree->element, obj->GetMember(L"element"), tokens);
				SetMember(tree->collection, obj->GetMember(L"collection"), tokens);
			}

			void Fill(vl::Ptr<WfConstructorArgument> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->key, obj->GetMember(L"key"), tokens);
				SetMember(tree->value, obj->GetMember(L"value"), tokens);
			}

			void Fill(vl::Ptr<WfConstructorExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfInferExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
			}

			void Fill(vl::Ptr<WfTypeCastingExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->strategy, obj->GetMember(L"strategy"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
			}

			void Fill(vl::Ptr<WfTypeTestingExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->test, obj->GetMember(L"test"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
			}

			void Fill(vl::Ptr<WfTypeOfTypeExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
			}

			void Fill(vl::Ptr<WfTypeOfExpressionExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfAttachEventExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->event, obj->GetMember(L"event"), tokens);
				SetMember(tree->function, obj->GetMember(L"function"), tokens);
			}

			void Fill(vl::Ptr<WfDetachEventExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->event, obj->GetMember(L"event"), tokens);
				SetMember(tree->handler, obj->GetMember(L"handler"), tokens);
			}

			void Fill(vl::Ptr<WfObserveExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->observeType, obj->GetMember(L"observeType"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
				SetMember(tree->events, obj->GetMember(L"events"), tokens);
			}

			void Fill(vl::Ptr<WfCallExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->function, obj->GetMember(L"function"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfFunctionExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->function, obj->GetMember(L"function"), tokens);
			}

			void Fill(vl::Ptr<WfNewClassExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				SetMember(tree->arguments, obj->GetMember(L"arguments"), tokens);
			}

			void Fill(vl::Ptr<WfNewInterfaceExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->type, obj->GetMember(L"type"), tokens);
				if(SetMember(tree->declarations, obj->GetMember(L"declarations"), tokens))
				{
					SetDefaultClassMember(tree->declarations, tokens);
				}
			}

			void Fill(vl::Ptr<WfVirtualExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expandedExpression, obj->GetMember(L"expandedExpression"), tokens);
			}

			void Fill(vl::Ptr<WfBindExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->expression, obj->GetMember(L"expression"), tokens);
			}

			void Fill(vl::Ptr<WfFormatExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				if(SetMember(tree->value, obj->GetMember(L"value"), tokens))
				{
					UnescapeFormatString(tree->value, tokens);
				}
			}

			void Fill(vl::Ptr<WfNewCoroutineExpression> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->statement, obj->GetMember(L"statement"), tokens);
			}

			void Fill(vl::Ptr<WfModuleUsingFragment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfModuleUsingNameFragment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
			}

			void Fill(vl::Ptr<WfModuleUsingWildCardFragment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<WfModuleUsingItem> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->fragments, obj->GetMember(L"fragments"), tokens);
			}

			void Fill(vl::Ptr<WfModuleUsingPath> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->items, obj->GetMember(L"items"), tokens);
			}

			void Fill(vl::Ptr<WfModule> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->moduleType, obj->GetMember(L"moduleType"), tokens);
				SetMember(tree->name, obj->GetMember(L"name"), tokens);
				SetMember(tree->paths, obj->GetMember(L"paths"), tokens);
				SetMember(tree->declarations, obj->GetMember(L"declarations"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"ClassMember")
				{
					vl::Ptr<WfClassMember> tree = new WfClassMember;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"Attribute")
				{
					vl::Ptr<WfAttribute> tree = new WfAttribute;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"PredefinedType")
				{
					vl::Ptr<WfPredefinedType> tree = new WfPredefinedType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TopQualifiedType")
				{
					vl::Ptr<WfTopQualifiedType> tree = new WfTopQualifiedType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ReferenceType")
				{
					vl::Ptr<WfReferenceType> tree = new WfReferenceType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"RawPointerType")
				{
					vl::Ptr<WfRawPointerType> tree = new WfRawPointerType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SharedPointerType")
				{
					vl::Ptr<WfSharedPointerType> tree = new WfSharedPointerType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"NullableType")
				{
					vl::Ptr<WfNullableType> tree = new WfNullableType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"EnumerableType")
				{
					vl::Ptr<WfEnumerableType> tree = new WfEnumerableType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"MapType")
				{
					vl::Ptr<WfMapType> tree = new WfMapType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"FunctionType")
				{
					vl::Ptr<WfFunctionType> tree = new WfFunctionType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ChildType")
				{
					vl::Ptr<WfChildType> tree = new WfChildType;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfType>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"NamespaceDeclaration")
				{
					vl::Ptr<WfNamespaceDeclaration> tree = new WfNamespaceDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"FunctionArgument")
				{
					vl::Ptr<WfFunctionArgument> tree = new WfFunctionArgument;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"FunctionDeclaration")
				{
					vl::Ptr<WfFunctionDeclaration> tree = new WfFunctionDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"VariableDeclaration")
				{
					vl::Ptr<WfVariableDeclaration> tree = new WfVariableDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"EventDeclaration")
				{
					vl::Ptr<WfEventDeclaration> tree = new WfEventDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"PropertyDeclaration")
				{
					vl::Ptr<WfPropertyDeclaration> tree = new WfPropertyDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"BaseConstructorCall")
				{
					vl::Ptr<WfBaseConstructorCall> tree = new WfBaseConstructorCall;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ConstructorDeclaration")
				{
					vl::Ptr<WfConstructorDeclaration> tree = new WfConstructorDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"DestructorDeclaration")
				{
					vl::Ptr<WfDestructorDeclaration> tree = new WfDestructorDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ClassDeclaration")
				{
					vl::Ptr<WfClassDeclaration> tree = new WfClassDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"EnumItemIntersection")
				{
					vl::Ptr<WfEnumItemIntersection> tree = new WfEnumItemIntersection;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"EnumItem")
				{
					vl::Ptr<WfEnumItem> tree = new WfEnumItem;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"EnumDeclaration")
				{
					vl::Ptr<WfEnumDeclaration> tree = new WfEnumDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"StructMember")
				{
					vl::Ptr<WfStructMember> tree = new WfStructMember;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"StructDeclaration")
				{
					vl::Ptr<WfStructDeclaration> tree = new WfStructDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"AutoPropertyDeclaration")
				{
					vl::Ptr<WfAutoPropertyDeclaration> tree = new WfAutoPropertyDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualDeclaration>(), obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CastResultInterfaceDeclaration")
				{
					vl::Ptr<WfCastResultInterfaceDeclaration> tree = new WfCastResultInterfaceDeclaration;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualDeclaration>(), obj, tokens);
					Fill(tree.Cast<WfDeclaration>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"BreakStatement")
				{
					vl::Ptr<WfBreakStatement> tree = new WfBreakStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ContinueStatement")
				{
					vl::Ptr<WfContinueStatement> tree = new WfContinueStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ReturnStatement")
				{
					vl::Ptr<WfReturnStatement> tree = new WfReturnStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"DeleteStatement")
				{
					vl::Ptr<WfDeleteStatement> tree = new WfDeleteStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"RaiseExceptionStatement")
				{
					vl::Ptr<WfRaiseExceptionStatement> tree = new WfRaiseExceptionStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"IfStatement")
				{
					vl::Ptr<WfIfStatement> tree = new WfIfStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"WhileStatement")
				{
					vl::Ptr<WfWhileStatement> tree = new WfWhileStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TryStatement")
				{
					vl::Ptr<WfTryStatement> tree = new WfTryStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"BlockStatement")
				{
					vl::Ptr<WfBlockStatement> tree = new WfBlockStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"VariableStatement")
				{
					vl::Ptr<WfVariableStatement> tree = new WfVariableStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ExpressionStatement")
				{
					vl::Ptr<WfExpressionStatement> tree = new WfExpressionStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ForEachStatement")
				{
					vl::Ptr<WfForEachStatement> tree = new WfForEachStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualStatement>(), obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SwitchCase")
				{
					vl::Ptr<WfSwitchCase> tree = new WfSwitchCase;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SwitchStatement")
				{
					vl::Ptr<WfSwitchStatement> tree = new WfSwitchStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualStatement>(), obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CoProviderStatement")
				{
					vl::Ptr<WfCoProviderStatement> tree = new WfCoProviderStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualStatement>(), obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CoPauseStatement")
				{
					vl::Ptr<WfCoPauseStatement> tree = new WfCoPauseStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfCoroutineStatement>(), obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CoOperatorStatement")
				{
					vl::Ptr<WfCoOperatorStatement> tree = new WfCoOperatorStatement;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfCoroutineStatement>(), obj, tokens);
					Fill(tree.Cast<WfStatement>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ThisExpression")
				{
					vl::Ptr<WfThisExpression> tree = new WfThisExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TopQualifiedExpression")
				{
					vl::Ptr<WfTopQualifiedExpression> tree = new WfTopQualifiedExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ReferenceExpression")
				{
					vl::Ptr<WfReferenceExpression> tree = new WfReferenceExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"OrderedNameExpression")
				{
					vl::Ptr<WfOrderedNameExpression> tree = new WfOrderedNameExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"OrderedLambdaExpression")
				{
					vl::Ptr<WfOrderedLambdaExpression> tree = new WfOrderedLambdaExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"MemberExpression")
				{
					vl::Ptr<WfMemberExpression> tree = new WfMemberExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ChildExpression")
				{
					vl::Ptr<WfChildExpression> tree = new WfChildExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"LiteralExpression")
				{
					vl::Ptr<WfLiteralExpression> tree = new WfLiteralExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"FloatingExpression")
				{
					vl::Ptr<WfFloatingExpression> tree = new WfFloatingExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"IntegerExpression")
				{
					vl::Ptr<WfIntegerExpression> tree = new WfIntegerExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"StringExpression")
				{
					vl::Ptr<WfStringExpression> tree = new WfStringExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"UnaryExpression")
				{
					vl::Ptr<WfUnaryExpression> tree = new WfUnaryExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"BinaryExpression")
				{
					vl::Ptr<WfBinaryExpression> tree = new WfBinaryExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"LetVariable")
				{
					vl::Ptr<WfLetVariable> tree = new WfLetVariable;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"LetExpression")
				{
					vl::Ptr<WfLetExpression> tree = new WfLetExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"IfExpression")
				{
					vl::Ptr<WfIfExpression> tree = new WfIfExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"RangeExpression")
				{
					vl::Ptr<WfRangeExpression> tree = new WfRangeExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetTestingExpression")
				{
					vl::Ptr<WfSetTestingExpression> tree = new WfSetTestingExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ConstructorArgument")
				{
					vl::Ptr<WfConstructorArgument> tree = new WfConstructorArgument;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ConstructorExpression")
				{
					vl::Ptr<WfConstructorExpression> tree = new WfConstructorExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"InferExpression")
				{
					vl::Ptr<WfInferExpression> tree = new WfInferExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TypeCastingExpression")
				{
					vl::Ptr<WfTypeCastingExpression> tree = new WfTypeCastingExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TypeTestingExpression")
				{
					vl::Ptr<WfTypeTestingExpression> tree = new WfTypeTestingExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TypeOfTypeExpression")
				{
					vl::Ptr<WfTypeOfTypeExpression> tree = new WfTypeOfTypeExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"TypeOfExpressionExpression")
				{
					vl::Ptr<WfTypeOfExpressionExpression> tree = new WfTypeOfExpressionExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"AttachEventExpression")
				{
					vl::Ptr<WfAttachEventExpression> tree = new WfAttachEventExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"DetachEventExpression")
				{
					vl::Ptr<WfDetachEventExpression> tree = new WfDetachEventExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ObserveExpression")
				{
					vl::Ptr<WfObserveExpression> tree = new WfObserveExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CallExpression")
				{
					vl::Ptr<WfCallExpression> tree = new WfCallExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"FunctionExpression")
				{
					vl::Ptr<WfFunctionExpression> tree = new WfFunctionExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"NewClassExpression")
				{
					vl::Ptr<WfNewClassExpression> tree = new WfNewClassExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"NewInterfaceExpression")
				{
					vl::Ptr<WfNewInterfaceExpression> tree = new WfNewInterfaceExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"BindExpression")
				{
					vl::Ptr<WfBindExpression> tree = new WfBindExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualExpression>(), obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"FormatExpression")
				{
					vl::Ptr<WfFormatExpression> tree = new WfFormatExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualExpression>(), obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"NewCoroutineExpression")
				{
					vl::Ptr<WfNewCoroutineExpression> tree = new WfNewCoroutineExpression;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfVirtualExpression>(), obj, tokens);
					Fill(tree.Cast<WfExpression>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ModuleUsingNameFragment")
				{
					vl::Ptr<WfModuleUsingNameFragment> tree = new WfModuleUsingNameFragment;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfModuleUsingFragment>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ModuleUsingWildCardFragment")
				{
					vl::Ptr<WfModuleUsingWildCardFragment> tree = new WfModuleUsingWildCardFragment;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<WfModuleUsingFragment>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ModuleUsingItem")
				{
					vl::Ptr<WfModuleUsingItem> tree = new WfModuleUsingItem;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"ModuleUsingPath")
				{
					vl::Ptr<WfModuleUsingPath> tree = new WfModuleUsingPath;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"Module")
				{
					vl::Ptr<WfModule> tree = new WfModule;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> WfConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			WfTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<WfClassMember> WfClassMember::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfClassMember>();
		}

		vl::Ptr<WfAttribute> WfAttribute::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfAttribute>();
		}

		vl::Ptr<WfPredefinedType> WfPredefinedType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfPredefinedType>();
		}

		vl::Ptr<WfTopQualifiedType> WfTopQualifiedType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTopQualifiedType>();
		}

		vl::Ptr<WfReferenceType> WfReferenceType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfReferenceType>();
		}

		vl::Ptr<WfRawPointerType> WfRawPointerType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfRawPointerType>();
		}

		vl::Ptr<WfSharedPointerType> WfSharedPointerType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfSharedPointerType>();
		}

		vl::Ptr<WfNullableType> WfNullableType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfNullableType>();
		}

		vl::Ptr<WfEnumerableType> WfEnumerableType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfEnumerableType>();
		}

		vl::Ptr<WfMapType> WfMapType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfMapType>();
		}

		vl::Ptr<WfFunctionType> WfFunctionType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfFunctionType>();
		}

		vl::Ptr<WfChildType> WfChildType::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfChildType>();
		}

		vl::Ptr<WfNamespaceDeclaration> WfNamespaceDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfNamespaceDeclaration>();
		}

		vl::Ptr<WfFunctionArgument> WfFunctionArgument::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfFunctionArgument>();
		}

		vl::Ptr<WfFunctionDeclaration> WfFunctionDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfFunctionDeclaration>();
		}

		vl::Ptr<WfVariableDeclaration> WfVariableDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfVariableDeclaration>();
		}

		vl::Ptr<WfEventDeclaration> WfEventDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfEventDeclaration>();
		}

		vl::Ptr<WfPropertyDeclaration> WfPropertyDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfPropertyDeclaration>();
		}

		vl::Ptr<WfBaseConstructorCall> WfBaseConstructorCall::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfBaseConstructorCall>();
		}

		vl::Ptr<WfConstructorDeclaration> WfConstructorDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfConstructorDeclaration>();
		}

		vl::Ptr<WfDestructorDeclaration> WfDestructorDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfDestructorDeclaration>();
		}

		vl::Ptr<WfClassDeclaration> WfClassDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfClassDeclaration>();
		}

		vl::Ptr<WfEnumItemIntersection> WfEnumItemIntersection::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfEnumItemIntersection>();
		}

		vl::Ptr<WfEnumItem> WfEnumItem::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfEnumItem>();
		}

		vl::Ptr<WfEnumDeclaration> WfEnumDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfEnumDeclaration>();
		}

		vl::Ptr<WfStructMember> WfStructMember::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfStructMember>();
		}

		vl::Ptr<WfStructDeclaration> WfStructDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfStructDeclaration>();
		}

		vl::Ptr<WfAutoPropertyDeclaration> WfAutoPropertyDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfAutoPropertyDeclaration>();
		}

		vl::Ptr<WfCastResultInterfaceDeclaration> WfCastResultInterfaceDeclaration::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfCastResultInterfaceDeclaration>();
		}

		vl::Ptr<WfBreakStatement> WfBreakStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfBreakStatement>();
		}

		vl::Ptr<WfContinueStatement> WfContinueStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfContinueStatement>();
		}

		vl::Ptr<WfReturnStatement> WfReturnStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfReturnStatement>();
		}

		vl::Ptr<WfDeleteStatement> WfDeleteStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfDeleteStatement>();
		}

		vl::Ptr<WfRaiseExceptionStatement> WfRaiseExceptionStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfRaiseExceptionStatement>();
		}

		vl::Ptr<WfIfStatement> WfIfStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfIfStatement>();
		}

		vl::Ptr<WfWhileStatement> WfWhileStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfWhileStatement>();
		}

		vl::Ptr<WfTryStatement> WfTryStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTryStatement>();
		}

		vl::Ptr<WfBlockStatement> WfBlockStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfBlockStatement>();
		}

		vl::Ptr<WfVariableStatement> WfVariableStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfVariableStatement>();
		}

		vl::Ptr<WfExpressionStatement> WfExpressionStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfExpressionStatement>();
		}

		vl::Ptr<WfForEachStatement> WfForEachStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfForEachStatement>();
		}

		vl::Ptr<WfSwitchCase> WfSwitchCase::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfSwitchCase>();
		}

		vl::Ptr<WfSwitchStatement> WfSwitchStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfSwitchStatement>();
		}

		vl::Ptr<WfCoProviderStatement> WfCoProviderStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfCoProviderStatement>();
		}

		vl::Ptr<WfCoPauseStatement> WfCoPauseStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfCoPauseStatement>();
		}

		vl::Ptr<WfCoOperatorStatement> WfCoOperatorStatement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfCoOperatorStatement>();
		}

		vl::Ptr<WfThisExpression> WfThisExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfThisExpression>();
		}

		vl::Ptr<WfTopQualifiedExpression> WfTopQualifiedExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTopQualifiedExpression>();
		}

		vl::Ptr<WfReferenceExpression> WfReferenceExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfReferenceExpression>();
		}

		vl::Ptr<WfOrderedNameExpression> WfOrderedNameExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfOrderedNameExpression>();
		}

		vl::Ptr<WfOrderedLambdaExpression> WfOrderedLambdaExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfOrderedLambdaExpression>();
		}

		vl::Ptr<WfMemberExpression> WfMemberExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfMemberExpression>();
		}

		vl::Ptr<WfChildExpression> WfChildExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfChildExpression>();
		}

		vl::Ptr<WfLiteralExpression> WfLiteralExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfLiteralExpression>();
		}

		vl::Ptr<WfFloatingExpression> WfFloatingExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfFloatingExpression>();
		}

		vl::Ptr<WfIntegerExpression> WfIntegerExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfIntegerExpression>();
		}

		vl::Ptr<WfStringExpression> WfStringExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfStringExpression>();
		}

		vl::Ptr<WfUnaryExpression> WfUnaryExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfUnaryExpression>();
		}

		vl::Ptr<WfBinaryExpression> WfBinaryExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfBinaryExpression>();
		}

		vl::Ptr<WfLetVariable> WfLetVariable::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfLetVariable>();
		}

		vl::Ptr<WfLetExpression> WfLetExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfLetExpression>();
		}

		vl::Ptr<WfIfExpression> WfIfExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfIfExpression>();
		}

		vl::Ptr<WfRangeExpression> WfRangeExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfRangeExpression>();
		}

		vl::Ptr<WfSetTestingExpression> WfSetTestingExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfSetTestingExpression>();
		}

		vl::Ptr<WfConstructorArgument> WfConstructorArgument::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfConstructorArgument>();
		}

		vl::Ptr<WfConstructorExpression> WfConstructorExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfConstructorExpression>();
		}

		vl::Ptr<WfInferExpression> WfInferExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfInferExpression>();
		}

		vl::Ptr<WfTypeCastingExpression> WfTypeCastingExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTypeCastingExpression>();
		}

		vl::Ptr<WfTypeTestingExpression> WfTypeTestingExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTypeTestingExpression>();
		}

		vl::Ptr<WfTypeOfTypeExpression> WfTypeOfTypeExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTypeOfTypeExpression>();
		}

		vl::Ptr<WfTypeOfExpressionExpression> WfTypeOfExpressionExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfTypeOfExpressionExpression>();
		}

		vl::Ptr<WfAttachEventExpression> WfAttachEventExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfAttachEventExpression>();
		}

		vl::Ptr<WfDetachEventExpression> WfDetachEventExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfDetachEventExpression>();
		}

		vl::Ptr<WfObserveExpression> WfObserveExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfObserveExpression>();
		}

		vl::Ptr<WfCallExpression> WfCallExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfCallExpression>();
		}

		vl::Ptr<WfFunctionExpression> WfFunctionExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfFunctionExpression>();
		}

		vl::Ptr<WfNewClassExpression> WfNewClassExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfNewClassExpression>();
		}

		vl::Ptr<WfNewInterfaceExpression> WfNewInterfaceExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfNewInterfaceExpression>();
		}

		vl::Ptr<WfBindExpression> WfBindExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfBindExpression>();
		}

		vl::Ptr<WfFormatExpression> WfFormatExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfFormatExpression>();
		}

		vl::Ptr<WfNewCoroutineExpression> WfNewCoroutineExpression::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfNewCoroutineExpression>();
		}

		vl::Ptr<WfModuleUsingNameFragment> WfModuleUsingNameFragment::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfModuleUsingNameFragment>();
		}

		vl::Ptr<WfModuleUsingWildCardFragment> WfModuleUsingWildCardFragment::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfModuleUsingWildCardFragment>();
		}

		vl::Ptr<WfModuleUsingItem> WfModuleUsingItem::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfModuleUsingItem>();
		}

		vl::Ptr<WfModuleUsingPath> WfModuleUsingPath::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfModuleUsingPath>();
		}

		vl::Ptr<WfModule> WfModule::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return WfConvertParsingTreeNode(node, tokens).Cast<WfModule>();
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseDeclarationAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Declaration");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseDeclarationAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseDeclarationAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<WfDeclaration> WfParseDeclaration(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Declaration");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return WfConvertParsingTreeNode(node, state.GetTokens()).Cast<WfDeclaration>();
			}
			return 0;
		}

		vl::Ptr<WfDeclaration> WfParseDeclaration(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseDeclaration(input, table, errors, codeIndex);
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseExpressionAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Expression");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseExpressionAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseExpressionAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<WfExpression> WfParseExpression(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Expression");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return WfConvertParsingTreeNode(node, state.GetTokens()).Cast<WfExpression>();
			}
			return 0;
		}

		vl::Ptr<WfExpression> WfParseExpression(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseExpression(input, table, errors, codeIndex);
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseModuleAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Module");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseModuleAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseModuleAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<WfModule> WfParseModule(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Module");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return WfConvertParsingTreeNode(node, state.GetTokens()).Cast<WfModule>();
			}
			return 0;
		}

		vl::Ptr<WfModule> WfParseModule(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseModule(input, table, errors, codeIndex);
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseStatementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Statement");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseStatementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseStatementAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<WfStatement> WfParseStatement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Statement");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return WfConvertParsingTreeNode(node, state.GetTokens()).Cast<WfStatement>();
			}
			return 0;
		}

		vl::Ptr<WfStatement> WfParseStatement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseStatement(input, table, errors, codeIndex);
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseTypeAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Type");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> WfParseTypeAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseTypeAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<WfType> WfParseType(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"_Type");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return WfConvertParsingTreeNode(node, state.GetTokens()).Cast<WfType>();
			}
			return 0;
		}

		vl::Ptr<WfType> WfParseType(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return WfParseType(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> WfLoadTable()
		{
			vl::stream::MemoryStream stream;
			WfGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}

/***********************************************************************
EXPRESSION\WFEXPRESSION_TRAVERSE.CPP
***********************************************************************/
/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::WfExpression.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/


namespace vl
{
	namespace workflow
	{
		namespace traverse_visitor
		{

/***********************************************************************
TypeVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void TypeVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void TypeVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void TypeVisitor::Traverse(WfPredefinedType* node)
			{
			}

			void TypeVisitor::Traverse(WfType* node)
			{
			}

			void TypeVisitor::Traverse(WfTopQualifiedType* node)
			{
			}

			void TypeVisitor::Traverse(WfReferenceType* node)
			{
			}

			void TypeVisitor::Traverse(WfRawPointerType* node)
			{
			}

			void TypeVisitor::Traverse(WfSharedPointerType* node)
			{
			}

			void TypeVisitor::Traverse(WfNullableType* node)
			{
			}

			void TypeVisitor::Traverse(WfEnumerableType* node)
			{
			}

			void TypeVisitor::Traverse(WfMapType* node)
			{
			}

			void TypeVisitor::Traverse(WfFunctionType* node)
			{
			}

			void TypeVisitor::Traverse(WfChildType* node)
			{
			}

			// Visitor Members -----------------------------------

			void TypeVisitor::Visit(WfPredefinedType* node)
			{
				Traverse(static_cast<WfPredefinedType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void TypeVisitor::Visit(WfTopQualifiedType* node)
			{
				Traverse(static_cast<WfTopQualifiedType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void TypeVisitor::Visit(WfReferenceType* node)
			{
				Traverse(static_cast<WfReferenceType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void TypeVisitor::Visit(WfRawPointerType* node)
			{
				Traverse(static_cast<WfRawPointerType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->element.Obj());
			}

			void TypeVisitor::Visit(WfSharedPointerType* node)
			{
				Traverse(static_cast<WfSharedPointerType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->element.Obj());
			}

			void TypeVisitor::Visit(WfNullableType* node)
			{
				Traverse(static_cast<WfNullableType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->element.Obj());
			}

			void TypeVisitor::Visit(WfEnumerableType* node)
			{
				Traverse(static_cast<WfEnumerableType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->element.Obj());
			}

			void TypeVisitor::Visit(WfMapType* node)
			{
				Traverse(static_cast<WfMapType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->key.Obj());
				VisitField(node->value.Obj());
			}

			void TypeVisitor::Visit(WfFunctionType* node)
			{
				Traverse(static_cast<WfFunctionType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->result.Obj());
				FOREACH(vl::Ptr<WfType>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
			}

			void TypeVisitor::Visit(WfChildType* node)
			{
				Traverse(static_cast<WfChildType*>(node));
				Traverse(static_cast<WfType*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->parent.Obj());
				Traverse(node->name);
			}

/***********************************************************************
ExpressionVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void ExpressionVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void ExpressionVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void ExpressionVisitor::Traverse(WfThisExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfTopQualifiedExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfReferenceExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfOrderedNameExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfOrderedLambdaExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfMemberExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfChildExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfLiteralExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfFloatingExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfIntegerExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfStringExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfUnaryExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfBinaryExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfLetExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfLetVariable* node)
			{
			}

			void ExpressionVisitor::Traverse(WfIfExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfRangeExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfSetTestingExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfConstructorExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfConstructorArgument* node)
			{
			}

			void ExpressionVisitor::Traverse(WfInferExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfTypeCastingExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfTypeTestingExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfTypeOfTypeExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfTypeOfExpressionExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfAttachEventExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfDetachEventExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfObserveExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfCallExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfFunctionExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfFunctionDeclaration* node)
			{
			}

			void ExpressionVisitor::Traverse(WfDeclaration* node)
			{
			}

			void ExpressionVisitor::Traverse(WfAttribute* node)
			{
			}

			void ExpressionVisitor::Traverse(WfClassMember* node)
			{
			}

			void ExpressionVisitor::Traverse(WfFunctionArgument* node)
			{
			}

			void ExpressionVisitor::Traverse(WfNewClassExpression* node)
			{
			}

			void ExpressionVisitor::Traverse(WfNewInterfaceExpression* node)
			{
			}

			// VisitField ----------------------------------------

			void ExpressionVisitor::VisitField(WfLetVariable* node)
			{
				if (!node) return;
				Traverse(static_cast<WfLetVariable*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
				VisitField(node->value.Obj());
			}

			void ExpressionVisitor::VisitField(WfConstructorArgument* node)
			{
				if (!node) return;
				Traverse(static_cast<WfConstructorArgument*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->key.Obj());
				VisitField(node->value.Obj());
			}

			void ExpressionVisitor::VisitField(WfFunctionDeclaration* node)
			{
				if (!node) return;
				Traverse(static_cast<WfFunctionDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfFunctionArgument>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
				VisitField(node->returnType.Obj());
				VisitField(node->statement.Obj());
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void ExpressionVisitor::VisitField(WfAttribute* node)
			{
				if (!node) return;
				Traverse(static_cast<WfAttribute*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->category);
				Traverse(node->name);
				VisitField(node->value.Obj());
			}

			void ExpressionVisitor::VisitField(WfClassMember* node)
			{
				if (!node) return;
				Traverse(static_cast<WfClassMember*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void ExpressionVisitor::VisitField(WfFunctionArgument* node)
			{
				if (!node) return;
				Traverse(static_cast<WfFunctionArgument*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->type.Obj());
			}

			// Visitor Members -----------------------------------

			void ExpressionVisitor::Visit(WfThisExpression* node)
			{
				Traverse(static_cast<WfThisExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void ExpressionVisitor::Visit(WfTopQualifiedExpression* node)
			{
				Traverse(static_cast<WfTopQualifiedExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void ExpressionVisitor::Visit(WfReferenceExpression* node)
			{
				Traverse(static_cast<WfReferenceExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void ExpressionVisitor::Visit(WfOrderedNameExpression* node)
			{
				Traverse(static_cast<WfOrderedNameExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void ExpressionVisitor::Visit(WfOrderedLambdaExpression* node)
			{
				Traverse(static_cast<WfOrderedLambdaExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->body.Obj());
			}

			void ExpressionVisitor::Visit(WfMemberExpression* node)
			{
				Traverse(static_cast<WfMemberExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->parent.Obj());
				Traverse(node->name);
			}

			void ExpressionVisitor::Visit(WfChildExpression* node)
			{
				Traverse(static_cast<WfChildExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->parent.Obj());
				Traverse(node->name);
			}

			void ExpressionVisitor::Visit(WfLiteralExpression* node)
			{
				Traverse(static_cast<WfLiteralExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void ExpressionVisitor::Visit(WfFloatingExpression* node)
			{
				Traverse(static_cast<WfFloatingExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->value);
			}

			void ExpressionVisitor::Visit(WfIntegerExpression* node)
			{
				Traverse(static_cast<WfIntegerExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->value);
			}

			void ExpressionVisitor::Visit(WfStringExpression* node)
			{
				Traverse(static_cast<WfStringExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->value);
			}

			void ExpressionVisitor::Visit(WfUnaryExpression* node)
			{
				Traverse(static_cast<WfUnaryExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->operand.Obj());
			}

			void ExpressionVisitor::Visit(WfBinaryExpression* node)
			{
				Traverse(static_cast<WfBinaryExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->first.Obj());
				VisitField(node->second.Obj());
			}

			void ExpressionVisitor::Visit(WfLetExpression* node)
			{
				Traverse(static_cast<WfLetExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfLetVariable>, listItem, node->variables)
				{
					VisitField(listItem.Obj());
				}
				VisitField(node->expression.Obj());
			}

			void ExpressionVisitor::Visit(WfIfExpression* node)
			{
				Traverse(static_cast<WfIfExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->condition.Obj());
				VisitField(node->trueBranch.Obj());
				VisitField(node->falseBranch.Obj());
			}

			void ExpressionVisitor::Visit(WfRangeExpression* node)
			{
				Traverse(static_cast<WfRangeExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->begin.Obj());
				VisitField(node->end.Obj());
			}

			void ExpressionVisitor::Visit(WfSetTestingExpression* node)
			{
				Traverse(static_cast<WfSetTestingExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->element.Obj());
				VisitField(node->collection.Obj());
			}

			void ExpressionVisitor::Visit(WfConstructorExpression* node)
			{
				Traverse(static_cast<WfConstructorExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfConstructorArgument>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
			}

			void ExpressionVisitor::Visit(WfInferExpression* node)
			{
				Traverse(static_cast<WfInferExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
				VisitField(node->type.Obj());
			}

			void ExpressionVisitor::Visit(WfTypeCastingExpression* node)
			{
				Traverse(static_cast<WfTypeCastingExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
				VisitField(node->type.Obj());
			}

			void ExpressionVisitor::Visit(WfTypeTestingExpression* node)
			{
				Traverse(static_cast<WfTypeTestingExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
				VisitField(node->type.Obj());
			}

			void ExpressionVisitor::Visit(WfTypeOfTypeExpression* node)
			{
				Traverse(static_cast<WfTypeOfTypeExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
			}

			void ExpressionVisitor::Visit(WfTypeOfExpressionExpression* node)
			{
				Traverse(static_cast<WfTypeOfExpressionExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
			}

			void ExpressionVisitor::Visit(WfAttachEventExpression* node)
			{
				Traverse(static_cast<WfAttachEventExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->event.Obj());
				VisitField(node->function.Obj());
			}

			void ExpressionVisitor::Visit(WfDetachEventExpression* node)
			{
				Traverse(static_cast<WfDetachEventExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->event.Obj());
				VisitField(node->handler.Obj());
			}

			void ExpressionVisitor::Visit(WfObserveExpression* node)
			{
				Traverse(static_cast<WfObserveExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->parent.Obj());
				Traverse(node->name);
				VisitField(node->expression.Obj());
				FOREACH(vl::Ptr<WfExpression>, listItem, node->events)
				{
					VisitField(listItem.Obj());
				}
			}

			void ExpressionVisitor::Visit(WfCallExpression* node)
			{
				Traverse(static_cast<WfCallExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->function.Obj());
				FOREACH(vl::Ptr<WfExpression>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
			}

			void ExpressionVisitor::Visit(WfFunctionExpression* node)
			{
				Traverse(static_cast<WfFunctionExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->function.Obj());
			}

			void ExpressionVisitor::Visit(WfNewClassExpression* node)
			{
				Traverse(static_cast<WfNewClassExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				FOREACH(vl::Ptr<WfExpression>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
			}

			void ExpressionVisitor::Visit(WfNewInterfaceExpression* node)
			{
				Traverse(static_cast<WfNewInterfaceExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				FOREACH(vl::Ptr<WfDeclaration>, listItem, node->declarations)
				{
					VisitField(listItem.Obj());
				}
			}

			void ExpressionVisitor::Visit(WfVirtualExpression* node)
			{
				Dispatch(node);
			}

/***********************************************************************
StatementVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void StatementVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void StatementVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void StatementVisitor::Traverse(WfBreakStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfContinueStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfReturnStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfDeleteStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfRaiseExceptionStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfIfStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfWhileStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfTryStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfBlockStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfVariableStatement* node)
			{
			}

			void StatementVisitor::Traverse(WfVariableDeclaration* node)
			{
			}

			void StatementVisitor::Traverse(WfDeclaration* node)
			{
			}

			void StatementVisitor::Traverse(WfAttribute* node)
			{
			}

			void StatementVisitor::Traverse(WfClassMember* node)
			{
			}

			void StatementVisitor::Traverse(WfExpressionStatement* node)
			{
			}

			// VisitField ----------------------------------------

			void StatementVisitor::VisitField(WfVariableDeclaration* node)
			{
				if (!node) return;
				Traverse(static_cast<WfVariableDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				VisitField(node->expression.Obj());
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void StatementVisitor::VisitField(WfAttribute* node)
			{
				if (!node) return;
				Traverse(static_cast<WfAttribute*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->category);
				Traverse(node->name);
				VisitField(node->value.Obj());
			}

			void StatementVisitor::VisitField(WfClassMember* node)
			{
				if (!node) return;
				Traverse(static_cast<WfClassMember*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			// Visitor Members -----------------------------------

			void StatementVisitor::Visit(WfBreakStatement* node)
			{
				Traverse(static_cast<WfBreakStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void StatementVisitor::Visit(WfContinueStatement* node)
			{
				Traverse(static_cast<WfContinueStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void StatementVisitor::Visit(WfReturnStatement* node)
			{
				Traverse(static_cast<WfReturnStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
			}

			void StatementVisitor::Visit(WfDeleteStatement* node)
			{
				Traverse(static_cast<WfDeleteStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
			}

			void StatementVisitor::Visit(WfRaiseExceptionStatement* node)
			{
				Traverse(static_cast<WfRaiseExceptionStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
			}

			void StatementVisitor::Visit(WfIfStatement* node)
			{
				Traverse(static_cast<WfIfStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				Traverse(node->name);
				VisitField(node->expression.Obj());
				VisitField(node->trueBranch.Obj());
				VisitField(node->falseBranch.Obj());
			}

			void StatementVisitor::Visit(WfWhileStatement* node)
			{
				Traverse(static_cast<WfWhileStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->condition.Obj());
				VisitField(node->statement.Obj());
			}

			void StatementVisitor::Visit(WfTryStatement* node)
			{
				Traverse(static_cast<WfTryStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->protectedStatement.Obj());
				Traverse(node->name);
				VisitField(node->catchStatement.Obj());
				VisitField(node->finallyStatement.Obj());
			}

			void StatementVisitor::Visit(WfBlockStatement* node)
			{
				Traverse(static_cast<WfBlockStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfStatement>, listItem, node->statements)
				{
					VisitField(listItem.Obj());
				}
			}

			void StatementVisitor::Visit(WfVariableStatement* node)
			{
				Traverse(static_cast<WfVariableStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->variable.Obj());
			}

			void StatementVisitor::Visit(WfExpressionStatement* node)
			{
				Traverse(static_cast<WfExpressionStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
			}

			void StatementVisitor::Visit(WfVirtualStatement* node)
			{
				Dispatch(node);
			}

			void StatementVisitor::Visit(WfCoroutineStatement* node)
			{
				Dispatch(node);
			}

/***********************************************************************
DeclarationVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void DeclarationVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void DeclarationVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void DeclarationVisitor::Traverse(WfNamespaceDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfAttribute* node)
			{
			}

			void DeclarationVisitor::Traverse(WfClassMember* node)
			{
			}

			void DeclarationVisitor::Traverse(WfFunctionDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfFunctionArgument* node)
			{
			}

			void DeclarationVisitor::Traverse(WfVariableDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfEventDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfPropertyDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfConstructorDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfBaseConstructorCall* node)
			{
			}

			void DeclarationVisitor::Traverse(WfDestructorDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfClassDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfEnumDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfEnumItem* node)
			{
			}

			void DeclarationVisitor::Traverse(WfEnumItemIntersection* node)
			{
			}

			void DeclarationVisitor::Traverse(WfStructDeclaration* node)
			{
			}

			void DeclarationVisitor::Traverse(WfStructMember* node)
			{
			}

			// VisitField ----------------------------------------

			void DeclarationVisitor::VisitField(WfAttribute* node)
			{
				if (!node) return;
				Traverse(static_cast<WfAttribute*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->category);
				Traverse(node->name);
				VisitField(node->value.Obj());
			}

			void DeclarationVisitor::VisitField(WfClassMember* node)
			{
				if (!node) return;
				Traverse(static_cast<WfClassMember*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			void DeclarationVisitor::VisitField(WfFunctionArgument* node)
			{
				if (!node) return;
				Traverse(static_cast<WfFunctionArgument*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->type.Obj());
			}

			void DeclarationVisitor::VisitField(WfBaseConstructorCall* node)
			{
				if (!node) return;
				Traverse(static_cast<WfBaseConstructorCall*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				FOREACH(vl::Ptr<WfExpression>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
			}

			void DeclarationVisitor::VisitField(WfEnumItem* node)
			{
				if (!node) return;
				Traverse(static_cast<WfEnumItem*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				Traverse(node->number);
				FOREACH(vl::Ptr<WfEnumItemIntersection>, listItem, node->intersections)
				{
					VisitField(listItem.Obj());
				}
			}

			void DeclarationVisitor::VisitField(WfEnumItemIntersection* node)
			{
				if (!node) return;
				Traverse(static_cast<WfEnumItemIntersection*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void DeclarationVisitor::VisitField(WfStructMember* node)
			{
				if (!node) return;
				Traverse(static_cast<WfStructMember*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->type.Obj());
			}

			// Visitor Members -----------------------------------

			void DeclarationVisitor::Visit(WfNamespaceDeclaration* node)
			{
				Traverse(static_cast<WfNamespaceDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfDeclaration>, listItem, node->declarations)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfFunctionDeclaration* node)
			{
				Traverse(static_cast<WfFunctionDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfFunctionArgument>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
				VisitField(node->returnType.Obj());
				VisitField(node->statement.Obj());
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfVariableDeclaration* node)
			{
				Traverse(static_cast<WfVariableDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				VisitField(node->expression.Obj());
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfEventDeclaration* node)
			{
				Traverse(static_cast<WfEventDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfType>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfPropertyDeclaration* node)
			{
				Traverse(static_cast<WfPropertyDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				Traverse(node->getter);
				Traverse(node->setter);
				Traverse(node->valueChangedEvent);
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfConstructorDeclaration* node)
			{
				Traverse(static_cast<WfConstructorDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfBaseConstructorCall>, listItem, node->baseConstructorCalls)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfFunctionArgument>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
				VisitField(node->statement.Obj());
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfDestructorDeclaration* node)
			{
				Traverse(static_cast<WfDestructorDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->statement.Obj());
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfClassDeclaration* node)
			{
				Traverse(static_cast<WfClassDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfType>, listItem, node->baseTypes)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfDeclaration>, listItem, node->declarations)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfEnumDeclaration* node)
			{
				Traverse(static_cast<WfEnumDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfEnumItem>, listItem, node->items)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfStructDeclaration* node)
			{
				Traverse(static_cast<WfStructDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfStructMember>, listItem, node->members)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void DeclarationVisitor::Visit(WfVirtualDeclaration* node)
			{
				Dispatch(node);
			}

/***********************************************************************
VirtualDeclarationVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void VirtualDeclarationVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void VirtualDeclarationVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void VirtualDeclarationVisitor::Traverse(WfAutoPropertyDeclaration* node)
			{
			}

			void VirtualDeclarationVisitor::Traverse(WfVirtualDeclaration* node)
			{
			}

			void VirtualDeclarationVisitor::Traverse(WfDeclaration* node)
			{
			}

			void VirtualDeclarationVisitor::Traverse(WfAttribute* node)
			{
			}

			void VirtualDeclarationVisitor::Traverse(WfClassMember* node)
			{
			}

			void VirtualDeclarationVisitor::Traverse(WfCastResultInterfaceDeclaration* node)
			{
			}

			// VisitField ----------------------------------------

			void VirtualDeclarationVisitor::VisitField(WfAttribute* node)
			{
				if (!node) return;
				Traverse(static_cast<WfAttribute*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->category);
				Traverse(node->name);
				VisitField(node->value.Obj());
			}

			void VirtualDeclarationVisitor::VisitField(WfClassMember* node)
			{
				if (!node) return;
				Traverse(static_cast<WfClassMember*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

			// Visitor Members -----------------------------------

			void VirtualDeclarationVisitor::Visit(WfAutoPropertyDeclaration* node)
			{
				Traverse(static_cast<WfAutoPropertyDeclaration*>(node));
				Traverse(static_cast<WfVirtualDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->type.Obj());
				VisitField(node->expression.Obj());
				FOREACH(vl::Ptr<WfDeclaration>, listItem, node->expandedDeclarations)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

			void VirtualDeclarationVisitor::Visit(WfCastResultInterfaceDeclaration* node)
			{
				Traverse(static_cast<WfCastResultInterfaceDeclaration*>(node));
				Traverse(static_cast<WfVirtualDeclaration*>(node));
				Traverse(static_cast<WfDeclaration*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->baseType.Obj());
				VisitField(node->elementType.Obj());
				FOREACH(vl::Ptr<WfDeclaration>, listItem, node->expandedDeclarations)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfAttribute>, listItem, node->attributes)
				{
					VisitField(listItem.Obj());
				}
				Traverse(node->name);
				VisitField(node->classMember.Obj());
			}

/***********************************************************************
VirtualStatementVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void VirtualStatementVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void VirtualStatementVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void VirtualStatementVisitor::Traverse(WfForEachStatement* node)
			{
			}

			void VirtualStatementVisitor::Traverse(WfVirtualStatement* node)
			{
			}

			void VirtualStatementVisitor::Traverse(WfStatement* node)
			{
			}

			void VirtualStatementVisitor::Traverse(WfSwitchStatement* node)
			{
			}

			void VirtualStatementVisitor::Traverse(WfSwitchCase* node)
			{
			}

			void VirtualStatementVisitor::Traverse(WfCoProviderStatement* node)
			{
			}

			// VisitField ----------------------------------------

			void VirtualStatementVisitor::VisitField(WfSwitchCase* node)
			{
				if (!node) return;
				Traverse(static_cast<WfSwitchCase*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
				VisitField(node->statement.Obj());
			}

			// Visitor Members -----------------------------------

			void VirtualStatementVisitor::Visit(WfForEachStatement* node)
			{
				Traverse(static_cast<WfForEachStatement*>(node));
				Traverse(static_cast<WfVirtualStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
				VisitField(node->collection.Obj());
				VisitField(node->statement.Obj());
				VisitField(node->expandedStatement.Obj());
			}

			void VirtualStatementVisitor::Visit(WfSwitchStatement* node)
			{
				Traverse(static_cast<WfSwitchStatement*>(node));
				Traverse(static_cast<WfVirtualStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
				FOREACH(vl::Ptr<WfSwitchCase>, listItem, node->caseBranches)
				{
					VisitField(listItem.Obj());
				}
				VisitField(node->defaultBranch.Obj());
				VisitField(node->expandedStatement.Obj());
			}

			void VirtualStatementVisitor::Visit(WfCoProviderStatement* node)
			{
				Traverse(static_cast<WfCoProviderStatement*>(node));
				Traverse(static_cast<WfVirtualStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
				VisitField(node->statement.Obj());
				VisitField(node->expandedStatement.Obj());
			}

/***********************************************************************
CoroutineStatementVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void CoroutineStatementVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void CoroutineStatementVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void CoroutineStatementVisitor::Traverse(WfCoPauseStatement* node)
			{
			}

			void CoroutineStatementVisitor::Traverse(WfCoroutineStatement* node)
			{
			}

			void CoroutineStatementVisitor::Traverse(WfStatement* node)
			{
			}

			void CoroutineStatementVisitor::Traverse(WfCoOperatorStatement* node)
			{
			}

			// Visitor Members -----------------------------------

			void CoroutineStatementVisitor::Visit(WfCoPauseStatement* node)
			{
				Traverse(static_cast<WfCoPauseStatement*>(node));
				Traverse(static_cast<WfCoroutineStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->statement.Obj());
			}

			void CoroutineStatementVisitor::Visit(WfCoOperatorStatement* node)
			{
				Traverse(static_cast<WfCoOperatorStatement*>(node));
				Traverse(static_cast<WfCoroutineStatement*>(node));
				Traverse(static_cast<WfStatement*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->varName);
				Traverse(node->opName);
				FOREACH(vl::Ptr<WfExpression>, listItem, node->arguments)
				{
					VisitField(listItem.Obj());
				}
			}

/***********************************************************************
VirtualExpressionVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void VirtualExpressionVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void VirtualExpressionVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void VirtualExpressionVisitor::Traverse(WfBindExpression* node)
			{
			}

			void VirtualExpressionVisitor::Traverse(WfVirtualExpression* node)
			{
			}

			void VirtualExpressionVisitor::Traverse(WfExpression* node)
			{
			}

			void VirtualExpressionVisitor::Traverse(WfFormatExpression* node)
			{
			}

			void VirtualExpressionVisitor::Traverse(WfNewCoroutineExpression* node)
			{
			}

			// Visitor Members -----------------------------------

			void VirtualExpressionVisitor::Visit(WfBindExpression* node)
			{
				Traverse(static_cast<WfBindExpression*>(node));
				Traverse(static_cast<WfVirtualExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				VisitField(node->expression.Obj());
				VisitField(node->expandedExpression.Obj());
			}

			void VirtualExpressionVisitor::Visit(WfFormatExpression* node)
			{
				Traverse(static_cast<WfFormatExpression*>(node));
				Traverse(static_cast<WfVirtualExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->value);
				VisitField(node->expandedExpression.Obj());
			}

			void VirtualExpressionVisitor::Visit(WfNewCoroutineExpression* node)
			{
				Traverse(static_cast<WfNewCoroutineExpression*>(node));
				Traverse(static_cast<WfVirtualExpression*>(node));
				Traverse(static_cast<WfExpression*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
				VisitField(node->statement.Obj());
				VisitField(node->expandedExpression.Obj());
			}

/***********************************************************************
ModuleUsingFragmentVisitor
***********************************************************************/

			// Traverse ------------------------------------------

			void ModuleUsingFragmentVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void ModuleUsingFragmentVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void ModuleUsingFragmentVisitor::Traverse(WfModuleUsingNameFragment* node)
			{
			}

			void ModuleUsingFragmentVisitor::Traverse(WfModuleUsingFragment* node)
			{
			}

			void ModuleUsingFragmentVisitor::Traverse(WfModuleUsingWildCardFragment* node)
			{
			}

			// Visitor Members -----------------------------------

			void ModuleUsingFragmentVisitor::Visit(WfModuleUsingNameFragment* node)
			{
				Traverse(static_cast<WfModuleUsingNameFragment*>(node));
				Traverse(static_cast<WfModuleUsingFragment*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
			}

			void ModuleUsingFragmentVisitor::Visit(WfModuleUsingWildCardFragment* node)
			{
				Traverse(static_cast<WfModuleUsingWildCardFragment*>(node));
				Traverse(static_cast<WfModuleUsingFragment*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
			}

/***********************************************************************
ModuleVisitor
***********************************************************************/

			void ModuleVisitor::VisitField(WfModule* node)
			{
				Traverse(static_cast<WfModule*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				Traverse(node->name);
				FOREACH(vl::Ptr<WfModuleUsingPath>, listItem, node->paths)
				{
					VisitField(listItem.Obj());
				}
				FOREACH(vl::Ptr<WfDeclaration>, listItem, node->declarations)
				{
					VisitField(listItem.Obj());
				}
			}

			// Traverse ------------------------------------------

			void ModuleVisitor::Traverse(vl::parsing::ParsingToken& token)
			{
			}

			void ModuleVisitor::Traverse(vl::parsing::ParsingTreeCustomBase* node)
			{
			}

			void ModuleVisitor::Traverse(WfModule* node)
			{
			}

			void ModuleVisitor::Traverse(WfModuleUsingPath* node)
			{
			}

			void ModuleVisitor::Traverse(WfModuleUsingItem* node)
			{
			}

			// VisitField ----------------------------------------

			void ModuleVisitor::VisitField(WfModuleUsingPath* node)
			{
				if (!node) return;
				Traverse(static_cast<WfModuleUsingPath*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfModuleUsingItem>, listItem, node->items)
				{
					VisitField(listItem.Obj());
				}
			}

			void ModuleVisitor::VisitField(WfModuleUsingItem* node)
			{
				if (!node) return;
				Traverse(static_cast<WfModuleUsingItem*>(node));
				Traverse(static_cast<vl::parsing::ParsingTreeCustomBase*>(node));
				FOREACH(vl::Ptr<WfModuleUsingFragment>, listItem, node->fragments)
				{
					VisitField(listItem.Obj());
				}
			}

			// VisitField (virtual) ------------------------------

			void ModuleVisitor::VisitField(WfType* node)
			{
				if (!node) return;
				node->Accept(static_cast<TypeVisitor*>(this));
			}

			void ModuleVisitor::VisitField(WfExpression* node)
			{
				if (!node) return;
				node->Accept(static_cast<ExpressionVisitor*>(this));
			}

			void ModuleVisitor::VisitField(WfStatement* node)
			{
				if (!node) return;
				node->Accept(static_cast<StatementVisitor*>(this));
			}

			void ModuleVisitor::VisitField(WfDeclaration* node)
			{
				if (!node) return;
				node->Accept(static_cast<DeclarationVisitor*>(this));
			}

			void ModuleVisitor::VisitField(WfModuleUsingFragment* node)
			{
				if (!node) return;
				node->Accept(static_cast<ModuleUsingFragmentVisitor*>(this));
			}

			// Dispatch (virtual) --------------------------------

			void ModuleVisitor::Dispatch(WfVirtualExpression* node)
			{
				node->Accept(static_cast<VirtualExpressionVisitor*>(this));
			}

			void ModuleVisitor::Dispatch(WfVirtualStatement* node)
			{
				node->Accept(static_cast<VirtualStatementVisitor*>(this));
			}

			void ModuleVisitor::Dispatch(WfCoroutineStatement* node)
			{
				node->Accept(static_cast<CoroutineStatementVisitor*>(this));
			}

			void ModuleVisitor::Dispatch(WfVirtualDeclaration* node)
			{
				node->Accept(static_cast<VirtualDeclarationVisitor*>(this));
			}
		}
	}
}
